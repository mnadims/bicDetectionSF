<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/a0f7e8c39.java"><expr_stmt><expr><name>From</name> <name>a0f7e8c390bf599f67b7ce84e03de412f6bf053d</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Marcel</name> <name><name>Reutegger</name> <argument_list type="generic">&lt;<argument><name>mreutegg</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">7</literal> <name>Jan</name> <literal type="number">2010</literal> <literal type="number">17</literal><operator>:</operator><literal type="number">46</literal><operator>:</operator><literal type="number">51</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">2408</literal><operator>:</operator> <name>Mixin</name> <name>removal</name> <name>exception</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@896940 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">16</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemManager</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">13</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImpl</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">229</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImplTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">72</literal> <operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <literal type="number">4</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">208</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">122</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">656060c03</literal><operator>..</operator><name>da40f2b87</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">606</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">606</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>ItemImpl</name> implements <name>Item</name> <block>{
         <comment type="line">// walk through list of removed transient items and check REMOVE permission</comment>
         <for>for <control>(<init><decl><type><name>ItemState</name></type> <name>itemState</name> <range>: <expr><name>removed</name></expr></range></decl></init>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>QItemDefinition</name></type> <name>def</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>itemState</name><operator>.</operator><name>isNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeState</name><operator>)</operator> <name>itemState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>unwrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
                <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><operator>(</operator><name>PropertyState</name><operator>)</operator> <name>itemState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>unwrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>itemState</name><operator>.</operator><name>isNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeState</name><operator>)</operator> <name>itemState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>unwrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><operator>(</operator><name>PropertyState</name><operator>)</operator> <name>itemState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>unwrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ConstraintViolationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// since identifier of assigned definition is not stored anymore</comment>
                <comment type="line">// with item state (see JCR-2170), correct definition cannot be</comment>
                <comment type="line">// determined for items which have been removed due to removal</comment>
                <comment type="line">// of a mixin (see also JCR-2130 &amp; JCR-2408)</comment>
                <continue>continue;</continue>
             </block_content>}</block></catch></try>
             <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                 <decl_stmt><decl><type><name>Path</name></type> <name>path</name> <init>= <expr><call><name><name>stateMgr</name><operator>.</operator><name>getAtticAwareHierarchyMgr</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>(<argument><expr><call><name><name>itemState</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">877c89918</literal><operator>..</operator><literal type="number">3c6279a3e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">239</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">239</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>ItemManager</name> implements <name>Dumpable</name></expr><operator>,</operator> <expr><name>ItemStateListener</name> <block>{
 
     <expr><name>PropertyDefinitionImpl</name> <call><name>getDefinition</name><argument_list>(<argument><expr><name>PropertyState</name> <name>state</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{</block></expr></argument></throws></expr>
        <comment type="line">// this is a bit ugly</comment>
        <comment type="line">// there might be cases where otherwise protected items turn into</comment>
        <comment type="line">// non-protected items because a mixin has been removed from the parent</comment>
        <comment type="line">// node state.</comment>
        <comment type="line">// see also: JCR-2408</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ItemState</name><operator>.</operator><name>STATUS_EXISTING_REMOVED</name></name>
                <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_UUID</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>NodeTypeRegistry</name></type> <name>ntReg</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodeTypeRegistry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(
                    <argument><expr><name><name>NameConstants</name><operator>.</operator><name>MIX_REFERENCEABLE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicablePropertyDef</name><argument_list>(
                    <argument><expr><call><name><name>state</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPropertyDefinition</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt></block></expr></expr_stmt>
         <try>try <block>{<block_content>
             <comment type="line">// retrieve parent in 2 steps in order to avoid the check for</comment>
             <comment type="line">// read permissions on the parent which isn't required in order</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>dd5beea73</name><operator>..</operator><literal type="number">8c57e97d4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>AccessDeniedException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeManagerImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeRegistry</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>QueryManagerImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>Permission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>Permission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ChildNodeEntry</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">88</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Path</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QItemDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>MalformedPathException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NameException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name><operator>.</operator><name>*</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>PathBuilder</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>PathFactoryImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>ChildrenCollectorFilter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>ISO9075</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueHelper</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name><operator>.</operator><name>JCR_ISCHECKEDOUT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name><operator>.</operator><name>JCR_LIFECYCLE_POLICY</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name><operator>.</operator><name>JCR_CURRENT_LIFECYCLE_STATE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name><operator>.</operator><name>MIX_LIFECYCLE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name><operator>.</operator><name>MIX_REFERENCEABLE</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * &lt;code&gt;NodeImpl&lt;/code&gt; implements the &lt;code&gt;Node&lt;/code&gt; interface.
  */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1016</literal></expr><operator>,</operator><expr><literal type="number">127</literal> <operator>+</operator><literal type="number">1013</literal></expr><operator>,</operator><expr><literal type="number">143</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
             <throw>throw <argument_list>new <argument><expr><call><name>ConstraintViolationException</name><argument_list>(<argument><expr><name>mixinName</name> <operator>+</operator> <literal type="string">" can not be removed: the node is locked."</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
         }</block></expr></expr_stmt>
 

        <comment type="line">// modify the state of this node</comment>
         <decl_stmt><decl><type><name>NodeState</name></type> <name>thisState</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name>getOrCreateTransientItemState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setMixinTypeNames</name></name><argument_list>(<argument><expr><name>remainingMixins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// set jcr:mixinTypes property</comment>
        <expr_stmt><expr><call><name>setMixinTypesProperty</name><argument_list>(<argument><expr><name>remainingMixins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// shortcut</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>mixin</name><operator>.</operator><name>getChildNodeDefinitions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal>
                <operator>&amp;&amp;</operator> <call><name><name>mixin</name><operator>.</operator><name>getPropertyDefinitions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// the node type has neither property nor child node definitions,</comment>
            <comment type="line">// i.e. we're done</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
 
        <comment type="line">// walk through properties and child nodes and remove those that aren't</comment>
        <comment type="line">// accomodated by the resulting new effective node type (see JCR-2130)</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// collect information about properties and nodes which require</comment>
        <comment type="line">// further action as a result of the mixin removal;</comment>
        <comment type="line">// we need to do this *before* actually changing the assigned the mixin types,</comment>
        <comment type="line">// otherwise we wouldn't be able to retrieve the current definition</comment>
        <comment type="line">// of an item.</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>PropertyId</name></argument>, <argument><name>PropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>affectedProps</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>PropertyId</name></argument>, <argument><name>PropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ChildNodeEntry</name></argument>, <argument><name>NodeDefinition</name></argument>&gt;</argument_list></name></type> <name>affectedNodes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ChildNodeEntry</name></argument>, <argument><name>NodeDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <try>try <block>{<block_content>
            <comment type="line">// use temp set to avoid ConcurrentModificationException</comment>
            <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>thisState</name><operator>.</operator><name>getPropertyNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Name</name></type> <name>propName</name> <range>: <expr><name>set</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>PropertyState</name></type> <name>propState</name> <init>= <expr><operator>(</operator><name>PropertyState</name><operator>)</operator> <call><name><name>stateMgr</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><call><name><name>thisState</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr><call><name><name>thisState</name><operator>.</operator><name>getPropertyNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Name</name></type> <name>propName</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>PropertyId</name></type> <name>propId</name> <init>= <expr><operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><call><name><name>thisState</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PropertyState</name></type> <name>propState</name> <init>= <expr><operator>(</operator><name>PropertyState</name><operator>)</operator> <call><name><name>stateMgr</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><name>propId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PropertyDefinition</name></type> <name>oldDef</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>propState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <comment type="line">// check if property has been defined by mixin type (or one of its supertypes)</comment>
                <decl_stmt><decl><type><name>PropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>propState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeTypeImpl</name></type> <name>declaringNT</name> <init>= <expr><operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>def</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeTypeImpl</name></type> <name>declaringNT</name> <init>= <expr><operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>oldDef</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entResulting</name><operator>.</operator><name>includesNodeType</name></name><argument_list>(<argument><expr><call><name><name>declaringNT</name><operator>.</operator><name>getQName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                     <comment type="line">// the resulting effective node type doesn't include the</comment>
                     <comment type="line">// node type that declared this property</comment>

                    <comment type="line">// try to find new applicable definition first and</comment>
                    <comment type="line">// redefine property if possible (JCR-2130)</comment>
                    <try>try <block>{<block_content>
                        <decl_stmt><decl><type><name>PropertyImpl</name></type> <name>prop</name> <init>= <expr><operator>(</operator><name>PropertyImpl</name><operator>)</operator> <call><name><name>itemMgr</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><call><name><name>propState</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>prop</name><operator>.</operator><name>getDefinition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isProtected</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <comment type="line">// remove 'orphaned' protected properties immediately</comment>
                            <expr_stmt><expr><call><name>removeChildProperty</name><argument_list>(<argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>
                        <decl_stmt><decl><type><name>PropertyDefinitionImpl</name></type> <name>pdi</name> <init>= <expr><call><name>getApplicablePropertyDefinition</name><argument_list>(
                                <argument><expr><name>propName</name></expr></argument>, <argument><expr><call><name><name>propState</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>propState</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>pdi</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name>
                                <operator>&amp;&amp;</operator> <call><name><name>pdi</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>propState</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <comment type="line">// value conversion required</comment>
                            <if_stmt><if>if <condition>(<expr><call><name><name>propState</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                <comment type="line">// convert value</comment>
                                <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>=
                                        <expr><call><name><name>ValueHelper</name><operator>.</operator><name>convert</name></name><argument_list>(
                                                <argument><expr><call><name><name>prop</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>pdi</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>session</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <comment type="line">// redefine property</comment>
                                <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>pdi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <comment type="line">// set converted values</comment>
                                <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <comment type="line">// convert value</comment>
                                <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>=
                                        <expr><call><name><name>ValueHelper</name><operator>.</operator><name>convert</name></name><argument_list>(
                                                <argument><expr><call><name><name>prop</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>pdi</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>session</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <comment type="line">// redefine property</comment>
                                <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>pdi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <comment type="line">// set converted values</comment>
                                <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <comment type="line">// redefine property</comment>
                            <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>pdi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ValueFormatException</name></type> <name>vfe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <comment type="line">// value conversion failed, remove it</comment>
                        <expr_stmt><expr><call><name>removeChildProperty</name><argument_list>(<argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>ConstraintViolationException</name></type> <name>cve</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <comment type="line">// no suitable definition found for this property,</comment>
                        <comment type="line">// remove it</comment>
                        <expr_stmt><expr><call><name>removeChildProperty</name><argument_list>(<argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                    <expr_stmt><expr><call><name><name>affectedProps</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>propId</name></expr></argument>, <argument><expr><name>oldDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
            <comment type="line">// use temp array to avoid ConcurrentModificationException</comment>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildNodeEntry</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ChildNodeEntry</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>thisState</name><operator>.</operator><name>getChildNodeEntries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// start from tail to avoid problems with same-name siblings</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>ChildNodeEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ChildNodeEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name><name>thisState</name><operator>.</operator><name>getChildNodeEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>ChildNodeEntry</name></type> <name>entry</name> <range>: <expr><name>entries</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <decl_stmt><decl><type><name>NodeState</name></type> <name>nodeState</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>stateMgr</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeDefinition</name></type> <name>oldDef</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <comment type="line">// check if node has been defined by mixin type (or one of its supertypes)</comment>
                <decl_stmt><decl><type><name>NodeTypeImpl</name></type> <name>declaringNT</name> <init>= <expr><operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>def</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeTypeImpl</name></type> <name>declaringNT</name> <init>= <expr><operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>oldDef</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entResulting</name><operator>.</operator><name>includesNodeType</name></name><argument_list>(<argument><expr><call><name><name>declaringNT</name><operator>.</operator><name>getQName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                     <comment type="line">// the resulting effective node type doesn't include the</comment>
                     <comment type="line">// node type that declared this child node</comment>
                    <expr_stmt><expr><call><name><name>affectedNodes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>oldDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for> <catch>catch <parameter_list>(<parameter><decl><type><name>ItemStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RepositoryException</name><argument_list>(<argument><expr><literal type="string">"Internal Error: Failed to determine effect of removing mixin "</literal> <operator>+</operator> <call><name><name>session</name><operator>.</operator><name>getJCRName</name></name><argument_list>(<argument><expr><name>mixinName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
 
                    <try>try <block>{<block_content>
                        <decl_stmt><decl><type><name>NodeImpl</name></type> <name>node</name> <init>= <expr><operator>(</operator><name>NodeImpl</name><operator>)</operator> <call><name><name>itemMgr</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><call><name><name>nodeState</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>node</name><operator>.</operator><name>getDefinition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isProtected</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <comment type="line">// remove 'orphaned' protected child node immediately</comment>
                            <expr_stmt><expr><call><name>removeChildNode</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <continue>continue;</continue>
        <comment type="line">// modify the state of this node</comment>
        <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setMixinTypeNames</name></name><argument_list>(<argument><expr><name>remainingMixins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// set jcr:mixinTypes property</comment>
        <expr_stmt><expr><call><name>setMixinTypesProperty</name><argument_list>(<argument><expr><name>remainingMixins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// process affected nodes &amp; properties:</comment>
        <comment type="line">// 1. try to redefine item based on the resulting</comment>
        <comment type="line">//    new effective node type (see JCR-2130)</comment>
        <comment type="line">// 2. remove item if 1. fails</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <for>for <control>(<init><decl><type><name>PropertyId</name></type> <name>id</name> <range>: <expr><call><name><name>affectedProps</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>PropertyImpl</name></type> <name>prop</name> <init>= <expr><operator>(</operator><name>PropertyImpl</name><operator>)</operator> <call><name><name>itemMgr</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PropertyDefinition</name></type> <name>oldDef</name> <init>= <expr><call><name><name>affectedProps</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>oldDef</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// remove 'orphaned' protected properties immediately</comment>
                    <expr_stmt><expr><call><name>removeChildProperty</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// try to find new applicable definition first and</comment>
                <comment type="line">// redefine property if possible (JCR-2130)</comment>
                <try>try <block>{<block_content>
                    <decl_stmt><decl><type><name>PropertyDefinitionImpl</name></type> <name>newDef</name> <init>= <expr><call><name>getApplicablePropertyDefinition</name><argument_list>(
                            <argument><expr><call><name><name>id</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prop</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>oldDef</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>newDef</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name>
                            <operator>&amp;&amp;</operator> <call><name><name>newDef</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>prop</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <comment type="line">// value conversion required</comment>
                        <if_stmt><if>if <condition>(<expr><call><name><name>oldDef</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <comment type="line">// convert value</comment>
                            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>=
                                    <expr><call><name><name>ValueHelper</name><operator>.</operator><name>convert</name></name><argument_list>(
                                            <argument><expr><call><name><name>prop</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>newDef</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>session</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <comment type="line">// redefine property</comment>
                            <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>newDef</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// set converted values</comment>
                            <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <comment type="line">// convert value</comment>
                            <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>=
                                    <expr><call><name><name>ValueHelper</name><operator>.</operator><name>convert</name></name><argument_list>(
                                            <argument><expr><call><name><name>prop</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>newDef</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>session</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <comment type="line">// redefine property</comment>
                            <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>newDef</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// set converted values</comment>
                            <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         </block_content>}</block></else></if_stmt>
                        <decl_stmt><decl><type><name>NodeDefinitionImpl</name></type> <name>ndi</name> <init>= <expr><call><name>getApplicableChildNodeDefinition</name><argument_list>(
                                <argument><expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>nodeState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <comment type="line">// redefine node</comment>
                        <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>ndi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>ConstraintViolationException</name></type> <name>cve</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <comment type="line">// no suitable definition found for this child node,</comment>
                        <comment type="line">// remove it</comment>
                        <expr_stmt><expr><call><name>removeChildNode</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch> <if_stmt><else>else <block>{<block_content>
                        <comment type="line">// redefine property</comment>
                        <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>newDef</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></else></if_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ValueFormatException</name></type> <name>vfe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <comment type="line">// value conversion failed, remove it</comment>
                    <expr_stmt><expr><call><name>removeChildProperty</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>ConstraintViolationException</name></type> <name>cve</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <comment type="line">// no suitable definition found for this property,</comment>
                    <comment type="line">// remove it</comment>
                    <expr_stmt><expr><call><name>removeChildProperty</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></for>

            <for>for <control>(<init><decl><type><name>ChildNodeEntry</name></type> <name>entry</name> <range>: <expr><call><name><name>affectedNodes</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>NodeState</name></type> <name>nodeState</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>stateMgr</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeImpl</name></type> <name>node</name> <init>= <expr><operator>(</operator><name>NodeImpl</name><operator>)</operator> <call><name><name>itemMgr</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeDefinition</name></type> <name>oldDef</name> <init>= <expr><call><name><name>affectedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>oldDef</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// remove 'orphaned' protected child node immediately</comment>
                    <expr_stmt><expr><call><name>removeChildNode</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// try to find new applicable definition first and</comment>
                <comment type="line">// redefine node if possible (JCR-2130)</comment>
                <try>try <block>{<block_content>
                    <decl_stmt><decl><type><name>NodeDefinitionImpl</name></type> <name>newDef</name> <init>= <expr><call><name>getApplicableChildNodeDefinition</name><argument_list>(
                            <argument><expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>nodeState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// redefine node</comment>
                    <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>newDef</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ConstraintViolationException</name></type> <name>cve</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <comment type="line">// no suitable definition found for this child node,</comment>
                    <comment type="line">// remove it</comment>
                    <expr_stmt><expr><call><name>removeChildNode</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></catch></try>
             </block_content>}</block></for>
             <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ItemStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RepositoryException</name><argument_list>(<argument><expr><literal type="string">"Failed to clean up child items defined by removed mixin "</literal> <operator>+</operator> <call><name><name>session</name><operator>.</operator><name>getJCRName</name></name><argument_list>(<argument><expr><name>mixinName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            <throw>throw <expr><operator>new</operator> <call><name>RepositoryException</name><argument_list>(<argument><expr><literal type="string">"Failed to clean up child items defined by removed mixin "</literal> <operator>+</operator> <call><name><name>session</name><operator>.</operator><name>getJCRName</name></name><argument_list>(<argument><expr><name>mixinName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></catch> <finally>finally <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// TODO JCR-1914: revert changes made to jcr:mixinTypes</comment>
                <comment type="line">// TODO JCR-1914: revert any changes made so far</comment>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></finally></try>
     </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImplTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImplTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4098dceed</literal><operator>..</operator><name>fc766c9cc</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImplTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImplTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>api</name><operator>.</operator><name>security</name><operator>.</operator><name>JackrabbitAccessControlList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>test</name><operator>.</operator><name>AbstractJCRTest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>test</name><operator>.</operator><name>NotExecutableException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Principal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>acl</name><operator>.</operator><name>Group</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>ItemExistsException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Session</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PropertyType</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Session</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeType</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessControlManager</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessControlPolicy</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessControlPolicyIterator</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>security</name><operator>.</operator><name>Privilege</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Principal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>acl</name><operator>.</operator><name>Group</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>api</name><operator>.</operator><name>security</name><operator>.</operator><name>JackrabbitAccessControlList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>test</name><operator>.</operator><name>AbstractJCRTest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>test</name><operator>.</operator><name>NotExecutableException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
 <comment type="block" format="javadoc">/** &lt;code&gt;NodeImplTest&lt;/code&gt;... */</comment>
 <class><specifier>public</specifier> class <name>NodeImplTest</name> <super_list><extends>extends <super><name>AbstractJCRTest</name></super></extends></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">200</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">201</literal></expr><operator>,</operator><expr><literal type="number">55</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImplTest</name> extends <name>AbstractJCRTest</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>PropertyType</name><operator>.</operator><name>nameFromValue</name></name><argument_list>(<argument><expr><name><name>PropertyType</name><operator>.</operator><name>LONG</name></name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name><name>PropertyType</name><operator>.</operator><name>nameFromValue</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>

    <comment type="block" format="javadoc">/**
     * Test case for JCR-2130 and JCR-2408.
     *
     * @throws RepositoryException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAddRemoveMixin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// add mix:title to a nt:folder node and set jcr:title property</comment>
        <decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><name>nodeName1</name></expr></argument>, <argument><expr><literal type="string">"nt:folder"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>n</name><operator>.</operator><name>addMixin</name></name><argument_list>(<argument><expr><literal type="string">"mix:title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>n</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:title"</literal></expr></argument>, <argument><expr><literal type="string">"blah blah"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testRootNode</name><operator>.</operator><name>getSession</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// remove mix:title, jcr:title should be gone as there's no matching</comment>
        <comment type="line">// definition in nt:folder</comment>
        <expr_stmt><expr><call><name><name>n</name><operator>.</operator><name>removeMixin</name></name><argument_list>(<argument><expr><literal type="string">"mix:title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testRootNode</name><operator>.</operator><name>getSession</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>n</name><operator>.</operator><name>hasProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add mix:title to a nt:unstructured node and set jcr:title property</comment>
        <decl_stmt><decl><type><name>Node</name></type> <name>n1</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><name>nodeName2</name></expr></argument>, <argument><expr><name>ntUnstructured</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>n1</name><operator>.</operator><name>addMixin</name></name><argument_list>(<argument><expr><literal type="string">"mix:title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>n1</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:title"</literal></expr></argument>, <argument><expr><literal type="string">"blah blah"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr><call><name><name>n1</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:title"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDefinition</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaringNodeType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"mix:title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// remove mix:title, jcr:title should stay since it adopts the residual</comment>
        <comment type="line">// property definition declared in nt:unstructured</comment>
        <expr_stmt><expr><call><name><name>testRootNode</name><operator>.</operator><name>getSession</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>n1</name><operator>.</operator><name>removeMixin</name></name><argument_list>(<argument><expr><literal type="string">"mix:title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testRootNode</name><operator>.</operator><name>getSession</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>n1</name><operator>.</operator><name>hasProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr><call><name><name>n1</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:title"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDefinition</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaringNodeType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>ntUnstructured</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add mix:referenceable to a nt:unstructured node, jcr:uuid is</comment>
        <comment type="line">// automatically added</comment>
        <decl_stmt><decl><type><name>Node</name></type> <name>n2</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><name>nodeName3</name></expr></argument>, <argument><expr><name>ntUnstructured</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>n2</name><operator>.</operator><name>addMixin</name></name><argument_list>(<argument><expr><name>mixReferenceable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testRootNode</name><operator>.</operator><name>getSession</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// remove mix:referenceable, jcr:uuid should always get removed</comment>
        <comment type="line">// since it is a protcted property</comment>
        <expr_stmt><expr><call><name><name>n2</name><operator>.</operator><name>removeMixin</name></name><argument_list>(<argument><expr><name>mixReferenceable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testRootNode</name><operator>.</operator><name>getSession</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>n2</name><operator>.</operator><name>hasProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:uuid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
 }</block></class>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></try></block_content></block></for></block_content></block></try></block_content></block></try></block_content></block></if></if_stmt></block_content></block></else></if_stmt>

</unit>
