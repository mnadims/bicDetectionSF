<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/01527d4f4.java"><expr_stmt><expr><name>From</name> <literal type="number">01527d4f4e980fa35230183287f64c3bb0c15bf2</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Jukka</name> <name><name>Zitting</name> <argument_list type="generic">&lt;<argument><name>jukka</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">20</literal> <name>Feb</name> <literal type="number">2012</literal> <literal type="number">19</literal><operator>:</operator><literal type="number">57</literal><operator>:</operator><literal type="number">39</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">3236</literal><operator>:</operator> <name>Can</name> <name>not</name> <name>instantiate</name> <name>lucene</name> <name>Analyzer</name> <name>in</name> <name>SearchIndex</name>

<name>Support</name> <name>also</name> <name>Analyzer</name> <name>classes</name> <name>that</name> <name>require</name> <name>a</name> <name>Version</name> <name>instance</name> <name>to</name> <name>be</name> <name>passed</name> <name>to</name> <name>a</name> <name>constructor</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@1291424 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationImpl</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">51</literal> <operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>JackrabbitAnalyzer</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">73</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SearchIndex</name><operator>.</operator><name>java</name></name>        <operator>|</operator> <literal type="number">19</literal> <operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SearchIndexTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">38</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <literal type="number">4</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">133</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">48</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SearchIndexTest</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0f73aede1</literal><operator>..</operator><name>fcdb36d74</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexingConfigurationImpl</name></expr></expr_stmt>
                 <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>childNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                     <decl_stmt><decl><type><name>Node</name></type> <name>analyzerNode</name> <init>= <expr><call><name><name>childNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                     <if_stmt><if>if <condition>(<expr><call><name><name>analyzerNode</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"analyzer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>analyzerClassName</name> <init>= <expr><call><name><name>analyzerNode</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNamedItem</name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNodeValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <try>try <block>{<block_content>
                            <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"rawtypes"</literal></expr></argument>)</argument_list></annotation>
                            <type><name>Class</name></type> <name>clazz</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>analyzerClassName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>JackrabbitAnalyzer</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Not allowed to configure "</literal> <operator>+</operator> <call><name><name>JackrabbitAnalyzer</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator>  <literal type="string">" for a property. "</literal>
                                        <operator>+</operator> <literal type="string">"Using default analyzer for that property."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if>
                            <if type="elseif">else if <condition>(<expr><call><name><name>Analyzer</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><operator>(</operator><name>Analyzer</name><operator>)</operator> <call><name><name>clazz</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>NodeList</name></type> <name>propertyChildNodes</name> <init>= <expr><call><name><name>analyzerNode</name><operator>.</operator><name>getChildNodes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>propertyChildNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                    <decl_stmt><decl><type><name>Node</name></type> <name>propertyNode</name> <init>= <expr><call><name><name>propertyChildNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <if_stmt><if>if <condition>(<expr><call><name><name>propertyNode</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"property"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                        <comment type="line">// get property name</comment>
                                        <decl_stmt><decl><type><name>Name</name></type> <name>propName</name> <init>= <expr><call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name>getTextContent</name><argument_list>(<argument><expr><name>propertyNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <decl_stmt><decl><type><name>String</name></type> <name>fieldName</name> <init>= <expr><call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <comment type="line">// set analyzer for the fulltext property fieldname</comment>
                                        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>fieldName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <expr_stmt><expr><name>fieldName</name> <operator>=</operator> <call><name><name>fieldName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                                                    <operator>+</operator> <name><name>FieldNames</name><operator>.</operator><name>FULLTEXT_PREFIX</name></name> <operator>+</operator> <call><name><name>fieldName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <decl_stmt><decl><type><name>Object</name></type> <name>prevAnalyzer</name> <init>= <expr><call><name><name>analyzers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <if_stmt><if>if <condition>(<expr><name>prevAnalyzer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Property "</literal> <operator>+</operator> <call><name><name>propName</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call>
                                                    <operator>+</operator> <literal type="string">" has been configured for multiple analyzers. "</literal>
                                                    <operator>+</operator> <literal type="string">" Last configured analyzer is used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></if></if_stmt>
                                    </block_content>}</block></if></if_stmt>
                        <decl_stmt><decl><type><name>Analyzer</name></type> <name>analyzer</name> <init>= <expr><call><name><name>JackrabbitAnalyzer</name><operator>.</operator><name>getAnalyzerInstance</name></name><argument_list>(
                                <argument><expr><call><name><name>analyzerNode</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNamedItem</name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNodeValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>NodeList</name></type> <name>propertyChildNodes</name> <init>= <expr><call><name><name>analyzerNode</name><operator>.</operator><name>getChildNodes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>propertyChildNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>Node</name></type> <name>propertyNode</name> <init>= <expr><call><name><name>propertyChildNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name><name>propertyNode</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"property"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <comment type="line">// get property name</comment>
                                <decl_stmt><decl><type><name>Name</name></type> <name>propName</name> <init>= <expr><call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name>getTextContent</name><argument_list>(<argument><expr><name>propertyNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>String</name></type> <name>fieldName</name> <init>= <expr><call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <comment type="line">// set analyzer for the fulltext property fieldname</comment>
                                <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>fieldName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><name>fieldName</name> <operator>=</operator> <call><name><name>fieldName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                                        <operator>+</operator> <name><name>FieldNames</name><operator>.</operator><name>FULLTEXT_PREFIX</name></name> <operator>+</operator> <call><name><name>fieldName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <decl_stmt><decl><type><name>Object</name></type> <name>prevAnalyzer</name> <init>= <expr><call><name><name>analyzers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><name>prevAnalyzer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Property "</literal> <operator>+</operator> <call><name><name>propName</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call>
                                            <operator>+</operator> <literal type="string">" has been configured for multiple analyzers. "</literal>
                                            <operator>+</operator> <literal type="string">" Last configured analyzer is used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                 </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.lucene.analysis.Analyzer is not a superclass of "</literal>
                                        <operator>+</operator> <name>analyzerClassName</name> <operator>+</operator> <literal type="string">". Ignoring this configure analyzer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                             </block_content>}</block></else></if_stmt>
                        </block_content>}</block></for> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Analyzer class not found: "</literal> <operator>+</operator> <name>analyzerClassName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         </block_content>}</block></catch>
                     </block_content>}</block></for>
                 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>JackrabbitAnalyzer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>JackrabbitAnalyzer</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9a7fbeeec</literal><operator>..</operator><literal type="number">5bb614ad3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>JackrabbitAnalyzer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>JackrabbitAnalyzer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Constructor</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>TokenStream</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>standard</name><operator>.</operator><name>StandardAnalyzer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>util</name><operator>.</operator><name>Version</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * This is the global jackrabbit lucene analyzer. By default, all
@@ -34,14 +37,68 @@ import org.apache.lucene.util.Version;
  * indexed with a specific analyzer. If configured, this analyzer is used to
  * index the text of the property and to parse searchtext for this property.
  */</comment>
<class><specifier>public</specifier> class <name>JackrabbitAnalyzer</name> <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
 
<class><specifier>public</specifier> class <name>JackrabbitAnalyzer</name>  <super_list><extends>extends <super><name>Analyzer</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>log</name> <init>=
            <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>JackrabbitAnalyzer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Analyzer</name></type> <name>DEFAULT_ANALYZER</name> <init>=
            <expr><operator>new</operator> <call><name>StandardAnalyzer</name><argument_list>(<argument><expr><name><name>Version</name><operator>.</operator><name>LUCENE_24</name></name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
     * The default Jackrabbit analyzer if none is configured in &lt;code&gt;&lt;SearchIndex&gt;&lt;/code&gt;
     * configuration.
     * Returns a new instance of the named Lucene {@link Analyzer} class,
     * or the default analyzer if the given class can not be instantiated.
     *
     * @param className name of the analyzer class
     * @return new analyzer instance, or the default analyzer
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>defaultAnalyzer</name> <init>=  <expr><operator>new</operator> <call><name>StandardAnalyzer</name><argument_list>(<argument><expr><name><name>Version</name><operator>.</operator><name>LUCENE_24</name></name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>static</specifier> <name>Analyzer</name></type> <name>getAnalyzerInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>analyzerClass</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>analyzerClass</name> <operator>=</operator> <call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>className</name> <operator>+</operator> <literal type="string">" could not be found"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>DEFAULT_ANALYZER</name></expr>;</return>
        </block_content>}</block></catch></try>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Analyzer</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>analyzerClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>className</name> <operator>+</operator> <literal type="string">" is not a Lucene Analyzer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>DEFAULT_ANALYZER</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>JackrabbitAnalyzer</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>analyzerClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>className</name> <operator>+</operator> <literal type="string">" can not be used as a JackrabbitAnalyzer component"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>DEFAULT_ANALYZER</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Exception</name></type> <name>cause</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>constructors</name> <init>= <expr><call><name><name>analyzerClass</name><operator>.</operator><name>getConstructors</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>constructor</name> <range>: <expr><name>constructors</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>types</name> <init>= <expr><call><name><name>constructor</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>types</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>Version</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <return>return <expr><operator>(</operator><name>Analyzer</name><operator>)</operator> <call><name><name>constructor</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>Version</name><operator>.</operator><name>LUCENE_24</name></name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><name>cause</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>constructor</name> <range>: <expr><name>constructors</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>constructor</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <return>return <expr><operator>(</operator><name>Analyzer</name><operator>)</operator> <call><name><name>constructor</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><name>cause</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>className</name> <operator>+</operator> <literal type="string">" could not be instantiated"</literal></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DEFAULT_ANALYZER</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The default Jackrabbit analyzer if none is configured in
     * &lt;code&gt;&amp;lt;SearchIndex&amp;gt;&lt;/code&gt; configuration.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Analyzer</name></type> <name>defaultAnalyzer</name> <init>= <expr><name>DEFAULT_ANALYZER</name></expr></init></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * The indexing configuration.
@@ -62,6 +119,14 @@ public class JackrabbitAnalyzer  extends Analyzer {
         defaultAnalyzer = analyzer;
     }
 
    String getDefaultAnalyzerClass() {
        return defaultAnalyzer.getClass().getName();
    }

    void setDefaultAnalyzerClass(String className) {
        setDefaultAnalyzer(getAnalyzerInstance(className));
    }

     /**
      * Creates a TokenStream which tokenizes all the text in the provided
      * Reader. If the fieldName (property) is configured to have a different
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
index 140c9ba9a..a02bbbf0b 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
@@ -99,6 +99,7 @@ import org.apache.lucene.search.Similarity;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.search.TermQuery;
import org.apache.lucene.util.Version;
 import org.apache.tika.config.TikaConfig;
 import org.apache.tika.fork.ForkParser;
 import org.apache.tika.parser.AutoDetectParser;
@@ -1867,11 +1868,12 @@ public class SearchIndex extends AbstractQueryHandler {
     //--------------------------&lt; properties &gt;----------------------------------
 
     /**
     * Sets the analyzer in use for indexing. The given analyzer class name
     * must satisfy the following conditions:
     * Sets the default analyzer in use for indexing. The given analyzer
     * class name must satisfy the following conditions:
      * &lt;ul&gt;
      *   &lt;li&gt;the class must exist in the class path&lt;/li&gt;
     *   &lt;li&gt;the class must have a public default constructor&lt;/li&gt;
     *   &lt;li&gt;the class must have a public default constructor, or
     *       a constructor that takes a Lucene {@link Version} argument&lt;/li&gt;
      *   &lt;li&gt;the class must be a Lucene Analyzer&lt;/li&gt;
      * &lt;/ul&gt;
      * &lt;p&gt;
@@ -1886,21 +1888,16 @@ public class SearchIndex extends AbstractQueryHandler {
      * @param analyzerClassName the analyzer class name
      */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnalyzer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>analyzerClassName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>analyzerClass</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>analyzerClassName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>analyzer</name><operator>.</operator><name>setDefaultAnalyzer</name></name><argument_list>(<argument><expr><operator>(</operator><name>Analyzer</name><operator>)</operator> <call><name><name>analyzerClass</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Invalid Analyzer class: "</literal> <operator>+</operator> <name>analyzerClassName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name><name>analyzer</name><operator>.</operator><name>setDefaultAnalyzerClass</name></name><argument_list>(<argument><expr><name>analyzerClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
     * Returns the class name of the analyzer that is currently in use.
     * Returns the class name of the default analyzer that is currently in use.
      *
      * @return class name of analyzer in use.
      */</comment>
     <function><type><specifier>public</specifier> <name>String</name></type> <name>getAnalyzer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>analyzer</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>analyzer</name><operator>.</operator><name>getDefaultAnalyzerClass</name></name><argument_list>()</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SearchIndexTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SearchIndexTest.java
new file mode 100644
index 000000000..68ad0dea9
-- /dev/null
++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SearchIndexTest.java
@@ -0,0 +1,38 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package>

<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name></name>;</import>

<class><specifier>public</specifier> class <name>SearchIndexTest</name> <super_list><extends>extends <super><name>TestCase</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * @see &lt;a href="https://issues.apache.org/jira/browse/JCR-3236"&gt;JCR-3236&lt;/a&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSetAnalyzer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>analyzers</name> <init>= <expr><block>{
                <expr><literal type="string">"org.apache.lucene.analysis.SimpleAnalyzer"</literal></expr>,
                <expr><literal type="string">"org.apache.lucene.analysis.StopAnalyzer"</literal></expr>,
                <expr><literal type="string">"org.apache.lucene.analysis.standard.StandardAnalyzer"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SearchIndex</name></type> <name>index</name> <init>= <expr><operator>new</operator> <call><name>SearchIndex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>analyzer</name> <range>: <expr><name>analyzers</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>setAnalyzer</name></name><argument_list>(<argument><expr><name>analyzer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>analyzer</name></expr></argument>, <argument><expr><call><name><name>index</name><operator>.</operator><name>getAnalyzer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block></class></block></class></block_content></block></try></block_content></block></if></if_stmt></block_content></block></for>

</unit>
