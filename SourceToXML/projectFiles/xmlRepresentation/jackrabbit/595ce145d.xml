<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/595ce145d.java"><expr_stmt><expr><name>From</name> <literal type="number">595ce145def7c72181e50dd78780540e1bb9f0d0</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Julian</name> <name><name>Reschke</name> <argument_list type="generic">&lt;<argument><name>reschke</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">21</literal> <name>Oct</name> <literal type="number">2011</literal> <literal type="number">13</literal><operator>:</operator><literal type="number">49</literal><operator>:</operator><literal type="number">55</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">3115</literal><operator>:</operator> <name>Versioning</name> <name>fixup</name> <name>leaves</name> <name>persistence</name> <name>in</name> <name>a</name> <name>state</name>
 <name>where</name> <name>the</name> <name>node</name> <name>can</name><literal type="char">'t be made versionable again

Modify checker to also inspect "candidate" version histories.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1187344 13f79535-47bb-0310-9956-ffa450edef68
--
 .../jackrabbit/core/RepositoryChecker.java    | 90 ++++++++++++-------
 1 file changed, 56 insertions(+), 34 deletions(-)

diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryChecker.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryChecker.java
index 1df670ffa..3113a9ea2 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryChecker.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/RepositoryChecker.java
@@ -28,6 +28,7 @@ import java.util.Calendar;
 import java.util.HashSet;
 import java.util.Set;
 
import javax.jcr.ItemNotFoundException;
 import javax.jcr.RepositoryException;
 
 import org.apache.jackrabbit.core.id.NodeId;
@@ -122,28 +123,49 @@ class RepositoryChecker {
     }
 
     private void checkVersionHistory(NodeState node) {
        if (node.hasPropertyName(JCR_VERSIONHISTORY)) {
            String message = null;
            NodeId nid = node.getNodeId();
            NodeId vhid = null;
 
            try {
                log.debug("Checking version history of node {}", nid);
        String message = null;
        NodeId nid = node.getNodeId();
        boolean isVersioned = node.hasPropertyName(JCR_VERSIONHISTORY);
 
                String intro = "Removing references to an inconsistent version history of node "
                    + nid;
        NodeId vhid = null;
 
                message = intro + " (getting the VersionInfo)";
                VersionHistoryInfo vhi = versionManager.getVersionHistoryInfoForNode(node);
                if (vhi != null) {
                    // get the version history'</literal><name>s</name> <name>node</name> <name>ID</name> <name>as</name> <name>early</name> <name>as</name> <name>possible</name>
                    <comment type="line">// so we can attempt a fixup even when the next call fails</comment>
                    <name>vhid</name> <operator>=</operator> <call><name><name>vhi</name><operator>.</operator><name>getVersionHistoryId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }
        try <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name>isVersioned</name></expr> ?</condition><then> <expr><literal type="string">"in-use"</literal></expr> </then><else>: <expr><literal type="string">"candidate"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Checking "</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="string">" version history of node {}"</literal></expr></argument>, <argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>intro</name> <init>= <expr><literal type="string">"Removing references to an inconsistent "</literal> <operator>+</operator> <name>type</name>
                    <operator>+</operator> <literal type="string">" version history of node "</literal> <operator>+</operator> <name>nid</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>message</name> <operator>=</operator> <name>intro</name> <operator>+</operator> <literal type="string">" (getting the VersionInfo)"</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>VersionHistoryInfo</name></type> <name>vhi</name> <init>= <expr><call><name><name>versionManager</name><operator>.</operator><name>getVersionHistoryInfoForNode</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>vhi</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// get the version history's node ID as early as possible</comment>
                <comment type="line">// so we can attempt a fixup even when the next call fails</comment>
                <expr_stmt><expr><name>vhid</name> <operator>=</operator> <call><name><name>vhi</name><operator>.</operator><name>getVersionHistoryId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>message</name> <operator>=</operator> <name>intro</name> <operator>+</operator> <literal type="string">" (getting the InternalVersionHistory)"</literal></expr>;</expr_stmt>
 
                <expr_stmt><expr><name>message</name> <operator>=</operator> <name>intro</name> <operator>+</operator> <literal type="string">" (getting the InternalVersionHistory)"</literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>InternalVersionHistory</name></type> <name>vh</name> <init>= <expr><call><name><name>versionManager</name><operator>.</operator><name>getVersionHistoryOfNode</name></name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InternalVersionHistory</name></type> <name>vh</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>vh</name> <operator>=</operator> <call><name><name>versionManager</name><operator>.</operator><name>getVersionHistoryOfNode</name></name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>ItemNotFoundException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// it's ok if we get here if the node didn't claim to be versioned</comment>
                <if_stmt><if>if <condition>(<expr><name>isVersioned</name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><name>ex</name></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></catch></try>
 
            <if_stmt><if>if <condition>(<expr><name>vh</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>isVersioned</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>message</name> <operator>=</operator> <name>intro</name> <operator>+</operator> <literal type="string">"getVersionHistoryOfNode returned null"</literal></expr>;</expr_stmt>
                    <throw>throw <expr><operator>new</operator> <call><name>InconsistentVersioningState</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>    
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
                 <expr_stmt><expr><name>vhid</name> <operator>=</operator> <call><name><name>vh</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 
                 <comment type="line">// additional checks, see JCR-3101</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">162</literal></expr><operator>,</operator><expr><literal type="number">34</literal> <operator>+</operator><literal type="number">184</literal></expr><operator>,</operator><expr><literal type="number">34</literal> @@ <name>class</name> <name>RepositoryChecker</name> <block>{
 
                     <expr><name>message</name> <operator>=</operator> <name>intro</name> <operator>+</operator> <literal type="string">"(frozen node of root version "</literal> <operator>+</operator> <call><name><name>v</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" missing)"</literal></expr>;</block></expr></expr_stmt>
                     <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <call><name><name>v</name><operator>.</operator><name>getFrozenNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>InconsistentVersioningState</name><argument_list>(<argument><expr><literal type="string">"frozen node of "</literal>
                                <operator>+</operator> <call><name><name>v</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" is missing."</literal></expr></argument>)</argument_list></call></expr>;</throw>
                        <throw>throw <expr><operator>new</operator> <call><name>InconsistentVersioningState</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
                     </block_content>}</block></if></if_stmt>
                 </block_content>}</block></else></if_stmt>
 
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><name>seenRoot</name></expr>)</condition> <block>{<block_content>
                     <expr_stmt><expr><name>message</name> <operator>=</operator> <name>intro</name> <operator>+</operator> <literal type="string">" (root version is missing)"</literal></expr>;</expr_stmt>
                    <throw>throw <expr><operator>new</operator> <call><name>InconsistentVersioningState</name><argument_list>(<argument><expr><literal type="string">"root version of "</literal> <operator>+</operator> <name>nid</name> <operator>+</operator><literal type="string">" is missing."</literal></expr></argument>)</argument_list></call></expr>;</throw>
                    <throw>throw <expr><operator>new</operator> <call><name>InconsistentVersioningState</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
                 </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InconsistentVersioningState</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>NodeId</name></type> <name>nvhid</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getVersionHistoryNodeId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>nvhid</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>vhid</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>nvhid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>vhid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"vhrid returned with InconsistentVersioningState does not match the id we already had: "</literal>
                                <operator>+</operator> <name>vhid</name> <operator>+</operator> <literal type="string">" vs "</literal> <operator>+</operator> <name>nvhid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>vhid</name> <operator>=</operator> <name>nvhid</name></expr>;</expr_stmt> 
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InconsistentVersioningState</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>NodeId</name></type> <name>nvhid</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getVersionHistoryNodeId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>nvhid</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>vhid</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>nvhid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>vhid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"vhrid returned with InconsistentVersioningState does not match the id we already had: "</literal>
                            <operator>+</operator> <name>vhid</name> <operator>+</operator> <literal type="string">" vs "</literal> <operator>+</operator> <name>nvhid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>removeVersionHistoryReferences</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>vhid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>removeVersionHistoryReferences</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>vhid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>vhid</name> <operator>=</operator> <name>nvhid</name></expr>;</expr_stmt> 
             </block_content>}</block></catch>
            <expr_stmt><expr><call><name>removeVersionHistoryReferences</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>vhid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>removeVersionHistoryReferences</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>vhid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></catch>
     }
 
    private <function><type><name>void</name></type> <name>removeVersionHistoryReferences</name><parameter_list>(<parameter><decl><type><name>NodeState</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>NodeId</name></type> <name>vhid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// un-versions the node, and potentially moves the version history away</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>removeVersionHistoryReferences</name><parameter_list>(<parameter><decl><type><name>NodeState</name></type> <name>node</name></decl></parameter>,  <parameter><decl><type><name>NodeId</name></type> <name>vhid</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>NodeState</name></type> <name>modified</name> <init>=
             <expr><operator>new</operator> <call><name>NodeState</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>NodeState</name><operator>.</operator><name>STATUS_EXISTING_MODIFIED</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></function>

</unit>
