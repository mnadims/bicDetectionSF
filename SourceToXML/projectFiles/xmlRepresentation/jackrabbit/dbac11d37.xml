<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/dbac11d37.java"><expr_stmt><expr><name>From</name> <name>dbac11d37dfb2ad8edd80b1be0444341ce34a591</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Marcel</name> <name><name>Reutegger</name> <argument_list type="generic">&lt;<argument><name>mreutegg</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">17</literal> <name>Sep</name> <literal type="number">2009</literal> <literal type="number">19</literal><operator>:</operator><literal type="number">20</literal><operator>:</operator><literal type="number">33</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">2170</literal><operator>:</operator> <name>Remove</name> <name>PropDefId</name> <name>and</name> <name>NodeDefId</name> <operator>-</operator> <name>merged</name> <name>changes</name>
 <name>from</name> <name>sandbox</name> <name>branch</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@816343 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name><name>BatchedItemOperations</name><operator>.</operator><name>java</name></name>           <operator>|</operator>  <literal type="number">84</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">25</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemManager</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">132</literal> <operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemValidator</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">40</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImpl</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">143</literal> <operator>++</operator><operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeTypeInstanceHandler</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>PropertyImpl</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">16</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name><name>ProtectedItemModifier</name><operator>.</operator><name>java</name></name>           <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SessionImpl</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>lock</name><operator>/</operator><name><name>LockManagerImpl</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">7</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>EffectiveNodeType</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">355</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDef</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">97</literal> <operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDefImpl</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">235</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDefinitionImpl</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">181</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDef</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">59</literal> <operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefId</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefImpl</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">273</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefinitionImpl</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">188</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDef</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">59</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDefDiff</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  <literal type="number">80</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDefinitionImpl</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeImpl</name><operator>.</operator><name>java</name></name>           <operator>|</operator>  <literal type="number">38</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeManagerImpl</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">58</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeRegistry</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">107</literal> <operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDef</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">89</literal> <operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDefId</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">20</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDefImpl</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">388</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">152</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>virtual</name><operator>/</operator><name><name>VirtualNodeTypeStateProvider</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">22</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>NodeTypeReader</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">56</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>NodeTypeWriter</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">22</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name><name>PersistenceCopier</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">2</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>AbstractBundlePersistenceManager</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">27</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>bundle</name><operator>/</operator><name>util</name><operator>/</operator><name><name>BundleBinding</name><operator>.</operator><name>java</name></name>            <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>bundle</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ItemStateBinding</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>bundle</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NodePropBundle</name><operator>.</operator><name>java</name></name>           <operator>|</operator>  <literal type="number">48</literal> <operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name>util</name><operator>/</operator><name><name>Serializer</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">16</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>xml</name><operator>/</operator><name><name>XMLPersistenceManager</name><operator>.</operator><name>java</name></name>            <operator>|</operator>  <literal type="number">13</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>PropertyTypeRegistry</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>QueryImpl</name><operator>.</operator><name>java</name></name>          <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>QueryObjectModelImpl</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>NodeState</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">25</literal> <operator>--</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>PropertyState</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">26</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SessionItemStateManager</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">22</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SharedItemStateManager</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">75</literal> <operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>value</name><operator>/</operator><name><name>InternalValue</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>version</name><operator>/</operator><name><name>InternalVersionManagerImpl</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">12</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>version</name><operator>/</operator><name><name>NodeStateEx</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">48</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>version</name><operator>/</operator><name><name>VersionManagerImplRestore</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>virtual</name><operator>/</operator><name><name>AbstractVISProvider</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">25</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>xml</name><operator>/</operator><name><name>DefaultProtectedPropertyImporter</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>PropInfo</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>ProtectedPropertyImporter</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>SessionImporter</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>WorkspaceImporter</name><operator>.</operator><name>java</name></name>           <operator>|</operator>  <literal type="number">17</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>CyclicNodeTypeRegistrationTest</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">32</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">99</literal> <operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QItemDefinitionImpl</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">7</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QNodeDefinitionImpl</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">12</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QNodeTypeDefinitionImpl</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">248</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefinitionImpl</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QDefinitionBuilderFactory</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">4</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QItemDefinitionBuilder</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">14</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QNodeDefinitionBuilder</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">26</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QPropertyDefinitionBuilder</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>spi2jcr</name><operator>/</operator><name><name>QNodeDefinitionImpl</name><operator>.</operator><name>java</name></name>          <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>spi2jcr</name><operator>/</operator><name><name>QPropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">25</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">68</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">1087</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">2809</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDef</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDefImpl</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDefinitionImpl</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDef</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefImpl</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDef</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDefImpl</name><operator>.</operator><name>java</name></name>
 <name>delete</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BatchedItemOperations</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BatchedItemOperations</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c56b2807a</name><operator>..</operator><literal type="number">527485447</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BatchedItemOperations</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>BatchedItemOperations</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>PropertyId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>lock</name><operator>.</operator><name>LockManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>EffectiveNodeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeConflictException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDefId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>Permission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ChildNodeEntry</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>version</name><operator>.</operator><name>VersionHistoryInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>version</name><operator>.</operator><name>InternalVersionManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QItemDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>MalformedPathException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>PathFactoryImpl</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">106</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
                                  <expr><name>LockManager</name> <name>lockMgr</name></expr>,
                                  <expr><name>SessionImpl</name> <name>session</name></expr>,
                                  <expr><name>HierarchyManager</name> <name>hierMgr</name></expr>) <throws>throws <argument><expr><name>RepositoryException</name> <block>{
        <expr><call><name>super</name><argument_list>(<argument><expr><name>ntReg</name></expr></argument>, <argument><expr><name>hierMgr</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>lockMgr</name></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getAccessManager</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getRetentionRegistry</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ntReg</name></expr></argument>, <argument><expr><name>hierMgr</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>lockMgr</name></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getAccessManager</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>session</name><operator>.</operator><name>getRetentionRegistry</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getItemManager</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>stateMgr</name></name> <operator>=</operator> <name>stateMgr</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">432</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">432</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
         <comment type="line">// add to new parent</comment>
         <expr><call><name><name>destParentState</name><operator>.</operator><name>addChildNodeEntry</name></name><argument_list>(<argument><expr><call><name><name>destName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>newState</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
        <comment type="line">// change definition (id) of new node</comment>
        <expr><name>NodeDef</name> <name>newNodeDef</name> <operator>=</operator>
                <call><name>findApplicableNodeDefinition</name><argument_list>(<argument><expr><call><name><name>destName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>srcState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>destParentState</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>newState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>newNodeDef</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

         <comment type="line">// adjust references that refer to uuid's which have been mapped to</comment>
         <comment type="line">// newly generated uuid's on copy/clone</comment>
         <expr><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name> <name>iter</name> <operator>=</operator> <call><name><name>refTracker</name><operator>.</operator><name>getProcessedReferences</name></name><argument_list>()</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">589</literal></expr>,<expr><literal type="number">12</literal> <operator>+</operator><literal type="number">583</literal></expr>,<expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
             <expr><call><name><name>destParent</name><operator>.</operator><name>addChildNodeEntry</name></name><argument_list>(<argument><expr><call><name><name>destName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>target</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         }</block>
 
        <comment type="line">// change definition (id) of target node</comment>
        <name>NodeDef</name> <name>newTargetDef</name> <operator>=</operator>
                <call><name>findApplicableNodeDefinition</name><argument_list>(<argument><expr><call><name><name>destName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>target</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>destParent</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>target</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>newTargetDef</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

         <comment type="line">// store states</comment>
         <expr><call><name><name>stateMgr</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;
         <if_stmt><if>if <condition>(<expr><name>renameOnly</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">725</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">713</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
         <comment type="line">// 4. node type constraints</comment>
 
         <if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>CHECK_CONSTRAINTS</name><operator>)</operator> <operator>==</operator> <name>CHECK_CONSTRAINTS</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>NodeDef</name></type> <name>parentDef</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><call><name><name>parentState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QItemDefinition</name></type> <name>parentDef</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>parentState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>unwrap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <comment type="line">// make sure parent node is not protected</comment>
             <if_stmt><if>if <condition>(<expr><call><name><name>parentDef</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                 <throw>throw <expr><operator>new</operator> <call><name>ConstraintViolationException</name><argument_list>(
<argument>@@ <expr><operator>-</operator><literal type="number">735</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">723</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
             <comment type="line">// make sure there's an applicable definition for new child node</comment>
             <expr><name>EffectiveNodeType</name> <name>entParent</name> <operator>=</operator> <call><name>getEffectiveNodeType</name><argument_list>(<argument><expr><name>parentState</name></expr></argument>)</argument_list></call></expr>;
             <call><name><name>entParent</name><operator>.</operator><name>checkAddNodeConstraints</name></name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></throw>
            <decl_stmt><decl><type><name>NodeDef</name></type> <name>newNodeDef</name> <init>=
            <expr><name>QNodeDefinition</name> <name>newNodeDef</name> <operator>=</operator>
                     <call><name>findApplicableNodeDefinition</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>,
                             <argument><expr><name>parentState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">756</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">744</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
                     <expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
                     <throw>throw <argument_list>new <argument><expr><call><name>RepositoryException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ise</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw></block></expr>;</expr_stmt>
                 <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></if></if_stmt>}</block>
                <name>NodeDef</name> <name>conflictingTargetDef</name> <operator>=</operator>
                        <call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><call><name><name>conflictingState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>QNodeDefinition</name></type> <name>conflictingTargetDef</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>conflictingState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>unwrap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <comment type="line">// check same-name sibling setting of both target and existing node</comment>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>conflictingTargetDef</name><operator>.</operator><name>allowsSameNameSiblings</name></name><argument_list>()</argument_list></call>
                         <operator>||</operator> <operator>!</operator><call><name><name>newNodeDef</name><operator>.</operator><name>allowsSameNameSiblings</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">900</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">887</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
         <comment type="line">// 4. node type constraints</comment>
 
         <if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>CHECK_CONSTRAINTS</name><operator>)</operator> <operator>==</operator> <name>CHECK_CONSTRAINTS</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>NodeDef</name></type> <name>parentDef</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><call><name><name>parentState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QItemDefinition</name></type> <name>parentDef</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>parentState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>unwrap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><call><name><name>parentDef</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                 <throw>throw <expr><operator>new</operator> <call><name>ConstraintViolationException</name><argument_list>(<argument><expr><call><name>safeGetJCRPath</name><argument_list>(<argument><expr><name>parentId</name></expr></argument>)</argument_list></call>
                         <operator>+</operator> <literal type="string">": cannot remove child node of protected parent node"</literal></expr></argument>)</argument_list></call></expr>;</throw>
             </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>NodeDef</name></type> <name>targetDef</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><call><name><name>targetState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QItemDefinition</name></type> <name>targetDef</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>targetState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>unwrap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><call><name><name>targetDef</name><operator>.</operator><name>isMandatory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                 <throw>throw <expr><operator>new</operator> <call><name>ConstraintViolationException</name><argument_list>(<argument><expr><call><name>safeGetJCRPath</name><argument_list>(<argument><expr><name>targetPath</name></expr></argument>)</argument_list></call>
                         <operator>+</operator> <literal type="string">": cannot remove mandatory node"</literal></expr></argument>)</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1071</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1058</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
                     <expr><operator>+</operator> <literal type="string">" because manager is not in edit mode"</literal></expr>)</block></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
 
        <decl_stmt><decl><type><name>NodeDef</name></type> <name>def</name> <init>= <expr><call><name>findApplicableNodeDefinition</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QNodeDefinition</name></type> <name>def</name> <init>= <expr><call><name>findApplicableNodeDefinition</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <return>return <expr><call><name>createNodeState</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>, <argument><expr><name>mixinNames</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
@@ <operator>-</operator><literal type="number">1099</literal><operator>,</operator><literal type="number">7</literal> <operator>+</operator><literal type="number">1086</literal><operator>,</operator><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
                                      <expr><name>Name</name> <name>nodeTypeName</name></expr>,
                                      <expr><name><name>Name</name><index>[]</index></name> <name>mixinNames</name></expr>,
                                      <expr><name>NodeId</name> <name>id</name></expr>,
                                     <expr><name>NodeDef</name> <name>def</name></expr>)
                                     <name>QNodeDefinition</name> <name>def</name>)</block>
             <throws>throws <argument><expr><name>ItemExistsException</name></expr></argument>, <argument><expr><name>ConstraintViolationException</name></expr></argument>,
             <argument><expr><name>RepositoryException</name></expr></argument>, <argument><expr><name>IllegalStateException</name> <block>{</block></expr></argument>
 
@<argument>@ <expr><operator>-</operator><literal type="number">1128</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1115</literal></expr></argument>,<argument><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name></expr></argument></throws> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><name>mixinNames</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>mixinNames</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>setMixinTypeNames</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>mixinNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <comment type="line">// now add new child node entry to parent</comment>
         <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>addChildNodeEntry</name></name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1142</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">1128</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
 
         <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>node</name><operator>.</operator><name>getMixinTypeNames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
             <comment type="line">// create jcr:mixinTypes property</comment>
            <decl_stmt><decl><type><name>PropDef</name></type> <name>pd</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getApplicablePropertyDef</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_MIXINTYPES</name></name></expr></argument>,
            <argument><expr><name>QPropertyDefinition</name> <name>pd</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getApplicablePropertyDef</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_MIXINTYPES</name></name></expr></argument>,
                     <argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
             <expr_stmt><expr><call><name>createPropertyState</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name><name>pd</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt></block></expr></expr_stmt>
 
         <comment type="line">// add 'auto-create' properties defined in node type</comment>
        <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>pd</name> <range>: <expr><call><name><name>ent</name><operator>.</operator><name>getAutoCreatePropDefs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>QPropertyDefinition</name></type> <name>pd</name> <range>: <expr><call><name><name>ent</name><operator>.</operator><name>getAutoCreatePropDefs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name>createPropertyState</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name><name>pd</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
 
         <comment type="line">// recursively add 'auto-create' child nodes defined in node type</comment>
        <for>for <control>(<init><decl><type><name>NodeDef</name></type> <name>nd</name> <range>: <expr><call><name><name>ent</name><operator>.</operator><name>getAutoCreateNodeDefs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>QNodeDefinition</name></type> <name>nd</name> <range>: <expr><call><name><name>ent</name><operator>.</operator><name>getAutoCreateNodeDefs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name>createNodeState</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name><name>nd</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nd</name><operator>.</operator><name>getDefaultPrimaryType</name></name><argument_list>()</argument_list></call></expr></argument>,
                     <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1198</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1184</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
         }</block>
 
         <comment type="line">// find applicable definition</comment>
        <name>PropDef</name> <name>def</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl>;</decl_stmt>
         <comment type="line">// multi- or single-valued property?</comment>
         <if_stmt><if>if <condition>(<expr><name>numValues</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
             <comment type="line">// could be single- or multi-valued (n == 1)</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1237</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1223</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
     <expr><specifier>public</specifier> <name>PropertyState</name> <call><name>createPropertyState</name><argument_list>(<argument><expr><name>NodeState</name> <name>parent</name></expr></argument>,
                                              <argument><expr><name>Name</name> <name>propName</name></expr></argument>,
                                              <argument><expr><name>int</name> <name>type</name></expr></argument>,
                                             <argument><expr><name>PropDef</name> <name>def</name></expr></argument>)</argument_list></call>
                                             <name>QPropertyDefinition</name> <name>def</name></expr>)
             <throws>throws <argument><expr><name>ItemExistsException</name></expr></argument>, <argument><expr><name>RepositoryException</name> <block>{</block></expr></argument>
 
         <comment type="line">// check for name collisions with existing properties</comment>
@<argument>@ <expr><operator>-</operator><literal type="number">1249</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1235</literal></expr></argument>,<argument><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name></expr></argument></throws> <block>{<block_content>
         <comment type="line">// create property</comment>
         <decl_stmt><decl><type><name>PropertyState</name></type> <name>prop</name> <init>= <expr><call><name><name>stateMgr</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><name>propName</name></expr></argument>, <argument><expr><call><name><name>parent</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
        <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>!=</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1265</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1250</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
         <if_stmt><if>if <condition>(<expr><name>genValues</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><name>genValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
 
         <comment type="line">// now add new property entry to parent</comment>
@@ <operator>-</operator><literal type="number">1442</literal><operator>,</operator><literal type="number">8</literal> <operator>+</operator><literal type="number">1427</literal><operator>,</operator><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
             <throws>throws <argument><expr><name>PathNotFoundException</name></expr></argument>, <argument><expr><name>ConstraintViolationException</name></expr></argument>,
             <argument><expr><name>RepositoryException</name> <block>{
         <expr><name>NodeState</name> <name>node</name> <operator>=</operator> <call><name>getNodeState</name><argument_list>(<argument><expr><name>nodePath</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws>;
        <name>NodeDef</name> <name>parentDef</name> <operator>=</operator> <call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></block></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>parentDef</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isProtected</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
             <throw>throw <expr><operator>new</operator> <call><name>ConstraintViolationException</name><argument_list>(<argument><expr><call><name>safeGetJCRPath</name><argument_list>(<argument><expr><name>nodePath</name></expr></argument>)</argument_list></call>
                     <operator>+</operator> <literal type="string">": node is protected"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1686</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1670</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
             <expr><name>newState</name> <operator>=</operator> <call><name><name>stateMgr</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>srcState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>destParentId</name></expr></argument>)</argument_list></call></expr>;
             <comment type="line">// copy node state</comment>
             <call><name><name>newState</name><operator>.</operator><name>setMixinTypeNames</name></name><argument_list>(<argument><expr><call><name><name>srcState</name><operator>.</operator><name>getMixinTypeNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>srcState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if_stmt><if>if <condition>(<expr><name>shareable</name></expr>)</condition> <block>{<block_content>
                 <comment type="line">// initialize shared set</comment>
                 <expr_stmt><expr><call><name><name>newState</name><operator>.</operator><name>addShare</name></name><argument_list>(<argument><expr><name>destParentId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1773</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">1756</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
                  <expr><operator>*</operator>
                  <operator>*</operator> <name>todo</name> <name>FIXME</name> <name>delegate</name> <name>to</name> <literal type="char">'node type instance handler'</literal>
                  <operator>*</operator><operator>/</operator>
                <name>PropDefId</name> <name>defId</name> <operator>=</operator> <call><name><name>srcChildState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr>;
                <name>PropDef</name> <name>def</name> <operator>=</operator> <call><name><name>ntReg</name><operator>.</operator><name>getPropDef</name></name><argument_list>(<argument><expr><name>defId</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getApplicablePropertyDef</name></name><argument_list>(
                        <argument><expr><call><name><name>srcChildState</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>srcChildState</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>srcChildState</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>MIX_LOCKABLE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                     <comment type="line">// skip properties defined by mix:lockable</comment>
                     <continue>continue;</continue>
                 </block_content>}</block></if></if_stmt>
 
                 <decl_stmt><decl><type><name>PropertyState</name></type> <name>newChildState</name> <init>=
                        <expr><call><name>copyPropertyState</name><argument_list>(<argument><expr><name>srcChildState</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>copyPropertyState</name><argument_list>(<argument><expr><name>srcChildState</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>propName</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
                 <if_stmt><if>if <condition>(<expr><name>history</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>fullVersionable</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1830</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">1814</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
     <comment type="block" format="javadoc">/**
      * Copies the specified property state.
      *
     * @param srcState
     * @param parentId
     * @param propName
     * @return
     * @throws RepositoryException
     * @param srcState the property state to copy.
     * @param parentId the id of the parent node.
     * @param propName the name of the property.
     * @param def      the definition of the property.
     * @return a copy of the property state.
     * @throws RepositoryException if an error occurs while copying.
      */</comment>
     <expr><specifier>private</specifier> <name>PropertyState</name> <call><name>copyPropertyState</name><argument_list>(<argument><expr><name>PropertyState</name> <name>srcState</name></expr></argument>,
                                             <argument><expr><name>NodeId</name> <name>parentId</name></expr></argument>,
                                            <argument><expr><name>Name</name> <name>propName</name></expr></argument>)</argument_list></call>
                                            <name>Name</name> <name>propName</name></expr>,
                                            <expr><name>QPropertyDefinition</name> <name>def</name></expr>)
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{
 
        <expr><name>PropDefId</name> <name>defId</name> <operator>=</operator> <call><name><name>srcState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getPropDef</name></name><argument_list>(<argument><expr><name>defId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

         <decl_stmt><decl><type><name>PropertyState</name></type> <name>newState</name> <init>= <expr><call><name><name>stateMgr</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><name>propName</name></expr></argument>, <argument><expr><name>parentId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
        <expr_stmt><expr><call><name><name>newState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><name>defId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>newState</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>srcState</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>newState</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><call><name><name>srcState</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>srcState</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1858</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1840</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>BatchedItemOperations</name> extends <name>ItemValidator</name> <block>{
              <expr><operator>*</operator>
              <operator>*</operator> <name>todo</name> <name>FIXME</name> <name>delegate</name> <name>to</name> <literal type="char">'node type instance handler'</literal>
              <operator>*</operator><operator>/</operator></expr>
            <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>MIX_REFERENCEABLE</name></name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name><name>propName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_UUID</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>propName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_UUID</name></name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name><name>def</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>MIX_REFERENCEABLE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <comment type="line">// set correct value of jcr:uuid property</comment>
                 <expr_stmt><expr><call><name><name>newState</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>InternalValue</name><index>[]</index></name><block>{<expr><call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>parentId</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b72bfd7e8</name><operator>..</operator><name>a50b992aa</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>version</name><operator>.</operator><name>VersionException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>ItemId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>EffectiveNodeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeConflictException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeManagerImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>Permission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ChildNodeEntry</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>version</name><operator>.</operator><name>VersionHistoryInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>version</name><operator>.</operator><name>InternalVersionManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QItemDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>Text</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">373</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">372</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>ItemImpl</name> implements <name>Item</name> <block>{
         <for>for <control>(<init><decl><type><name>ItemState</name></type> <name>itemState</name> <range>: <expr><name>dirty</name></expr></range></decl></init>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>ItemDefinition</name></type> <name>def</name></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><call><name><name>itemState</name><operator>.</operator><name>isNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>NodeState</name><operator>)</operator> <name>itemState</name><operator>)</operator><operator>.</operator><call><name>getDefinitionId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeState</name><operator>)</operator> <name>itemState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PropertyState</name><operator>)</operator> <name>itemState</name><operator>)</operator><operator>.</operator><call><name>getDefinitionId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><operator>(</operator><name>PropertyState</name><operator>)</operator> <name>itemState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
             <comment type="block">/* check permissions for non-protected items. protected items are
                only added through API methods which need to assert that
@@ -444,9 +443,9 @@ public abstract class ItemImpl implements Item {
                 }
 
                 // mandatory child properties
                PropDef[] pda = ent.getMandatoryPropDefs();
                QPropertyDefinition[] pda = ent.getMandatoryPropDefs();
                 for (int i = 0; i &lt; pda.length; i++) {
                    PropDef pd = pda[i];
                    QPropertyDefinition pd = pda[i];
                     if (pd.getDeclaringNodeType().equals(NameConstants.MIX_VERSIONABLE)
                             || pd.getDeclaringNodeType().equals(NameConstants.MIX_SIMPLE_VERSIONABLE)) {
                         /**
@@ -465,9 +464,9 @@ public abstract class ItemImpl implements Item {
                     }
                 }
                 // mandatory child nodes
                NodeDef[] cnda = ent.getMandatoryNodeDefs();
                QItemDefinition[] cnda = ent.getMandatoryNodeDefs();
                 for (int i = 0; i &lt; cnda.length; i++) {
                    NodeDef cnd = cnda[i];
                    QItemDefinition cnd = cnda[i];
                     if (!nodeState.hasChildNodeEntry(cnd.getName())) {
                         String msg = itemMgr.safeGetJCRPath(id)
                                 + ": mandatory child node " + cnd.getName()
@@ -480,7 +479,7 @@ public abstract class ItemImpl implements Item {
                 // the transient item is a property
                 PropertyState propState = (PropertyState) itemState;
                 ItemId propId = propState.getPropertyId();
                PropertyDefinitionImpl propDef = (PropertyDefinitionImpl) def;
                org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl propDef = (org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl) def;
 
                 /**
                  * check value constraints
@@ -579,11 +578,11 @@ public abstract class ItemImpl implements Item {
 
         // walk through list of removed transient items and check REMOVE permission
         for (ItemState itemState : removed) {
            ItemDefinition def;
            QItemDefinition def;
             if (itemState.isNode()) {
                def = ntMgr.getNodeDefinition(((NodeState) itemState).getDefinitionId());
                def = itemMgr.getDefinition((NodeState) itemState).unwrap();
             } else {
                def = ntMgr.getPropertyDefinition(((PropertyState) itemState).getDefinitionId());
                def = itemMgr.getDefinition((PropertyState) itemState).unwrap();
             }
             if (!def.isProtected()) {
                 Path path = stateMgr.getAtticAwareHierarchyMgr().getPath(itemState.getId());
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java
index a96fcd5bd..e04e67b8a 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemManager.java
@@ -29,23 +29,19 @@ import javax.jcr.NodeIterator;
 import javax.jcr.PathNotFoundException;
 import javax.jcr.PropertyIterator;
 import javax.jcr.RepositoryException;
import javax.jcr.nodetype.NodeDefinition;
import javax.jcr.nodetype.PropertyDefinition;
 
 import org.apache.commons.collections.map.ReferenceMap;
 import org.apache.jackrabbit.core.id.ItemId;
 import org.apache.jackrabbit.core.id.NodeId;
 import org.apache.jackrabbit.core.id.PropertyId;
import org.apache.jackrabbit.core.nodetype.NodeDefId;
import org.apache.jackrabbit.core.nodetype.NodeDefinitionImpl;
import org.apache.jackrabbit.core.nodetype.PropDefId;
import org.apache.jackrabbit.core.nodetype.PropertyDefinitionImpl;
import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
 import org.apache.jackrabbit.core.security.AccessManager;
 import org.apache.jackrabbit.core.state.ChildNodeEntry;
 import org.apache.jackrabbit.core.state.ItemState;
 import org.apache.jackrabbit.core.state.ItemStateException;
 import org.apache.jackrabbit.core.state.ItemStateListener;
import org.apache.jackrabbit.core.state.ItemStateManager;
 import org.apache.jackrabbit.core.state.NoSuchItemStateException;
 import org.apache.jackrabbit.core.state.NodeState;
 import org.apache.jackrabbit.core.state.PropertyState;
@@ -55,6 +51,8 @@ import org.apache.jackrabbit.core.version.VersionHistoryImpl;
 import org.apache.jackrabbit.core.version.VersionImpl;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.Path;
import org.apache.jackrabbit.spi.QPropertyDefinition;
import org.apache.jackrabbit.spi.QNodeDefinition;
 import org.apache.jackrabbit.spi.commons.name.NameConstants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -86,12 +84,12 @@ public class ItemManager implements Dumpable, ItemStateListener {
 
     private static Logger log = LoggerFactory.getLogger(ItemManager.class);
 
    private final NodeDefinition rootNodeDef;
    private final org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl rootNodeDef;
     private final NodeId rootNodeId;
 
     protected final SessionImpl session;
 
    private final ItemStateManager itemStateProvider;
    private final SessionItemStateManager sism;
     private final HierarchyManager hierMgr;
 
     /**
@@ -107,17 +105,19 @@ public class ItemManager implements Dumpable, ItemStateListener {
     /**
      * Creates a new per-session instance &lt;code&gt;ItemManager&lt;/code&gt; instance.
      *
     * @param itemStateProvider the item state provider associated with
     *                          the new instance
     * @param hierMgr           the hierarchy manager
     * @param session           the session associated with the new instance
     * @param rootNodeDef       the definition of the root node
     * @param rootNodeId        the id of the root node
     * @param sism        the item state manager associated with the new
     *                    instance
     * @param hierMgr     the hierarchy manager
     * @param session     the session associated with the new instance
     * @param rootNodeDef the definition of the root node
     * @param rootNodeId  the id of the root node
      */</comment>
    <expr_stmt><expr><specifier>protected</specifier> <call><name>ItemManager</name><argument_list>(<argument><expr><name>SessionItemStateManager</name> <name>itemStateProvider</name></expr></argument>, <argument><expr><name>HierarchyManager</name> <name>hierMgr</name></expr></argument>,
                          <argument><expr><name>SessionImpl</name> <name>session</name></expr></argument>, <argument><expr><name>NodeDefinition</name> <name>rootNodeDef</name></expr></argument>,
    <argument><expr><specifier>protected</specifier> <call><name>ItemManager</name><argument_list>(<argument><expr><name>SessionItemStateManager</name> <name>sism</name></expr></argument>,
                          <argument><expr><name>HierarchyManager</name> <name>hierMgr</name></expr></argument>,
                          <argument><expr><name>SessionImpl</name> <name>session</name></expr></argument>,
                          <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name> <name>rootNodeDef</name></expr></argument>,
                           <argument><expr><name>NodeId</name> <name>rootNodeId</name></expr></argument>)</argument_list></call> <block>{
        <expr><name><name>this</name><operator>.</operator><name>itemStateProvider</name></name> <operator>=</operator> <name>itemStateProvider</name></expr>;
        <name><name>this</name><operator>.</operator><name>sism</name></name> <operator>=</operator> <name>sism</name></block></expr></argument>;</argument_list></call></expr></expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hierMgr</name></name> <operator>=</operator> <name>hierMgr</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rootNodeDef</name></name> <operator>=</operator> <name>rootNodeDef</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">145</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">145</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ItemManager</name> implements <name>Dumpable</name></expr><operator>,</operator> <expr><name>ItemStateListener</name> <block>{
             <expr><name>SessionItemStateManager</name> <name>itemStateProvider</name></expr>,
             <expr><name>HierarchyManager</name> <name>hierMgr</name></expr>,
             <expr><name>SessionImpl</name> <name>session</name></expr>,
            <expr><name>NodeDefinition</name> <name>rootNodeDef</name></expr>,
            <expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name> <name>rootNodeDef</name></expr>,
             <expr><name>NodeId</name> <name>rootNodeId</name></expr>) <block>{
         <expr><name>ItemManager</name> <name>mgr</name> <operator>=</operator> <operator>new</operator> <call><name>ItemManager</name><argument_list>(<argument><expr><name>itemStateProvider</name></expr></argument>, <argument><expr><name>hierMgr</name></expr></argument>,
                 <argument><expr><name>session</name></expr></argument>, <argument><expr><name>rootNodeDef</name></expr></argument>, <argument><expr><name>rootNodeId</name></expr></argument>)</argument_list></call></expr>;
@@ <operator>-</operator><literal type="number">163</literal><operator>,</operator><literal type="number">52</literal> <operator>+</operator><literal type="number">163</literal><operator>,</operator><literal type="number">76</literal> @@ <specifier>public</specifier> <name>class</name> <name>ItemManager</name> implements <name>Dumpable</name><operator>,</operator> <name>ItemStateListener</name> <block>{
         <expr><call><name><name>shareableNodesCache</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
     }</block>
 
    <name>NodeDefinition</name> <call><name>getDefinition</name><argument_list>(<argument><expr><name>NodeState</name> <name>state</name></expr></argument>)</argument_list></call>
    <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name> <call><name>getDefinition</name><argument_list>(<argument><expr><name>NodeState</name> <name>state</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{</block></expr></argument></throws></block></block></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>rootNodeId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
             <comment type="line">// special handling required for root node</comment>
             <return>return <expr><name>rootNodeDef</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
 
        <decl_stmt><decl><type><name>NodeDefId</name></type> <name>defId</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NodeDefinitionImpl</name></type> <name>def</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodeDefinition</name><argument_list>(<argument><expr><name>defId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>def</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="block" format="javadoc">/**
             * todo need proper way of handling inconsistent/corrupt definition
             * e.g. 'flag' items that refer to non-existent definitions
             */</comment>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"node at "</literal> <operator>+</operator> <call><name>safeGetJCRPath</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>+</operator> <literal type="string">" has invalid definitionId ("</literal> <operator>+</operator> <name>defId</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// fallback: try finding applicable definition</comment>
            <decl_stmt><decl><type><name>NodeImpl</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>NodeImpl</name><operator>)</operator> <call><name>getItem</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>NodeState</name></type> <name>parentState</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getNodeState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ChildNodeEntry</name></type> <name>cne</name> <init>= <expr><call><name><name>parentState</name><operator>.</operator><name>getChildNodeEntry</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>parent</name><operator>.</operator><name>getApplicableChildNodeDefinition</name></name><argument_list>(<argument><expr><call><name><name>cne</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>NodeId</name></type> <name>parentId</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>parentId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// removed state has parentId set to null</comment>
            <comment type="line">// get from overlayed state</comment>
            <expr_stmt><expr><name>parentId</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getOverlayedState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParentId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>NodeState</name></type> <name>parentState</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>NodeImpl</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>NodeImpl</name><operator>)</operator> <call><name>getItem</name><argument_list>(<argument><expr><name>parentId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>parentState</name> <operator>=</operator> <call><name><name>parent</name><operator>.</operator><name>getNodeState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// indicates state has been removed, must use</comment>
                <comment type="line">// overlayed state of parent, otherwise child node entry</comment>
                <comment type="line">// cannot be found</comment>
                <expr_stmt><expr><name>parentState</name> <operator>=</operator> <operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>parentState</name><operator>.</operator><name>getOverlayedState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ItemNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// parent probably removed, get it from attic</comment>
            <try>try <block>{<block_content>
                <comment type="line">// use overlayed state if available</comment>
                <expr_stmt><expr><name>parentState</name> <operator>=</operator> <operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>sism</name><operator>.</operator><name>getAttic</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemState</name><argument_list>(
                        <argument><expr><name>parentId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getOverlayedState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ItemStateException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RepositoryException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></catch></try>
        <comment type="line">// get child node entry</comment>
        <decl_stmt><decl><type><name>ChildNodeEntry</name></type> <name>cne</name> <init>= <expr><call><name><name>parentState</name><operator>.</operator><name>getChildNodeEntry</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NodeTypeRegistry</name></type> <name>ntReg</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodeTypeRegistry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>EffectiveNodeType</name></type> <name>ent</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(
                    <argument><expr><call><name><name>parentState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>parentState</name><operator>.</operator><name>getMixinTypeNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QNodeDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getApplicableChildNodeDef</name></name><argument_list>(
                    <argument><expr><call><name><name>cne</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodeDefinition</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NodeTypeConflictException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RepositoryException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></catch></try>
        <return>return <expr><name>def</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><name>PropertyDefinition</name></type> <name>getDefinition</name><argument_list>(<argument><expr><name>PropertyState</name> <name>state</name></expr></argument>)</argument_list>
    <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name> <name>getDefinition</name><argument_list>(<argument><expr><name>PropertyState</name> <name>state</name></expr></argument>)</argument_list>
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{
        <expr><name>PropDefId</name> <name>defId</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PropertyDefinitionImpl</name></type> <name>def</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPropertyDefinition</name><argument_list>(<argument><expr><name>defId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>def</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="block" format="javadoc">/**
             * todo need proper way of handling inconsistent/corrupt definition
             * e.g. 'flag' items that refer to non-existent definitions
             */</comment>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"property at "</literal> <operator>+</operator> <call><name>safeGetJCRPath</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>+</operator> <literal type="string">" has invalid definitionId ("</literal> <operator>+</operator> <name>defId</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// fallback: try finding applicable definition</comment>
        <try>try <block>{<block_content>
             <decl_stmt><decl><type><name>NodeImpl</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>NodeImpl</name><operator>)</operator> <call><name>getItem</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>parent</name><operator>.</operator><name>getApplicablePropertyDefinition</name></name><argument_list>(
            return <argument><expr><call><name><name>parent</name><operator>.</operator><name>getApplicablePropertyDefinition</name></name><argument_list>(
                     <argument><expr><call><name><name>state</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ItemNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// parent probably removed, get it from attic</comment>
        </block_content>}</block></catch></try>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>NodeState</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>sism</name><operator>.</operator><name>getAttic</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemState</name><argument_list>(
                    <argument><expr><call><name><name>state</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getOverlayedState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>NodeTypeRegistry</name></type> <name>ntReg</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodeTypeRegistry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EffectiveNodeType</name></type> <name>ent</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(
                    <argument><expr><call><name><name>parent</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>parent</name><operator>.</operator><name>getMixinTypeNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getApplicablePropertyDef</name></name><argument_list>(
                    <argument><expr><call><name><name>state</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPropertyDefinition</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ItemStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RepositoryException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NodeTypeConflictException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RepositoryException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></catch></try>
        <return>return <expr><name>def</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -228,7 +252,7 @@ public class ItemManager implements Dumpable, ItemStateListener {
             session.sanityCheck();
 
             // shortcut: check if state exists for the given item
            if (!itemStateProvider.hasItemState(itemId)) {
            if (!sism.hasItemState(itemId)) {
                 return false;
             }
             getItemData(itemId, path, true);
@@ -310,7 +334,7 @@ public class ItemManager implements Dumpable, ItemStateListener {
             // NOTE: permission check &amp; caching within createItemData
             ItemState state;
             try {
                state = itemStateProvider.getItemState(itemId);
                state = sism.getItemState(itemId);
             } catch (NoSuchItemStateException nsise) {
                 throw new ItemNotFoundException(itemId.toString());
             } catch (ItemStateException ise) {
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java
index 3ba65ea2e..16a1bcde7 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/ItemValidator.java
@@ -31,10 +31,8 @@ import javax.jcr.version.VersionException;
 import org.apache.jackrabbit.core.id.ItemId;
 import org.apache.jackrabbit.core.lock.LockManager;
 import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
import org.apache.jackrabbit.core.nodetype.NodeDef;
 import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
 import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
import org.apache.jackrabbit.core.nodetype.PropDef;
 import org.apache.jackrabbit.core.retention.RetentionRegistry;
 import org.apache.jackrabbit.core.security.AccessManager;
 import org.apache.jackrabbit.core.security.authorization.Permission;
@@ -43,6 +41,9 @@ import org.apache.jackrabbit.core.state.PropertyState;
 import org.apache.jackrabbit.core.value.InternalValue;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.Path;
import org.apache.jackrabbit.spi.QPropertyDefinition;
import org.apache.jackrabbit.spi.QItemDefinition;
import org.apache.jackrabbit.spi.QNodeDefinition;
 import org.apache.jackrabbit.spi.commons.conversion.PathResolver;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -130,6 +131,8 @@ public class ItemValidator {
 
     protected final RetentionRegistry retentionReg;
 
    protected final ItemManager itemMgr;

     /**
      * Creates a new &lt;code&gt;ItemValidator&lt;/code&gt; instance.
      *
@@ -140,7 +143,9 @@ public class ItemValidator {
     public ItemValidator(NodeTypeRegistry ntReg,
                          HierarchyManager hierMgr,
                          SessionImpl session) throws RepositoryException {
        this(ntReg, hierMgr, session, session.getLockManager(), session.getAccessManager(), session.getRetentionRegistry());
        this(ntReg, hierMgr, session, session.getLockManager(),
                session.getAccessManager(), session.getRetentionRegistry(),
                session.getItemManager());
     }
 
     /**
@@ -152,19 +157,22 @@ public class ItemValidator {
      * @param lockMgr    lockMgr
      * @param accessMgr  accessMgr
      * @param retentionReg
     * @param itemMgr    the item manager
      */</comment>
     <constructor><specifier>public</specifier> <name>ItemValidator</name><parameter_list>(<parameter><decl><type><name>NodeTypeRegistry</name></type> <name>ntReg</name></decl></parameter>,
                          <parameter><decl><type><name>HierarchyManager</name></type> <name>hierMgr</name></decl></parameter>,
                          <parameter><decl><type><name>PathResolver</name></type> <name>resolver</name></decl></parameter>,
                          <parameter><decl><type><name>LockManager</name></type> <name>lockMgr</name></decl></parameter>,
                          <parameter><decl><type><name>AccessManager</name></type> <name>accessMgr</name></decl></parameter>,
                         <parameter><decl><type><name>RetentionRegistry</name></type> <name>retentionReg</name></decl></parameter>)</parameter_list> <block>{<block_content>
                         <decl_stmt><decl><type><name>RetentionRegistry</name></type> <name>retentionReg</name></decl>,
                         <decl><type ref="prev"/><name>ItemManager</name> <name>itemMgr</name></decl>) <block>{<block_content>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ntReg</name></name> <operator>=</operator> <name>ntReg</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hierMgr</name></name> <operator>=</operator> <name>hierMgr</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resolver</name></name> <operator>=</operator> <name>resolver</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lockMgr</name></name> <operator>=</operator> <name>lockMgr</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>accessMgr</name></name> <operator>=</operator> <name>accessMgr</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>retentionReg</name></name> <operator>=</operator> <name>retentionReg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>itemMgr</name></name> <operator>=</operator> <name>itemMgr</name></expr>;</expr_stmt>
     </block_content>}</block></decl_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -190,7 +198,7 @@ public class ItemValidator {
                 ntReg.getEffectiveNodeType(nodeState.getNodeTypeName());
         // effective node type (primary type incl. mixins)
         EffectiveNodeType entPrimaryAndMixins = getEffectiveNodeType(nodeState);
        NodeDef def = ntReg.getNodeDef(nodeState.getDefinitionId());
        QNodeDefinition def = itemMgr.getDefinition(nodeState).unwrap();
 
         // check if primary type satisfies the 'required node types' constraint
         Name[] requiredPrimaryTypes = def.getRequiredPrimaryTypes();
@@ -204,9 +212,9 @@ public class ItemValidator {
             }
         }
         // mandatory properties
        PropDef[] pda = entPrimaryAndMixins.getMandatoryPropDefs();
        QPropertyDefinition[] pda = entPrimaryAndMixins.getMandatoryPropDefs();
         for (int i = 0; i &lt; pda.length; i++) {
            PropDef pd = pda[i];
            QPropertyDefinition pd = pda[i];
             if (!nodeState.hasPropertyName(pd.getName())) {
                 String msg = safeGetJCRPath(nodeState.getNodeId())
                         + ": mandatory property " + pd.getName()
@@ -216,9 +224,9 @@ public class ItemValidator {
             }
         }
         // mandatory child nodes
        NodeDef[] cnda = entPrimaryAndMixins.getMandatoryNodeDefs();
        QItemDefinition[] cnda = entPrimaryAndMixins.getMandatoryNodeDefs();
         for (int i = 0; i &lt; cnda.length; i++) {
            NodeDef cnd = cnda[i];
            QItemDefinition cnd = cnda[i];
             if (!nodeState.hasChildNodeEntry(cnd.getName())) {
                 String msg = safeGetJCRPath(nodeState.getNodeId())
                         + ": mandatory child node " + cnd.getName()
@@ -246,7 +254,7 @@ public class ItemValidator {
      */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>PropertyState</name></type> <name>propState</name></decl></parameter>)</parameter_list>
             <throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument>, <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getPropDef</name></name><argument_list>(<argument><expr><call><name><name>propState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>propState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>unwrap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>propState</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">451</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">459</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>ItemValidator</name> <block>{
      <expr><operator>*</operator> @<name>param</name> <name>name</name>
      <operator>*</operator> @<name>param</name> <name>nodeTypeName</name>
      <operator>*</operator> @<name>param</name> <name>parentState</name>
     <operator>*</operator> @</expr><return>return <expr><name><name>a</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><name><name>NodeDef</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name>
     <operator>*</operator> @</expr></return><return>return <expr><name><name>a</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><name><name>QNodeDefinition</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name>
      <operator>*</operator> @<throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument></throws></expr></return> <if_stmt><if>if no applicable child node definition
      *                                      could be found
      * @<throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws>          if another error occurs
      */
    public NodeDef findApplicableNodeDefinition<condition>(<expr><name>Name</name> <name>name</name></expr><operator>,</operator>
    <expr><specifier>public</specifier> <name>QNodeDefinition</name> <call><name>findApplicableNodeDefinition</name><argument_list>(<argument><expr><name>Name</name> <name>name</name></expr></argument>,
                                                 <argument><expr><name>Name</name> <name>nodeTypeName</name></expr></argument>,
                                                 <argument><expr><name>NodeState</name> <name>parentState</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>RepositoryException</name></expr></argument>, <argument><expr><name>ConstraintViolationException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">479</literal></expr></argument>,<argument><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">487</literal></expr></argument>,<argument><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>ItemValidator</name></expr></argument></throws></expr></condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator> @<name>param</name> <name>type</name>
      <operator>*</operator> @<name>param</name> <name>multiValued</name>
      <operator>*</operator> @<name>param</name> <name>parentState</name>
     <operator>*</operator> @</expr></expr_stmt><return>return <expr><name><name>a</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><name><name>PropDef</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name>
     <operator>*</operator> @</expr></return><return>return <expr><name><name>a</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><name><name>QPropertyDefinition</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name>
      <operator>*</operator> @<throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument></throws></expr></return> <if_stmt><if>if no applicable property definition
      *                                      could be found
      * @<throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws>          if another error occurs
      */
    public PropDef findApplicablePropertyDefinition<condition>(<expr><name>Name</name> <name>name</name></expr><operator>,</operator>
    <expr><specifier>public</specifier> <name>QPropertyDefinition</name> <call><name>findApplicablePropertyDefinition</name><argument_list>(<argument><expr><name>Name</name> <name>name</name></expr></argument>,
                                                     <argument><expr><name>int</name> <name>type</name></expr></argument>,
                                                     <argument><expr><name>boolean</name> <name>multiValued</name></expr></argument>,
                                                     <argument><expr><name>NodeState</name> <name>parentState</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">510</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">518</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>ItemValidator</name></expr></condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator> @<name>param</name> <name>name</name>
      <operator>*</operator> @<name>param</name> <name>type</name>
      <operator>*</operator> @<name>param</name> <name>parentState</name>
     <operator>*</operator> @</expr></expr_stmt><return>return <expr><name><name>a</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><name><name>PropDef</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name>
     <operator>*</operator> @</expr></return><return>return <expr><name><name>a</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><name><name>QPropertyDefinition</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name>
      <operator>*</operator> @<throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument></throws></expr></return> <if_stmt><if>if no applicable property definition
      *                                      could be found
      * @<throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws>          if another error occurs
      */
    public PropDef findApplicablePropertyDefinition<condition>(<expr><name>Name</name> <name>name</name></expr><operator>,</operator>
    <expr><specifier>public</specifier> <name>QPropertyDefinition</name> <call><name>findApplicablePropertyDefinition</name><argument_list>(<argument><expr><name>Name</name> <name>name</name></expr></argument>,
                                                     <argument><expr><name>int</name> <name>type</name></expr></argument>,
                                                     <argument><expr><name>NodeState</name> <name>parentState</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>RepositoryException</name></expr></argument>, <argument><expr><name>ConstraintViolationException</name> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6520ce8c2</literal><operator>..</operator><name>b897277ea</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NodeImpl</name><operator>.</operator><name>java</name></name></expr></block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">71</literal></expr></argument>,<argument><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">71</literal></expr></argument>,<argument><expr><literal type="number">10</literal> @@</expr></argument></throws></expr></condition></if></if_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>ItemId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>PropertyId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>EffectiveNodeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>ItemDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeConflictException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeManagerImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>QueryManagerImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>Permission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ChildNodeEntry</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">86</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>PropertyState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QItemDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>MalformedPathException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NameException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name><operator>.</operator><name>JCR_LIFECYCLE</name></name>
 <name>import</name> static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name><operator>.</operator><name>JCR_CURRENT_LIFECYCLE_STATE</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name><operator>.</operator><name>MIX_LIFECYCLE</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name><operator>.</operator><name>MIX_REFERENCEABLE</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * &lt;code&gt;NodeImpl&lt;/code&gt; implements the &lt;code&gt;Node&lt;/code&gt; interface.
@@ -144,6 +143,23 @@ public class NodeImpl extends ItemImpl implements Node {
                     + state.getNodeTypeName() + "' of " + this);
             data.getNodeState().setNodeTypeName(NameConstants.NT_UNSTRUCTURED);
         }
        List&lt;Name&gt; unknown = null;
        for (Name mixinName : state.getMixinTypeNames()) {
            if (!ntReg.isRegistered(mixinName)) {
                if (unknown == null) {
                    unknown = new ArrayList&lt;Name&gt;();
                }
                unknown.add(mixinName);
                log.warn("Ignoring unknown mixin type '" + mixinName +
                        "' of " + this);
            }
        }
        if (unknown != null) {
            // ignore unknown mixin type names
            Set&lt;Name&gt; known = new HashSet&lt;Name&gt;(state.getMixinTypeNames());
            known.removeAll(unknown);
            state.setMixinTypeNames(known);
        }
     }
 
     /**
@@ -359,7 +375,7 @@ public class NodeImpl extends ItemImpl implements Node {
         if (isNew() &amp;&amp; !hasProperty(name)) {
             // this is a new node and the property does not exist yet
             // -&gt; no need to check item manager
            PropertyDefinitionImpl def = getApplicablePropertyDefinition(
            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def = getApplicablePropertyDefinition(
                     name, type, multiValued, exactTypeMatch);
             PropertyImpl prop = createChildProperty(name, type, def);
             status.set(CREATED);
@@ -396,7 +412,7 @@ public class NodeImpl extends ItemImpl implements Node {
         } catch (ItemNotFoundException e) {
             // does not exist yet:
             // find definition for the specified property and create property
            PropertyDefinitionImpl def = getApplicablePropertyDefinition(
            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def = getApplicablePropertyDefinition(
                     name, type, multiValued, exactTypeMatch);
             PropertyImpl prop = createChildProperty(name, type, def);
             status.set(CREATED);
@@ -405,24 +421,23 @@ public class NodeImpl extends ItemImpl implements Node {
     }
 
     protected synchronized PropertyImpl createChildProperty(Name name, int type,
                                                            PropertyDefinitionImpl def)
                                                            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def)
             throws RepositoryException {
 
         // create a new property state
         PropertyState propState;
         try {
            PropDef propDef = def.unwrap();
            QPropertyDefinition propDef = def.unwrap();
             propState =
                     stateMgr.createTransientPropertyState(getNodeId(), name,
                             ItemState.STATUS_NEW);
             propState.setType(type);
             propState.setMultiValued(propDef.isMultiple());
            propState.setDefinitionId(propDef.getId());
             // compute system generated values if necessary
             InternalValue[] genValues = session.getNodeTypeInstanceHandler()
                     .computeSystemGeneratedPropertyValues(data.getNodeState(), propDef);
             if (genValues == null) {
                genValues = propDef.getDefaultValues();
                genValues = InternalValue.create(propDef.getDefaultValues());
             }
             if (genValues != null) {
                 propState.setValues(genValues);
@@ -450,7 +465,6 @@ public class NodeImpl extends ItemImpl implements Node {
     }
 
     protected synchronized NodeImpl createChildNode(Name name,
                                                    NodeDefinitionImpl def,
                                                     NodeTypeImpl nodeType,
                                                     NodeId id)
             throws RepositoryException {
@@ -463,7 +477,6 @@ public class NodeImpl extends ItemImpl implements Node {
             nodeState =
                     stateMgr.createTransientNodeState(id, nodeType.getQName(),
                             getNodeId(), ItemState.STATUS_NEW);
            nodeState.setDefinitionId(def.unwrap().getId());
         } catch (ItemStateException ise) {
             String msg = "failed to add child node " + name + " to " + this;
             log.debug(msg);
@@ -495,15 +508,14 @@ public class NodeImpl extends ItemImpl implements Node {
         PropertyDefinition[] pda = nodeType.getAutoCreatedPropertyDefinitions();
         for (int i = 0; i &lt; pda.length; i++) {
             PropertyDefinitionImpl pd = (PropertyDefinitionImpl) pda[i];
            node.createChildProperty(pd.getQName(), pd.getRequiredType(), pd);
            node.createChildProperty(pd.unwrap().getName(), pd.getRequiredType(), pd);
         }
 
         // recursively add 'auto-create' child nodes defined in node type
         NodeDefinition[] nda = nodeType.getAutoCreatedNodeDefinitions();
         for (int i = 0; i &lt; nda.length; i++) {
             NodeDefinitionImpl nd = (NodeDefinitionImpl) nda[i];
            node.createChildNode(nd.getQName(), nd,
                    (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
            node.createChildNode(nd.unwrap().getName(), (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
         }
 
         return node;
@@ -570,13 +582,12 @@ public class NodeImpl extends ItemImpl implements Node {
         }
     }
 
    protected void onRedefine(NodeDefId defId) throws RepositoryException {
        NodeDefinitionImpl newDef =
                session.getNodeTypeManager().getNodeDefinition(defId);
    protected void onRedefine(QNodeDefinition def) throws RepositoryException {
        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl newDef =
                session.getNodeTypeManager().getNodeDefinition(def);
         // modify the state of 'this', i.e. the target node
        NodeState thisState = (NodeState) getOrCreateTransientItemState();
        // set id of new definition
        thisState.setDefinitionId(defId);
        getOrCreateTransientItemState();
        // set new definition
         data.setDefinition(newDef);
     }
 
@@ -641,7 +652,7 @@ public class NodeImpl extends ItemImpl implements Node {
             prop = (PropertyImpl) itemMgr.getItem(new PropertyId(thisState.getNodeId(), NameConstants.JCR_MIXINTYPES));
         } else {
             // find definition for the jcr:mixinTypes property and create property
            PropertyDefinitionImpl def = getApplicablePropertyDefinition(
            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def = getApplicablePropertyDefinition(
                     NameConstants.JCR_MIXINTYPES, PropertyType.NAME, true, true);
             prop = createChildProperty(NameConstants.JCR_MIXINTYPES, PropertyType.NAME, def);
         }
@@ -704,13 +715,13 @@ public class NodeImpl extends ItemImpl implements Node {
      *                                      could be found
      * @throws RepositoryException          if another error occurs
      */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>NodeDefinitionImpl</name></type> <name>getApplicableChildNodeDefinition</name><argument_list>(<argument><expr><name>Name</name> <name>nodeName</name></expr></argument>,
    <argument><expr><specifier>protected</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name> <call><name>getApplicableChildNodeDefinition</name><argument_list>(<argument><expr><name>Name</name> <name>nodeName</name></expr></argument>,
                                                                   <argument><expr><name>Name</name> <name>nodeTypeName</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument>, <argument><expr><name>RepositoryException</name> <block>{
         <expr><name>NodeTypeManagerImpl</name> <name>ntMgr</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr></argument>;</argument_list></decl></decl_stmt>
        <decl_stmt><decl><type><name>NodeDef</name></type> <name>cnd</name> <init>= <expr><call><name>getEffectiveNodeType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicableChildNodeDef</name><argument_list>(
        <argument><expr><name>QNodeDefinition</name> <name>cnd</name> <operator>=</operator> <call><name>getEffectiveNodeType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicableChildNodeDef</name><argument_list>(
                 <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>, <argument><expr><call><name><name>ntMgr</name><operator>.</operator><name>getNodeTypeRegistry</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
        <return>return <expr><call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><call><name><name>cnd</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><name>cnd</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -726,12 +737,12 @@ public class NodeImpl extends ItemImpl implements Node {
      *                                      could be found
      * @throws RepositoryException          if another error occurs
      */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>PropertyDefinitionImpl</name></type> <name>getApplicablePropertyDefinition</name><argument_list>(<argument><expr><name>Name</name> <name>propertyName</name></expr></argument>,
    <argument><expr><specifier>protected</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name> <call><name>getApplicablePropertyDefinition</name><argument_list>(<argument><expr><name>Name</name> <name>propertyName</name></expr></argument>,
                                                                      <argument><expr><name>int</name> <name>type</name></expr></argument>,
                                                                      <argument><expr><name>boolean</name> <name>multiValued</name></expr></argument>,
                                                                      <argument><expr><name>boolean</name> <name>exactTypeMatch</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument>, <argument><expr><name>RepositoryException</name> <block>{
        <expr><name>PropDef</name> <name>pd</name></expr></block></expr></argument></throws></expr></argument>;</argument_list></decl></decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>pd</name></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>exactTypeMatch</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>pd</name> <operator>=</operator> <call><name>getEffectiveNodeType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicablePropertyDef</name><argument_list>(
                     <argument><expr><name>propertyName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>multiValued</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">746</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">757</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
                         <expr><name>propertyName</name></expr>, <expr><name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></expr>, <expr><name>multiValued</name></expr>)</block></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></if></if_stmt></block></expr></expr_stmt>
        <return>return <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPropertyDefinition</name><argument_list>(<argument><expr><call><name><name>pd</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPropertyDefinition</name><argument_list>(<argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
     <function><type><specifier>protected</specifier> <name>void</name></type> <name>makePersistent</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidItemStateException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">779</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">790</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
             <expr><call><name><name>persistentState</name><operator>.</operator><name>setNodeTypeName</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
             <comment type="line">// mixin types</comment>
             <call><name><name>persistentState</name><operator>.</operator><name>setMixinTypeNames</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getMixinTypeNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
            <comment type="line">// id of definition</comment>
            <expr_stmt><expr><call><name><name>persistentState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <comment type="line">// child node entries</comment>
             <expr_stmt><expr><call><name><name>persistentState</name><operator>.</operator><name>setChildNodeEntries</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getChildNodeEntries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <comment type="line">// property entries</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">816</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">825</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
         <expr><call><name><name>thisState</name><operator>.</operator><name>setParentId</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <call><name><name>thisState</name><operator>.</operator><name>setNodeTypeName</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setMixinTypeNames</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getMixinTypeNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setChildNodeEntries</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getChildNodeEntries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setPropertyNames</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getPropertyNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setSharedSet</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getSharedSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">902</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">910</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
                 <comment type="line">// or existing mixin's</comment>
                 <expr><name>NodeTypeImpl</name> <name>declaringNT</name> <operator>=</operator> <operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>pd</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entExisting</name><operator>.</operator><name>includesNodeType</name></name><argument_list>(<argument><expr><call><name><name>declaringNT</name><operator>.</operator><name>getQName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>createChildProperty</name><argument_list>(<argument><expr><call><name><name>pd</name><operator>.</operator><name>getQName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>createChildProperty</name><argument_list>(<argument><expr><call><name><name>pd</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">914</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">922</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
                 <comment type="line">// or existing mixin's</comment>
                 <expr><name>NodeTypeImpl</name> <name>declaringNT</name> <operator>=</operator> <operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>nd</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entExisting</name><operator>.</operator><name>includesNodeType</name></name><argument_list>(<argument><expr><call><name><name>declaringNT</name><operator>.</operator><name>getQName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>createChildNode</name><argument_list>(<argument><expr><call><name><name>nd</name><operator>.</operator><name>getQName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nd</name></expr></argument>, <argument><expr><operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>nd</name><operator>.</operator><name>getDefaultPrimaryType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>createChildNode</name><argument_list>(<argument><expr><call><name><name>nd</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>nd</name><operator>.</operator><name>getDefaultPrimaryType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></function>
         </block_content>}</block></constructor> <catch>catch <parameter_list>(<parameter><decl><type><name>RepositoryException</name></type> <name>re</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1021</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1029</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
             <for>for <control>(<init><decl><type><name>Name</name></type> <name>propName</name> <range>: <expr><name>set</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <decl_stmt><decl><type><name>PropertyState</name></type> <name>propState</name> <init>= <expr><operator>(</operator><name>PropertyState</name><operator>)</operator> <call><name><name>stateMgr</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><call><name><name>thisState</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <comment type="line">// check if property has been defined by mixin type (or one of its supertypes)</comment>
                <decl_stmt><decl><type><name>PropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>ntMgr</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>(<argument><expr><call><name><name>propState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>propState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <decl_stmt><decl><type><name>NodeTypeImpl</name></type> <name>declaringNT</name> <init>= <expr><operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>def</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entResulting</name><operator>.</operator><name>includesNodeType</name></name><argument_list>(<argument><expr><call><name><name>declaringNT</name><operator>.</operator><name>getQName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                     <comment type="line">// the resulting effective node type doesn't include the</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1036</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1044</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
                             <expr><call><name>removeChildProperty</name><argument_list>(<argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
                             <continue>continue;</continue>
                         </block_content>}</block></if></if_stmt>
                        <decl_stmt><decl><type><name>PropertyDefinitionImpl</name></type> <name>pdi</name> <init>= <expr><call><name>getApplicablePropertyDefinition</name><argument_list>(
                        <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name> <name>pdi</name> <operator>=</operator> <call><name>getApplicablePropertyDefinition</name><argument_list>(
                                 <argument><expr><name>propName</name></expr></argument>, <argument><expr><call><name><name>propState</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                 <argument><expr><call><name><name>propState</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
                         <if_stmt><if>if <condition>(<expr><call><name><name>pdi</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name>
@@ <operator>-</operator><literal type="number">1050</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1058</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name></expr></condition> <block>{<block_content>
                                                 <expr_stmt><expr><call><name><name>pdi</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr><operator>,</operator>
                                                 <expr><call><name><name>session</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
                                 <comment type="line">// redefine property</comment>
                                <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>pdi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>pdi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                 <comment type="line">// set converted values</comment>
                                 <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                             </block_content>}</block></for></block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1061</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">1069</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
                                                 <expr><call><name><name>pdi</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr>,
                                                 <expr><call><name><name>session</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr>)</block></expr>;</expr_stmt>
                                 <comment type="line">// redefine property</comment>
                                <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>pdi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>pdi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                 <comment type="line">// set converted values</comment>
                                 <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                             </block_content>}</block></else></if_stmt>
                         </block_content>}</block></catch> <if_stmt><else>else <block>{<block_content>
                             <comment type="line">// redefine property</comment>
                            <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>pdi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>pdi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         </block_content>}</block></else></if_stmt>
                     </block_content>}</block></for></block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>ValueFormatException</name></type> <name>vfe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                         <comment type="line">// value conversion failed, remove it</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1085</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1093</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
             <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                 <decl_stmt><decl><type><name>ChildNodeEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <decl_stmt><decl><type><name>NodeState</name></type> <name>nodeState</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>stateMgr</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><call><name><name>nodeState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>itemMgr</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <comment type="line">// check if node has been defined by mixin type (or one of its supertypes)</comment>
                 <decl_stmt><decl><type><name>NodeTypeImpl</name></type> <name>declaringNT</name> <init>= <expr><operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>def</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entResulting</name><operator>.</operator><name>includesNodeType</name></name><argument_list>(<argument><expr><call><name><name>declaringNT</name><operator>.</operator><name>getQName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1099</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">1107</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
                             <expr><call><name>removeChildNode</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
                             <continue>continue;</continue>
                         </block_content>}</block></if></if_stmt>
                        <decl_stmt><decl><type><name>NodeDefinitionImpl</name></type> <name>ndi</name> <init>= <expr><call><name>getApplicableChildNodeDefinition</name><argument_list>(
                        <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name> <name>ndi</name> <operator>=</operator> <call><name>getApplicableChildNodeDefinition</name><argument_list>(
                                 <argument><expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                 <argument><expr><call><name><name>nodeState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
                         <comment type="line">// redefine node</comment>
                        <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>ndi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>ndi</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></for></block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>ConstraintViolationException</name></type> <name>cve</name></decl></parameter>)</parameter_list> <block>{<block_content>
                         <comment type="line">// no suitable definition found for this child node,</comment>
                         <comment type="line">// remove it</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1451</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1459</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
         }</block>
 
         <comment type="line">// Get the applicable child node definition for this node.</comment>
        <name>NodeDefinitionImpl</name> <name>def</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name></type> <name>def</name></decl>;</decl_stmt>
         <try>try <block>{<block_content>
             <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name>getApplicableChildNodeDefinition</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RepositoryException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1493</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1501</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeImpl</name> extends <name>ItemImpl</name> implements <name>Node</name> <block>{
         <expr><call><name><name>session</name><operator>.</operator><name>getValidator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>checkModify</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>Permission</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
 
         <comment type="line">// now do create the child node</comment>
        <return>return <expr><call><name>createChildNode</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><name>nt</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name>createChildNode</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nt</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></catch></try>
 
     <comment type="block" format="javadoc">/**
@@ -1890,7 +1898,7 @@ public class NodeImpl extends ItemImpl implements Node {
         session.getValidator().checkModify(this, options, Permission.NONE);
 
         // (4) check for name collisions
        NodeDefinitionImpl def;
        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl def;
         try {
             def = getApplicableChildNodeDefinition(name, null);
         } catch (RepositoryException re) {
@@ -3677,26 +3685,26 @@ public class NodeImpl extends ItemImpl implements Node {
         }
 
         // get applicable definition for this node using new primary type
        NodeDefId defId;
        QNodeDefinition nodeDef;
         try {
             NodeImpl parent = (NodeImpl) getParent();
            defId = parent.getApplicableChildNodeDefinition(getQName(), ntName).unwrap().getId();
            nodeDef = parent.getApplicableChildNodeDefinition(getQName(), ntName).unwrap();
         } catch (RepositoryException re) {
             String msg = this + ": no applicable definition found in parent node's node type";
             log.debug(msg);
             throw new ConstraintViolationException(msg, re);
         }
 
        if (!defId.equals(state.getDefinitionId())) {
            onRedefine(defId);
        if (!nodeDef.equals(itemMgr.getDefinition(state).unwrap())) {
            onRedefine(nodeDef);
         }
 
        Set&lt;ItemDef&gt; oldDefs = new HashSet&lt;ItemDef&gt;(Arrays.asList(entOld.getAllItemDefs()));
        Set&lt;ItemDef&gt; newDefs = new HashSet&lt;ItemDef&gt;(Arrays.asList(entNew.getAllItemDefs()));
        Set&lt;ItemDef&gt; allDefs = new HashSet&lt;ItemDef&gt;(Arrays.asList(entAll.getAllItemDefs()));
        Set&lt;QItemDefinition&gt; oldDefs = new HashSet&lt;QItemDefinition&gt;(Arrays.asList(entOld.getAllItemDefs()));
        Set&lt;QItemDefinition&gt; newDefs = new HashSet&lt;QItemDefinition&gt;(Arrays.asList(entNew.getAllItemDefs()));
        Set&lt;QItemDefinition&gt; allDefs = new HashSet&lt;QItemDefinition&gt;(Arrays.asList(entAll.getAllItemDefs()));
 
         // added child item definitions
        Set&lt;ItemDef&gt; addedDefs = new HashSet&lt;ItemDef&gt;(newDefs);
        Set&lt;QItemDefinition&gt; addedDefs = new HashSet&lt;QItemDefinition&gt;(newDefs);
         addedDefs.removeAll(oldDefs);
 
         // referential integrity check
@@ -3732,7 +3740,7 @@ public class NodeImpl extends ItemImpl implements Node {
                 PropertyState propState =
                         (PropertyState) stateMgr.getItemState(
                                 new PropertyId(thisState.getNodeId(), propName));
                if (!allDefs.contains(ntReg.getPropDef(propState.getDefinitionId()))) {
                if (!allDefs.contains(itemMgr.getDefinition(propState).unwrap())) {
                     // try to find new applicable definition first and
                     // redefine property if possible
                     try {
@@ -3742,7 +3750,7 @@ public class NodeImpl extends ItemImpl implements Node {
                             removeChildProperty(propName);
                             continue;
                         }
                        PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
                        org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
                                 propName, propState.getType(),
                                 propState.isMultiValued(), false);
                         if (pdi.getRequiredType() != PropertyType.UNDEFINED
@@ -3756,7 +3764,7 @@ public class NodeImpl extends ItemImpl implements Node {
                                                 pdi.getRequiredType(),
                                                 session.getValueFactory());
                                 // redefine property
                                prop.onRedefine(pdi.unwrap().getId());
                                prop.onRedefine(pdi.unwrap());
                                 // set converted values
                                 prop.setValue(values);
                             } else {
@@ -3767,13 +3775,13 @@ public class NodeImpl extends ItemImpl implements Node {
                                                 pdi.getRequiredType(),
                                                 session.getValueFactory());
                                 // redefine property
                                prop.onRedefine(pdi.unwrap().getId());
                                prop.onRedefine(pdi.unwrap());
                                 // set converted values
                                 prop.setValue(value);
                             }
                         } else {
                             // redefine property
                            prop.onRedefine(pdi.unwrap().getId());
                            prop.onRedefine(pdi.unwrap());
                         }
                         // update collection of added definitions
                         addedDefs.remove(pdi.unwrap());
@@ -3800,7 +3808,7 @@ public class NodeImpl extends ItemImpl implements Node {
             ChildNodeEntry entry = list.get(i);
             try {
                 NodeState nodeState = (NodeState) stateMgr.getItemState(entry.getId());
                if (!allDefs.contains(ntReg.getNodeDef(nodeState.getDefinitionId()))) {
                if (!allDefs.contains(itemMgr.getDefinition(nodeState).unwrap())) {
                     // try to find new applicable definition first and
                     // redefine node if possible
                     try {
@@ -3810,11 +3818,11 @@ public class NodeImpl extends ItemImpl implements Node {
                             removeChildNode(entry.getName(), entry.getIndex());
                             continue;
                         }
                        NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
                        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
                                 entry.getName(),
                                 nodeState.getNodeTypeName());
                         // redefine node
                        node.onRedefine(ndi.unwrap().getId());
                        node.onRedefine(ndi.unwrap());
                         // update collection of added definitions
                         addedDefs.remove(ndi.unwrap());
                     } catch (ConstraintViolationException cve) {
@@ -3832,15 +3840,14 @@ public class NodeImpl extends ItemImpl implements Node {
 
         // create items that are defined as auto-created by the new primary node
         // type and at the same time were not present with the old nt
        for (Iterator&lt;ItemDef&gt; iter = addedDefs.iterator(); iter.hasNext();) {
            ItemDef def = iter.next();
        for (QItemDefinition def : addedDefs) {
             if (def.isAutoCreated()) {
                 if (def.definesNode()) {
                    NodeDefinitionImpl ndi = ntMgr.getNodeDefinition(((NodeDef) def).getId());
                    createChildNode(ndi.getQName(), ndi, (NodeTypeImpl) ndi.getDefaultPrimaryType(), null);
                    NodeDefinitionImpl ndi = ntMgr.getNodeDefinition((QNodeDefinition) def);
                    createChildNode(def.getName(), (NodeTypeImpl) ndi.getDefaultPrimaryType(), null);
                 } else {
                    PropertyDefinitionImpl pdi = ntMgr.getPropertyDefinition(((PropDef) def).getId());
                    createChildProperty(pdi.getQName(), pdi.getRequiredType(), pdi);
                    PropertyDefinitionImpl pdi = ntMgr.getPropertyDefinition((QPropertyDefinition) def);
                    createChildProperty(pdi.unwrap().getName(), pdi.getRequiredType(), pdi);
                 }
             }
         }
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeTypeInstanceHandler.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeTypeInstanceHandler.java
index 89e27384a..8832a2a55 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeTypeInstanceHandler.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/NodeTypeInstanceHandler.java
@@ -19,10 +19,10 @@ package org.apache.jackrabbit.core;
 import java.util.Calendar;
 import java.util.Set;
 
import org.apache.jackrabbit.core.nodetype.PropDef;
 import org.apache.jackrabbit.core.state.NodeState;
 import org.apache.jackrabbit.core.value.InternalValue;
 import org.apache.jackrabbit.spi.Name;
import org.apache.jackrabbit.spi.QPropertyDefinition;
 import org.apache.jackrabbit.spi.commons.name.NameConstants;
 
 /**
@@ -60,7 +60,7 @@ public class NodeTypeInstanceHandler {
      * @return the computed values
      */</comment>
     <function><type><specifier>public</specifier> <name><name>InternalValue</name><index>[]</index></name></type> <name>computeSystemGeneratedPropertyValues</name><parameter_list>(<parameter><decl><type><name>NodeState</name></type> <name>parent</name></decl></parameter>, 
                                                                <parameter><decl><type><name>PropDef</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                                                <expr_stmt><expr><name>QPropertyDefinition</name> <name>def</name></expr></expr_stmt>)</block_content> <block>{<block_content>
 
         <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>genValues</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>PropertyImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>PropertyImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b80130ddf</name><operator>..</operator><literal type="number">81f0a9fd8</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>PropertyImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>PropertyImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinition</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>version</name><operator>.</operator><name>VersionException</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>PropertyId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDefId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>Permission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>PropertyState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueHelper</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">137</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>PropertyImpl</name> extends <name>ItemImpl</name> implements <name>Property</name> <block>{
                 <throw>throw <argument_list>new <argument><expr><call><name>InvalidItemStateException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
             }</block></expr></expr_stmt>
             <comment type="line">// copy state from transient state</comment>
            <expr_stmt><expr><call><name><name>persistentState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>persistentState</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>persistentState</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>persistentState</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">162</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">160</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>PropertyImpl</name> extends <name>ItemImpl</name> implements <name>Property</name> <block>{
             <expr><call><name><name>stateMgr</name><operator>.</operator><name>disconnectTransientItemState</name></name><argument_list>(<argument><expr><name>thisState</name></expr></argument>)</argument_list></call></expr>;
         }</block></expr></expr_stmt>
         <comment type="line">// reapply transient changes</comment>
        <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><call><name><name>transientState</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></block></function>
 
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onRedefine</name><parameter_list>(<parameter><decl><type><name>PropDefId</name></type> <name>defId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>PropertyDefinitionImpl</name></type> <name>newDef</name> <init>=
                <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPropertyDefinition</name><argument_list>(<argument><expr><name>defId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// modify the state of 'this', i.e. the target property</comment>
        <decl_stmt><decl><type><name>PropertyState</name></type> <name>thisState</name> <init>= <expr><operator>(</operator><name>PropertyState</name><operator>)</operator> <call><name>getOrCreateTransientItemState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// set id of new definition</comment>
        <expr_stmt><expr><call><name><name>thisState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><name>defId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onRedefine</name><parameter_list>(<parameter><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name></type> <name>newDef</name> <init>=
                <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPropertyDefinition</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>setDefinition</name></name><argument_list>(<argument><expr><name>newDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">433</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">426</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>PropertyImpl</name> extends <name>ItemImpl</name> implements <name>Property</name> <block>{
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>RepositoryException</name>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name>InternalValue</name> <call><name>internalGetValue</name><argument_list>()</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>RepositoryException</name> <block>{
        <expr><name>final</name> <name>PropertyDefinition</name> <name>definition</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</block></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name>isMultiple</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
             <throw>throw <expr><operator>new</operator> <call><name>ValueFormatException</name><argument_list>(
                     <argument><expr><name>this</name> <operator>+</operator> <literal type="string">" is a multi-valued property,"</literal>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ProtectedItemModifier</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ProtectedItemModifier</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0417d2bf8</literal><operator>..</operator><literal type="number">14223228a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ProtectedItemModifier</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ProtectedItemModifier</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">23</literal></expr></argument>,<argument><expr><literal type="number">6</literal> @@</expr></argument></argument_list></call></expr></throw> <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Value</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>retention</name><operator>.</operator><name>RetentionManagerImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessManager</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>ProtectedItemModifier</name> <block>{
         <expr><call><name><name>parentImpl</name><operator>.</operator><name>checkSetProperty</name></name><argument_list>()</argument_list></call></expr>;
 
         <name>NodeTypeImpl</name> <name>nodeType</name> <operator>=</operator> <call><name><name>parentImpl</name><operator>.</operator><name>session</name><operator>.</operator><name>getNodeTypeManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodeType</name><argument_list>(<argument><expr><name>ntName</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>NodeDefinitionImpl</name></type> <name>def</name> <init>= <expr><call><name><name>parentImpl</name><operator>.</operator><name>getApplicableChildNodeDefinition</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ntName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name></type> <name>def</name> <init>= <expr><call><name><name>parentImpl</name><operator>.</operator><name>getApplicableChildNodeDefinition</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ntName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
         <comment type="line">// check for name collisions</comment>
         <comment type="line">// TODO: improve. copied from NodeImpl</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>ProtectedItemModifier</name> <block>{
             }</block></expr></expr_stmt>
         </block_content>}</block></if></if_stmt>
 
        <return>return <expr><call><name><name>parentImpl</name><operator>.</operator><name>createChildNode</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><name>nodeType</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>parentImpl</name><operator>.</operator><name>createChildNode</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nodeType</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <function><type><specifier>protected</specifier> <name>Property</name></type> <name>setProperty</name><parameter_list>(<parameter><decl><type><name>NodeImpl</name></type> <name>parentImpl</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SessionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SessionImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">867239597..511d502bd</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SessionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SessionImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>config</name><operator>.</operator><name>WorkspaceConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>GarbageCollector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>lock</name><operator>.</operator><name>LockManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeManagerImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>persistence</name><operator>.</operator><name>IterablePersistenceManager</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1081</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1080</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SessionImpl</name> extends <name>AbstractSession</name>
         <comment type="line">// check constraints</comment>
         <comment type="line">// get applicable definition of target node at new location</comment>
         <name>NodeTypeImpl</name> <name>nt</name> <operator>=</operator> <operator>(</operator><name>NodeTypeImpl</name><operator>)</operator> <call><name><name>targetNode</name><operator>.</operator><name>getPrimaryNodeType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>NodeDefinitionImpl</name></type> <name>newTargetDef</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name></type> <name>newTargetDef</name></decl>;</decl_stmt>
         <try>try <block>{<block_content>
             <expr_stmt><expr><name>newTargetDef</name> <operator>=</operator> <call><name><name>destParentNode</name><operator>.</operator><name>getApplicableChildNodeDefinition</name></name><argument_list>(<argument><expr><call><name><name>destName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nt</name><operator>.</operator><name>getQName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RepositoryException</name></type> <name>re</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1140</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1139</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SessionImpl</name> extends <name>AbstractSession</name></expr></expr_stmt>
         </block_content>}</block></catch></try>
 
         <comment type="line">// change definition of target</comment>
        <expr_stmt><expr><call><name><name>targetNode</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>newTargetDef</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>targetNode</name><operator>.</operator><name>onRedefine</name></name><argument_list>(<argument><expr><call><name><name>newTargetDef</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java
index efbeb9570..bc6a03950 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/lock/LockManagerImpl.java
@@ -20,7 +20,6 @@ import EDU.oswego.cs.dl.util.concurrent.ReentrantLock;
 import org.apache.commons.collections.map.LinkedMap;
 import org.apache.commons.io.IOUtils;
 import org.apache.jackrabbit.core.id.ItemId;
import org.apache.jackrabbit.core.ItemValidator;
 import org.apache.jackrabbit.core.id.NodeId;
 import org.apache.jackrabbit.core.NodeImpl;
 import org.apache.jackrabbit.core.id.PropertyId;
@@ -34,7 +33,6 @@ import org.apache.jackrabbit.core.cluster.LockEventListener;
 import org.apache.jackrabbit.core.fs.FileSystem;
 import org.apache.jackrabbit.core.fs.FileSystemException;
 import org.apache.jackrabbit.core.fs.FileSystemResource;
import org.apache.jackrabbit.core.nodetype.PropDef;
 import org.apache.jackrabbit.core.observation.EventImpl;
 import org.apache.jackrabbit.core.observation.SynchronousEventListener;
 import org.apache.jackrabbit.core.state.ItemStateException;
@@ -874,7 +872,6 @@ public class LockManagerImpl implements LockManager, SynchronousEventListener,
         SessionImpl editingSession = (SessionImpl) node.getSession();
         WorkspaceImpl wsp = (WorkspaceImpl) editingSession.getWorkspace();
         UpdatableItemStateManager stateMgr = wsp.getItemStateManager();
        ItemValidator helper = new ItemValidator(editingSession.getNodeTypeManager().getNodeTypeRegistry(), wsp.getHierarchyManager(), editingSession);
 
         synchronized (stateMgr) {
             if (stateMgr.inEditMode()) {
@@ -888,9 +885,7 @@ public class LockManagerImpl implements LockManager, SynchronousEventListener,
 
                 PropertyState propState;
                 if (!nodeState.hasPropertyName(NameConstants.JCR_LOCKOWNER)) {
                    PropDef def = helper.findApplicablePropertyDefinition(NameConstants.JCR_LOCKOWNER, PropertyType.STRING, false, nodeState);
                     propState = stateMgr.createNew(NameConstants.JCR_LOCKOWNER, nodeId);
                    propState.setDefinitionId(def.getId());
                     propState.setType(PropertyType.STRING);
                     propState.setMultiValued(false);
                 } else {
@@ -901,9 +896,7 @@ public class LockManagerImpl implements LockManager, SynchronousEventListener,
                 stateMgr.store(nodeState);
 
                 if (!nodeState.hasPropertyName(NameConstants.JCR_LOCKISDEEP)) {
                    PropDef def = helper.findApplicablePropertyDefinition(NameConstants.JCR_LOCKISDEEP, PropertyType.BOOLEAN, false, nodeState);
                     propState = stateMgr.createNew(NameConstants.JCR_LOCKISDEEP, nodeId);
                    propState.setDefinitionId(def.getId());
                     propState.setType(PropertyType.BOOLEAN);
                     propState.setMultiValued(false);
                 } else {
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/EffectiveNodeType.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/EffectiveNodeType.java
index 98f1fbcb2..cd5c3ee34 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/EffectiveNodeType.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/EffectiveNodeType.java
@@ -19,6 +19,9 @@ package org.apache.jackrabbit.core.nodetype;
 import org.apache.jackrabbit.core.value.InternalValue;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.QValueConstraint;
import org.apache.jackrabbit.spi.QItemDefinition;
import org.apache.jackrabbit.spi.QPropertyDefinition;
import org.apache.jackrabbit.spi.QNodeDefinition;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -32,6 +35,8 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.TreeSet;
import java.util.Set;
import java.util.HashSet;
 
 /**
  * An &lt;code&gt;EffectiveNodeType&lt;/code&gt; represents one or more
@@ -51,9 +56,9 @@ public class EffectiveNodeType implements Cloneable {
     // (through inheritance) included node types.
     private final TreeSet&lt;Name&gt; allNodeTypes;
     // map of named item definitions (maps name to list of definitions)
    private final HashMap&lt;Name, List&lt;ItemDef&gt;&gt; namedItemDefs;
    private final HashMap&lt;Name, List&lt;QItemDefinition&gt;&gt; namedItemDefs;
     // list of unnamed item definitions (i.e. residual definitions)
    private final ArrayList&lt;ItemDef&gt; unnamedItemDefs;
    private final ArrayList&lt;QItemDefinition&gt; unnamedItemDefs;
 
     // flag indicating whether any included node type supports orderable child nodes
     private boolean orderableChildNodes;
@@ -67,8 +72,8 @@ public class EffectiveNodeType implements Cloneable {
         mergedNodeTypes = new TreeSet&lt;Name&gt;();
         inheritedNodeTypes = new TreeSet&lt;Name&gt;();
         allNodeTypes = new TreeSet&lt;Name&gt;();
        namedItemDefs = new HashMap&lt;Name, List&lt;ItemDef&gt;&gt;();
        unnamedItemDefs = new ArrayList&lt;ItemDef&gt;();
        namedItemDefs = new HashMap&lt;Name, List&lt;QItemDefinition&gt;&gt;();
        unnamedItemDefs = new ArrayList&lt;QItemDefinition&gt;();
         orderableChildNodes = false;
         primaryItemName = null;
     }
@@ -104,13 +109,13 @@ public class EffectiveNodeType implements Cloneable {
         // map of all item definitions (maps id to definition)
         // used to effectively detect ambiguous child definitions where
         // ambiguity is defined in terms of definition identity
        HashMap&lt;Object, ItemDef&gt; itemDefIds = new HashMap&lt;Object, ItemDef&gt;();
        Set&lt;QItemDefinition&gt; itemDefs = new HashSet&lt;QItemDefinition&gt;();
 
        NodeDef[] cnda = ntd.getChildNodeDefs();
        for (NodeDef aCnda : cnda) {
        QNodeDefinition[] cnda = ntd.getChildNodeDefs();
        for (QNodeDefinition aCnda : cnda) {
             // check if child node definition would be ambiguous within
             // this node type definition
            if (itemDefIds.containsKey(aCnda.getId())) {
            if (itemDefs.contains(aCnda)) {
                 // conflict
                 String msg;
                 if (aCnda.definesResidual()) {
@@ -122,7 +127,7 @@ public class EffectiveNodeType implements Cloneable {
                 log.debug(msg);
                 throw new NodeTypeConflictException(msg);
             } else {
                itemDefIds.put(aCnda.getId(), aCnda);
                itemDefs.add(aCnda);
             }
             if (aCnda.definesResidual()) {
                 // residual node definition
@@ -130,9 +135,9 @@ public class EffectiveNodeType implements Cloneable {
             } else {
                 // named node definition
                 Name name = aCnda.getName();
                List&lt;ItemDef&gt; defs = ent.namedItemDefs.get(name);
                List&lt;QItemDefinition&gt; defs = ent.namedItemDefs.get(name);
                 if (defs == null) {
                    defs = new ArrayList&lt;ItemDef&gt;();
                    defs = new ArrayList&lt;QItemDefinition&gt;();
                     ent.namedItemDefs.put(name, defs);
                 }
                 if (defs.size() &gt; 0) {
@@ -140,7 +145,7 @@ public class EffectiveNodeType implements Cloneable {
                      * there already exists at least one definition with that
                      * name; make sure none of them is auto-create
                      */</comment>
                    <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
                         <if_stmt><if>if <condition>(<expr><call><name><name>aCnda</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>def</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                             <comment type="line">// conflict</comment>
                             <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"There are more than one 'auto-create' item definitions for '"</literal>
@@ <operator>-</operator><literal type="number">153</literal></expr></init></decl>,11 +158,11 @@ public <decl><type ref="prev"/><name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{<block_content>
                 <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>aCnda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></decl></decl_stmt>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>PropDef</name><index>[]</index></name></type> <name>pda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>aPda</name> <range>: <expr><name>pda</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>pda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QPropertyDefinition</name></type> <name>aPda</name> <range>: <expr><name>pda</name></expr></range></decl></init>)</control> <block>{<block_content>
             <comment type="line">// check if property definition would be ambiguous within</comment>
             <comment type="line">// this node type definition</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>itemDefIds</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>aPda</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>itemDefs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>aPda</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <comment type="line">// conflict</comment>
                 <decl_stmt><decl><type><name>String</name></type> <name>msg</name></decl>;</decl_stmt>
                 <if_stmt><if>if <condition>(<expr><call><name><name>aPda</name><operator>.</operator><name>definesResidual</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">169</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">174</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
                 <expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;
                 <throw>throw <argument_list>new <argument><expr><call><name>NodeTypeConflictException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw></block></expr>;</expr_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>itemDefIds</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>aPda</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aPda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>itemDefs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>aPda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
             <if_stmt><if>if <condition>(<expr><call><name><name>aPda</name><operator>.</operator><name>definesResidual</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                 <comment type="line">// residual property definition</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">177</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">182</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
             }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
                 <comment type="line">// named property definition</comment>
                 <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><call><name><name>aPda</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <if_stmt><if>if <condition>(<expr><name>defs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>defs</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>defs</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><call><name><name>ent</name><operator>.</operator><name>namedItemDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>defs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
                 <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">187</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">192</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
                      <expr><operator>*</operator> <name>there</name> <name>already</name> <name>exists</name> <name>at</name> <name>least</name> <name>one</name> <name>definition</name> <name>with</name> <name>that</name>
                      <operator>*</operator> <name>name</name></expr>; <name>make</name> <name>sure</name> <name>none</name> <name>of</name> <name>them</name> <name>is</name> <name>auto</name><operator>-</operator><name>create</name>
                      <operator>*</operator><operator>/</operator></block></expr></expr_stmt>
                    <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
                         <if_stmt><if>if <condition>(<expr><call><name><name>aPda</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>def</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                             <comment type="line">// conflict</comment>
                             <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"There are more than one 'auto-create' item definitions for '"</literal>
@@ <operator>-</operator><literal type="number">276</literal></expr></init></decl>,280 +281,280 @@ public <decl><type ref="prev"/><name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{<block_content>
         <return>return <expr><call><name><name>allNodeTypes</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[<expr><call><name><name>allNodeTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></decl></decl_stmt>
 
    <function><type><specifier>public</specifier> <name><name>ItemDef</name><index>[]</index></name></type> <name>getAllItemDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QItemDefinition</name><index>[]</index></name></type> <name>getAllItemDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ItemDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QItemDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>itemDefs</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>itemDefs</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>itemDefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>unnamedItemDefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ItemDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QItemDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>ItemDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QItemDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>ItemDef</name><index>[]</index></name></type> <name>getNamedItemDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QItemDefinition</name><index>[]</index></name></type> <name>getNamedItemDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ItemDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QItemDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>itemDefs</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>itemDefs</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>itemDefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ItemDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QItemDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>ItemDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QItemDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>ItemDef</name><index>[]</index></name></type> <name>getUnnamedItemDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QItemDefinition</name><index>[]</index></name></type> <name>getUnnamedItemDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ItemDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QItemDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>ItemDef</name><index>[<expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QItemDefinition</name><index>[<expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNamedItemDef</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
    <function><type><specifier>public</specifier> <name><name>ItemDef</name><index>[]</index></name></type> <name>getNamedItemDefs</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>public</specifier> <name><name>QItemDefinition</name><index>[]</index></name></type> <name>getNamedItemDefs</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>defs</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ItemDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QItemDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>ItemDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QItemDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
    <function><type><specifier>public</specifier> <name><name>NodeDef</name><index>[]</index></name></type> <name>getAllNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QNodeDefinition</name><index>[]</index></name></type> <name>getAllNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>unnamedItemDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>unnamedItemDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name><range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name><range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>NodeDef</name><index>[]</index></name></type> <name>getNamedNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QItemDefinition</name><index>[]</index></name></type> <name>getNamedNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>NodeDef</name><index>[]</index></name></type> <name>getNamedNodeDefs</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>public</specifier> <name><name>QItemDefinition</name><index>[]</index></name></type> <name>getNamedNodeDefs</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>NodeDef</name><index>[]</index></name></type> <name>getUnnamedNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QNodeDefinition</name><index>[]</index></name></type> <name>getUnnamedNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>unnamedItemDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>unnamedItemDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>NodeDef</name><index>[]</index></name></type> <name>getAutoCreateNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QNodeDefinition</name><index>[]</index></name></type> <name>getAutoCreateNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <comment type="line">// since auto-create items must have a name,</comment>
         <comment type="line">// we're only searching the named item definitions</comment>
         <if_stmt><if>if <condition>(<expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>def</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>PropDef</name><index>[]</index></name></type> <name>getAllPropDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>getAllPropDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>unnamedItemDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>unnamedItemDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name><range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name><range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PropDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>PropDef</name><index>[]</index></name></type> <name>getNamedPropDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>getNamedPropDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PropDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>PropDef</name><index>[]</index></name></type> <name>getNamedPropDefs</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>public</specifier> <name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>getNamedPropDefs</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PropDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>PropDef</name><index>[]</index></name></type> <name>getUnnamedPropDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>getUnnamedPropDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>unnamedItemDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>unnamedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>unnamedItemDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PropDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>PropDef</name><index>[]</index></name></type> <name>getAutoCreatePropDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>getAutoCreatePropDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <comment type="line">// since auto-create items must have a name,</comment>
         <comment type="line">// we're only searching the named item definitions</comment>
         <if_stmt><if>if <condition>(<expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>def</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PropDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>PropDef</name><index>[]</index></name></type> <name>getMandatoryPropDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>getMandatoryPropDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <comment type="line">// since mandatory items must have a name,</comment>
         <comment type="line">// we're only searching the named item definitions</comment>
         <if_stmt><if>if <condition>(<expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>def</name><operator>.</operator><name>isMandatory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PropDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
    <function><type><specifier>public</specifier> <name><name>NodeDef</name><index>[]</index></name></type> <name>getMandatoryNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QNodeDefinition</name><index>[]</index></name></type> <name>getMandatoryNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <comment type="line">// since mandatory items must have a name,</comment>
         <comment type="line">// we're only searching the named item definitions</comment>
         <if_stmt><if>if <condition>(<expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>def</name><operator>.</operator><name>isMandatory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
         </block_content>}</block></for>
         <if_stmt><if>if <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDef</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>defs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>defs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></for>
 
     <comment type="block" format="javadoc">/**
@@ -591,7 +596,7 @@ public class EffectiveNodeType implements Cloneable {
      *                                      by the the specified values
      * @throws RepositoryException          if another error occurs
      */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkSetPropertyValueConstraints</name><argument_list>(<argument><expr><name>PropDef</name> <name>pd</name></expr></argument>,
    <argument><expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>checkSetPropertyValueConstraints</name><argument_list>(<argument><expr><name>QPropertyDefinition</name> <name>pd</name></expr></argument>,
                                                         <argument><expr><name><name>InternalValue</name><index>[]</index></name> <name>values</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument>, <argument><expr><name>RepositoryException</name> <block>{</block></expr></argument>
         <comment type="line">// check multi-value flag</comment>
@<argument>@ <expr><operator>-</operator><literal type="number">661</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">666</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>EffectiveNodeType</name> implements <name>Cloneable</name></expr></argument></throws> <block>{<block_content>
                 <throw>throw <expr><operator>new</operator> <call><name>ConstraintViolationException</name><argument_list>(<argument><expr><name>nodeTypeName</name> <operator>+</operator> <literal type="string">" is mixin."</literal></expr></argument>)</argument_list></call></expr>;</throw>
             </block_content>}</block></expr></argument></argument_list></decl></decl_stmt>
         </block_content>}</block></for>
        <decl_stmt><decl><type><name>NodeDef</name></type> <name>nd</name> <init>= <expr><call><name>getApplicableChildNodeDef</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QItemDefinition</name></type> <name>nd</name> <init>= <expr><call><name>getApplicableChildNodeDef</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>nd</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
             <throw>throw <expr><operator>new</operator> <call><name>ConstraintViolationException</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">" is protected"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">683</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">688</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument></throws></expr> <if_stmt><if>if no applicable child node definition
      *                                      could be found
      */
    public NodeDef getApplicableChildNodeDef<condition>(<expr><name>Name</name> <name>name</name></expr><operator>,</operator> <expr><name>Name</name> <name>nodeTypeName</name></expr><operator>,</operator>
    <expr><specifier>public</specifier> <name>QNodeDefinition</name> <call><name>getApplicableChildNodeDef</name><argument_list>(<argument><expr><name>Name</name> <name>name</name></expr></argument>, <argument><expr><name>Name</name> <name>nodeTypeName</name></expr></argument>,
                                              <argument><expr><name>NodeTypeRegistry</name> <name>ntReg</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>NoSuchNodeTypeException</name></expr></argument>, <argument><expr><name>ConstraintViolationException</name> <block>{
         <expr><name>EffectiveNodeType</name> <name>entTarget</name></expr></block></expr></argument></throws></expr></condition><empty_stmt>;</empty_stmt></if></if_stmt>
@@ <operator>-</operator><literal type="number">694</literal><operator>,</operator><literal type="number">10</literal> <operator>+</operator><literal type="number">699</literal><operator>,</operator><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
         }</block></block>
 
         <comment type="line">// try named node definitions first</comment>
        <name><name>ItemDef</name><index>[]</index></name> <name>defs</name> <operator>=</operator> <call><name>getNamedItemDefs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QItemDefinition</name><index>[]</index></name></type> <name>defs</name> <init>= <expr><call><name>getNamedItemDefs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>NodeDef</name></type> <name>nd</name> <init>= <expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>def</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>QNodeDefinition</name></type> <name>nd</name> <init>= <expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>def</name></expr></init></decl>;</decl_stmt>
                 <decl_stmt><decl><type><name><name>Name</name><index>[]</index></name></type> <name>types</name> <init>= <expr><call><name><name>nd</name><operator>.</operator><name>getRequiredPrimaryTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <comment type="line">// node definition with that name exists</comment>
                 <if_stmt><if>if <condition>(<expr><name>entTarget</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>types</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">715</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">720</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
 
         <comment type="line">// no item with that name defined;</comment>
         <comment type="line">// try residual node definitions</comment>
        <expr><name><name>NodeDef</name><index>[]</index></name> <name>nda</name> <operator>=</operator> <call><name>getUnnamedNodeDefs</name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
        <for>for <control>(<init><decl><type><name>NodeDef</name></type> <name>nd</name> <range>: <expr><name>nda</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>nda</name> <init>= <expr><call><name>getUnnamedNodeDefs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QNodeDefinition</name></type> <name>nd</name> <range>: <expr><name>nda</name></expr></range></decl></init>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><name>entTarget</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>nd</name><operator>.</operator><name>getRequiredPrimaryTypes</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                 <comment type="line">// check 'required primary types' constraint</comment>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entTarget</name><operator>.</operator><name>includesNodeTypes</name></name><argument_list>(<argument><expr><call><name><name>nd</name><operator>.</operator><name>getRequiredPrimaryTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">755</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">760</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument></throws></expr> <if_stmt><if>if no applicable property definition
      *                                      could be found
      */
    public PropDef getApplicablePropertyDef<condition>(<expr><name>Name</name> <name>name</name></expr><operator>,</operator> <expr><name>int</name> <name>type</name></expr><operator>,</operator>
    <expr><specifier>public</specifier> <name>QPropertyDefinition</name> <call><name>getApplicablePropertyDef</name><argument_list>(<argument><expr><name>Name</name> <name>name</name></expr></argument>, <argument><expr><name>int</name> <name>type</name></expr></argument>,
                                             <argument><expr><name>boolean</name> <name>multiValued</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>ConstraintViolationException</name> <block>{
         <comment type="line">// try named property definitions first</comment>
        <expr><name>PropDef</name> <name>match</name> <operator>=</operator>
        <name>QPropertyDefinition</name> <name>match</name> <operator>=</operator>
                 <call><name>getMatchingPropDef</name><argument_list>(<argument><expr><call><name>getNamedPropDefs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>multiValued</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></condition><empty_stmt>;</empty_stmt></if></if_stmt></block></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>match</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <return>return <expr><name>match</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">797</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">802</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument></throws></expr> <if_stmt><if>if no applicable property definition
      *                                      could be found
      */
    public PropDef getApplicablePropertyDef<condition>(<expr><name>Name</name> <name>name</name></expr><operator>,</operator> <expr><name>int</name> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
    <function><type><specifier>public</specifier> <name>QPropertyDefinition</name></type> <name>getApplicablePropertyDef</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
             <throws>throws <argument><expr><name>ConstraintViolationException</name></expr></argument></throws> <block>{<block_content>
         <comment type="line">// try named property definitions first</comment>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>match</name> <init>= <expr><call><name>getMatchingPropDef</name><argument_list>(<argument><expr><call><name>getNamedPropDefs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>match</name> <init>= <expr><call><name>getMatchingPropDef</name><argument_list>(<argument><expr><call><name>getNamedPropDefs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>match</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <return>return <expr><name>match</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">816</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">821</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
         <throw>throw <argument_list>new <argument><expr><call><name>ConstraintViolationException</name><argument_list>(<argument><expr><literal type="string">"no matching property definition found for "</literal> <operator>+</operator> <name>name</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
     }</block></expr></expr_stmt>
 
    <function><type><specifier>private</specifier> <name>PropDef</name></type> <name>getMatchingPropDef</name><parameter_list>(<parameter><decl><type><name><name>PropDef</name><index>[]</index></name></type> <name>defs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>match</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>pd</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
    <function><type><specifier>private</specifier> <name>QPropertyDefinition</name></type> <name>getMatchingPropDef</name><parameter_list>(<parameter><decl><type><name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>defs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>match</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QPropertyDefinition</name></type> <name>pd</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>int</name></type> <name>reqType</name> <init>= <expr><call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <comment type="line">// match type</comment>
             <if_stmt><if>if <condition>(<expr><name>reqType</name> <operator>==</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name>
@@ <operator>-</operator><literal type="number">851</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">856</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name></expr></condition> <block>{<block_content>
         <return>return <expr><name>match</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><specifier>private</specifier> <name>PropDef</name></type> <name>getMatchingPropDef</name><argument_list>(<argument><expr><name><name>PropDef</name><index>[]</index></name> <name>defs</name></expr></argument>, <argument><expr><name>int</name> <name>type</name></expr></argument>,
    <argument><expr><specifier>private</specifier> <name>QPropertyDefinition</name> <call><name>getMatchingPropDef</name><argument_list>(<argument><expr><name><name>QPropertyDefinition</name><index>[]</index></name> <name>defs</name></expr></argument>, <argument><expr><name>int</name> <name>type</name></expr></argument>,
                                        <argument><expr><name>boolean</name> <name>multiValued</name></expr></argument>)</argument_list></call> <block>{
        <expr><name>PropDef</name> <name>match</name> <operator>=</operator> <literal type="null">null</literal></expr>;</block></expr></argument></argument_list></decl></decl_stmt>
        <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>pd</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>match</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QPropertyDefinition</name></type> <name>pd</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>int</name></type> <name>reqType</name> <init>= <expr><call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <comment type="line">// match type</comment>
             <if_stmt><if>if <condition>(<expr><name>reqType</name> <operator>==</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name>
@@ <operator>-</operator><literal type="number">886</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">891</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name></expr></condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator> <name>as</name> <name>there</name> <name>might</name> <name>be</name> <name>multiple</name> <name>definitions</name> <name>with</name> <name>the</name> <name>same</name> <name>name</name> <name>and</name> <name>we</name>
          <operator>*</operator> <name>don</name><literal type="char">'t know which one is applicable, we check all of them
          */
        ItemDef[] defs = getNamedItemDefs(name);
        QItemDefinition[] defs = getNamedItemDefs(name);
         if (defs != null) {
            for (ItemDef def : defs) {
            for (QItemDefinition def : defs) {
                 if (def.isMandatory()) {
                     throw new ConstraintViolationException("can'</literal><name>t</name> <name>remove</name> <name>mandatory</name> <name>item</name><literal type="string">");
                 }
@@ -908,9 +913,9 @@ public class EffectiveNodeType implements Cloneable {
          * as there might be multiple definitions with the same name and we
          * don't know which one is applicable, we check all of them
          */
        ItemDef[] defs = getNamedNodeDefs(name);
        QItemDefinition[] defs = getNamedNodeDefs(name);
         if (defs != null) {
            for (ItemDef def : defs) {
            for (QItemDefinition def : defs) {
                 if (def.isMandatory()) {
                     throw new ConstraintViolationException("</literal><name>can</name><literal type="char">'t remove mandatory node");
                 }
@@ -930,9 +935,9 @@ public class EffectiveNodeType implements Cloneable {
          * as there might be multiple definitions with the same name and we
          * don'</literal><name>t</name> <name>know</name> <name>which</name> <name>one</name> <name>is</name> <name>applicable</name></expr><operator>,</operator> <expr><name>we</name> <name>check</name> <name>all</name> <name>of</name> <name>them</name>
          <operator>*</operator><operator>/</operator>
        <name><name>ItemDef</name><index>[]</index></name> <name>defs</name> <operator>=</operator> <call><name>getNamedPropDefs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>QItemDefinition</name><index>[]</index></name></type> <name>defs</name> <init>= <expr><call><name>getNamedPropDefs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>defs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>isMandatory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                     <throw>throw <expr><operator>new</operator> <call><name>ConstraintViolationException</name><argument_list>(<argument><expr><literal type="string">"can't remove mandatory property"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                 </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">992</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">997</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
         }</block>
 
         <comment type="line">// named item definitions</comment>
        <name><name>ItemDef</name><index>[]</index></name> <name>defs</name> <operator>=</operator> <call><name><name>other</name><operator>.</operator><name>getNamedItemDefs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QItemDefinition</name><index>[]</index></name></type> <name>defs</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>getNamedItemDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><call><name>includesNodeType</name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <comment type="line">// ignore redundant definitions</comment>
                 <continue>continue;</continue>
             </block_content>}</block></if></if_stmt>
             <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><call><name><name>def</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>existingDefs</name> <init>= <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>existingDefs</name> <init>= <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><name>existingDefs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><call><name><name>existingDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                     <comment type="line">// there already exists at least one definition with that name</comment>
                    <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>existingDef</name> <range>: <expr><name>existingDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>existingDef</name> <range>: <expr><name>existingDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
                         <comment type="line">// make sure none of them is auto-create</comment>
                         <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>existingDef</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                             <comment type="line">// conflict</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1020</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1025</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
                         <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>existingDef</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                             <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                 <comment type="line">// property definition</comment>
                                <decl_stmt><decl><type><name>PropDef</name></type> <name>pd</name> <init>= <expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>def</name></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>PropDef</name></type> <name>epd</name> <init>= <expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>existingDef</name></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>pd</name> <init>= <expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>def</name></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>epd</name> <init>= <expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>existingDef</name></expr></init></decl>;</decl_stmt>
                                 <comment type="line">// compare type &amp; multiValued flag</comment>
                                 <if_stmt><if>if <condition>(<expr><call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>epd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call>
                                         <operator>&amp;&amp;</operator> <call><name><name>pd</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>epd</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1051</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1056</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
                     }</block></expr></expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>existingDefs</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>existingDefs</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>namedItemDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>existingDefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
             <expr_stmt><expr><call><name><name>existingDefs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1059</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">1064</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
 
         <comment type="line">// residual item definitions</comment>
         <expr><name>defs</name> <operator>=</operator> <call><name><name>other</name><operator>.</operator><name>getUnnamedItemDefs</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
        <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>def</name> <range>: <expr><name>defs</name></expr></range></decl></init>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><call><name>includesNodeType</name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <comment type="line">// ignore redundant definitions</comment>
                 <continue>continue;</continue>
             </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>ItemDef</name></type> <name>existing</name> <range>: <expr><name>unnamedItemDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QItemDefinition</name></type> <name>existing</name> <range>: <expr><name>unnamedItemDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <comment type="line">// compare with existing definition</comment>
                 <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>existing</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>definesNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                         <comment type="line">// property definition</comment>
                        <decl_stmt><decl><type><name>PropDef</name></type> <name>pd</name> <init>= <expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>def</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>PropDef</name></type> <name>epd</name> <init>= <expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>existing</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>pd</name> <init>= <expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>def</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>epd</name> <init>= <expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>existing</name></expr></init></decl>;</decl_stmt>
                         <comment type="line">// compare type &amp; multiValued flag</comment>
                         <if_stmt><if>if <condition>(<expr><call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>epd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call>
                                 <operator>&amp;&amp;</operator> <call><name><name>pd</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>epd</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1085</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1090</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>EffectiveNodeType</name> implements <name>Cloneable</name> <block>{
                         }</block></expr></expr_stmt>
                     </block_content>}</block></if> <else>else <block>{<block_content>
                         <comment type="line">// child node definition</comment>
                        <decl_stmt><decl><type><name>NodeDef</name></type> <name>nd</name> <init>= <expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>def</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>NodeDef</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>existing</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>QNodeDefinition</name></type> <name>nd</name> <init>= <expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>def</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>QNodeDefinition</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>existing</name></expr></init></decl>;</decl_stmt>
                         <comment type="line">// compare required &amp; default primary types</comment>
                         <if_stmt><if>if <condition>(<expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>nd</name><operator>.</operator><name>getRequiredPrimaryTypes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>end</name><operator>.</operator><name>getRequiredPrimaryTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                 <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>nd</name><operator>.</operator><name>getDefaultPrimaryType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1146</literal><operator>,</operator><literal type="number">8</literal> <operator>+</operator><literal type="number">1151</literal><operator>,</operator><literal type="number">8</literal> @@ <specifier>public</specifier> class <name>EffectiveNodeType</name> implements <name>Cloneable</name></expr></condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>clone</name><operator>.</operator><name>inheritedNodeTypes</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>inheritedNodeTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>clone</name><operator>.</operator><name>allNodeTypes</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>allNodeTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <for>for <control>(<init><decl><type><name>Name</name></type> <name>name</name> <range>: <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>clone</name><operator>.</operator><name>namedItemDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ItemDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>namedItemDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>clone</name><operator>.</operator><name>namedItemDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QItemDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><call><name><name>clone</name><operator>.</operator><name>unnamedItemDefs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>unnamedItemDefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>clone</name><operator>.</operator><name>orderableChildNodes</name></name> <operator>=</operator> <name>orderableChildNodes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDef</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDef</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">994df7088</literal><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDef</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">97</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>

<comment type="block" format="javadoc">/**
 * &lt;code&gt;ItemDef&lt;/code&gt; is the internal representation of
 * an item definition. It refers to &lt;code&gt;Name&lt;/code&gt;s only
 * and is thus isolated from session-specific namespace mappings.
 *
 * @see javax.jcr.nodetype.ItemDefinition
 */</comment>
<interface><specifier>public</specifier> interface <name>ItemDef</name> <block>{

    <decl_stmt><decl><type><name><name>ItemDef</name><index>[]</index></name></type> <name>EMPTY_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>ItemDef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The special wildcard name used as the name of residual item definitions.
     */</comment>
    <decl_stmt><decl><type><name>Name</name></type> <name>ANY_NAME</name> <init>= <expr><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Gets the name of the child item.
     *
     * @return the name of the child item.
     */</comment>
    <function_decl><type><name>Name</name></type> <name>getName</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Gets the name of the declaring node type.
     *
     * @return the name of the declaring node type.
     */</comment>
    <function_decl><type><name>Name</name></type> <name>getDeclaringNodeType</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Determines whether the item is 'autoCreated'.
     *
     * @return the 'autoCreated' flag.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isAutoCreated</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Gets the 'onParentVersion' attribute of the item.
     *
     * @return the 'onParentVersion' attribute.
     */</comment>
    <function_decl><type><name>int</name></type> <name>getOnParentVersion</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Determines whether the item is 'protected'.
     *
     * @return the 'protected' flag.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isProtected</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Determines whether the item is 'mandatory'.
     *
     * @return the 'mandatory' flag.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isMandatory</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Determines whether this item definition defines a residual set of
     * child items. This is equivalent to calling
     * &lt;code&gt;getName().equals(ANY_NAME)&lt;/code&gt;.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if this definition defines a residual set;
     *         &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>definesResidual</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Determines whether this item definition defines a node.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if this is a node definition;
     *         &lt;code&gt;false&lt;/code&gt; otherwise (i.e. it is a property definition).
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>definesNode</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDefImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDefImpl</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">14bc3c8f1</literal><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDefImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">235</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QItemDefinition</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>version</name><operator>.</operator><name>OnParentVersionAction</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This abstract class implements the &lt;code&gt;ItemDef&lt;/code&gt;
 * interface and additionally provides setter methods for the
 * various item definition attributes.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ItemDefImpl</name> <super_list><implements>implements <super><name>ItemDef</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The name of the child item.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Name</name></type> <name>name</name> <init>= <expr><name><name>ItemDef</name><operator>.</operator><name>ANY_NAME</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The name of the declaring node type.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Name</name></type> <name>declaringNodeType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The 'autoCreated' flag.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>autoCreated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The 'onParentVersion' attribute.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>onParentVersion</name> <init>= <expr><name><name>OnParentVersionAction</name><operator>.</operator><name>COPY</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The 'protected' flag.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>writeProtected</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The 'mandatory' flag.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mandatory</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>ItemDefImpl</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>ItemDefImpl</name><parameter_list>(<parameter><decl><type><name>QItemDefinition</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>declaringNodeType</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>autoCreated</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>onParentVersion</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>getOnParentVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>writeProtected</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mandatory</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>isMandatory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <comment type="block" format="javadoc">/**
     * Sets the name of declaring node type.
     *
     * @param declaringNodeType name of the declaring node type (must not be
     *                          &lt;code&gt;null&lt;/code&gt;)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDeclaringNodeType</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>declaringNodeType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>declaringNodeType</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"declaringNodeType can not be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>declaringNodeType</name></name> <operator>=</operator> <name>declaringNodeType</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the name of the child item.
     *
     * @param name name of child item (must not be  &lt;code&gt;null&lt;/code&gt;)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"name can not be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'autoCreated' flag.
     *
     * @param autoCreated a &lt;code&gt;boolean&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoCreated</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>autoCreated</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>autoCreated</name></name> <operator>=</operator> <name>autoCreated</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'onParentVersion' attribute.
     *
     * @param onParentVersion any of the following constants:
     * &lt;UL&gt;
     *    &lt;LI&gt;&lt;code&gt;OnParentVersionAction.COPY&lt;/code&gt;
     *    &lt;LI&gt;&lt;code&gt;OnParentVersionAction.VERSION&lt;/code&gt;
     *    &lt;LI&gt;&lt;code&gt;OnParentVersionAction.INITIALIZE&lt;/code&gt;
     *    &lt;LI&gt;&lt;code&gt;OnParentVersionAction.COMPUTE&lt;/code&gt;
     *    &lt;LI&gt;&lt;code&gt;OnParentVersionAction.IGNORE&lt;/code&gt;
     *    &lt;LI&gt;&lt;code&gt;OnParentVersionAction.ABORT&lt;/code&gt;
     * &lt;/UL&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnParentVersion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>onParentVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onParentVersion</name></name> <operator>=</operator> <name>onParentVersion</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'protected' flag.
     *
     * @param writeProtected a &lt;code&gt;boolean&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProtected</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>writeProtected</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>writeProtected</name></name> <operator>=</operator> <name>writeProtected</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'mandatory' flag.
     *
     * @param mandatory a &lt;code&gt;boolean&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMandatory</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>mandatory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mandatory</name></name> <operator>=</operator> <name>mandatory</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">//--------------------------------------------------------------&lt; ItemDef &gt;</comment>
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>Name</name></type> <name>getDeclaringNodeType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>declaringNodeType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>Name</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAutoCreated</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>autoCreated</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getOnParentVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>onParentVersion</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isProtected</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>writeProtected</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMandatory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mandatory</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>definesResidual</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ItemDef</name><operator>.</operator><name>ANY_NAME</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//-------------------------------------------&lt; java.lang.Object overrides &gt;</comment>
    <comment type="block" format="javadoc">/**
     * Compares two item definitions for equality. Returns &lt;code&gt;true&lt;/code&gt;
     * if the given object is an item defintion and has the same attributes
     * as this item definition.
     *
     * @param obj the object to compare this item definition with
     * @return &lt;code&gt;true&lt;/code&gt; if the object is equal to this item definition,
     *         &lt;code&gt;false&lt;/code&gt; otherwise
     * @see Object#equals(Object)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>ItemDefImpl</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ItemDefImpl</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>ItemDefImpl</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>declaringNodeType</name> <operator>==</operator> <literal type="null">null</literal></expr>
                    ?</condition><then> <expr><name><name>other</name><operator>.</operator><name>declaringNodeType</name></name> <operator>==</operator> <literal type="null">null</literal></expr>
                    </then><else>: <expr><call><name><name>declaringNodeType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>declaringNodeType</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator>
                    <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>other</name><operator>.</operator><name>name</name></name> <operator>==</operator> <literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator>
                    <operator>&amp;&amp;</operator> <name>autoCreated</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>autoCreated</name></name>
                    <operator>&amp;&amp;</operator> <name>onParentVersion</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>onParentVersion</name></name>
                    <operator>&amp;&amp;</operator> <name>writeProtected</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>writeProtected</name></name>
                    <operator>&amp;&amp;</operator> <name>mandatory</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>mandatory</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns zero to satisfy the Object equals/hashCode contract.
     * This class is mutable and not meant to be used as a hash key.
     *
     * @return always zero
     * @see Object#hashCode()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDefinitionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDefinitionImpl</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>edf3332ec</name><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>ItemDefinitionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">181</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>ItemDefinition</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NoSuchNodeTypeException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeType</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class implements the &lt;code&gt;ItemDefinition&lt;/code&gt; interface.
 * All method calls are delegated to the wrapped {@link ItemDef},
 * performing the translation from &lt;code&gt;Name&lt;/code&gt;s to JCR names
 * (and vice versa) where necessary.
 */</comment>
<class><specifier>abstract</specifier> class <name>ItemDefinitionImpl</name> <super_list><implements>implements <super><name>ItemDefinition</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Logger instance for this class
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ItemDefinitionImpl</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Literal for 'any name'.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ANY_NAME</name> <init>= <expr><literal type="string">"*"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The node type manager of this session.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>NodeTypeManagerImpl</name></type> <name>ntMgr</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The name/path resolver used to translate &lt;code&gt;Name&lt;/code&gt;s to JCR name
     * strings.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>NamePathResolver</name></type> <name>resolver</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The wrapped item definition.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>ItemDef</name></type> <name>itemDef</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Package private constructor
     *
     * @param itemDef    item definition
     * @param ntMgr      node type manager
     * @param resolver   name resolver
     */</comment>
    <constructor><name>ItemDefinitionImpl</name><parameter_list>(<parameter><decl><type><name>ItemDef</name></type> <name>itemDef</name></decl></parameter>, <parameter><decl><type><name>NodeTypeManagerImpl</name></type> <name>ntMgr</name></decl></parameter>,
                       <parameter><decl><type><name>NamePathResolver</name></type> <name>resolver</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>itemDef</name></name> <operator>=</operator> <name>itemDef</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ntMgr</name></name> <operator>=</operator> <name>ntMgr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resolver</name></name> <operator>=</operator> <name>resolver</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Checks whether this is a residual item definition.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if this is a residual item definition
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>definesResidual</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>itemDef</name><operator>.</operator><name>definesResidual</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the &lt;code&gt;Name&lt;/code&gt; of the child item. It is an error to
     * call this method if this is a residual item definition.
     *
     * @return the &lt;code&gt;Name&lt;/code&gt; of the child item.
     * @see #getName()
     */</comment>
    <function><type><specifier>public</specifier> <name>Name</name></type> <name>getQName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>itemDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//-------------------------------------------------------&lt; ItemDefinition &gt;</comment>
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>NodeType</name></type> <name>getDeclaringNodeType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ntMgr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>ntMgr</name><operator>.</operator><name>getNodeType</name></name><argument_list>(<argument><expr><call><name><name>itemDef</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchNodeTypeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// should never get here</comment>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"declaring node type does not exist"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>itemDef</name><operator>.</operator><name>definesResidual</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>ANY_NAME</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <try>try <block>{<block_content>
                <return>return <expr><call><name><name>resolver</name><operator>.</operator><name>getJCRName</name></name><argument_list>(<argument><expr><call><name><name>itemDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NamespaceException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// should never get here</comment>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"encountered unregistered namespace in item name"</literal></expr></argument>,
                        <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// not correct, but an acceptable fallback</comment>
                <return>return <expr><call><name><name>itemDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getOnParentVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>itemDef</name><operator>.</operator><name>getOnParentVersion</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAutoCreated</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>itemDef</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMandatory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>itemDef</name><operator>.</operator><name>isMandatory</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isProtected</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>itemDef</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>ItemDefinitionImpl</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>itemDef</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ItemDefinitionImpl</name><operator>)</operator> <name>o</name><operator>)</operator><operator>.</operator><name>itemDef</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>itemDef</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDef</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDef</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>e19c2c54a</name><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDef</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">59</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>

<comment type="block" format="javadoc">/**
 * &lt;code&gt;NodeDef&lt;/code&gt; is the internal representation of
 * a node definition. It refers to &lt;code&gt;Name&lt;/code&gt;s only
 * and is thus isolated from session-specific namespace mappings.
 *
 * @see javax.jcr.nodetype.NodeDefinition
 */</comment>
<interface><specifier>public</specifier> interface <name>NodeDef</name> <super_list><extends>extends <super><name>ItemDef</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><name><name>NodeDef</name><index>[]</index></name></type> <name>EMPTY_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>NodeDef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Returns an identifier for this node definition.
     *
     * @return an identifier for this node definition.
     */</comment>
    <function_decl><type><name>NodeDefId</name></type> <name>getId</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the name of the default primary type.
     *
     * @return the name of the default primary type.
     */</comment>
    <function_decl><type><name>Name</name></type> <name>getDefaultPrimaryType</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the array of names of the required primary types.
     *
     * @return the array of names of the required primary types.
     */</comment>
    <function_decl><type><name><name>Name</name><index>[]</index></name></type> <name>getRequiredPrimaryTypes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Reports whether this node can have same-name siblings.
     *
     * @return the 'allowsSameNameSiblings' flag.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>allowsSameNameSiblings</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefId</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefId</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bb0bac200</name><operator>..</operator><name>ac947b724</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefId</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefId</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <operator>&lt;</operator><name>code</name><operator>&gt;</operator><name><name>NodeDefId</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name> <name>uniquely</name> <name>identifies</name> <name><name>a</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><name><name>NodeDef</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name> <name>in</name> <name>the</name>
  <operator>*</operator> <name>node</name> <name>type</name> <name><name>registry</name><operator>.</operator></name>
  *<operator>/</operator>
<specifier>public</specifier> <name>class</name> <name>NodeDefId</name> implements <name>Serializable</name> <block>{
<expr><name>class</name> <name>NodeDefId</name> implements <name>Serializable</name> <block>{
 
     <comment type="block" format="javadoc">/**
      * Serialization UID of this class.
@@ -45,7 +46,7 @@ public class NodeDefId implements Serializable {
      *
      * @param def &lt;code&gt;NodeDef&lt;/code&gt; to create identifier for
      */</comment>
    <expr><call><name>NodeDefId</name><argument_list>(<argument><expr><name>NodeDef</name> <name>def</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>public</specifier> <call><name>NodeDefId</name><argument_list>(<argument><expr><name>QNodeDefinition</name> <name>def</name></expr></argument>)</argument_list></call> <block>{
         <if_stmt><if>if <condition>(<expr><name>def</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"NodeDef argument can not be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         <expr_stmt/></block_content></block></if></if_stmt></block></expr>}</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefImpl</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>e52a06520</name><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">273</literal> <operator>+</operator><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal> @@</expr>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package></block></expr>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import></block></expr></expr_stmt>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>QNodeDefinitionImpl</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class implements the &lt;code&gt;NodeDef&lt;/code&gt; interface and additionally
 * provides setter methods for the various node definition attributes.
 */</comment>
<class><specifier>public</specifier> class <name>NodeDefImpl</name> <super_list><extends>extends <super><name>ItemDefImpl</name></super></extends> <implements>implements <super><name>NodeDef</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The name of the default primary type.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Name</name></type> <name>defaultPrimaryType</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The names of the required primary types.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name></type> <name>requiredPrimaryTypes</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The 'allowsSameNameSiblings' flag.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>allowsSameNameSiblings</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The identifier of this node definition. The identifier is lazily computed
     * based on the characteristics of this node definition and reset on every
     * attribute change.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NodeDefId</name></type> <name>id</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>NodeDefImpl</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>defaultPrimaryType</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>requiredPrimaryTypes</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>allowsSameNameSiblings</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>NodeDefImpl</name><parameter_list>(<parameter><decl><type><name>QNodeDefinition</name></type> <name>nd</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>defaultPrimaryType</name> <operator>=</operator> <call><name><name>nd</name><operator>.</operator><name>getDefaultPrimaryType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>requiredPrimaryTypes</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>nd</name><operator>.</operator><name>getRequiredPrimaryTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>allowsSameNameSiblings</name> <operator>=</operator> <call><name><name>nd</name><operator>.</operator><name>allowsSameNameSiblings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns the QNodeDefinition for this NodeDef
     * @return the QNodeDefinition
     */</comment>
    <function><type><specifier>public</specifier> <name>QNodeDefinition</name></type> <name>getQNodeDefinition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>QNodeDefinitionImpl</name><argument_list>(
                <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getDeclaringNodeType</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>isAutoCreated</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>isMandatory</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getOnParentVersion</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>isProtected</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getDefaultPrimaryType</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getRequiredPrimaryTypes</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>allowsSameNameSiblings</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the name of default primary type.
     *
     * @param defaultNodeType
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultPrimaryType</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>defaultNodeType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultPrimaryType</name></name> <operator>=</operator> <name>defaultNodeType</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the names of the required primary types.
     *
     * @param requiredPrimaryTypes
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRequiredPrimaryTypes</name><parameter_list>(<parameter><decl><type><name><name>Name</name><index>[]</index></name></type> <name>requiredPrimaryTypes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>requiredPrimaryTypes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"requiredPrimaryTypes can not be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>requiredPrimaryTypes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>requiredPrimaryTypes</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>requiredPrimaryTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'allowsSameNameSiblings' flag.
     *
     * @param allowsSameNameSiblings
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAllowsSameNameSiblings</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>allowsSameNameSiblings</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowsSameNameSiblings</name></name> <operator>=</operator> <name>allowsSameNameSiblings</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">//------------------------------------------------&lt; ItemDefImpl overrides &gt;</comment>
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDeclaringNodeType</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>declaringNodeType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><name>declaringNodeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoCreated</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>autoCreated</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setAutoCreated</name></name><argument_list>(<argument><expr><name>autoCreated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnParentVersion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>onParentVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setOnParentVersion</name></name><argument_list>(<argument><expr><name>onParentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProtected</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>writeProtected</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setProtected</name></name><argument_list>(<argument><expr><name>writeProtected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMandatory</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>mandatory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setMandatory</name></name><argument_list>(<argument><expr><name>mandatory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">//--------------------------------------------------------------&lt; NodeDef &gt;</comment>
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     * &lt;p/&gt;
     * The identifier is computed based on the characteristics of this node
     * definition, i.e. modifying attributes of this node definition will
     * have impact on the identifier returned by this method.
     */</comment>
    <function><type><specifier>public</specifier> <name>NodeDefId</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// generate new identifier based on this node definition</comment>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <operator>new</operator> <call><name>NodeDefId</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>id</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>Name</name></type> <name>getDefaultPrimaryType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>defaultPrimaryType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Name</name><index>[]</index></name></type> <name>getRequiredPrimaryTypes</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Name</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>toArray</name></name><argument_list>(
                <argument><expr><operator>new</operator> <name><name>Name</name><index>[<expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowsSameNameSiblings</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>allowsSameNameSiblings</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     *
     * @return always &lt;code&gt;true&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>definesNode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//-------------------------------------------&lt; java.lang.Object overrides &gt;</comment>
    <comment type="block" format="javadoc">/**
     * Compares two node definitions for equality. Returns &lt;code&gt;true&lt;/code&gt;
     * if the given object is a node defintion and has the same attributes
     * as this node definition.
     *
     * @param obj the object to compare this node definition with
     * @return &lt;code&gt;true&lt;/code&gt; if the object is equal to this node definition,
     *         &lt;code&gt;false&lt;/code&gt; otherwise
     * @see Object#equals(Object)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>NodeDefImpl</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>NodeDefImpl</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>NodeDefImpl</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>requiredPrimaryTypes</name></name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>defaultPrimaryType</name> <operator>==</operator> <literal type="null">null</literal></expr>
                            ?</condition><then> <expr><name><name>other</name><operator>.</operator><name>defaultPrimaryType</name></name> <operator>==</operator> <literal type="null">null</literal></expr>
                            </then><else>: <expr><call><name><name>defaultPrimaryType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>defaultPrimaryType</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator>
                    <operator>&amp;&amp;</operator> <name>allowsSameNameSiblings</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>allowsSameNameSiblings</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns zero to satisfy the Object equals/hashCode contract.
     * This class is mutable and not meant to be used as a hash key.
     *
     * @return always zero
     * @see Object#hashCode()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefinitionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">19d048f14</literal><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">188</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NoSuchNodeTypeException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinition</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeType</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class implements the &lt;code&gt;NodeDefinition&lt;/code&gt; interface.
 * All method calls are delegated to the wrapped {@link NodeDef},
 * performing the translation from &lt;code&gt;Name&lt;/code&gt;s to JCR names
 * (and vice versa) where necessary.
 */</comment>
<class><specifier>public</specifier> class <name>NodeDefinitionImpl</name> <super_list><extends>extends <super><name>ItemDefinitionImpl</name></super></extends> <implements>implements <super><name>NodeDefinition</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Logger instance for this class
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>NodeDefinitionImpl</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Package private constructor.
     *
     * @param nodeDef    child node definition
     * @param ntMgr      node type manager
     * @param resolver   name resolver
     */</comment>
    <constructor><name>NodeDefinitionImpl</name><parameter_list>(<parameter><decl><type><name>NodeDef</name></type> <name>nodeDef</name></decl></parameter>, <parameter><decl><type><name>NodeTypeManagerImpl</name></type> <name>ntMgr</name></decl></parameter>,
                       <parameter><decl><type><name>NamePathResolver</name></type> <name>resolver</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>nodeDef</name></expr></argument>, <argument><expr><name>ntMgr</name></expr></argument>, <argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns the wrapped node definition.
     *
     * @return the wrapped node definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>NodeDef</name></type> <name>unwrap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>itemDef</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//-------------------------------------------------------&lt; NodeDefinition &gt;</comment>
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>NodeType</name></type> <name>getDefaultPrimaryType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Name</name></type> <name>ntName</name> <init>= <expr><operator>(</operator><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>getDefaultPrimaryType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ntName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ntMgr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>ntMgr</name><operator>.</operator><name>getNodeType</name></name><argument_list>(<argument><expr><name>ntName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchNodeTypeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// should never get here</comment>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"invalid default node type "</literal> <operator>+</operator> <name>ntName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>NodeType</name><index>[]</index></name></type> <name>getRequiredPrimaryTypes</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ntMgr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Name</name><index>[]</index></name></type> <name>ntNames</name> <init>= <expr><operator>(</operator><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>getRequiredPrimaryTypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ntNames</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>ntNames</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// return "nt:base"</comment>
                <return>return <expr><operator>new</operator> <name><name>NodeType</name><index>[]</index></name> <block>{<expr><call><name><name>ntMgr</name><operator>.</operator><name>getNodeType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr></argument>)</argument_list></call></expr>}</block></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>NodeType</name><index>[]</index></name></type> <name>nodeTypes</name> <init>= <expr><operator>new</operator> <name><name>NodeType</name><index>[<expr><name><name>ntNames</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ntNames</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>nodeTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getNodeType</name></name><argument_list>(<argument><expr><name><name>ntNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>nodeTypes</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchNodeTypeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// should never get here</comment>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"required node type does not exist"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <name><name>NodeType</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowsSameNameSiblings</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>allowsSameNameSiblings</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//--------------------------------------------------&lt; new JSR 283 methods &gt;</comment>
    <comment type="block" format="javadoc">/**
     * Returns the names of the required primary node types.
     * &lt;p/&gt;
     * If this &lt;code&gt;NodeDefinition&lt;/code&gt; is acquired from a live
     * &lt;code&gt;NodeType&lt;/code&gt; this list will reflect the node types returned by
     * &lt;code&gt;getRequiredPrimaryTypes&lt;/code&gt;, above.
     * &lt;p/&gt;
     * If this &lt;code&gt;NodeDefinition&lt;/code&gt; is actually a
     * &lt;code&gt;NodeDefinitionTemplate&lt;/code&gt; that is not part of a registered node
     * type, then this method will return the required primary types as set in
     * that template. If that template is a newly-created empty one, then this
     * method will return an array containing a single string indicating the
     * node type &lt;code&gt;nt:base&lt;/code&gt;.
     *
     * @return a String array
     * @since JCR 2.0
     */</comment>
    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getRequiredPrimaryTypeNames</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Name</name><index>[]</index></name></type> <name>ntNames</name> <init>= <expr><operator>(</operator><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>getRequiredPrimaryTypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ntNames</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>ntNames</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// return "nt:base"</comment>
                <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>resolver</name><operator>.</operator><name>getJCRName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr></argument>)</argument_list></call></expr>}</block></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><name><name>ntNames</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ntNames</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>resolver</name><operator>.</operator><name>getJCRName</name></name><argument_list>(<argument><expr><name><name>ntNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>names</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NamespaceException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// should never get here</comment>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"encountered unregistered namespace in node type name"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the name of the default primary node type.
     * &lt;p/&gt;
     * If this &lt;code&gt;NodeDefinition&lt;/code&gt; is acquired from a live
     * &lt;code&gt;NodeType&lt;/code&gt; this list will reflect the NodeType returned by
     * getDefaultPrimaryType, above.
     * &lt;p/&gt;
     * If this &lt;code&gt;NodeDefinition&lt;/code&gt; is actually a
     * &lt;code&gt;NodeDefinitionTemplate&lt;/code&gt; that is not part of a registered node
     * type, then this method will return the required primary types as set in
     * that template. If that template is a newly-created empty one, then this
     * method will return &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a String
     * @since JCR 2.0
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefaultPrimaryTypeName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Name</name></type> <name>ntName</name> <init>= <expr><operator>(</operator><operator>(</operator><name>NodeDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>getDefaultPrimaryType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ntName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>resolver</name><operator>.</operator><name>getJCRName</name></name><argument_list>(<argument><expr><name>ntName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NamespaceException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// should never get here</comment>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"encountered unregistered namespace in node type name"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// not correct, but an acceptable fallback</comment>
            <return>return <expr><call><name><name>ntName</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDef</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDef</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e61b622c7</name><operator>..</operator><literal type="number">32daf9ce0</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDef</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDef</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeDef</name> implements <name>Cloneable</name> <block>{
     <expr><specifier>private</specifier> <name>boolean</name> <name>abstractStatus</name></expr>;
     <specifier>private</specifier> <name>Name</name> <name>primaryItemName</name></block></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name></type> <name>propDefs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name></type> <name>nodeDefs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>propDefs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name></type> <name>nodeDefs</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name></type> <name>dependencies</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -70,8 +70,8 @@ public class NodeTypeDef implements Cloneable {
         orderableChildNodes = false;
         abstractStatus = false;
         queryable = true;
        nodeDefs = new HashSet&lt;NodeDef&gt;();
        propDefs = new HashSet&lt;PropDef&gt;();
        nodeDefs = new HashSet&lt;QNodeDefinition&gt;();
        propDefs = new HashSet&lt;QPropertyDefinition&gt;();
     }
 
     /**
@@ -86,13 +86,13 @@ public class NodeTypeDef implements Cloneable {
         orderableChildNodes = def.hasOrderableChildNodes();
         abstractStatus = def.isAbstract();
         queryable = def.isQueryable();
        nodeDefs = new HashSet&lt;NodeDef&gt;();
        nodeDefs = new HashSet&lt;QNodeDefinition&gt;();
         for (QNodeDefinition nd: def.getChildNodeDefs()) {
            nodeDefs.add(new NodeDefImpl(nd));
            nodeDefs.add(nd);
         }
        propDefs = new HashSet&lt;PropDef&gt;();
        propDefs = new HashSet&lt;QPropertyDefinition&gt;();
         for (QPropertyDefinition pd: def.getPropertyDefs()) {
            propDefs.add(new PropDefImpl(pd));
            propDefs.add(pd);
         }
     }
 
@@ -101,17 +101,6 @@ public class NodeTypeDef implements Cloneable {
      * @return the QNodeTypeDefintion
      */</comment>
     <function><type><specifier>public</specifier> <name>QNodeTypeDefinition</name></type> <name>getQNodeTypeDefinition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>qNodeDefs</name> <init>= <expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>nodeDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>NodeDef</name></type> <name>nd</name><range>: <expr><name>nodeDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>qNodeDefs</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>NodeDefImpl</name><operator>)</operator> <name>nd</name><operator>)</operator><operator>.</operator><call><name>getQNodeDefinition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>qPropDefs</name> <init>= <expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>propDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>pd</name><range>: <expr><name>propDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>qPropDefs</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PropDefImpl</name><operator>)</operator> <name>pd</name><operator>)</operator><operator>.</operator><call><name>getQPropertyDefinition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

         <return>return <expr><operator>new</operator> <call><name>QNodeTypeDefinitionImpl</name><argument_list>(
                 <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><call><name>getSupertypes</name><argument_list>()</argument_list></call></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">121</literal></expr></argument>,<argument><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">110</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@ <specifier>public</specifier> class <name>NodeTypeDef</name> implements <name>Cloneable</name> <block>{
                 <expr><call><name>isQueryable</name><argument_list>()</argument_list></call></expr>,
                 <expr><call><name>hasOrderableChildNodes</name><argument_list>()</argument_list></call></expr>,
                 <expr><call><name>getPrimaryItemName</name><argument_list>()</argument_list></call></expr>,
                <expr><name>qPropDefs</name></expr>,
                <expr><name>qNodeDefs</name>
                <call><name><name>propDefs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>propDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name>nodeDefs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>nodeDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></block></expr></argument>
         )</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">144</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">133</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeDef</name> implements <name>Cloneable</name> <block>{
             <comment type="line">// supertypes</comment>
             <expr><call><name><name>dependencies</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>supertypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
             <comment type="line">// child node definitions</comment>
            <for>for <control>(<init><decl><type><name>NodeDef</name></type> <name>nd</name><range>: <expr><name>nodeDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QNodeDefinition</name></type> <name>nd</name><range>: <expr><name>nodeDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <comment type="line">// default primary type</comment>
                 <decl_stmt><decl><type><name>Name</name></type> <name>ntName</name> <init>= <expr><call><name><name>nd</name><operator>.</operator><name>getDefaultPrimaryType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <if_stmt><if>if <condition>(<expr><name>ntName</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ntName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">148</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeDef</name> implements <name>Cloneable</name> <block>{
                 }</block></expr></expr_stmt>
             </block_content>}</block></if></if_stmt>
             <comment type="line">// property definitions</comment>
            <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>pd</name> <range>: <expr><name>propDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QPropertyDefinition</name></type> <name>pd</name> <range>: <expr><name>propDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <comment type="line">// [WEAK]REFERENCE value constraints</comment>
                 <if_stmt><if>if <condition>(<expr><call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PropertyType</name><operator>.</operator><name>REFERENCE</name></name>
                         <operator>||</operator> <call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PropertyType</name><operator>.</operator><name>WEAKREFERENCE</name></name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">263</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">252</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeDef</name> implements <name>Cloneable</name> <block>{
      <expr><operator>*</operator>
      <operator>*</operator> @<name>param</name> <name>defs</name> <name>An</name> <name>array</name> <name><name>of</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><name><name>PropertyDef</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name> <name><name>objects</name><operator>.</operator></name>
      *<operator>/</operator>
    <specifier>public</specifier> <name>void</name> <call><name>setPropertyDefs</name><argument_list>(<argument><expr><name><name>PropDef</name><index>[]</index></name> <name>defs</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>public</specifier> <name>void</name> <call><name>setPropertyDefs</name><argument_list>(<argument><expr><name><name>QPropertyDefinition</name><index>[]</index></name> <name>defs</name></expr></argument>)</argument_list></call> <block>{
         <expr><call><name>resetDependencies</name><argument_list>()</argument_list></call></expr>;
         <call><name><name>propDefs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></block></expr>;
         <call><name><name>propDefs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>defs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
@@ <operator>-</operator><literal type="number">272</literal><operator>,</operator><literal type="number">9</literal> <operator>+</operator><literal type="number">261</literal><operator>,</operator><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeDef</name> implements <name>Cloneable</name> <block>{
     <comment type="block" format="javadoc">/**
      * Sets the child node definitions.
      *
     * @param defs An array of &lt;code&gt;NodeDef&lt;/code&gt; objects
     * @param defs An array of &lt;code&gt;QNodeDefinition&lt;/code&gt; objects
      */</comment>
    <expr><specifier>public</specifier> <name>void</name> <call><name>setChildNodeDefs</name><argument_list>(<argument><expr><name><name>NodeDef</name><index>[]</index></name> <name>defs</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>public</specifier> <name>void</name> <call><name>setChildNodeDefs</name><argument_list>(<argument><expr><name><name>QNodeDefinition</name><index>[]</index></name> <name>defs</name></expr></argument>)</argument_list></call> <block>{
         <expr><call><name>resetDependencies</name><argument_list>()</argument_list></call></expr>;
         <call><name><name>nodeDefs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></block></expr>;
         <call><name><name>nodeDefs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>defs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
@@ <operator>-</operator><literal type="number">362</literal><operator>,</operator><literal type="number">11</literal> <operator>+</operator><literal type="number">351</literal><operator>,</operator><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeDef</name> implements <name>Cloneable</name> <block>{
      <expr><operator>*</operator> @</expr><return>return <expr><name>an</name> <name>array</name> <name>containing</name> <name>the</name> <name>property</name> <name>definitions</name> <name>or</name>
      <operator>*</operator>         <operator>&lt;</operator><name>code</name><operator>&gt;</operator><literal type="null">null</literal><operator>&lt;</operator><operator>/</operator><name>code</name><operator>&gt;</operator></expr></return> <if_stmt><if>if not set.
      */
    public PropDef[] getPropertyDefs<condition>()</condition> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>getPropertyDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>propDefs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>PropDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>propDefs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PropDef</name><index>[<expr><call><name><name>propDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>propDefs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>propDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
@@ -376,11 +365,11 @@ public class NodeTypeDef implements Cloneable {
      * @return an array containing the child node definitions or
      *         &lt;code&gt;null&lt;/code&gt; if not set.
      */</comment>
    <function><type><specifier>public</specifier> <name><name>NodeDef</name><index>[]</index></name></type> <name>getChildNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>QNodeDefinition</name><index>[]</index></name></type> <name>getChildNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><call><name><name>nodeDefs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NodeDef</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
            <return>return <expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>nodeDefs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDef</name><index>[<expr><call><name><name>nodeDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>nodeDefs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>nodeDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="line">//-------------------------------------------&lt; java.lang.Object overrides &gt;</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">393</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">382</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeDef</name> implements <name>Cloneable</name> <block>{
         <expr><name><name>clone</name><operator>.</operator><name>orderableChildNodes</name></name> <operator>=</operator> <name>orderableChildNodes</name></expr>;
         <name><name>clone</name><operator>.</operator><name>abstractStatus</name></name> <operator>=</operator> <name>abstractStatus</name></block></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>clone</name><operator>.</operator><name>queryable</name></name> <operator>=</operator> <name>queryable</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name><operator>.</operator><name>nodeDefs</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name><operator>.</operator><name>nodeDefs</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <comment type="line">// todo: itemdefs should be cloned as well, since mutable</comment>
        <expr_stmt><expr><name><name>clone</name><operator>.</operator><name>nodeDefs</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nodeDefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name><operator>.</operator><name>propDefs</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>propDefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name><operator>.</operator><name>nodeDefs</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nodeDefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name><operator>.</operator><name>propDefs</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>propDefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><name>clone</name></expr>;</return>
     </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDefDiff</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDefDiff</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">53487cd33</literal><operator>..</operator><literal type="number">8324c91f3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDefDiff</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeDefDiff</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PropertyType</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QItemDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * A &lt;code&gt;NodeTypeDefDiff&lt;/code&gt; represents the result of the comparison of
@@ -97,7 +100,7 @@ public class NodeTypeDefDiff {
     private final NodeTypeDef newDef;
     private int type;
 
    private List propDefDiffs = new ArrayList();
    private List&lt;PropDefDiff&gt; propDefDiffs = new ArrayList&lt;PropDefDiff&gt;();
     private List childNodeDefDiffs = new ArrayList();
 
     /**
@@ -249,45 +252,38 @@ public class NodeTypeDefDiff {
          */</comment>
 
         <decl_stmt><decl><type><name>int</name></type> <name>maxType</name> <init>= <expr><name>NONE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>PropDef</name><index>[]</index></name></type> <name>pda1</name> <init>= <expr><call><name><name>oldDef</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HashMap</name></type> <name>defs1</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pda1</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>defs1</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>pda1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pda1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>PropDefId</name></argument>, <argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>oldDefs</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>PropDefId</name></argument>, <argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <range>: <expr><call><name><name>oldDef</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>oldDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropDefId</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
 
        <decl_stmt><decl><type><name><name>PropDef</name><index>[]</index></name></type> <name>pda2</name> <init>= <expr><call><name><name>newDef</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HashMap</name></type> <name>defs2</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pda2</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>defs2</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>pda2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pda2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>PropDefId</name></argument>, <argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>newDefs</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>PropDefId</name></argument>, <argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <range>: <expr><call><name><name>newDef</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>newDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropDefId</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
 
         <comment type="block" format="javadoc">/**
          * walk through defs1 and process all entries found in
          * both defs1 &amp; defs2 and those found only in defs1
          */</comment>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iter</name> <init>= <expr><call><name><name>defs1</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>entry</name> <init>= <expr><operator>(</operator><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>)</operator> <call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PropDefId</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>PropDefId</name><operator>)</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PropDef</name></type> <name>def1</name> <init>= <expr><operator>(</operator><name>PropDef</name><operator>)</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PropDef</name></type> <name>def2</name> <init>= <expr><operator>(</operator><name>PropDef</name><operator>)</operator> <call><name><name>defs2</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>PropDefId</name></argument>, <argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>oldDefs</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>PropDefId</name></type> <name>id</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def1</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def2</name> <init>= <expr><call><name><name>newDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>PropDefDiff</name></type> <name>diff</name> <init>= <expr><operator>new</operator> <call><name>PropDefDiff</name><argument_list>(<argument><expr><name>def1</name></expr></argument>, <argument><expr><name>def2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><call><name><name>diff</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>maxType</name></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name>maxType</name> <operator>=</operator> <call><name><name>diff</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
             <expr_stmt><expr><call><name><name>propDefDiffs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>defs2</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newDefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
 
         <comment type="block" format="javadoc">/**
          * defs2 by now only contains entries found in defs2 only;
          * walk through defs2 and process all remaining entries
          */</comment>
        <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>defs2</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>entry</name> <init>= <expr><operator>(</operator><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>)</operator> <call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PropDefId</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>PropDefId</name><operator>)</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><operator>(</operator><name>PropDef</name><operator>)</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>PropDefId</name></argument>, <argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>newDefs</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>PropDefDiff</name></type> <name>diff</name> <init>= <expr><operator>new</operator> <call><name>PropDefDiff</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><call><name><name>diff</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>maxType</name></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name>maxType</name> <operator>=</operator> <call><name><name>diff</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">308</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">304</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeDefDiff</name> <block>{
          <expr><operator>*</operator><operator>/</operator>
 
         <name>int</name> <name>maxType</name> <operator>=</operator> <name>NONE</name></expr>;
        <name><name>NodeDef</name><index>[]</index></name> <name>cnda1</name> <operator>=</operator> <call><name><name>oldDef</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>cnda1</name> <init>= <expr><call><name><name>oldDef</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>HashMap</name></type> <name>defs1</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cnda1</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>defs1</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>cnda1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cnda1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>defs1</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NodeDefId</name><argument_list>(<argument><expr><name><name>cnda1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cnda1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
 
        <decl_stmt><decl><type><name><name>NodeDef</name><index>[]</index></name></type> <name>cnda2</name> <init>= <expr><call><name><name>newDef</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>cnda2</name> <init>= <expr><call><name><name>newDef</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>HashMap</name></type> <name>defs2</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cnda2</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>defs2</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>cnda2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cnda2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>defs2</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NodeDefId</name><argument_list>(<argument><expr><name><name>cnda2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cnda2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
 
         <comment type="block" format="javadoc">/**
@@ -328,8 +324,8 @@ public class NodeTypeDefDiff {
         while (iter.hasNext()) {
             Map.Entry entry = (Map.Entry) iter.next();
             NodeDefId id = (NodeDefId) entry.getKey();
            NodeDef def1 = (NodeDef) entry.getValue();
            NodeDef def2 = (NodeDef) defs2.get(id);
            QItemDefinition def1 = (QItemDefinition) entry.getValue();
            QItemDefinition def2 = (QItemDefinition) defs2.get(id);
             ChildNodeDefDiff diff = new ChildNodeDefDiff(def1, def2);
             if (diff.getType() &gt; maxType) {
                 maxType = diff.getType();
@@ -346,7 +342,7 @@ public class NodeTypeDefDiff {
         while (iter.hasNext()) {
             Map.Entry entry = (Map.Entry) iter.next();
             NodeDefId id = (NodeDefId) entry.getKey();
            NodeDef def = (NodeDef) entry.getValue();
            QItemDefinition def = (QItemDefinition) entry.getValue();
             ChildNodeDefDiff diff = new ChildNodeDefDiff(null, def);
             if (diff.getType() &gt; maxType) {
                 maxType = diff.getType();
@@ -408,11 +404,11 @@ public class NodeTypeDefDiff {
     //--------------------------------------------------------&lt; inner classes &gt;
 
     abstract class ChildItemDefDiff {
        protected final ItemDef oldDef;
        protected final ItemDef newDef;
        protected final QItemDefinition oldDef;
        protected final QItemDefinition newDef;
         protected int type;
 
        ChildItemDefDiff(ItemDef oldDef, ItemDef newDef) {
        ChildItemDefDiff(QItemDefinition oldDef, QItemDefinition newDef) {
             this.oldDef = oldDef;
             this.newDef = newDef;
             init();
@@ -495,7 +491,7 @@ public class NodeTypeDefDiff {
                 operationString = "NONE";
             }
 
            ItemDef itemDefinition = (oldDef != null) ? oldDef : newDef;
            QItemDefinition itemDefinition = (oldDef != null) ? oldDef : newDef;
 
             return getClass().getName() + "[itemName="
                     + itemDefinition.getName() + ", type=" + typeString
@@ -506,16 +502,16 @@ public class NodeTypeDefDiff {
 
     public class PropDefDiff extends ChildItemDefDiff {
 
        PropDefDiff(PropDef oldDef, PropDef newDef) {
        PropDefDiff(QPropertyDefinition oldDef, QPropertyDefinition newDef) {
             super(oldDef, newDef);
         }
 
        public PropDef getOldDef() {
            return (PropDef) oldDef;
        public QPropertyDefinition getOldDef() {
            return (QPropertyDefinition) oldDef;
         }
 
        public PropDef getNewDef() {
            return (PropDef) newDef;
        public QPropertyDefinition getNewDef() {
            return (QPropertyDefinition) newDef;
         }
 
         protected void init() {
@@ -584,16 +580,16 @@ public class NodeTypeDefDiff {
 
     public class ChildNodeDefDiff extends ChildItemDefDiff {
 
        ChildNodeDefDiff(NodeDef oldDef, NodeDef newDef) {
        ChildNodeDefDiff(QItemDefinition oldDef, QItemDefinition newDef) {
             super(oldDef, newDef);
         }
 
        public NodeDef getOldDef() {
            return (NodeDef) oldDef;
        public QNodeDefinition getOldDef() {
            return (QNodeDefinition) oldDef;
         }
 
        public NodeDef getNewDef() {
            return (NodeDef) newDef;
        public QNodeDefinition getNewDef() {
            return (QNodeDefinition) newDef;
         }
 
         protected void init() {
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeDefinitionImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeDefinitionImpl.java
index 5c92552b0..1013ade75 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeDefinitionImpl.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeDefinitionImpl.java
@@ -18,7 +18,11 @@ package org.apache.jackrabbit.core.nodetype;
 
 import javax.jcr.nodetype.NodeTypeDefinition;
 import org.apache.jackrabbit.spi.Name;
import org.apache.jackrabbit.spi.QPropertyDefinition;
import org.apache.jackrabbit.spi.QItemDefinition;
 import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
import org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl;
import org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -163,7 +167,7 @@ public class NodeTypeDefinitionImpl implements NodeTypeDefinition {
      * {@inheritDoc}
      */</comment>
     <function><type><specifier>public</specifier> <name><name>NodeDefinition</name><index>[]</index></name></type> <name>getDeclaredChildNodeDefinitions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>NodeDef</name><index>[]</index></name></type> <name>cnda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>QItemDefinition</name><index>[]</index></name></type> <name>cnda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name><name>NodeDefinition</name><index>[]</index></name></type> <name>nodeDefs</name> <init>= <expr><operator>new</operator> <name><name>NodeDefinition</name><index>[<expr><name><name>cnda</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cnda</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <expr_stmt><expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>NodeDefinitionImpl</name><argument_list>(<argument><expr><name><name>cnda</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">175</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">179</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeDefinitionImpl</name> implements <name>NodeTypeDefinition</name> <block>{
      <expr><operator>*</operator> <block>{@<expr><name>inheritDoc</name></expr>}</block>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>PropertyDefinition</name><index>[]</index></name> <call><name>getDeclaredPropertyDefinitions</name><argument_list>()</argument_list></call> <block>{
        <expr><name><name>PropDef</name><index>[]</index></name> <name>pda</name> <operator>=</operator> <call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr>;
        <name><name>QPropertyDefinition</name><index>[]</index></name> <name>pda</name> <operator>=</operator> <call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></block></expr>;
         <name><name>PropertyDefinition</name><index>[]</index></name> <name>propDefs</name> <operator>=</operator> <operator>new</operator> <name><name>PropertyDefinition</name><index>[<expr><name><name>pda</name><operator>.</operator><name>length</name></name></expr>]</index></name></block></expr>;</expr_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pda</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <expr_stmt><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>PropertyDefinitionImpl</name><argument_list>(<argument><expr><name><name>pda</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>valueFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8a0041514</literal><operator>..</operator><name>b704d6517</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>DataStore</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NameException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>AbstractNodeType</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">125</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeImpl</name> extends <name>AbstractNodeType</name> implements <name>NodeType</name></expr><operator>,</operator> <expr><name>NodeType</name>
      <operator>*</operator> @<name>see</name> <name>NodeDefinition</name><operator>#</operator><name>isAutoCreated</name>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>NodeDefinition</name><index>[]</index></name> <call><name>getAutoCreatedNodeDefinitions</name><argument_list>()</argument_list></call> <block>{
        <expr><name><name>NodeDef</name><index>[]</index></name> <name>cnda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getAutoCreateNodeDefs</name></name><argument_list>()</argument_list></call></expr>;
        <name><name>QNodeDefinition</name><index>[]</index></name> <name>cnda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getAutoCreateNodeDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>NodeDefinition</name><index>[]</index></name></type> <name>nodeDefs</name> <init>= <expr><operator>new</operator> <name><name>NodeDefinition</name><index>[<expr><name><name>cnda</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cnda</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><name><name>cnda</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><name><name>cnda</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <return>return <expr><name>nodeDefs</name></expr>;</return>
     </block_content>}</block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">143</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeImpl</name> extends <name>AbstractNodeType</name> implements <name>NodeType</name></expr><operator>,</operator> <expr><name>NodeType</name>
      <operator>*</operator> @<name>see</name> <name>PropertyDefinition</name><operator>#</operator><name>isAutoCreated</name>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>PropertyDefinition</name><index>[]</index></name> <call><name>getAutoCreatedPropertyDefinitions</name><argument_list>()</argument_list></call> <block>{
        <expr><name><name>PropDef</name><index>[]</index></name> <name>pda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getAutoCreatePropDefs</name></name><argument_list>()</argument_list></call></expr>;
        <name><name>QPropertyDefinition</name><index>[]</index></name> <name>pda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getAutoCreatePropDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>PropertyDefinition</name><index>[]</index></name></type> <name>propDefs</name> <init>= <expr><operator>new</operator> <name><name>PropertyDefinition</name><index>[<expr><name><name>pda</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pda</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>(<argument><expr><name><name>pda</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>(<argument><expr><name><name>pda</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <return>return <expr><name>propDefs</name></expr>;</return>
     </block_content>}</block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">161</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeImpl</name> extends <name>AbstractNodeType</name> implements <name>NodeType</name></expr><operator>,</operator> <expr><name>NodeType</name>
      <operator>*</operator> @<name>see</name> <name>PropertyDefinition</name><operator>#</operator><name>isMandatory</name>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>PropertyDefinition</name><index>[]</index></name> <call><name>getMandatoryPropertyDefinitions</name><argument_list>()</argument_list></call> <block>{
        <expr><name><name>PropDef</name><index>[]</index></name> <name>pda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getMandatoryPropDefs</name></name><argument_list>()</argument_list></call></expr>;
        <name><name>QPropertyDefinition</name><index>[]</index></name> <name>pda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getMandatoryPropDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>PropertyDefinition</name><index>[]</index></name></type> <name>propDefs</name> <init>= <expr><operator>new</operator> <name><name>PropertyDefinition</name><index>[<expr><name><name>pda</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pda</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>(<argument><expr><name><name>pda</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>(<argument><expr><name><name>pda</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <return>return <expr><name>propDefs</name></expr>;</return>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">177</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">179</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeImpl</name> extends <name>AbstractNodeType</name> implements <name>NodeType</name></expr><operator>,</operator> <expr><name>NodeType</name>
      <operator>*</operator> @<name>see</name> <name>NodeDefinition</name><operator>#</operator><name>isMandatory</name>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>NodeDefinition</name><index>[]</index></name> <call><name>getMandatoryNodeDefinitions</name><argument_list>()</argument_list></call> <block>{
        <expr><name><name>NodeDef</name><index>[]</index></name> <name>cnda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getMandatoryNodeDefs</name></name><argument_list>()</argument_list></call></expr>;
        <name><name>QNodeDefinition</name><index>[]</index></name> <name>cnda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getMandatoryNodeDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>NodeDefinition</name><index>[]</index></name></type> <name>nodeDefs</name> <init>= <expr><operator>new</operator> <name><name>NodeDefinition</name><index>[<expr><name><name>cnda</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cnda</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><name><name>cnda</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><name><name>cnda</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <return>return <expr><name>nodeDefs</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">349</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">351</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeImpl</name> extends <name>AbstractNodeType</name> implements <name>NodeType</name></expr><operator>,</operator> <expr><name>NodeType</name>
      <operator>*</operator> <block>{@<expr><name>inheritDoc</name></expr>}</block>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>NodeDefinition</name><index>[]</index></name> <call><name>getDeclaredChildNodeDefinitions</name><argument_list>()</argument_list></call> <block>{
        <expr><name><name>NodeDef</name><index>[]</index></name> <name>cnda</name> <operator>=</operator> <call><name><name>ntd</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr>;
        <name><name>QNodeDefinition</name><index>[]</index></name> <name>cnda</name> <operator>=</operator> <call><name><name>ntd</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>NodeDefinition</name><index>[]</index></name></type> <name>nodeDefs</name> <init>= <expr><operator>new</operator> <name><name>NodeDefinition</name><index>[<expr><name><name>cnda</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cnda</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><name><name>cnda</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><name><name>cnda</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <return>return <expr><name>nodeDefs</name></expr>;</return>
     </block_content>}</block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">397</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">399</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeImpl</name> extends <name>AbstractNodeType</name> implements <name>NodeType</name></expr><operator>,</operator> <expr><name>NodeType</name>
      <operator>*</operator> <block>{@<expr><name>inheritDoc</name></expr>}</block>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>NodeDefinition</name><index>[]</index></name> <call><name>getChildNodeDefinitions</name><argument_list>()</argument_list></call> <block>{
        <expr><name><name>NodeDef</name><index>[]</index></name> <name>cnda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getAllNodeDefs</name></name><argument_list>()</argument_list></call></expr>;
        <name><name>QNodeDefinition</name><index>[]</index></name> <name>cnda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getAllNodeDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>NodeDefinition</name><index>[]</index></name></type> <name>nodeDefs</name> <init>= <expr><operator>new</operator> <name><name>NodeDefinition</name><index>[<expr><name><name>cnda</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cnda</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><name><name>cnda</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getNodeDefinition</name></name><argument_list>(<argument><expr><name><name>cnda</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <return>return <expr><name>nodeDefs</name></expr>;</return>
     </block_content>}</block></while>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">409</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">411</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeImpl</name> extends <name>AbstractNodeType</name> implements <name>NodeType</name></expr><operator>,</operator> <expr><name>NodeType</name>
      <operator>*</operator> <block>{@<expr><name>inheritDoc</name></expr>}</block>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>PropertyDefinition</name><index>[]</index></name> <call><name>getPropertyDefinitions</name><argument_list>()</argument_list></call> <block>{
        <expr><name><name>PropDef</name><index>[]</index></name> <name>pda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getAllPropDefs</name></name><argument_list>()</argument_list></call></expr>;
        <name><name>QPropertyDefinition</name><index>[]</index></name> <name>pda</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getAllPropDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>PropertyDefinition</name><index>[]</index></name></type> <name>propDefs</name> <init>= <expr><operator>new</operator> <name><name>PropertyDefinition</name><index>[<expr><name><name>pda</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pda</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>(<argument><expr><name><name>pda</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>(<argument><expr><name><name>pda</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <return>return <expr><name>propDefs</name></expr>;</return>
     </block_content>}</block></while>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">427</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">429</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeImpl</name> extends <name>AbstractNodeType</name> implements <name>NodeType</name></expr><operator>,</operator> <expr><name>NodeType</name></expr></expr_stmt>
         </block_content>}</block></for>
         <try>try <block>{<block_content>
             <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl>;</decl_stmt>
             <try>try <block>{<block_content>
                 <comment type="line">// try to get definition that matches the given value type</comment>
                 <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getApplicablePropertyDef</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">498</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">500</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeImpl</name> extends <name>AbstractNodeType</name> implements <name>NodeType</name></expr><operator>,</operator> <expr><name>NodeType</name></expr></expr_stmt>
                     <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                 </block_content>}</block></try>
             </block_content>}</block></try>
            <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl>;</decl_stmt>
             <try>try <block>{<block_content>
                 <comment type="line">// try to get definition that matches the given value type</comment>
                 <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getApplicablePropertyDef</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">607</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">609</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeImpl</name> extends <name>AbstractNodeType</name> implements <name>NodeType</name></expr><operator>,</operator> <expr><name>NodeType</name>
      <operator>*</operator> <block>{@<expr><name>inheritDoc</name></expr>}</block>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>PropertyDefinition</name><index>[]</index></name> <call><name>getDeclaredPropertyDefinitions</name><argument_list>()</argument_list></call> <block>{
        <expr><name><name>PropDef</name><index>[]</index></name> <name>pda</name> <operator>=</operator> <call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr>;
        <name><name>QPropertyDefinition</name><index>[]</index></name> <name>pda</name> <operator>=</operator> <call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>PropertyDefinition</name><index>[]</index></name></type> <name>propDefs</name> <init>= <expr><operator>new</operator> <name><name>PropertyDefinition</name><index>[<expr><name><name>pda</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pda</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>(<argument><expr><name><name>pda</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ntMgr</name><operator>.</operator><name>getPropertyDefinition</name></name><argument_list>(<argument><expr><name><name>pda</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <return>return <expr><name>propDefs</name></expr>;</return>
     </block_content>}</block></try>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeManagerImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeManagerImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">625f401e7</literal><operator>..</operator><literal type="number">08c35a874</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeManagerImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeManagerImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeTypeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NameException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>namespace</name><operator>.</operator><name>NamespaceMapping</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>AbstractNodeTypeManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>InvalidConstraintException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinitionImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>QDefinitionBuilderFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>InputSource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>SAXException</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeManagerImpl</name> extends <name>AbstractNodeTypeManager</name> implements <name>Jack</name>
      <operator>*</operator> <name>A</name> <name>cache</name></expr></expr_stmt> <for>for &lt;code&gt;PropertyDefinition&lt;/code&gt; instances created by this
      * &lt;code&gt;NodeTypeManager&lt;/code&gt;
      */
    private final Map&lt;PropDefId<operator>,</operator> <expr_stmt><expr><name>PropertyDefinitionImpl</name><operator>&gt;</operator> <name>pdCache</name></expr>;</expr_stmt></for>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>, <argument><name>PropertyDefinitionImpl</name></argument>&gt;</argument_list></name></type> <name>pdCache</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * A cache for &lt;code&gt;NodeDefinition&lt;/code&gt; instances created by this
      * &lt;code&gt;NodeTypeManager&lt;/code&gt;
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>NodeDefId</name></argument>, <argument><name>NodeDefinitionImpl</name></argument>&gt;</argument_list></name></type> <name>ndCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>, <argument><name>NodeDefinitionImpl</name></argument>&gt;</argument_list></name></type> <name>ndCache</name></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DataStore</name></type> <name>store</name></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">144</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">148</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeManagerImpl</name> extends <name>AbstractNodeTypeManager</name> implements <name>Jack</name>
 
         <name>rootNodeDef</name> <operator>=</operator>
             <operator>new</operator> <call><name>NodeDefinitionImpl</name><argument_list>(<argument><expr><call><name><name>ntReg</name><operator>.</operator><name>getRootNodeDef</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ndCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>rootNodeDef</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rootNodeDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ndCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>rootNodeDef</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rootNodeDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
 
     <comment type="block" format="javadoc">/**
@@ -155,36 +159,30 @@ public class NodeTypeManagerImpl extends AbstractNodeTypeManager implements Jack
     }
 
     /**
     * @param id node def id
     * @param def the QNodeDefinition
      * @return the node definition
      */</comment>
    <function><type><specifier>public</specifier> <name>NodeDefinitionImpl</name></type> <name>getNodeDefinition</name><parameter_list>(<parameter><decl><type><name>NodeDefId</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>NodeDefinitionImpl</name></type> <name>getNodeDefinition</name><parameter_list>(<parameter><decl><type><name>QNodeDefinition</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <synchronized>synchronized <init>(<expr><name>ndCache</name></expr>)</init> <block>{<block_content>
            <decl_stmt><decl><type><name>NodeDefinitionImpl</name></type> <name>ndi</name> <init>= <expr><call><name><name>ndCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>NodeDefinitionImpl</name></type> <name>ndi</name> <init>= <expr><call><name><name>ndCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><name>ndi</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>NodeDef</name></type> <name>nd</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>nd</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ndi</name> <operator>=</operator> <operator>new</operator> <call><name>NodeDefinitionImpl</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ndCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>ndi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>ndi</name> <operator>=</operator> <operator>new</operator> <call><name>NodeDefinitionImpl</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ndCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>ndi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
             <return>return <expr><name>ndi</name></expr>;</return>
         </block_content>}</block></synchronized>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
     * @param id prop def id
     * @param def prop def
      * @return the property definition
      */</comment>
    <function><type><specifier>public</specifier> <name>PropertyDefinitionImpl</name></type> <name>getPropertyDefinition</name><parameter_list>(<parameter><decl><type><name>PropDefId</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>PropertyDefinitionImpl</name></type> <name>getPropertyDefinition</name><parameter_list>(<parameter><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <synchronized>synchronized <init>(<expr><name>pdCache</name></expr>)</init> <block>{<block_content>
            <decl_stmt><decl><type><name>PropertyDefinitionImpl</name></type> <name>pdi</name> <init>= <expr><call><name><name>pdCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PropertyDefinitionImpl</name></type> <name>pdi</name> <init>= <expr><call><name><name>pdCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><name>pdi</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>PropDef</name></type> <name>pd</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getPropDef</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>pd</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>pdi</name> <operator>=</operator> <operator>new</operator> <call><name>PropertyDefinitionImpl</name><argument_list>(<argument><expr><name>pd</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>valueFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>pdCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>pdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>pdi</name> <operator>=</operator> <operator>new</operator> <call><name>PropertyDefinitionImpl</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>valueFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pdCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>pdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
             <return>return <expr><name>pdi</name></expr>;</return>
         </block_content>}</block></synchronized>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">351</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">349</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeManagerImpl</name> extends <name>AbstractNodeTypeManager</name> implements <name>Jack</name>
         <synchronized>synchronized <init>(<expr><name>ndCache</name></expr>)</init> <block>{<block_content>
             <decl_stmt><decl><type><name>Iterator</name></type> <name>iter</name> <init>= <expr><call><name><name>ndCache</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>NodeDefinitionImpl</name></type> <name>nd</name> <init>= <expr><operator>(</operator><name>NodeDefinitionImpl</name><operator>)</operator> <call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeDefinitionImpl</name></type> <name>nd</name> <init>= <expr><operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinitionImpl</name></name><operator>)</operator> <call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <if_stmt><if>if <condition>(<expr><call><name><name>ntName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>nd</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDeclaringNodeType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                     <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">695</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">693</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeManagerImpl</name> extends <name>AbstractNodeTypeManager</name> implements <name>Jack</name>
         <comment type="line">// child nodes</comment>
         <name><name>NodeDefinition</name><index>[]</index></name> <name>ndefs</name> <operator>=</operator> <call><name><name>definition</name><operator>.</operator><name>getDeclaredChildNodeDefinitions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ndefs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>NodeDef</name><index>[]</index></name></type> <name>qndefs</name> <init>= <expr><operator>new</operator> <name><name>NodeDef</name><index>[<expr><name><name>ndefs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>qndefs</name> <init>= <expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><name><name>ndefs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
             <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ndefs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>NodeDefImpl</name></type> <name>qndef</name> <init>= <expr><operator>new</operator> <call><name>NodeDefImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>QNodeDefinitionBuilder</name></type> <name>qndef</name> <init>= <expr><operator>new</operator> <call><name>QNodeDefinitionBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <comment type="line">// declaring node type</comment>
                 <expr_stmt><expr><call><name><name>qndef</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <comment type="line">// name</comment>
                 <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ndefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 <if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>qndef</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name><name>ItemDef</name><operator>.</operator><name>ANY_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>qndef</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if> <else>else <block>{<block_content>
                         <try>try <block>{<block_content>
                             <expr_stmt><expr><call><name><name>qndef</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">747</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">745</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeManagerImpl</name> extends <name>AbstractNodeTypeManager</name> implements <name>Jack</name>
                 <call><name><name>qndef</name><operator>.</operator><name>setOnParentVersion</name></name><argument_list>(<argument><expr><name><name>ndefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getOnParentVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>qndef</name><operator>.</operator><name>setAllowsSameNameSiblings</name></name><argument_list>(<argument><expr><name><name>ndefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>allowsSameNameSiblings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
                <expr_stmt><expr><name><name>qndefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>qndef</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>qndefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>qndef</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></try>
             <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><name>qndefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">755</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">753</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeManagerImpl</name> extends <name>AbstractNodeTypeManager</name> implements <name>Jack</name>
         <comment type="line">// properties</comment>
         <name><name>PropertyDefinition</name><index>[]</index></name> <name>pdefs</name> <operator>=</operator> <call><name><name>definition</name><operator>.</operator><name>getDeclaredPropertyDefinitions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>pdefs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>PropDef</name><index>[]</index></name></type> <name>qpdefs</name> <init>= <expr><operator>new</operator> <name><name>PropDef</name><index>[<expr><name><name>pdefs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>qpdefs</name> <init>= <expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><name><name>pdefs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
             <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdefs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>PropDefImpl</name></type> <name>qpdef</name> <init>= <expr><operator>new</operator> <call><name>PropDefImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>QPropertyDefinitionBuilder</name></type> <name>qpdef</name> <init>= <expr><operator>new</operator> <call><name>QPropertyDefinitionBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <comment type="line">// declaring node type</comment>
                 <expr_stmt><expr><call><name><name>qpdef</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <comment type="line">// name</comment>
                 <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>pdefs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 <if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>qpdef</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name><name>ItemDef</name><operator>.</operator><name>ANY_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>qpdef</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if> <else>else <block>{<block_content>
                         <try>try <block>{<block_content>
                             <expr_stmt><expr><call><name><name>qpdef</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">812</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">810</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeManagerImpl</name> extends <name>AbstractNodeTypeManager</name> implements <name>Jack</name>
                     <call><name><name>qpdef</name><operator>.</operator><name>setDefaultValues</name></name><argument_list>(<argument><expr><name>qvalues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></try>
 
                <expr_stmt><expr><name><name>qpdefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>qpdef</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>qpdefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>qpdef</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
             <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setPropertyDefs</name></name><argument_list>(<argument><expr><name>qpdefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeRegistry</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeRegistry</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d5a969085</name><operator>..</operator><literal type="number">4b4adf6bc</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeRegistry</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeTypeRegistry</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystemException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystemResource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Dumpable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameFactoryImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>QNodeDefinitionBuilder</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeRegistry</name> implements <name>Dumpable</name></expr><operator>,</operator> <expr><name>NodeTypeEventListener</name> <block>{
     <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>CUSTOM_NODETYPES_RESOURCE_NAME</name> <operator>=</operator>
             <literal type="string">"custom_nodetypes.xml"</literal></expr>;
 
    <comment type="line">// file system where node type registrations are persisted</comment>
    <specifier>private</specifier> <name>final</name> <name>FileSystem</name> <name>ntStore</name></block></expr>;</expr_stmt>
     <comment type="block" format="javadoc">/**
      * resource holding custom node type definitions which are represented as
      * nodes in the repository; it is needed in order to make the registrations
@@ -89,12 +90,7 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
     private final Map&lt;Name, NodeTypeDef&gt; registeredNTDefs;
 
     // definition of the root node
    private final NodeDef rootNodeDef;

    // map of id's and property definitions
    private final Map&lt;PropDefId, PropDef&gt; propDefs;
    // map of id's and node definitions
    private final Map&lt;NodeDefId, NodeDef&gt; nodeDefs;
    private final QNodeDefinition rootNodeDef;
 
     /**
      * namespace registry for resolving prefixes and namespace URI's;
@@ -557,22 +553,6 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
         return builtInNTDefs.contains(nodeTypeName);
     }
 
    /**
     * @param id node def id
     * @return the node definition for the given id.
     */</comment>
    <function><type><specifier>public</specifier> <name>NodeDef</name></type> <name>getNodeDef</name><parameter_list>(<parameter><decl><type><name>NodeDefId</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>nodeDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param id property def id
     * @return the property definition for the given id.
     */</comment>
    <function><type><specifier>public</specifier> <name>PropDef</name></type> <name>getPropDef</name><parameter_list>(<parameter><decl><type><name>PropDefId</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>propDefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * Add a &lt;code&gt;NodeTypeRegistryListener&lt;/code&gt;
      *
@@ -613,10 +593,10 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
             ps.println("\tMixin\t" + ntd.isMixin());
             ps.println("\tOrderableChildNodes\t" + ntd.hasOrderableChildNodes());
             ps.println("\tPrimaryItemName\t" + (ntd.getPrimaryItemName() == null ? "&lt;null&gt;" : ntd.getPrimaryItemName().toString()));
            PropDef[] pd = ntd.getPropertyDefs();
            for (PropDef aPd : pd) {
            QPropertyDefinition[] pd = ntd.getPropertyDefs();
            for (QPropertyDefinition aPd : pd) {
                 ps.print("\tPropertyDefinition");
                ps.println(" (declared in " + aPd.getDeclaringNodeType() + ") id=" + aPd.getId());
                ps.println(" (declared in " + aPd.getDeclaringNodeType() + ")");
                 ps.println("\t\tName\t\t" + (aPd.definesResidual() ? "*" : aPd.getName().toString()));
                 String type = aPd.getRequiredType() == 0 ? "null" : PropertyType.nameFromValue(aPd.getRequiredType());
                 ps.println("\t\tRequiredType\t" + type);
@@ -633,12 +613,12 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
                     }
                 }
                 ps.println("\t\tValueConstraints\t" + constraints.toString());
                InternalValue[] defVals = aPd.getDefaultValues();
                QValue[] defVals = aPd.getDefaultValues();
                 StringBuffer defaultValues = new StringBuffer();
                 if (defVals == null) {
                     defaultValues.append("&lt;null&gt;");
                 } else {
                    for (InternalValue defVal : defVals) {
                    for (QValue defVal : defVals) {
                         if (defaultValues.length() &gt; 0) {
                             defaultValues.append(", ");
                         }
@@ -652,10 +632,10 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
                 ps.println("\t\tProtected\t" + aPd.isProtected());
                 ps.println("\t\tMultiple\t" + aPd.isMultiple());
             }
            NodeDef[] nd = ntd.getChildNodeDefs();
            for (NodeDef aNd : nd) {
            QNodeDefinition[] nd = ntd.getChildNodeDefs();
            for (QNodeDefinition aNd : nd) {
                 ps.print("\tNodeDefinition");
                ps.println(" (declared in " + aNd.getDeclaringNodeType() + ") id=" + aNd.getId());
                ps.println(" (declared in " + aNd.getDeclaringNodeType() + ")");
                 ps.println("\t\tName\t\t" + (aNd.definesResidual() ? "*" : aNd.getName().toString()));
                 Name[] reqPrimaryTypes = aNd.getRequiredPrimaryTypes();
                 if (reqPrimaryTypes != null &amp;&amp; reqPrimaryTypes.length &gt; 0) {
@@ -721,9 +701,8 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
     protected NodeTypeRegistry(NamespaceRegistry nsReg, FileSystem ntStore)
             throws RepositoryException {
         this.nsReg = nsReg;
        this.ntStore = ntStore;
         customNodeTypesResource =
                new FileSystemResource(this.ntStore, CUSTOM_NODETYPES_RESOURCE_NAME);
                new FileSystemResource(ntStore, CUSTOM_NODETYPES_RESOURCE_NAME);
         try {
             // make sure path to resource exists
             if (!customNodeTypesResource.exists()) {
@@ -741,12 +720,9 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
         // for the old one)
         entCache = new BitsetENTCacheImpl();
         registeredNTDefs = new ConcurrentReaderHashMap();
        propDefs = new ConcurrentReaderHashMap();
        nodeDefs = new ConcurrentReaderHashMap();
 
         // setup definition of root node
         rootNodeDef = createRootNodeDef();
        nodeDefs.put(rootNodeDef.getId(), rootNodeDef);
 
         // load and register pre-defined (i.e. built-in) node types
         builtInNTDefs = new NodeTypeDefStore();
@@ -979,7 +955,7 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
     /**
      * @return the definition of the root node
      */</comment>
    <function><type><specifier>public</specifier> <name>NodeDef</name></type> <name>getRootNodeDef</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>QNodeDefinition</name></type> <name>getRootNodeDef</name><parameter_list>()</parameter_list> <block>{<block_content>
         <return>return <expr><name>rootNodeDef</name></expr>;</return>
     </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1183</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1159</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeRegistry</name> implements <name>Dumpable</name></expr><operator>,</operator> <expr><name>NodeTypeEventListener</name> <block>{
             }</block></expr></expr_stmt>
         </block_content>}</block></function>
 
        <decl_stmt><decl><type><name><name>NodeDef</name><index>[]</index></name></type> <name>nodeDefs</name> <init>= <expr><call><name><name>childNodeENT</name><operator>.</operator><name>getAutoCreateNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>NodeDef</name></type> <name>nodeDef</name> <range>: <expr><name>nodeDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>nodeDefs</name> <init>= <expr><call><name><name>childNodeENT</name><operator>.</operator><name>getAutoCreateNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QNodeDefinition</name></type> <name>nodeDef</name> <range>: <expr><name>nodeDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>Name</name></type> <name>dnt</name> <init>= <expr><call><name><name>nodeDef</name><operator>.</operator><name>getDefaultPrimaryType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>Name</name></type> <name>definingNT</name> <init>= <expr><call><name><name>nodeDef</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1224</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">1200</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeRegistry</name> implements <name>Dumpable</name></expr><operator>,</operator> <expr><name>NodeTypeEventListener</name> <block>{
         <expr><name>ntd</name> <operator>=</operator> <operator>(</operator><name>NodeTypeDef</name><operator>)</operator> <call><name><name>ntd</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;
         <call><name><name>registeredNTDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ntd</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
        <comment type="line">// store property &amp; child node definitions of new node type by id</comment>
        <decl_stmt><decl><type><name><name>PropDef</name><index>[]</index></name></type> <name>pda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>aPda</name> <range>: <expr><name>pda</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>propDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>aPda</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aPda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name><name>NodeDef</name><index>[]</index></name></type> <name>nda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>NodeDef</name></type> <name>aNda</name> <range>: <expr><name>nda</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>nodeDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>aNda</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aNda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

         <return>return <expr><name>ent</name></expr>;</return>
     </block_content>}</block></try>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1309</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">1275</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeRegistry</name> implements <name>Dumpable</name></expr><operator>,</operator> <expr><name>NodeTypeEventListener</name> <block>{
             <comment type="line">// register clone of node type definition</comment>
             <expr><name>ntd</name> <operator>=</operator> <operator>(</operator><name>NodeTypeDef</name><operator>)</operator> <call><name><name>ntd</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;
             <call><name><name>registeredNTDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>ntd</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ntd</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
            <comment type="line">// store property &amp; child node definitions of new node type by id</comment>
            <decl_stmt><decl><type><name><name>PropDef</name><index>[]</index></name></type> <name>pda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>aPda</name> <range>: <expr><name>pda</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>propDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>aPda</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aPda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name><name>NodeDef</name><index>[]</index></name></type> <name>nda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>NodeDef</name></type> <name>aNda</name> <range>: <expr><name>nda</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>nodeDefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>aNda</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aNda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
         </block_content>}</block></for>
 
         <comment type="line">// finally add newly created effective node types to entCache</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1331</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">1288</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeRegistry</name> implements <name>Dumpable</name></expr><operator>,</operator> <expr><name>NodeTypeEventListener</name> <block>{
         }</block>
         <call><name><name>registeredNTDefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>entCache</name><operator>.</operator><name>invalidate</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// remove property &amp; child node definitions</comment>
        <decl_stmt><decl><type><name><name>PropDef</name><index>[]</index></name></type> <name>pda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>aPda</name> <range>: <expr><name>pda</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>propDefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>aPda</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name><name>NodeDef</name><index>[]</index></name></type> <name>nda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>NodeDef</name></type> <name>aNda</name> <range>: <expr><name>nda</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>nodeDefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>aNda</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
     </block_content>}</block></for>
 
     <decl_stmt><decl><type><specifier>private</specifier> <name>void</name></type> <name>internalUnregister</name><argument_list>(<argument><expr><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name> <name>ntNames</name></expr></argument>)</argument_list>
@@ -1525</decl>,8 +1472,8 @@ public <decl><type ref="prev"/><name>class</name> <name>NodeTypeRegistry</name> implements <name>Dumpable</name></decl>, <decl><type ref="prev"/><name>NodeTypeEventListener</name> <block>{<block_content>
         <expr_stmt><expr><call><name>checkNamespace</name><argument_list>(<argument><expr><call><name><name>ntd</name><operator>.</operator><name>getPrimaryItemName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nsReg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <comment type="line">// validate property definitions</comment>
        <decl_stmt><decl><type><name><name>PropDef</name><index>[]</index></name></type> <name>pda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>pd</name> <range>: <expr><name>pda</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>pda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QPropertyDefinition</name></type> <name>pd</name> <range>: <expr><name>pda</name></expr></range></decl></init>)</control> <block>{<block_content>
             <comment type="block" format="javadoc">/**
              * sanity check:
              * make sure declaring node type matches name of node type definition
@@ -1557,10 +1504,10 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
              * check default values:
              * make sure type of value is consistent with required property type
              */</comment>
            <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>defVals</name> <init>= <expr><call><name><name>pd</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>QValue</name><index>[]</index></name></type> <name>defVals</name> <init>= <expr><call><name><name>pd</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><name>defVals</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>defVals</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                 <decl_stmt><decl><type><name>int</name></type> <name>reqType</name> <init>= <expr><call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>InternalValue</name></type> <name>defVal</name> <range>: <expr><name>defVals</name></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>QValue</name></type> <name>defVal</name> <range>: <expr><name>defVals</name></expr></range></decl></init>)</control> <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>reqType</name> <operator>==</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></expr>)</condition> <block>{<block_content>
                         <expr_stmt><expr><name>reqType</name> <operator>=</operator> <call><name><name>defVal</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if> <else>else <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1590</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1537</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeRegistry</name> implements <name>Dumpable</name></expr><operator>,</operator> <expr><name>NodeTypeEventListener</name> <block>{
             <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>constraints</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><name>defVals</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>defVals</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                     <comment type="line">// check value constraints on every value</comment>
                    <for>for <control>(<init><decl><type><name>InternalValue</name></type> <name>defVal</name> <range>: <expr><name>defVals</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>QValue</name></type> <name>defVal</name> <range>: <expr><name>defVals</name></expr></range></decl></init>)</control> <block>{<block_content>
                         <comment type="line">// constraints are OR-ed together</comment>
                         <decl_stmt><decl><type><name>boolean</name></type> <name>satisfied</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                         <decl_stmt><decl><type><name>ConstraintViolationException</name></type> <name>cve</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1638</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1585</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeRegistry</name> implements <name>Dumpable</name></expr><operator>,</operator> <expr><name>NodeTypeEventListener</name> <block>{
         }</block>
 
         <comment type="line">// validate child-node definitions</comment>
        <name><name>NodeDef</name><index>[]</index></name> <name>cnda</name> <operator>=</operator> <call><name><name>ntd</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>NodeDef</name></type> <name>cnd</name> <range>: <expr><name>cnda</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>cnda</name> <init>= <expr><call><name><name>ntd</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QNodeDefinition</name></type> <name>cnd</name> <range>: <expr><name>cnda</name></expr></range></decl></init>)</control> <block>{<block_content>
             <comment type="block" format="javadoc">/**
              * sanity check:
              * make sure declaring node type matches name of node type definition
@@ -1816,8 +1763,8 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
         return ent;
     }
 
    private static NodeDef createRootNodeDef() {
        NodeDefImpl def = new NodeDefImpl();
    private static QNodeDefinition createRootNodeDef() {
        QNodeDefinitionBuilder def = new QNodeDefinitionBuilder();
 
         // FIXME need a fake declaring node type:
         // rep:root is not quite correct but better than a non-existing node type
@@ -1829,7 +1776,7 @@ public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
         def.setOnParentVersion(OnParentVersionAction.VERSION);
         def.setAllowsSameNameSiblings(false);
         def.setAutoCreated(true);
        return def;
        return def.build();
     }
 
     /**
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/PropDef.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/PropDef.java
deleted file mode 100644
index 07be11339..000000000
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/PropDef.java
++ /dev/null
@@ -1,89 +0,0 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueConstraint</name></name>;</import>

<comment type="block" format="javadoc">/**
 * &lt;code&gt;PropDef&lt;/code&gt; is the internal representation of
 * a property definition. It refers to &lt;code&gt;Name&lt;/code&gt;s only
 * and is thus isolated from session-specific namespace mappings.
 *
 * @see javax.jcr.nodetype.PropertyDefinition
 */</comment>
<interface><specifier>public</specifier> interface <name>PropDef</name> <super_list><extends>extends <super><name>ItemDef</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><name><name>PropDef</name><index>[]</index></name></type> <name>EMPTY_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>PropDef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Returns an identifier for this property definition.
     *
     * @return an identifier for this property definition.
     */</comment>
    <function_decl><type><name>PropDefId</name></type> <name>getId</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the required type.
     *
     * @return the required type.
     */</comment>
    <function_decl><type><name>int</name></type> <name>getRequiredType</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the array of value constraints.
     *
     * @return the array of value constraints.
     */</comment>
    <function_decl><type><name><name>QValueConstraint</name><index>[]</index></name></type> <name>getValueConstraints</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the array of default values.
     *
     * @return the array of default values.
     */</comment>
    <function_decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>getDefaultValues</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Reports whether this property can have multiple values.
     *
     * @return the 'multiple' flag.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isMultiple</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the array of available query operators.
     *
     * @return the array of query operators.
     */</comment>
    <function_decl><type><name><name>String</name><index>[]</index></name></type> <name>getAvailableQueryOperators</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Reports whether this property is full-text searchable.
     *
     * @return the 'fullTextSearchable' flag.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isFullTextSearchable</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Reports whether this property is query-orderable.
     *
     * @return the 'queryOrderable' flag.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isQueryOrderable</name><parameter_list>()</parameter_list>;</function_decl>

}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDefId</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDefId</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">667a18f9a</literal><operator>..</operator><name>af9ea2784</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDefId</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDefId</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>

 <comment type="block" format="javadoc">/**
 * &lt;code&gt;PropDefId&lt;/code&gt; serves as identifier for a given &lt;code&gt;PropDef&lt;/code&gt;.
 * &lt;code&gt;PropDefId&lt;/code&gt; serves as identifier for a given &lt;code&gt;QPropertyDefinition&lt;/code&gt;.
  *
  *
 * uniquely identifies a &lt;code&gt;PropDef&lt;/code&gt; in the
 * uniquely identifies a &lt;code&gt;QPropertyDefinition&lt;/code&gt; in the
  * node type registry.
  */</comment>
<class><specifier>public</specifier> class <name>PropDefId</name> <super_list><implements>implements <super><name>Serializable</name></super></implements></super_list> <block>{
<class>class <name>PropDefId</name> <super_list><implements>implements <super><name>Serializable</name></super></implements></super_list> <block>{
 
     <comment type="block" format="javadoc">/**
      * Serialization UID of this class.
@@ -34,20 +36,20 @@ public class PropDefId implements Serializable {
 
     /**
      * The internal id is computed based on the characteristics of the
     * &lt;code&gt;PropDef&lt;/code&gt; that this &lt;code&gt;PropDefId&lt;/code&gt; identifies.
     * &lt;code&gt;QPropertyDefinition&lt;/code&gt; that this &lt;code&gt;PropDefId&lt;/code&gt; identifies.
      */</comment>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * Creates a new &lt;code&gt;PropDefId&lt;/code&gt; that serves as identifier for
     * the given &lt;code&gt;PropDef&lt;/code&gt;. An internal id is computed based on
     * the characteristics of the &lt;code&gt;PropDef&lt;/code&gt; that it identifies.
     * the given &lt;code&gt;QPropertyDefinition&lt;/code&gt;. An internal id is computed based on
     * the characteristics of the &lt;code&gt;QPropertyDefinition&lt;/code&gt; that it identifies.
      *
     * @param def &lt;code&gt;PropDef&lt;/code&gt; to create identifier for
     * @param def &lt;code&gt;QPropertyDefinition&lt;/code&gt; to create identifier for
      */</comment>
    <constructor><name>PropDefId</name><parameter_list>(<parameter><decl><type><name>PropDef</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <constructor><specifier>public</specifier> <name>PropDefId</name><parameter_list>(<parameter><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><name>def</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"PropDef argument can not be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"QPropertyDefinition argument can not be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
         <comment type="line">// build key (format: &lt;declaringNodeType&gt;/&lt;name&gt;/&lt;requiredType&gt;/&lt;multiple&gt;)</comment>
         <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDefImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDefImpl</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <name>a0821655e</name><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropDefImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">388</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>query</name><operator>.</operator><name>qom</name><operator>.</operator><name>Operator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>QPropertyDefinitionImpl</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PropertyType</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class implements the &lt;code&gt;PropDef&lt;/code&gt; interface and additionally
 * provides setter methods for the various property definition attributes.
 */</comment>
<class><specifier>public</specifier> class <name>PropDefImpl</name> <super_list><extends>extends <super><name>ItemDefImpl</name></super></extends> <implements>implements <super><name>PropDef</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The required type.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>requiredType</name> <init>= <expr><name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The value constraints.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>QValueConstraint</name><index>[]</index></name></type> <name>valueConstraints</name> <init>= <expr><name><name>QValueConstraint</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The default values.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>InternalValue</name><index>[]</index></name></type> <name>defaultValues</name> <init>= <expr><name><name>InternalValue</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The 'multiple' flag
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>multiple</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The identifier of this property definition. The identifier is lazily
     * computed based on the characteristics of this property definition and
     * reset on every attribute change.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PropDefId</name></type> <name>id</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * The 'fulltext searchable' flag.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fullTextSearchable</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * The 'query orderable' flag.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>queryOrderable</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * The 'query operators.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>queryOperators</name> <init>= <expr><call><name><name>Operator</name><operator>.</operator><name>getAllQueryOperators</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>PropDefImpl</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>PropDefImpl</name><parameter_list>(<parameter><decl><type><name>QPropertyDefinition</name></type> <name>pd</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>requiredType</name> <operator>=</operator> <call><name><name>pd</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>valueConstraints</name> <operator>=</operator> <call><name><name>pd</name><operator>.</operator><name>getValueConstraints</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>QValue</name><index>[]</index></name></type> <name>vs</name> <init>= <expr><call><name><name>pd</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>vs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>defaultValues</name> <operator>=</operator> <operator>new</operator> <name><name>InternalValue</name><index>[<expr><name><name>vs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>vs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><name><name>defaultValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RepositoryException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Error while converting default values."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>multiple</name> <operator>=</operator> <call><name><name>pd</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fullTextSearchable</name> <operator>=</operator> <call><name><name>pd</name><operator>.</operator><name>isFullTextSearchable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>queryOrderable</name> <operator>=</operator> <call><name><name>pd</name><operator>.</operator><name>isQueryOrderable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>queryOperators</name> <operator>=</operator> <call><name><name>pd</name><operator>.</operator><name>getAvailableQueryOperators</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns the QPropertyDefinition of this PropDef
     * @return the QPropertyDefinition
     */</comment>
    <function><type><specifier>public</specifier> <name>QPropertyDefinition</name></type> <name>getQPropertyDefinition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>QPropertyDefinitionImpl</name><argument_list>(
                <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getDeclaringNodeType</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>isAutoCreated</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>isMandatory</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getOnParentVersion</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>isProtected</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getDefaultValues</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>isMultiple</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getRequiredType</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getValueConstraints</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getAvailableQueryOperators</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>isFullTextSearchable</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>isQueryOrderable</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the required type
     *
     * @param requiredType
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRequiredType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requiredType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>requiredType</name></name> <operator>=</operator> <name>requiredType</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the value constraints.
     *
     * @param valueConstraints
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValueConstraints</name><parameter_list>(<parameter><decl><type><name><name>QValueConstraint</name><index>[]</index></name></type> <name>valueConstraints</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>valueConstraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueConstraints</name></name> <operator>=</operator> <name>valueConstraints</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueConstraints</name></name> <operator>=</operator> <name><name>QValueConstraint</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the default values.
     *
     * @param defaultValues
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultValues</name><parameter_list>(<parameter><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>defaultValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>defaultValues</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultValues</name></name> <operator>=</operator> <name>defaultValues</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultValues</name></name> <operator>=</operator> <name><name>InternalValue</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'multiple' flag.
     *
     * @param multiple
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMultiple</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>multiple</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>multiple</name></name> <operator>=</operator> <name>multiple</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'fulltext searchable' flag.
     *
     * @param fullTextSearchable
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFullTextSearchable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>fullTextSearchable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fullTextSearchable</name></name> <operator>=</operator> <name>fullTextSearchable</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'fulltext searchable' flag.
     *
     * @param queryOrderable
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQueryOrderable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>queryOrderable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queryOrderable</name></name> <operator>=</operator> <name>queryOrderable</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'available' query operators.
     *
     * @param queryOperators
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAvailableQueryOperators</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>queryOperators</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>queryOperators</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queryOperators</name></name> <operator>=</operator> <name>queryOperators</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queryOperators</name></name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="line">//------------------------------------------------&lt; ItemDefImpl overrides &gt;</comment>
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDeclaringNodeType</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>declaringNodeType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><name>declaringNodeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoCreated</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>autoCreated</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setAutoCreated</name></name><argument_list>(<argument><expr><name>autoCreated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnParentVersion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>onParentVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setOnParentVersion</name></name><argument_list>(<argument><expr><name>onParentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProtected</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>writeProtected</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setProtected</name></name><argument_list>(<argument><expr><name>writeProtected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMandatory</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>mandatory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset id field in order to force lazy recomputation of identifier</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setMandatory</name></name><argument_list>(<argument><expr><name>mandatory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">//--------------------------------------------------------------&lt; PropDef &gt;</comment>
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     * &lt;p/&gt;
     * The identifier is computed based on the characteristics of this property
     * definition, i.e. modifying attributes of this property definition will
     * have impact on the identifier returned by this method.
     */</comment>
    <function><type><specifier>public</specifier> <name>PropDefId</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// generate new identifier based on this property definition</comment>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <operator>new</operator> <call><name>PropDefId</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>id</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRequiredType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>requiredType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>QValueConstraint</name><index>[]</index></name></type> <name>getValueConstraints</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>valueConstraints</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>InternalValue</name><index>[]</index></name></type> <name>getDefaultValues</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>defaultValues</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMultiple</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>multiple</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     *
     * @return always &lt;code&gt;false&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>definesNode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getAvailableQueryOperators</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>queryOperators</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFullTextSearchable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>fullTextSearchable</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isQueryOrderable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>queryOrderable</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//-------------------------------------------&lt; java.lang.Object overrides &gt;</comment>
    <comment type="block" format="javadoc">/**
     * Compares two property definitions for equality. Returns &lt;code&gt;true&lt;/code&gt;
     * if the given object is a property defintion and has the same attributes
     * as this property definition.
     *
     * @param obj the object to compare this property definition with
     * @return &lt;code&gt;true&lt;/code&gt; if the object is equal to this property definition,
     *         &lt;code&gt;false&lt;/code&gt; otherwise
     * @see Object#equals(Object)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>PropDefImpl</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PropDefImpl</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>PropDefImpl</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <name>requiredType</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>requiredType</name></name>
                    <operator>&amp;&amp;</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>valueConstraints</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>valueConstraints</name></name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>defaultValues</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>defaultValues</name></name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <name>multiple</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>multiple</name></name>
                    <operator>&amp;&amp;</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>queryOperators</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>queryOperators</name></name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <name>queryOrderable</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>queryOrderable</name></name>
                    <operator>&amp;&amp;</operator> <name>fullTextSearchable</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>fullTextSearchable</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns zero to satisfy the Object equals/hashCode contract.
     * This class is mutable and not meant to be used as a hash key.
     *
     * @return always zero
     * @see Object#hashCode()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>
<name>deleted</name> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">4f63e68d1</literal><operator>..</operator><literal type="number">000000000</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">152</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>ValueFactory</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinition</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>InvalidConstraintException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class implements the &lt;code&gt;PropertyDefinition&lt;/code&gt; interface.
 * All method calls are delegated to the wrapped {@link PropDef},
 * performing the translation from &lt;code&gt;Name&lt;/code&gt;s to JCR names
 * (and vice versa) where necessary.
 */</comment>
<class><specifier>public</specifier> class <name>PropertyDefinitionImpl</name> <super_list><extends>extends <super><name>ItemDefinitionImpl</name></super></extends>
        <implements>implements <super><name>PropertyDefinition</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Logger instance for this class
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ValueFactory</name></type> <name>valueFactory</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Package private constructor
     *
     * @param propDef    property definition
     * @param ntMgr      node type manager
     * @param resolver   name resolver
     * @param valueFactory the value factory
     */</comment>
    <constructor><name>PropertyDefinitionImpl</name><parameter_list>(<parameter><decl><type><name>PropDef</name></type> <name>propDef</name></decl></parameter>, <parameter><decl><type><name>NodeTypeManagerImpl</name></type> <name>ntMgr</name></decl></parameter>,
                           <parameter><decl><type><name>NamePathResolver</name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>ValueFactory</name></type> <name>valueFactory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>propDef</name></expr></argument>, <argument><expr><name>ntMgr</name></expr></argument>, <argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueFactory</name></name> <operator>=</operator> <name>valueFactory</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns the wrapped property definition.
     *
     * @return the wrapped property definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>PropDef</name></type> <name>unwrap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>PropDef</name><operator>)</operator> <name>itemDef</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//---------------------------------------------------&lt; PropertyDefinition &gt;</comment>
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Value</name><index>[]</index></name></type> <name>getDefaultValues</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>defVals</name> <init>= <expr><operator>(</operator><operator>(</operator><name>PropDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>getDefaultValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>defVals</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name><name>defVals</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>defVals</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ValueFormat</name><operator>.</operator><name>getJCRValue</name></name><argument_list>(<argument><expr><name><name>defVals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>valueFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RepositoryException</name></type> <name>re</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// should never get here</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>propName</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"[null]"</literal></expr> </then><else>: <expr><call><name>getName</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"illegal default value specified for property "</literal>
                        <operator>+</operator> <name>propName</name> <operator>+</operator> <literal type="string">" in node type "</literal> <operator>+</operator> <call><name>getDeclaringNodeType</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <return>return <expr><name>values</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRequiredType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>PropDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>getRequiredType</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getValueConstraints</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QValueConstraint</name><index>[]</index></name></type> <name>constraints</name> <init>= <expr><operator>(</operator><operator>(</operator><name>PropDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>getValueConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>constraints</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>vca</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><name><name>constraints</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>constraints</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>ValueConstraint</name></type> <name>vc</name> <init>= <expr><call><name><name>ValueConstraint</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PropDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>getRequiredType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>constraints</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>vca</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>vc</name><operator>.</operator><name>getDefinition</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidConstraintException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Error during conversion of value constraint."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>vca</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>constraints</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <return>return <expr><name>vca</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMultiple</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>PropDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>isMultiple</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getAvailableQueryOperators</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>PropDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>getAvailableQueryOperators</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFullTextSearchable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>PropDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>isFullTextSearchable</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isQueryOrderable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>PropDef</name><operator>)</operator> <name>itemDef</name><operator>)</operator><operator>.</operator><call><name>isQueryOrderable</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>virtual</name><operator>/</operator><name><name>VirtualNodeTypeStateProvider</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>virtual</name><operator>/</operator><name><name>VirtualNodeTypeStateProvider</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f6014723b</name><operator>..</operator><name>e8a16ebcc</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>virtual</name><operator>/</operator><name><name>VirtualNodeTypeStateProvider</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>virtual</name><operator>/</operator><name><name>VirtualNodeTypeStateProvider</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>version</name><operator>.</operator><name>OnParentVersionAction</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ChangeLog</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>NoSuchItemStateException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>virtual</name><operator>.</operator><name>AbstractVISProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>virtual</name><operator>.</operator><name>VirtualNodeState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -74,9 +73,6 @@ public class VirtualNodeTypeStateProvider extends AbstractVISProvider {
      */</comment>
     <function><type><specifier>protected</specifier> <name>VirtualNodeState</name></type> <name>createRootNodeState</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>VirtualNodeState</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>VirtualNodeState</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>parentId</name></expr></argument>, <argument><expr><name>rootNodeId</name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_NODETYPES</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NodeDefId</name></type> <name>id</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_SYSTEM</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicableChildNodeDef</name><argument_list>(
                <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_NODETYPES</name></name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_NODETYPES</name></name></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>Name</name><index>[]</index></name></type> <name>ntNames</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getRegisteredNodeTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ntNames</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>NodeTypeDef</name></type> <name>ntDef</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getNodeTypeDef</name></name><argument_list>(<argument><expr><name><name>ntNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">164</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>VirtualNodeTypeStateProvider</name> extends <name>AbstractVISProvider</name> <block>{
         }</block>
 
         <comment type="line">// add property defs</comment>
        <name><name>PropDef</name><index>[]</index></name> <name>propDefs</name> <operator>=</operator> <call><name><name>ntDef</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>propDefs</name> <init>= <expr><call><name><name>ntDef</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>propDefs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>VirtualNodeState</name></type> <name>pdState</name> <init>= <expr><call><name>createPropertyDefState</name><argument_list>(<argument><expr><name>ntState</name></expr></argument>, <argument><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ntDef</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>ntState</name><operator>.</operator><name>addChildNodeEntry</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PROPERTYDEFINITION</name></name></expr></argument>, <argument><expr><call><name><name>pdState</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">177</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">173</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>VirtualNodeTypeStateProvider</name> extends <name>AbstractVISProvider</name> <block>{
         }</block>
 
         <comment type="line">// add child node defs</comment>
        <name><name>NodeDef</name><index>[]</index></name> <name>cnDefs</name> <operator>=</operator> <call><name><name>ntDef</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>cnDefs</name> <init>= <expr><call><name><name>ntDef</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cnDefs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>VirtualNodeState</name></type> <name>cnState</name> <init>= <expr><call><name>createChildNodeDefState</name><argument_list>(<argument><expr><name>ntState</name></expr></argument>, <argument><expr><name><name>cnDefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ntDef</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>ntState</name><operator>.</operator><name>addChildNodeEntry</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_CHILDNODEDEFINITION</name></name></expr></argument>, <argument><expr><call><name><name>cnState</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">197</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">193</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>VirtualNodeTypeStateProvider</name> extends <name>AbstractVISProvider</name> <block>{
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>RepositoryException</name>
      <operator>*</operator><operator>/</operator>
     <specifier>private</specifier> <name>VirtualNodeState</name> <call><name>createPropertyDefState</name><argument_list>(<argument><expr><name>VirtualNodeState</name> <name>parent</name></expr></argument>,
                                                    <argument><expr><name>PropDef</name> <name>propDef</name></expr></argument>,
                                                    <argument><expr><name>QPropertyDefinition</name> <name>propDef</name></expr></argument>,
                                                     <argument><expr><name>NodeTypeDef</name> <name>ntDef</name></expr></argument>, <argument><expr><name>int</name> <name>n</name></expr></argument>)</argument_list></call></expr></argument></throws>
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{
         <expr><name>NodeId</name> <name>id</name> <operator>=</operator> <call><name>calculateStableId</name><argument_list>(
<argument/></argument_list></call></expr></block></expr></argument>@<argument>@ <expr><operator>-</operator><literal type="number">218</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">214</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>VirtualNodeTypeStateProvider</name> extends <name>AbstractVISProvider</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name><name>pState</name><operator>.</operator><name>setPropertyValue</name></name><argument_list>(
                 <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_REQUIREDTYPE</name></name></expr></argument>,
                 <argument><expr><call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>PropertyType</name><operator>.</operator><name>nameFromValue</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>defVals</name> <init>= <expr><call><name><name>propDef</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>defVals</name> <init>= <expr><call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <comment type="line">// retrieve the property type from the first default value present with</comment>
         <comment type="line">// the property definition. in case no default values are defined,</comment>
         <comment type="line">// fallback to PropertyType.STRING in order to avoid creating a property</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">227</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">223</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>VirtualNodeTypeStateProvider</name> extends <name>AbstractVISProvider</name> <block>{
         <if_stmt><if>if <condition>(<expr><name>defVals</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>defVals</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>defValsType</name> <operator>=</operator> <name><name>defVals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/>}</block_content>
        pState.setPropertyValues(NameConstants.JCR_DEFAULTVALUES</block><operator>,</operator> <expr_stmt><expr><name>defValsType</name></expr><operator>,</operator> <expr><name>defVals</name></expr></expr_stmt></if></if_stmt>)</block></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>defVals</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>pState</name><operator>.</operator><name>setPropertyValues</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_DEFAULTVALUES</name></name></expr></argument>, <argument><expr><name>defValsType</name></expr></argument>, <argument><expr><name>defVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content>
         QValueConstraint[] vc = propDef.getValueConstraints(</block></if></if_stmt>)</block_content></block></expr>;
         <name><name>InternalValue</name><index>[]</index></name> <name>vals</name> <operator>=</operator> <operator>new</operator> <name><name>InternalValue</name><index>[<expr><name><name>vc</name><operator>.</operator><name>length</name></name></expr>]</index></name></block></expr>;</expr_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">246</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">244</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>VirtualNodeTypeStateProvider</name> extends <name>AbstractVISProvider</name> <block>{
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>RepositoryException</name>
      <operator>*</operator><operator>/</operator>
     <specifier>private</specifier> <name>VirtualNodeState</name> <call><name>createChildNodeDefState</name><argument_list>(<argument><expr><name>VirtualNodeState</name> <name>parent</name></expr></argument>,
                                                     <argument><expr><name>NodeDef</name> <name>cnDef</name></expr></argument>,
                                                     <argument><expr><name>QNodeDefinition</name> <name>cnDef</name></expr></argument>,
                                                      <argument><expr><name>NodeTypeDef</name> <name>ntDef</name></expr></argument>, <argument><expr><name>int</name> <name>n</name></expr></argument>)</argument_list></call></expr></argument></throws>
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{
         <expr><name>NodeId</name> <name>id</name> <operator>=</operator> <call><name>calculateStableId</name><argument_list>(
<argument><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>NodeTypeReader</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>NodeTypeReader</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ba9dc0185</name><operator>..</operator><literal type="number">481e62f3e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>NodeTypeReader</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>NodeTypeReader</name><operator>.</operator><name>java</name></name></expr></argument></argument_list></call></expr></block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@</expr></argument></throws></expr>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>xml</name></name>;</package></block></expr></expr_stmt>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>InvalidNodeTypeDefException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>ItemDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDefImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>DOMWalker</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValueFactory</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueFactoryQImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ValueConstraint</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>InvalidConstraintException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>QNodeDefinitionBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>QPropertyDefinitionBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueHelper</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PropertyType</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">183</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">183</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeReader</name> <block>{
         }</block>
 
         <comment type="line">// property definitions</comment>
        <name><name>List</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name> <name>properties</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PropDef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <while>while <condition>(<expr><call><name><name>walker</name><operator>.</operator><name>iterateElements</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PROPERTYDEFINITION_ELEMENT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PropDefImpl</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QPropertyDefinitionBuilder</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>type</name><operator>.</operator><name>setPropertyDefs</name></name><argument_list>(<argument><expr><call><name><name>properties</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PropDef</name><index>[<expr><call><name><name>properties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>type</name><operator>.</operator><name>setPropertyDefs</name></name><argument_list>(<argument><expr><call><name><name>properties</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>properties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <comment type="line">// child node definitions</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name></type> <name>nodes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>NodeDef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name></type> <name>nodes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <while>while <condition>(<expr><call><name><name>walker</name><operator>.</operator><name>iterateElements</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CHILDNODEDEFINITION_ELEMENT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>NodeDefImpl</name></type> <name>def</name> <init>= <expr><call><name>getChildNodeDef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QNodeDefinitionBuilder</name></type> <name>def</name> <init>= <expr><call><name>getChildNodeDef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>nodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>nodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>type</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><call><name><name>nodes</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDef</name><index>[<expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>type</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><call><name><name>nodes</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <return>return <expr><name>type</name></expr>;</return>
     </block_content>}</block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeTypeReader</name> <block>{
      <expr><operator>*</operator>                                     <name>illegal</name> <name>name</name>
      <operator>*</operator> @<throws>throws <argument><expr><name>NamespaceException</name></expr></argument></throws></expr> <if_stmt><if>if a namespace is not defined
      */
    private PropDefImpl getPropDef<condition>()</condition><block type="pseudo"><block_content>
    <function><type><specifier>private</specifier> <name>QPropertyDefinitionBuilder</name></type> <name>getPropDef</name><parameter_list>()</parameter_list>
             <throws>throws <argument><expr><name>InvalidNodeTypeDefException</name></expr></argument>, <argument><expr><name>NameException</name></expr></argument>, <argument><expr><name>NamespaceException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDefImpl</name></type> <name>def</name> <init>= <expr><operator>new</operator> <call><name>PropDefImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinitionBuilder</name></type> <name>def</name> <init>= <expr><operator>new</operator> <call><name>QPropertyDefinitionBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NAME_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name><name>ItemDef</name><operator>.</operator><name>ANY_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
             <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>
 
         <comment type="line">// simple attributes</comment>
         <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setAutoCreated</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(
                <argument><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>AUTOCREATED_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>AUTOCREATED_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></function></block_content></block></if></if_stmt>)</block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setMandatory</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(
                <argument><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MANDATORY_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MANDATORY_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></for>)</block_content></block><empty_stmt>;</empty_stmt></for>
         <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setProtected</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(
                <argument><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PROTECTED_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PROTECTED_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></for>)</block_content></block>;</function>
         <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setOnParentVersion</name></name><argument_list>(<argument><expr><call><name><name>OnParentVersionAction</name><operator>.</operator><name>valueFromName</name></name><argument_list>(
                 <argument><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ONPARENTVERSION_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setMultiple</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(
<argument>@@ <expr><operator>-</operator><literal type="number">320</literal></expr></argument>,<argument><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">317</literal></expr></argument>,<argument><expr><literal type="number">22</literal> @@ <specifier>public</specifier> class <name>NodeTypeReader</name> <block>{
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>NameException</name></expr></argument></throws></expr> <if_stmt><if>if the definition contains an illegal name
      * @<throws>throws <argument><expr><name>NamespaceException</name></expr></argument></throws> if a namespace is not defined
      */
    private NodeDefImpl getChildNodeDef<condition>()</condition><block type="pseudo"><block_content> <throws>throws <argument><expr><name>NameException</name></expr></argument>, <argument><expr><name>NamespaceException</name> <block>{
        <expr><name>NodeDefImpl</name> <name>def</name> <operator>=</operator> <operator>new</operator> <call><name>NodeDefImpl</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
    <specifier>private</specifier> <name>QNodeDefinitionBuilder</name> <call><name>getChildNodeDef</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>NameException</name></expr></argument>, <argument><expr><name>NamespaceException</name> <block>{
        <expr><name>QNodeDefinitionBuilder</name> <name>def</name> <operator>=</operator> <operator>new</operator> <call><name>QNodeDefinitionBuilder</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></block></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>
         <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>NAME_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name><name>ItemDef</name><operator>.</operator><name>ANY_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
             <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>
 
         <comment type="line">// simple attributes</comment>
         <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setAutoCreated</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(
                <argument><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>AUTOCREATED_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>AUTOCREATED_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></constructor>)</block_content></block><empty_stmt>;</empty_stmt></constructor>
         <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setMandatory</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(
                <argument><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>MANDATORY_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <constructor><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><parameter_list>(<parameter><decl><type><name><name>Constants</name><operator>.</operator><name>MANDATORY_ATTRIBUTE</name></name></type></decl></parameter>)</parameter_list></constructor>)</block></class>)</block>;</class>
         <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setProtected</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(
                <argument><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PROTECTED_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PROTECTED_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></for>)</block_content></block><empty_stmt>;</empty_stmt></for>
         <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setOnParentVersion</name></name><argument_list>(<argument><expr><call><name><name>OnParentVersionAction</name><operator>.</operator><name>valueFromName</name></name><argument_list>(
                 <argument><expr><call><name><name>walker</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ONPARENTVERSION_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>def</name><operator>.</operator><name>setAllowsSameNameSiblings</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(
<argument><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>NodeTypeWriter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>NodeTypeWriter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4c56e66cf</literal><operator>..</operator><literal type="number">64f18f6e1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>NodeTypeWriter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>NodeTypeWriter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@
  <operator>*</operator><operator>/</operator></expr></argument></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>xml</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>DOMBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValueFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>namespace</name><operator>.</operator><name>NamespaceResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueFactoryQImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ValueConstraint</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceRegistry</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PropertyType</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">165</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">165</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>NodeTypeWriter</name> <block>{
         }</block>
 
         <comment type="line">// property definitions</comment>
        <name><name>PropDef</name><index>[]</index></name> <name>properties</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>PropDef</name></type> <name>property</name> <range>: <expr><name>properties</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>properties</name> <init>= <expr><call><name><name>def</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QPropertyDefinition</name></type> <name>property</name> <range>: <expr><name>properties</name></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name>addPropDef</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
 
         <comment type="line">// child node definitions</comment>
        <decl_stmt><decl><type><name><name>NodeDef</name><index>[]</index></name></type> <name>nodes</name> <init>= <expr><call><name><name>def</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>NodeDef</name></type> <name>node</name> <range>: <expr><name>nodes</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>nodes</name> <init>= <expr><call><name><name>def</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QNodeDefinition</name></type> <name>node</name> <range>: <expr><name>nodes</name></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name>addChildNodeDef</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>NodeTypeWriter</name> <block>{
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>NamespaceException</name></expr></argument></throws></expr> <if_stmt><if>if the property definition contains
      *                                   invalid namespace references
      */
    private void addPropDef<condition>(<expr><name>PropDef</name> <name>def</name></expr>)</condition><block type="pseudo"><block_content>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addPropDef</name><parameter_list>(<parameter><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl></parameter>)</parameter_list>
             <throws>throws <argument><expr><name>NamespaceException</name></expr></argument>, <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startElement</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PROPERTYDEFINITION_ELEMENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">261</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">261</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>NodeTypeWriter</name> <block>{
         }</block>
 
         <comment type="line">// default values</comment>
        <name><name>InternalValue</name><index>[]</index></name> <name>defaults</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>QValue</name><index>[]</index></name></type> <name>defaults</name> <init>= <expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>defaults</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>defaults</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startElement</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DEFAULTVALUES_ELEMENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>InternalValue</name></type> <name>v</name> <range>: <expr><name>defaults</name></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>QValue</name></type> <name>v</name> <range>: <expr><name>defaults</name></expr></range></decl></init>)</control> <block>{<block_content>
                 <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addContentElement</name></name><argument_list>(
                         <argument><expr><name><name>Constants</name><operator>.</operator><name>DEFAULTVALUE_ELEMENT</name></name></expr></argument>,
                         <argument><expr><call><name><name>factory</name><operator>.</operator><name>createValue</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">282</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">282</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>NodeTypeWriter</name> <block>{
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>NamespaceException</name></expr></argument></throws></expr> <if_stmt><if>if the child node definition contains
      *                                   invalid namespace references
      */
    private void addChildNodeDef<condition>(<expr><name>NodeDef</name> <name>def</name></expr>)</condition><block type="pseudo"><block_content>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addChildNodeDef</name><parameter_list>(<parameter><decl><type><name>QNodeDefinition</name></type> <name>def</name></decl></parameter>)</parameter_list>
             <throws>throws <argument><expr><name>NamespaceException</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>startElement</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CHILDNODEDEFINITION_ELEMENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name><name>PersistenceCopier</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name><name>PersistenceCopier</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6fc3a6dbf</literal><operator>..</operator><literal type="number">152bf70f6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name><name>PersistenceCopier</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name><name>PersistenceCopier</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>PersistenceCopier</name> <block>{
             <comment type="line">// Copy the node state</comment>
             <expr><name>NodeState</name> <name>targetNode</name> <operator>=</operator> <call><name><name>target</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><call><name><name>sourceNode</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
             <call><name><name>targetNode</name><operator>.</operator><name>setParentId</name></name><argument_list>(<argument><expr><call><name><name>sourceNode</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>targetNode</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>sourceNode</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>targetNode</name><operator>.</operator><name>setNodeTypeName</name></name><argument_list>(<argument><expr><call><name><name>sourceNode</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>targetNode</name><operator>.</operator><name>setMixinTypeNames</name></name><argument_list>(<argument><expr><call><name><name>sourceNode</name><operator>.</operator><name>getMixinTypeNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>targetNode</name><operator>.</operator><name>setPropertyNames</name></name><argument_list>(<argument><expr><call><name><name>sourceNode</name><operator>.</operator><name>getPropertyNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">148</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">147</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>PersistenceCopier</name> <block>{
                 <expr><name>PropertyId</name> <name>id</name> <operator>=</operator> <operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><call><name><name>sourceNode</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;
                 <name>PropertyState</name> <name>sourceState</name> <operator>=</operator> <call><name><name>source</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
                 <decl_stmt><decl><type><name>PropertyState</name></type> <name>targetState</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>targetState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>sourceState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>targetState</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>sourceState</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>targetState</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><call><name><name>sourceState</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>sourceState</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name>bundle</name><operator>/</operator><name><name>AbstractBundlePersistenceManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name>bundle</name><operator>/</operator><name><name>AbstractBundlePersistenceManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cbad1d006</name><operator>..</operator><literal type="number">8559cee2d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name>bundle</name><operator>/</operator><name><name>AbstractBundlePersistenceManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name>bundle</name><operator>/</operator><name><name>AbstractBundlePersistenceManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>ItemId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>PropertyId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>NamespaceRegistryImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDefId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>persistence</name><operator>.</operator><name>IterablePersistenceManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>persistence</name><operator>.</operator><name>PMContext</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">109</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractBundlePersistenceManager</name> implements
     <comment type="block" format="javadoc">/** the cache of non-existent bundles */</comment>
     <specifier>private</specifier> <name>LRUNodeIdCache</name> <name>missing</name></expr>;</expr_stmt>
 
    <comment type="block" format="javadoc">/** definition id of the jcr:uuid property */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PropDefId</name></type> <name>idJcrUUID</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** definition id of the jcr:primaryType property */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PropDefId</name></type> <name>idJcrPrimaryType</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** definition id of the jcr:mixinTypes property */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PropDefId</name></type> <name>idJcrMixinTypes</name></decl>;</decl_stmt>

     <comment type="block" format="javadoc">/** the persistence manager context */</comment>
     <decl_stmt><decl><type><specifier>protected</specifier> <name>PMContext</name></type> <name>context</name></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">397</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">387</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractBundlePersistenceManager</name> implements
         <comment type="line">// init bundle cache</comment>
         <name>bundles</name> <operator>=</operator> <operator>new</operator> <call><name>BundleCache</name><argument_list>(<argument><expr><name>bundleCacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>missing</name> <operator>=</operator> <operator>new</operator> <call><name>LRUNodeIdCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// init property definitions</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>context</name><operator>.</operator><name>getNodeTypeRegistry</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>idJcrUUID</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getNodeTypeRegistry</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getEffectiveNodeType</name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>MIX_REFERENCEABLE</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getApplicablePropertyDef</name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_UUID</name></name></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>idJcrPrimaryType</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getNodeTypeRegistry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEffectiveNodeType</name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicablePropertyDef</name><argument_list>(
                    <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>idJcrMixinTypes</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getNodeTypeRegistry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEffectiveNodeType</name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicablePropertyDef</name><argument_list>(
                    <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_MIXINTYPES</name></name></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
     </block_content>}</block></function></block_content></block></if></if_stmt>
     
     <comment type="block" format="javadoc">/**
@@ -453,22 +431,19 @@ public abstract class AbstractBundlePersistenceManager implements
             if (id.getName().equals(NameConstants.JCR_UUID)) {
                 state = createNew(id);
                 state.setType(PropertyType.STRING);
                state.setDefinitionId(idJcrUUID);
                 state.setMultiValued(false);
                 state.setValues(new InternalValue[]{InternalValue.create(id.getParentId().toString())});
             } else if (id.getName().equals(NameConstants.JCR_PRIMARYTYPE)) {
                 state = createNew(id);
                 state.setType(PropertyType.NAME);
                state.setDefinitionId(idJcrPrimaryType);
                 state.setMultiValued(false);
                 state.setValues(new InternalValue[]{InternalValue.create(bundle.getNodeTypeName())});
             } else if (id.getName().equals(NameConstants.JCR_MIXINTYPES)) {
                 Set&lt;Name&gt; mixins = bundle.getMixinTypeNames();
                 state = createNew(id);
                 state.setType(PropertyType.NAME);
                state.setDefinitionId(idJcrMixinTypes);
                 state.setMultiValued(true);
                state.setValues(InternalValue.create((Name[]) mixins.toArray(new Name[mixins.size()])));
                state.setValues(InternalValue.create(mixins.toArray(new Name[mixins.size()])));
             } else {
                 throw new NoSuchItemStateException(id.toString());
             }
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/BundleBinding.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/BundleBinding.java
index 76e142578..711ff05a5 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/BundleBinding.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/BundleBinding.java
@@ -26,8 +26,6 @@ import org.apache.jackrabbit.core.id.PropertyId;
 import org.apache.jackrabbit.core.util.StringIndex;
 import org.apache.jackrabbit.core.value.InternalValue;
 import org.apache.jackrabbit.core.data.DataStore;
import org.apache.jackrabbit.core.nodetype.NodeDefId;
import org.apache.jackrabbit.core.nodetype.PropDefId;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
 import org.apache.jackrabbit.spi.commons.name.NameConstants;
@@ -100,7 +98,7 @@ public class BundleBinding extends ItemStateBinding {
         bundle.setParentId(readID(in));
 
         // definitionId
        bundle.setNodeDefId(NodeDefId.valueOf(in.readUTF()));
        in.readUTF();
 
         // mixin types
         Set&lt;Name&gt; mixinTypeNames = new HashSet&lt;Name&gt;();
@@ -273,7 +271,7 @@ public class BundleBinding extends ItemStateBinding {
         writeID(out, bundle.getParentId());
 
         // definitionId
        out.writeUTF(bundle.getNodeDefId().toString());
        out.writeUTF("");
 
         // mixin types
         for (Name name : bundle.getMixinTypeNames()) {
@@ -342,7 +340,7 @@ public class BundleBinding extends ItemStateBinding {
         // multiValued
         entry.setMultiValued(in.readBoolean());
         // definitionId
        entry.setPropDefId(PropDefId.valueOf(in.readUTF()));
        in.readUTF();
         // values
         int count = in.readInt();   // count
         InternalValue[] values = new InternalValue[count];
@@ -598,7 +596,7 @@ public class BundleBinding extends ItemStateBinding {
         // multiValued
         out.writeBoolean(state.isMultiValued());
         // definitionId
        out.writeUTF(state.getPropDefId().toString());
        out.writeUTF("");
         // values
         InternalValue[] values = state.getValues();
         out.writeInt(values.length); // count
@@ -736,7 +734,7 @@ public class BundleBinding extends ItemStateBinding {
      * Write a small binary value and return the data.
      *
      * @param out the output stream to write
     * @param blobVal the binary value
     * @param value the binary value
      * @param state the property state (for error messages)
      * @param i the index (for error messages)
      * @return the data
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/ItemStateBinding.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/ItemStateBinding.java
index 7b9f7ce88..87e2e2536 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/ItemStateBinding.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/ItemStateBinding.java
@@ -24,7 +24,6 @@ import org.apache.jackrabbit.core.util.StringIndex;
 import org.apache.jackrabbit.core.id.PropertyId;
 import org.apache.jackrabbit.core.id.NodeId;
 import org.apache.jackrabbit.core.data.DataStore;
import org.apache.jackrabbit.core.nodetype.NodeDefId;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
 
@@ -158,7 +157,7 @@ public class ItemStateBinding {
         // parentUUID
         state.setParentId(readID(in));
         // definitionId
        state.setDefinitionId(NodeDefId.valueOf(in.readUTF()));
        in.readUTF();
 
         // mixin types
         int count = in.readInt();   // count
@@ -210,7 +209,7 @@ public class ItemStateBinding {
         // parentUUID
         writeID(out, state.getParentId());
         // definitionId
        out.writeUTF(state.getDefinitionId().toString());
        out.writeUTF("");
         // mixin types
         Collection&lt;Name&gt; c = state.getMixinTypeNames();
         out.writeInt(c.size()); // count
@@ -261,7 +260,7 @@ public class ItemStateBinding {
     /**
      * Serializes a node identifier
      * @param out the output stream
     * @param uuid the node id
     * @param id the node id
      * @throws IOException in an I/O error occurs.
      */</comment>
     <specifier>public</specifier> <name>void</name> <call><name>writeNodeId</name><argument_list>(<argument><expr><name>DataOutputStream</name> <name>out</name></expr></argument>, <argument><expr><name>String</name> <name>id</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name>bundle</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NodePropBundle</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name>bundle</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NodePropBundle</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f45d01d16</name><operator>..</operator><literal type="number">281d22216</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name>bundle</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NodePropBundle</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>persistence</name><operator>/</operator><name>bundle</name><operator>/</operator><name>util</name><operator>/</operator><name><name>NodePropBundle</name><operator>.</operator><name>java</name></name></expr></block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">32</literal></expr></argument>,<argument><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">32</literal></expr></argument>,<argument><expr><literal type="number">6</literal> @@</expr></argument></throws></block></expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>persistence</name><operator>.</operator><name>util</name><operator>.</operator><name>BLOBStore</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>PropertyState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>NodeState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDefId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodePropBundle</name> <block>{
      <expr><operator>*</operator><operator>/</operator>
     <specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name> <name>mixinTypeNames</name></expr>;
 
    <comment type="block" format="javadoc">/**
     * the nodedef id
     */</comment>
    <specifier>private</specifier> <name>NodeDefId</name> <name>nodeDefId</name></block></expr>;</expr_stmt>

     <comment type="block" format="javadoc">/**
      * the child node entries
      */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">148</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">141</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodePropBundle</name> <block>{
         <expr><name>parentId</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr>;
         <name>nodeTypeName</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <expr_stmt><expr><name>mixinTypeNames</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getMixinTypeNames</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nodeDefId</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>isReferenceable</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>hasPropertyName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_UUID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>modCount</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getModCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ChildNodeEntry</name></name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getChildNodeEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">169</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">161</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodePropBundle</name> <block>{
         <expr><call><name><name>state</name><operator>.</operator><name>setParentId</name></name><argument_list>(<argument><expr><name>parentId</name></expr></argument>)</argument_list></call></expr>;
         <call><name><name>state</name><operator>.</operator><name>setNodeTypeName</name></name><argument_list>(<argument><expr><name>nodeTypeName</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setMixinTypeNames</name></name><argument_list>(<argument><expr><name>mixinTypeNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><name>nodeDefId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setModCount</name></name><argument_list>(<argument><expr><name>modCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <for>for <control>(<init><decl><type><name>ChildNodeEntry</name></type> <name>e</name> <range>: <expr><name>childNodeEntries</name></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>addChildNodeEntry</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">203</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">194</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodePropBundle</name> <block>{
             <return>return <expr><literal type="null">null</literal></expr>;</return>
         }</block></expr></expr_stmt>
         <decl_stmt><decl><type><name>PropertyState</name></type> <name>ps</name> <init>= <expr><call><name><name>pMgr</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getPropDefId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">283</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">273</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodePropBundle</name> <block>{
         <expr><name><name>this</name><operator>.</operator><name>mixinTypeNames</name></name> <operator>=</operator> <name>mixinTypeNames</name></expr>;
     }</block></expr></expr_stmt>
 
    <comment type="block" format="javadoc">/**
     * Returns the node def id of this bundle.
     * @return the node def id.
     */</comment>
    <function><type><specifier>public</specifier> <name>NodeDefId</name></type> <name>getNodeDefId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>nodeDefId</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the node def id.
     * @param nodeDefId the node def id.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNodeDefId</name><parameter_list>(<parameter><decl><type><name>NodeDefId</name></type> <name>nodeDefId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nodeDefId</name></name> <operator>=</operator> <name>nodeDefId</name></expr>;</expr_stmt>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * Checks if this bundle is referenceable.
      * @return &lt;code&gt;true&lt;/code&gt; if this bundle is referenceable;
@@ -548,11 +522,6 @@ public class NodePropBundle {
          */</comment>
         <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>multiValued</name></decl>;</decl_stmt>
 
        <comment type="block" format="javadoc">/**
         * the propedef id
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>PropDefId</name></type> <name>propDefId</name></decl>;</decl_stmt>

         <comment type="block" format="javadoc">/**
          * the blob ids
          */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">581</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">550</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodePropBundle</name> <block>{
             <expr><name>values</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr>;
             <name>type</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
             <expr_stmt><expr><name>multiValued</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>propDefId</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>modCount</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getModCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>PropertyType</name><operator>.</operator><name>BINARY</name></name></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name>blobIds</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[<expr><name><name>values</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">652</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">620</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodePropBundle</name> <block>{
             <expr><name><name>this</name><operator>.</operator><name>multiValued</name></name> <operator>=</operator> <name>multiValued</name></expr>;
         }</block></expr></expr_stmt>
 
        <comment type="block" format="javadoc">/**
         * Returns the propdef id.
         * @return the propdef id.
         */</comment>
        <function><type><specifier>public</specifier> <name>PropDefId</name></type> <name>getPropDefId</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>propDefId</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Sets the propdef id
         * @param propDefId the propdef id
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPropDefId</name><parameter_list>(<parameter><decl><type><name>PropDefId</name></type> <name>propDefId</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>propDefId</name></name> <operator>=</operator> <name>propDefId</name></expr>;</expr_stmt>
        </block_content>}</block></function>

         <comment type="block" format="javadoc">/**
          * Returns the n&lt;sup&gt;th&lt;/sup&gt; blob id.
          * @param n the index of the blob id
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/util/Serializer.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/util/Serializer.java
index e707365aa..2b1975593 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/util/Serializer.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/util/Serializer.java
@@ -20,8 +20,6 @@ import org.apache.commons.io.IOUtils;
 import org.apache.jackrabbit.core.id.NodeId;
 import org.apache.jackrabbit.core.id.PropertyId;
 import org.apache.jackrabbit.core.fs.FileSystemResource;
import org.apache.jackrabbit.core.nodetype.NodeDefId;
import org.apache.jackrabbit.core.nodetype.PropDefId;
 import org.apache.jackrabbit.core.state.NodeReferences;
 import org.apache.jackrabbit.core.state.NodeState;
 import org.apache.jackrabbit.core.state.PropertyState;
@@ -82,7 +80,7 @@ public final class Serializer {
             out.write(state.getParentId().getRawBytes());
         }
         // definitionId
        out.writeUTF(state.getDefinitionId().toString());
        out.writeUTF("");
         // mixin types
         Collection&lt;Name&gt; c = state.getMixinTypeNames();
         out.writeInt(c.size()); // count
@@ -131,8 +129,7 @@ public final class Serializer {
             state.setParentId(new NodeId(uuidBytes));
         }
         // definitionId
        s = in.readUTF();
        state.setDefinitionId(NodeDefId.valueOf(s));
        in.readUTF();
         // mixin types
         int count = in.readInt();   // count
         Set&lt;Name&gt; set = new HashSet&lt;Name&gt;(count);
@@ -183,7 +180,7 @@ public final class Serializer {
         // multiValued
         out.writeBoolean(state.isMultiValued());
         // definitionId
        out.writeUTF(state.getDefinitionId().toString());
        out.writeUTF("");
         // modCount
         out.writeShort(state.getModCount());
         // values
@@ -259,8 +256,7 @@ public final class Serializer {
         boolean multiValued = in.readBoolean();
         state.setMultiValued(multiValued);
         // definitionId
        String s = in.readUTF();
        state.setDefinitionId(PropDefId.valueOf(s));
        in.readUTF();
         // modCount
         short modCount = in.readShort();
         state.setModCount(modCount);
@@ -270,7 +266,7 @@ public final class Serializer {
         for (int i = 0; i &lt; count; i++) {
             InternalValue val;
             if (type == PropertyType.BINARY) {
                s = in.readUTF();   // value (i.e. blobId)
                String s = in.readUTF();   // value (i.e. blobId)
                 // special handling required for binary value:
                 // the value stores the id of the BLOB data
                 // in the BLOB store
@@ -302,7 +298,7 @@ public final class Serializer {
                 int len = in.readInt(); // lenght of byte[]
                 byte[] bytes = new byte[len];
                 in.readFully(bytes); // byte[]
                s = new String(bytes, ENCODING);
                String s = new String(bytes, ENCODING);
                 val = InternalValue.valueOf(s, type);
             }
             values[i] = val;
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java
index 128267a2e..9bb0cc651 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/xml/XMLPersistenceManager.java
@@ -24,8 +24,6 @@ import org.apache.jackrabbit.core.fs.FileSystem;
 import org.apache.jackrabbit.core.fs.FileSystemException;
 import org.apache.jackrabbit.core.fs.FileSystemResource;
 import org.apache.jackrabbit.core.fs.local.LocalFileSystem;
import org.apache.jackrabbit.core.nodetype.NodeDefId;
import org.apache.jackrabbit.core.nodetype.PropDefId;
 import org.apache.jackrabbit.core.persistence.AbstractPersistenceManager;
 import org.apache.jackrabbit.core.state.ItemStateException;
 import org.apache.jackrabbit.core.state.NoSuchItemStateException;
@@ -87,7 +85,6 @@ public class XMLPersistenceManager extends AbstractPersistenceManager {
     private static final String UUID_ATTRIBUTE = "uuid";
     private static final String NODETYPE_ATTRIBUTE = "nodeType";
     private static final String PARENTUUID_ATTRIBUTE = "parentUUID";
    private static final String DEFINITIONID_ATTRIBUTE = "definitionId";
     private static final String MODCOUNT_ATTRIBUTE = "modCount";
 
     private static final String MIXINTYPES_ELEMENT = "mixinTypes";
@@ -243,10 +240,6 @@ public class XMLPersistenceManager extends AbstractPersistenceManager {
             state.setParentId(NodeId.valueOf(parentUUID));
         }
 
        // definition id
        String definitionId = walker.getAttribute(DEFINITIONID_ATTRIBUTE);
        state.setDefinitionId(NodeDefId.valueOf(definitionId));

         // modification count
         String modCount = walker.getAttribute(MODCOUNT_ATTRIBUTE);
         state.setModCount(Short.parseShort(modCount));
@@ -324,10 +317,6 @@ public class XMLPersistenceManager extends AbstractPersistenceManager {
         String multiValued = walker.getAttribute(MULTIVALUED_ATTRIBUTE);
         state.setMultiValued(Boolean.getBoolean(multiValued));
 
        // definition id
        String definitionId = walker.getAttribute(DEFINITIONID_ATTRIBUTE);
        state.setDefinitionId(PropDefId.valueOf(definitionId));

         // modification count
         String modCount = walker.getAttribute(MODCOUNT_ATTRIBUTE);
         state.setModCount(Short.parseShort(modCount));
@@ -567,7 +556,6 @@ public class XMLPersistenceManager extends AbstractPersistenceManager {
                 writer.write("&lt;" + NODE_ELEMENT + " "
                         + UUID_ATTRIBUTE + "=\"" + id + "\" "
                         + PARENTUUID_ATTRIBUTE + "=\"" + parentId + "\" "
                        + DEFINITIONID_ATTRIBUTE + "=\"" + state.getDefinitionId() + "\" "
                         + MODCOUNT_ATTRIBUTE + "=\"" + state.getModCount() + "\" "
                         + NODETYPE_ATTRIBUTE + "=\"" + encodedNodeType + "\"&gt;\n");
 
@@ -650,7 +638,6 @@ public class XMLPersistenceManager extends AbstractPersistenceManager {
                         + NAME_ATTRIBUTE + "=\"" + Text.encodeIllegalXMLCharacters(state.getName().toString()) + "\" "
                         + PARENTUUID_ATTRIBUTE + "=\"" + state.getParentId() + "\" "
                         + MULTIVALUED_ATTRIBUTE + "=\"" + Boolean.toString(state.isMultiValued()) + "\" "
                        + DEFINITIONID_ATTRIBUTE + "=\"" + state.getDefinitionId().toString() + "\" "
                         + MODCOUNT_ATTRIBUTE + "=\"" + state.getModCount() + "\" "
                         + TYPE_ATTRIBUTE + "=\"" + typeName + "\"&gt;\n");
                 // values
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/PropertyTypeRegistry.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/PropertyTypeRegistry.java
index b6b324ce4..c76276bfe 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/PropertyTypeRegistry.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/PropertyTypeRegistry.java
@@ -19,8 +19,8 @@ package org.apache.jackrabbit.core.query;
 import org.apache.jackrabbit.core.nodetype.NodeTypeDef;
 import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
 import org.apache.jackrabbit.core.nodetype.NodeTypeRegistryListener;
import org.apache.jackrabbit.core.nodetype.PropDef;
 import org.apache.jackrabbit.spi.Name;
import org.apache.jackrabbit.spi.QPropertyDefinition;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -87,9 +87,9 @@ public class PropertyTypeRegistry implements NodeTypeRegistryListener {
     public void nodeTypeRegistered(Name ntName) {
         try {
             NodeTypeDef def = registry.getNodeTypeDef(ntName);
            PropDef[] propDefs = def.getPropertyDefs();
            QPropertyDefinition[] propDefs = def.getPropertyDefs();
             synchronized (typeMapping) {
                for (PropDef propDef : propDefs) {
                for (QPropertyDefinition propDef : propDefs) {
                     int type = propDef.getRequiredType();
                     if (!propDef.definesResidual() &amp;&amp; type != PropertyType.UNDEFINED) {
                         Name name = propDef.getName();
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryImpl.java
index a3bfe8ed6..d64b05977 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryImpl.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryImpl.java
@@ -28,10 +28,10 @@ import javax.jcr.query.qom.QueryObjectModelFactory;
 import org.apache.jackrabbit.core.ItemManager;
 import org.apache.jackrabbit.core.SessionImpl;
 import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
import org.apache.jackrabbit.core.nodetype.PropertyDefinitionImpl;
 import org.apache.jackrabbit.core.query.PropertyTypeRegistry;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.Path;
import org.apache.jackrabbit.spi.QPropertyDefinition;
 import org.apache.jackrabbit.spi.commons.name.NameConstants;
 import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
 import org.apache.jackrabbit.spi.commons.query.AndQueryNode;
@@ -43,6 +43,7 @@ import org.apache.jackrabbit.spi.commons.query.QueryNodeFactory;
 import org.apache.jackrabbit.spi.commons.query.QueryParser;
 import org.apache.jackrabbit.spi.commons.query.QueryRootNode;
 import org.apache.jackrabbit.spi.commons.query.qom.ColumnImpl;
import org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl;
 import org.apache.lucene.search.Query;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -174,9 +175,9 @@ public class QueryImpl extends AbstractQueryImpl {
             NodeTypeImpl nt = session.getNodeTypeManager().getNodeType(ntName[0]);
             PropertyDefinition[] propDefs = nt.getPropertyDefinitions();
             for (PropertyDefinition pd : propDefs) {
                PropertyDefinitionImpl propDef = (PropertyDefinitionImpl) pd;
                QPropertyDefinition propDef = ((PropertyDefinitionImpl) pd).unwrap();
                 if (!propDef.definesResidual() &amp;&amp; !propDef.isMultiple()) {
                    columns.put(propDef.getQName(), columnForName(propDef.getQName()));
                    columns.put(propDef.getName(), columnForName(propDef.getName()));
                 }
             }
         }
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryObjectModelImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryObjectModelImpl.java
index 7c764bfab..832196cd7 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryObjectModelImpl.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryObjectModelImpl.java
@@ -29,7 +29,6 @@ import org.apache.jackrabbit.core.ItemManager;
 import org.apache.jackrabbit.core.SessionImpl;
 import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
 import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
import org.apache.jackrabbit.core.nodetype.PropertyDefinitionImpl;
 import org.apache.jackrabbit.core.query.PropertyTypeRegistry;
 import org.apache.jackrabbit.core.query.lucene.constraint.Constraint;
 import org.apache.jackrabbit.core.query.lucene.constraint.ConstraintBuilder;
@@ -39,6 +38,7 @@ import org.apache.jackrabbit.spi.commons.query.qom.DefaultTraversingQOMTreeVisit
 import org.apache.jackrabbit.spi.commons.query.qom.QueryObjectModelTree;
 import org.apache.jackrabbit.spi.commons.query.qom.SelectorImpl;
 import org.apache.jackrabbit.spi.commons.query.qom.OrderingImpl;
import org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl;
 
 /**
  * &lt;code&gt;QueryObjectModelImpl&lt;/code&gt;...
@@ -123,7 +123,7 @@ public class QueryObjectModelImpl extends AbstractQueryImpl {
                 NodeTypeImpl nt = ntMgr.getNodeType(selector.getNodeTypeQName());
                 for (PropertyDefinition pd : nt.getPropertyDefinitions()) {
                     PropertyDefinitionImpl propDef = (PropertyDefinitionImpl) pd;
                    if (!propDef.definesResidual() &amp;&amp; !propDef.isMultiple()) {
                    if (!propDef.unwrap().definesResidual() &amp;&amp; !propDef.isMultiple()) {
                         String sn = selector.getSelectorName();
                         String pn = propDef.getName();
                         columns.add((ColumnImpl) qomFactory.column(sn, pn, sn + "." + pn));
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeState.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeState.java
index f0b6d0569..2fad12729 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeState.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeState.java
@@ -18,7 +18,6 @@ package org.apache.jackrabbit.core.state;
 
 import org.apache.jackrabbit.core.id.ItemId;
 import org.apache.jackrabbit.core.id.NodeId;
import org.apache.jackrabbit.core.nodetype.NodeDefId;
 import org.apache.jackrabbit.spi.Name;
 
 import java.util.ArrayList;
@@ -55,11 +54,6 @@ public class NodeState extends ItemState {
      */</comment>
     <decl_stmt><decl><type><specifier>private</specifier> <name>NodeId</name></type> <name>parentId</name></decl>;</decl_stmt>
 
    <comment type="block" format="javadoc">/**
     * id of this node's definition
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NodeDefId</name></type> <name>defId</name></decl>;</decl_stmt>

     <comment type="block" format="javadoc">/**
      * insertion-ordered collection of ChildNodeEntry objects
      */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">127</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">121</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeState</name> extends <name>ItemState</name> <block>{
             <expr><name>parentId</name> <operator>=</operator> <name><name>nodeState</name><operator>.</operator><name>parentId</name></name></expr>;
             <name>nodeTypeName</name> <operator>=</operator> <name><name>nodeState</name><operator>.</operator><name>nodeTypeName</name></name></block></expr>;</expr_stmt>
             <expr_stmt><expr><name>mixinTypeNames</name> <operator>=</operator> <operator>(</operator><name>NameSet</name><operator>)</operator> <call><name><name>nodeState</name><operator>.</operator><name>mixinTypeNames</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>defId</name> <operator>=</operator> <name><name>nodeState</name><operator>.</operator><name>defId</name></name></expr>;</expr_stmt>
             <expr_stmt><expr><name>propertyNames</name> <operator>=</operator> <operator>(</operator><name>NameSet</name><operator>)</operator> <call><name><name>nodeState</name><operator>.</operator><name>propertyNames</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>childNodeEntries</name> <operator>=</operator> <operator>(</operator><name>ChildNodeEntries</name><operator>)</operator> <call><name><name>nodeState</name><operator>.</operator><name>childNodeEntries</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             <if_stmt><if>if <condition>(<expr><name>syncModCount</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">210</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">203</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeState</name> extends <name>ItemState</name> <block>{
         <expr><call><name><name>mixinTypeNames</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
 
    <comment type="block" format="javadoc">/**
     * Returns the id of the definition applicable to this node state.
     *
     * @return the id of the definition
     */</comment>
    <function><type><specifier>public</specifier> <name>NodeDefId</name></type> <name>getDefinitionId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>defId</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the id of the definition applicable to this node state.
     *
     * @param defId the id of the definition
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefinitionId</name><parameter_list>(<parameter><decl><type><name>NodeDefId</name></type> <name>defId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defId</name></name> <operator>=</operator> <name>defId</name></expr>;</expr_stmt>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * Determines if there are any child node entries.
      *
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/PropertyState.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/PropertyState.java
index 569552a78..10627bae7 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/PropertyState.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/PropertyState.java
@@ -19,9 +19,9 @@ package org.apache.jackrabbit.core.state;
 import org.apache.jackrabbit.core.id.PropertyId;
 import org.apache.jackrabbit.core.id.NodeId;
 import org.apache.jackrabbit.core.id.ItemId;
import org.apache.jackrabbit.core.nodetype.PropDefId;
 import org.apache.jackrabbit.core.value.InternalValue;
 import org.apache.jackrabbit.spi.Name;
import org.apache.jackrabbit.spi.QPropertyDefinition;
 
 import javax.jcr.PropertyType;
 
@@ -51,9 +51,9 @@ public class PropertyState extends ItemState {
     private boolean multiValued;
 
     /**
     * the property definition id
     * the property definition
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PropDefId</name></type> <name>defId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>QPropertyDefinition</name></type> <name>def</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * Constructs a new property state that is initially connected to an
@@ -92,7 +92,7 @@ public class PropertyState extends ItemState {
             PropertyState propState = (PropertyState) state;
             id = propState.id;
             type = propState.type;
            defId = propState.defId;
            def = propState.def;
             values = propState.values;
             multiValued = propState.multiValued;
             if (syncModCount) {
@@ -182,24 +182,6 @@ public class PropertyState extends ItemState {
         return multiValued;
     }
 
    /**
     * Returns the id of the definition applicable to this property state.
     *
     * @return the id of the definition
     */</comment>
    <function><type><specifier>public</specifier> <name>PropDefId</name></type> <name>getDefinitionId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>defId</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the id of the definition applicable to this property state.
     *
     * @param defId the id of the definition
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefinitionId</name><parameter_list>(<parameter><decl><type><name>PropDefId</name></type> <name>defId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defId</name></name> <operator>=</operator> <name>defId</name></expr>;</expr_stmt>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * Sets the value(s) of this property.
      *
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java
index 5cf474a9f..808733fd6 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java
@@ -27,6 +27,7 @@ import javax.jcr.InvalidItemStateException;
 import javax.jcr.ItemNotFoundException;
 import javax.jcr.ReferentialIntegrityException;
 import javax.jcr.RepositoryException;
import javax.jcr.nodetype.NoSuchNodeTypeException;
 
 import org.apache.commons.collections.iterators.IteratorChain;
 import org.apache.jackrabbit.core.CachingHierarchyManager;
@@ -35,10 +36,12 @@ import org.apache.jackrabbit.core.ZombieHierarchyManager;
 import org.apache.jackrabbit.core.id.ItemId;
 import org.apache.jackrabbit.core.id.NodeId;
 import org.apache.jackrabbit.core.id.PropertyId;
import org.apache.jackrabbit.core.nodetype.NodeDef;
 import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
 import org.apache.jackrabbit.core.util.Dumpable;
 import org.apache.jackrabbit.spi.Name;
import org.apache.jackrabbit.spi.QNodeDefinition;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -782,7 +785,7 @@ public class SessionItemStateManager
      *
      * @return attic
      */</comment>
    <function><type><name>ItemStateManager</name></type> <name>getAttic</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>ItemStateManager</name></type> <name>getAttic</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><name>attic</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>attic</name> <operator>=</operator> <operator>new</operator> <call><name>AtticItemStateManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">861</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">864</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>SessionItemStateManager</name></expr></expr_stmt>
                                 </block_content>}</block></function>
 
                                 <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowsSameNameSiblings</name><parameter_list>(<parameter><decl><type><name>NodeId</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                    <decl_stmt><decl><type><name>NodeState</name></type> <name>ns</name></decl>;</decl_stmt>
                                     <try>try <block>{<block_content>
                                        <expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator><name>NodeState</name><operator>)</operator> <call><name>getItemState</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ItemStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                        <decl_stmt><decl><type><name>NodeState</name></type> <name>ns</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name>getItemState</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <decl_stmt><decl><type><name>NodeState</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name>getItemState</name><argument_list>(<argument><expr><call><name><name>ns</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildNodeEntry</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <decl_stmt><decl><type><name>EffectiveNodeType</name></type> <name>ent</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(
                                                <argument><expr><call><name><name>parent</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>parent</name><operator>.</operator><name>getMixinTypeNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <decl_stmt><decl><type><name>QNodeDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getApplicableChildNodeDef</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>ns</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <return>return <expr><ternary><condition><expr><name>def</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>def</name><operator>.</operator><name>allowsSameNameSiblings</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return>
                                    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to get node definition"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                         <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                                     </block_content>}</block></catch></try>
                                    <decl_stmt><decl><type><name>NodeDef</name></type> <name>def</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><call><name><name>ns</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <return>return <expr><ternary><condition><expr><name>def</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>def</name><operator>.</operator><name>allowsSameNameSiblings</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return>
                                 </block_content>}</block></function>
                             </block_content>}</block></function><empty_stmt>;</empty_stmt>
                     <if_stmt><if>if <condition>(<expr><call><name><name>NodeStateMerger</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><operator>(</operator><name>NodeState</name><operator>)</operator> <name>transientState</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SharedItemStateManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SharedItemStateManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">870a54638</literal><operator>..</operator><literal type="number">0f7e89699</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SharedItemStateManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SharedItemStateManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PropertyType</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>ReferentialIntegrityException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>ConstraintViolationException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NoSuchNodeTypeException</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>RepositoryImpl</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>ItemId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>PropertyId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>EffectiveNodeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeConflictException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>observation</name><operator>.</operator><name>EventState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>observation</name><operator>.</operator><name>EventStateCollection</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>observation</name><operator>.</operator><name>EventStateCollectionFactory</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Dumpable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>virtual</name><operator>.</operator><name>VirtualItemStateProvider</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">621</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">618</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedItemStateManager</name></expr></expr_stmt>
                                         </block_content>}</block></if></if_stmt>
 
                                         <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowsSameNameSiblings</name><parameter_list>(<parameter><decl><type><name>NodeId</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                            <decl_stmt><decl><type><name>NodeState</name></type> <name>ns</name></decl>;</decl_stmt>
                                             <try>try <block>{<block_content>
                                                <if_stmt><if>if <condition>(<expr><call><name><name>local</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                                    <expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>local</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                </block_content>}</block></if> <else>else <block>{<block_content>
                                                    <expr_stmt><expr><name>ns</name> <operator>=</operator> <operator>(</operator><name>NodeState</name><operator>)</operator> <call><name>getItemState</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                </block_content>}</block></else></if_stmt>
                                            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ItemStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                                <decl_stmt><decl><type><name>NodeState</name></type> <name>ns</name> <init>= <expr><call><name>getNodeState</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                                <decl_stmt><decl><type><name>NodeState</name></type> <name>parent</name> <init>= <expr><call><name>getNodeState</name><argument_list>(<argument><expr><call><name><name>ns</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                                <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildNodeEntry</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                                <decl_stmt><decl><type><name>EffectiveNodeType</name></type> <name>ent</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(
                                                        <argument><expr><call><name><name>parent</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                        <argument><expr><call><name><name>parent</name><operator>.</operator><name>getMixinTypeNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                                <decl_stmt><decl><type><name>QNodeDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getApplicableChildNodeDef</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>ns</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                                <return>return <expr><ternary><condition><expr><name>def</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>def</name><operator>.</operator><name>allowsSameNameSiblings</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return>
                                            </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to get node definition"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                 <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                                             </block_content>}</block></catch></try>
                                            <decl_stmt><decl><type><name>NodeDef</name></type> <name>def</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><call><name><name>ns</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                            <return>return <expr><ternary><condition><expr><name>def</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>def</name><operator>.</operator><name>allowsSameNameSiblings</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return>
                                        </block_content>}</block></function>

                                        <function><type><specifier>protected</specifier> <name>NodeState</name></type> <name>getNodeState</name><parameter_list>(<parameter><decl><type><name>NodeId</name></type> <name>id</name></decl></parameter>)</parameter_list>
                                                <throws>throws <argument><expr><name>ItemStateException</name></expr></argument></throws> <block>{<block_content>
                                            <if_stmt><if>if <condition>(<expr><call><name><name>local</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                                <return>return <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>local</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
                                            </block_content>}</block></if> <else>else <block>{<block_content>
                                                <return>return <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name>getItemState</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
                                            </block_content>}</block></else></if_stmt>
                                         </block_content>}</block></function>
                                     </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1248</literal></expr><operator>,</operator><expr><literal type="number">47</literal> <operator>+</operator><literal type="number">1255</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedItemStateManager</name>
         <comment type="line">// FIXME need to manually setup root node by creating mandatory jcr:primaryType property</comment>
         <comment type="line">// @todo delegate setup of root node to NodeTypeInstanceHandler</comment>
 
        <comment type="line">// id of the root node's definition</comment>
        <name>NodeDefId</name> <name>nodeDefId</name></expr>;</expr_stmt>
        <comment type="line">// definition of jcr:primaryType property</comment>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>propDef</name></decl>;</decl_stmt>
        <comment type="line">// id of the jcr:system node's definition</comment>
        <decl_stmt><decl><type><name>NodeDefId</name></type> <name>jcrSystemDefId</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>nodeDefId</name> <operator>=</operator> <call><name><name>ntReg</name><operator>.</operator><name>getRootNodeDef</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>EffectiveNodeType</name></type> <name>ent</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_ROOT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>propDef</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getApplicablePropertyDef</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>,
                    <argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>jcrSystemDefId</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getApplicableChildNodeDef</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_SYSTEM</name></name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_SYSTEM</name></name></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchNodeTypeException</name></type> <name>nsnte</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"internal error: failed to create root node"</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>nsnte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>ItemStateException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>nsnte</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>ConstraintViolationException</name></type> <name>cve</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"internal error: failed to create root node"</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>cve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>ItemStateException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>cve</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name><name>rootState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><name>nodeDefId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>jcrSystemState</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><name>jcrSystemDefId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <comment type="line">// create jcr:primaryType property on root node state</comment>
        <expr_stmt><expr><call><name><name>rootState</name><operator>.</operator><name>addPropertyName</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rootState</name><operator>.</operator><name>addPropertyName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>PropertyState</name></type> <name>prop</name> <init>= <expr><call><name>createInstance</name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rootNodeId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PropertyState</name></type> <name>prop</name> <init>= <expr><call><name>createInstance</name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>, <argument><expr><name>rootNodeId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>InternalValue</name><index>[]</index></name><block>{<expr><call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_ROOT</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <comment type="line">// create jcr:primaryType property on jcr:system node state</comment>
        <expr_stmt><expr><call><name><name>jcrSystemState</name><operator>.</operator><name>addPropertyName</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>jcrSystemState</name><operator>.</operator><name>addPropertyName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>PropertyState</name></type> <name>primaryTypeProp</name> <init>= <expr><call><name>createInstance</name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>jcrSystemState</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PropertyState</name></type> <name>primaryTypeProp</name> <init>= <expr><call><name>createInstance</name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>, <argument><expr><call><name><name>jcrSystemState</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>primaryTypeProp</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>InternalValue</name><index>[]</index></name><block>{<expr><call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_SYSTEM</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>primaryTypeProp</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>primaryTypeProp</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>primaryTypeProp</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>primaryTypeProp</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>primaryTypeProp</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <comment type="line">// add child node entry for jcr:system node</comment>
         <expr_stmt><expr><call><name><name>rootState</name><operator>.</operator><name>addChildNodeEntry</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_SYSTEM</name></name></expr></argument>, <argument><expr><name><name>RepositoryImpl</name><operator>.</operator><name>SYSTEM_ROOT_NODE_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>value</name><operator>/</operator><name><name>InternalValue</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>value</name><operator>/</operator><name><name>InternalValue</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9f3b59c33</literal><operator>..</operator><literal type="number">93ccf607f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>value</name><operator>/</operator><name><name>InternalValue</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>value</name><operator>/</operator><name><name>InternalValue</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">242</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">242</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>InternalValue</name> extends <name>AbstractQValue</name> <block>{
         }</block></expr></expr_stmt>
     </block_content>}</block></if></if_stmt>
 
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>InternalValue</name><index>[]</index></name></type> <name>create</name><parameter_list>(<parameter><decl><type><name><name>QValue</name><index>[]</index></name></type> <name>values</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>tmp</name> <init>= <expr><operator>new</operator> <name><name>InternalValue</name><index>[<expr><name><name>values</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>tmp</name></expr>;</return>
    </block_content>}</block></function>

     <function><type><specifier>static</specifier> <name>InternalValue</name></type> <name>getInternalValue</name><parameter_list>(<parameter><decl><type><name>DataIdentifier</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>DataStore</name></type> <name>store</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>DataStoreException</name></expr></argument></throws> <block>{<block_content>
         <comment type="line">// access the record to ensure it is not garbage collected</comment>
         <if_stmt><if>if <condition>(<expr><call><name><name>store</name><operator>.</operator><name>getRecordIfStored</name></name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>version</name><operator>/</operator><name><name>InternalVersionManagerImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>version</name><operator>/</operator><name><name>InternalVersionManagerImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cbbc1cf3d</name><operator>..</operator><literal type="number">76317cf81</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>version</name><operator>/</operator><name><name>InternalVersionManagerImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>version</name><operator>/</operator><name><name>InternalVersionManagerImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">190</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>InternalVersionManagerImpl</name> extends <name>InternalVersionManagerBase</name></expr></expr_stmt>
             <if_stmt><if>if <condition>(<expr><literal type="boolean">false</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>pMgr</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>systemId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <decl_stmt><decl><type><name>NodeState</name></type> <name>root</name> <init>= <expr><call><name><name>pMgr</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><name>systemId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setParentId</name></name><argument_list>(<argument><expr><name><name>RepositoryImpl</name><operator>.</operator><name>ROOT_NODE_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_ROOT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicableChildNodeDef</name><argument_list>(
                        <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_SYSTEM</name></name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_SYSTEM</name></name></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setNodeTypeName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_SYSTEM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <decl_stmt><decl><type><name>PropertyState</name></type> <name>pt</name> <init>= <expr><call><name><name>pMgr</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><name>systemId</name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_SYSTEM</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicablePropertyDef</name><argument_list>(
                        <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>InternalValue</name><index>[]</index></name><block>{<expr><call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_SYSTEM</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">215</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">211</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>InternalVersionManagerImpl</name> extends <name>InternalVersionManagerBase</name></expr></expr_stmt>
             <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pMgr</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>historiesId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <decl_stmt><decl><type><name>NodeState</name></type> <name>root</name> <init>= <expr><call><name><name>pMgr</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><name>historiesId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setParentId</name></name><argument_list>(<argument><expr><name>systemId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_SYSTEM</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicableChildNodeDef</name><argument_list>(
                        <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_VERSIONSTORAGE</name></name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_VERSIONSTORAGE</name></name></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setNodeTypeName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_VERSIONSTORAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <decl_stmt><decl><type><name>PropertyState</name></type> <name>pt</name> <init>= <expr><call><name><name>pMgr</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><name>historiesId</name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_VERSIONSTORAGE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicablePropertyDef</name><argument_list>(
                        <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>InternalValue</name><index>[]</index></name><block>{<expr><call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_VERSIONSTORAGE</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">235</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">227</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>InternalVersionManagerImpl</name> extends <name>InternalVersionManagerBase</name></expr></expr_stmt>
             <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pMgr</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>activitiesId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <decl_stmt><decl><type><name>NodeState</name></type> <name>root</name> <init>= <expr><call><name><name>pMgr</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><name>activitiesId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setParentId</name></name><argument_list>(<argument><expr><name>systemId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_SYSTEM</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicableChildNodeDef</name><argument_list>(
                        <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_ACTIVITIES</name></name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_ACTIVITIES</name></name></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setNodeTypeName</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_ACTIVITIES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <decl_stmt><decl><type><name>PropertyState</name></type> <name>pt</name> <init>= <expr><call><name><name>pMgr</name><operator>.</operator><name>createNew</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><name>activitiesId</name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_ACTIVITIES</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicablePropertyDef</name><argument_list>(
                        <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_PRIMARYTYPE</name></name></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>setValues</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>InternalValue</name><index>[]</index></name><block>{<expr><call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>REP_ACTIVITIES</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>version</name><operator>/</operator><name><name>NodeStateEx</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>version</name><operator>/</operator><name><name>NodeStateEx</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ac6701216</name><operator>..</operator><name>cac4727f1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>version</name><operator>/</operator><name><name>NodeStateEx</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>version</name><operator>/</operator><name><name>NodeStateEx</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>PropertyImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>PropertyId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>EffectiveNodeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeConflictException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ChildNodeEntry</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>PropertyState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>UpdatableItemStateManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
@@ -69,6 +69,11 @@ public class NodeStateEx {
      */</comment>
     <decl_stmt><decl><type><specifier>private</specifier> <name>Name</name></type> <name>name</name></decl>;</decl_stmt>
 
    <comment type="block" format="javadoc">/**
     * the cached node definition
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>QNodeDefinition</name></type> <name>def</name></decl>;</decl_stmt>

     <comment type="block" format="javadoc">/**
      * Creates a new persistent node
      *
@@ -280,13 +285,9 @@ public class NodeStateEx {
                 throw new RepositoryException("Unable to create property: " + e.toString());
             }
         } else {

            PropDef pd = getEffectiveNodeType().getApplicablePropertyDef(name, type, multiple);

             PropertyState propState = stateMgr.createNew(name, nodeState.getNodeId());
             propState.setType(type);
             propState.setMultiValued(multiple);
            propState.setDefinitionId(pd.getId());
             propState.setValues(values);
 
             // need to store node state
@@ -560,10 +561,6 @@ public class NodeStateEx {
         }
         NodeState state = stateMgr.createNew(id, nodeTypeName, parentId);
 
        NodeDef cnd =
                getEffectiveNodeType().getApplicableChildNodeDef(name, nodeTypeName, ntReg);
        state.setDefinitionId(cnd.getId());

         // create Node instance wrapping new node state
         NodeStateEx node = new NodeStateEx(stateMgr, ntReg, state, name);
         node.setPropertyValue(NameConstants.JCR_PRIMARYTYPE, InternalValue.create(nodeTypeName));
@@ -589,10 +586,11 @@ public class NodeStateEx {
         if (name == null) {
             name = src.getName();
         }
        EffectiveNodeType ent = getEffectiveNodeType();
         // (4) check for name collisions
        NodeDef def;
        QNodeDefinition def;
         try {
            def = getEffectiveNodeType().getApplicableChildNodeDef(name, nodeState.getNodeTypeName(), ntReg);
            def = ent.getApplicableChildNodeDef(name, nodeState.getNodeTypeName(), ntReg);
         } catch (RepositoryException re) {
             String msg = "no definition found in parent node's node type for new node";
             throw new ConstraintViolationException(msg, re);
@@ -611,7 +609,9 @@ public class NodeStateEx {
             } catch (ItemStateException e) {
                 throw new RepositoryException(e);
             }
            if (!ntReg.getNodeDef(existingChild.getDefinitionId()).allowsSameNameSiblings()) {
            QNodeDefinition existingChildDef = ent.getApplicableChildNodeDef(
                    cne.getName(), existingChild.getNodeTypeName(), ntReg);
            if (!existingChildDef.allowsSameNameSiblings()) {
                 throw new ItemExistsException(existingChild.toString());
             }
         } else {
@@ -646,8 +646,7 @@ public class NodeStateEx {
             }
             NodeState srcState = src.getState();
             srcState.setParentId(getNodeId());
            srcState.setDefinitionId(def.getId());
            

             if (srcState.getStatus() == ItemState.STATUS_EXISTING) {
                 srcState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
             }
@@ -823,20 +822,29 @@ public class NodeStateEx {
     }
 
     /**
     * Returns the NodeDef for this state
     * Returns the QNodeDefinition for this state
      * @return the node def
     * @throws RepositoryException if an error occurs
      */</comment>
    <function><type><specifier>public</specifier> <name>NodeDef</name></type> <name>getDefinition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><call><name><name>nodeState</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>QNodeDefinition</name></type> <name>getDefinition</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>def</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>EffectiveNodeType</name></type> <name>ent</name> <init>= <expr><call><name>getParent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEffectiveNodeType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>ent</name><operator>.</operator><name>getApplicableChildNodeDef</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>nodeState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>def</name></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
      * Returns the property definition for the property state
      * @param prop the property state
      * @return the prop def
     * @throws RepositoryException if an error occurs
      */</comment>
    <function><type><specifier>public</specifier> <name>PropDef</name></type> <name>getDefinition</name><parameter_list>(<parameter><decl><type><name>PropertyState</name></type> <name>prop</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>ntReg</name><operator>.</operator><name>getPropDef</name></name><argument_list>(<argument><expr><call><name><name>prop</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <function><type><specifier>public</specifier> <name>QPropertyDefinition</name></type> <name>getDefinition</name><parameter_list>(<parameter><decl><type><name>PropertyState</name></type> <name>prop</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>getEffectiveNodeType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicablePropertyDef</name><argument_list>(
                <argument><expr><call><name><name>prop</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prop</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prop</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java
index 98f00a69c..2a775acf2 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/VersionManagerImplRestore.java
@@ -34,7 +34,6 @@ import org.apache.jackrabbit.core.HierarchyManager;
 import org.apache.jackrabbit.core.ItemValidator;
 import org.apache.jackrabbit.core.SessionImpl;
 import org.apache.jackrabbit.core.id.NodeId;
import org.apache.jackrabbit.core.nodetype.PropDef;
 import org.apache.jackrabbit.core.security.authorization.Permission;
 import org.apache.jackrabbit.core.state.ChildNodeEntry;
 import org.apache.jackrabbit.core.state.ItemStateException;
@@ -43,6 +42,7 @@ import org.apache.jackrabbit.core.state.UpdatableItemStateManager;
 import org.apache.jackrabbit.core.value.InternalValue;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.Path;
import org.apache.jackrabbit.spi.QPropertyDefinition;
 import org.apache.jackrabbit.spi.commons.name.NameConstants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -428,7 +428,7 @@ abstract public class VersionManagerImplRestore extends VersionManagerImplBase {
         }
 
         // add 'auto-create' properties that do not exist yet
        for (PropDef def: state.getEffectiveNodeType().getAutoCreatePropDefs()) {
        for (QPropertyDefinition def: state.getEffectiveNodeType().getAutoCreatePropDefs()) {
             if (!state.hasProperty(def.getName())) {
                 InternalValue[] values = computeAutoValues(state, def, true);
                 if (values != null) {
@@ -644,14 +644,16 @@ abstract public class VersionManagerImplRestore extends VersionManagerImplBase {
      * @param def property definition
      * @param useDefaultValues if &lt;code&gt;true&lt;/code&gt; the default values are respected
      * @return the values or &lt;code&gt;null&lt;/code&gt;
     * @throws RepositoryException if the values cannot be computed.
      */</comment>
    <function><type><specifier>private</specifier> <name><name>InternalValue</name><index>[]</index></name></type> <name>computeAutoValues</name><parameter_list>(<parameter><decl><type><name>NodeStateEx</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>PropDef</name></type> <name>def</name></decl></parameter>,
                                                     <parameter><decl><type><name>boolean</name></type> <name>useDefaultValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <function><type><specifier>private</specifier> <name><name>InternalValue</name><index>[]</index></name></type> <name>computeAutoValues</name><parameter_list>(<parameter><decl><type><name>NodeStateEx</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl></parameter>,
                                              <parameter><decl><type><name>boolean</name></type> <name>useDefaultValues</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
         <comment type="line">// compute system generated values if necessary</comment>
         <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getNodeTypeInstanceHandler</name></name><argument_list>()</argument_list></call><operator>.</operator>
                 <call><name>computeSystemGeneratedPropertyValues</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>useDefaultValues</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>values</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>values</name> <operator>=</operator> <call><name><name>InternalValue</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <comment type="line">// avoid empty value array for single value property</comment>
         <if_stmt><if>if <condition>(<expr><name>values</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>values</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>def</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>virtual</name><operator>/</operator><name><name>AbstractVISProvider</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>virtual</name><operator>/</operator><name><name>AbstractVISProvider</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a8bde7e61</name><operator>..</operator><name>f8ef82d50</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>virtual</name><operator>/</operator><name><name>AbstractVISProvider</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>virtual</name><operator>/</operator><name><name>AbstractVISProvider</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>ItemId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>PropertyId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>EffectiveNodeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeConflictException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>NoSuchItemStateException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateReferenceMap</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateListener</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ChildNodeEntry</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>WeakIdentityCollection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">262</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">260</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractVISProvider</name> implements <name>VirtualItemStateProvider</name></expr><operator>,</operator> <expr><name>I</name>
                                                     <name>Name</name> <name>name</name></expr><operator>,</operator> <expr><name>int</name> <name>type</name></expr><operator>,</operator>
                                                     <expr><name>boolean</name> <name>multiValued</name></expr></expr_stmt>)</block_content>
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getApplicablePropertyDef</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>multiValued</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></block><empty_stmt>;</empty_stmt></if></if_stmt>
         <decl_stmt><decl><type><name>PropertyId</name></type> <name>id</name> <init>= <expr><operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>VirtualPropertyState</name></type> <name>prop</name> <init>= <expr><operator>new</operator> <call><name>VirtualPropertyState</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setMultiValued</name></name><argument_list>(<argument><expr><name>multiValued</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prop</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><name>prop</name></expr>;</return>
     </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">278</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">274</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractVISProvider</name> implements <name>VirtualItemStateProvider</name></expr><operator>,</operator> <expr><name>I</name>
                                             <name>NodeId</name> <name>id</name></expr><operator>,</operator> <expr><name>Name</name> <name>nodeTypeName</name></expr></expr_stmt>)</block_content>
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{
 
        <expr><name>NodeDefId</name> <name>def</name></expr></block></expr></argument></throws></block>;</function>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name>getApplicableChildNodeDef</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RepositoryException</name></type> <name>re</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// hack, use nt:unstructured as parent</comment>
            <decl_stmt><decl><type><name>NodeTypeRegistry</name></type> <name>ntReg</name> <init>= <expr><call><name>getNodeTypeRegistry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EffectiveNodeType</name></type> <name>ent</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>NT_UNSTRUCTURED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>NodeDef</name></type> <name>cnd</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getApplicableChildNodeDef</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>, <argument><expr><name>ntReg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><call><name><name>cnd</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>cnd</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

         <comment type="line">// create a new node state</comment>
         <decl_stmt><decl><type><name>VirtualNodeState</name></type> <name>state</name></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>id</name> <operator>=</operator> <operator>new</operator> <call><name>NodeId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><name>state</name> <operator>=</operator> <operator>new</operator> <call><name>VirtualNodeState</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>parent</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setDefinitionId</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <expr_stmt><expr><call><name>cache</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><name>state</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">385</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">368</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractVISProvider</name> implements <name>VirtualItemStateProvider</name></expr><operator>,</operator> <expr><name>I</name>
      <operator>*</operator> @</expr></expr_stmt><return>return
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>RepositoryException</name>
      <operator>*</operator><operator>/</operator>
    <specifier>protected</specifier> <name>PropDef</name> <call><name>getApplicablePropertyDef</name><argument_list>(<argument><expr><name>NodeState</name> <name>parent</name></expr></argument>, <argument><expr><name>Name</name> <name>propertyName</name></expr></argument>,
    <argument><expr><specifier>protected</specifier> <name>QPropertyDefinition</name> <call><name>getApplicablePropertyDef</name><argument_list>(<argument><expr><name>NodeState</name> <name>parent</name></expr></argument>, <argument><expr><name>Name</name> <name>propertyName</name></expr></argument>,
                                                <argument><expr><name>int</name> <name>type</name></expr></argument>, <argument><expr><name>boolean</name> <name>multiValued</name></expr></argument>)</argument_list></call></expr></argument></argument_list></call></expr></argument></throws>
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{</block></expr></argument></throws></expr></return>
         <return>return <expr><call><name>getEffectiveNodeType</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicablePropertyDef</name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>multiValued</name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">400</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">383</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>AbstractVISProvider</name> implements <name>VirtualItemStateProvider</name></expr><operator>,</operator> <expr><name>I</name>
      <operator>*</operator> @</expr></expr_stmt><return>return
      <expr><operator>*</operator> @<throws>throws <argument><expr><name>RepositoryException</name>
      <operator>*</operator><operator>/</operator>
    <specifier>protected</specifier> <name>NodeDef</name> <call><name>getApplicableChildNodeDef</name><argument_list>(<argument><expr><name>NodeState</name> <name>parent</name></expr></argument>, <argument><expr><name>Name</name> <name>nodeName</name></expr></argument>, <argument><expr><name>Name</name> <name>nodeTypeName</name></expr></argument>)</argument_list></call>
    <specifier>protected</specifier> <name>QNodeDefinition</name> <call><name>getApplicableChildNodeDef</name><argument_list>(<argument><expr><name>NodeState</name> <name>parent</name></expr></argument>, <argument><expr><name>Name</name> <name>nodeName</name></expr></argument>, <argument><expr><name>Name</name> <name>nodeTypeName</name></expr></argument>)</argument_list></call></expr></argument></throws>
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{</block></expr></argument></throws></expr></return>
         <return>return <expr><call><name>getEffectiveNodeType</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicableChildNodeDef</name><argument_list>(
                 <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>, <argument><expr><call><name>getNodeTypeRegistry</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>DefaultProtectedPropertyImporter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>DefaultProtectedPropertyImporter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2574efcd6</literal><operator>..</operator><name>c39bbe479</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>DefaultProtectedPropertyImporter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>DefaultProtectedPropertyImporter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>NodeImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>NodeState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>api</name><operator>.</operator><name>JackrabbitSession</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Default implementation that isn't able to handle any protected properties.
@@ -46,18 +46,18 @@ public class DefaultProtectedPropertyImporter implements ProtectedPropertyImport
     /**
      * Always returns &lt;code&gt;false&lt;/code&gt;.
      *
     * @see ProtectedPropertyImporter#handlePropInfo(org.apache.jackrabbit.core.NodeImpl, PropInfo, org.apache.jackrabbit.core.nodetype.PropDef)
     * @see ProtectedPropertyImporter#handlePropInfo(org.apache.jackrabbit.core.NodeImpl, PropInfo, QPropertyDefinition)
      */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>handlePropInfo</name><parameter_list>(<parameter><decl><type><name>NodeImpl</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>PropInfo</name></type> <name>protectedPropInfo</name></decl></parameter>, <parameter><decl><type><name>PropDef</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>handlePropInfo</name><parameter_list>(<parameter><decl><type><name>NodeImpl</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>PropInfo</name></type> <name>protectedPropInfo</name></decl></parameter>, <parameter><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><literal type="boolean">false</literal></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
      * Always returns &lt;code&gt;false&lt;/code&gt;.
      *
     * @see ProtectedPropertyImporter#handlePropInfo(org.apache.jackrabbit.core.state.NodeState, PropInfo, PropDef)
     * @see ProtectedPropertyImporter#handlePropInfo(org.apache.jackrabbit.core.state.NodeState, PropInfo, QPropertyDefinition)
      */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>handlePropInfo</name><parameter_list>(<parameter><decl><type><name>NodeState</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>PropInfo</name></type> <name>protectedPropInfo</name></decl></parameter>, <parameter><decl><type><name>PropDef</name></type> <name>def</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>handlePropInfo</name><parameter_list>(<parameter><decl><type><name>NodeState</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>PropInfo</name></type> <name>protectedPropInfo</name></decl></parameter>, <parameter><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
         <return>return <expr><literal type="boolean">false</literal></expr>;</return>
     </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>PropInfo</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>PropInfo</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">197e7edb9</literal><operator>..</operator><literal type="number">07cd9f34c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>PropInfo</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>PropInfo</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>ConstraintViolationException</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>NodeImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>EffectiveNodeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>NodeState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Information about a property being imported. This class is used
@@ -79,7 +77,7 @@ public class PropInfo {
         }
     }
 
    public int getTargetType(PropDef def) {
    public int getTargetType(QPropertyDefinition def) {
         int target = def.getRequiredType();
         if (target != PropertyType.UNDEFINED) {
             return target;
@@ -90,7 +88,7 @@ public class PropInfo {
         }
     }
 
    public PropDef getApplicablePropertyDef(EffectiveNodeType ent)
    public QPropertyDefinition getApplicablePropertyDef(EffectiveNodeType ent)
             throws ConstraintViolationException {
         if (values.length == 1) {
             // could be single- or multi-valued (n == 1)
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/xml/ProtectedPropertyImporter.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/xml/ProtectedPropertyImporter.java
index d8cf2fc86..bb15e6969 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/xml/ProtectedPropertyImporter.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/xml/ProtectedPropertyImporter.java
@@ -19,12 +19,12 @@ package org.apache.jackrabbit.core.xml;
 import javax.jcr.RepositoryException;
 
 import org.apache.jackrabbit.core.NodeImpl;
import org.apache.jackrabbit.core.nodetype.PropDef;
 import org.apache.jackrabbit.core.state.NodeState;
import org.apache.jackrabbit.spi.QPropertyDefinition;
 
 /**
  * &lt;code&gt;ProtectedPropertyImporter&lt;/code&gt; is in charge of importing single
 * properties whith a protected &lt;code&gt;PropDef&lt;/code&gt;.
 * properties whith a protected &lt;code&gt;QPropertyDefinition&lt;/code&gt;.
  *
  * @see ProtectedNodeImporter for an abstract class used to import protected
  * nodes and the subtree below them.
@@ -42,7 +42,7 @@ public interface ProtectedPropertyImporter {
      * &lt;code&gt;false&lt;/code&gt; otherwise.
      * @throws RepositoryException If an error occurs.
      */</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>handlePropInfo</name><argument_list>(<argument><expr><name>NodeImpl</name> <name>parent</name></expr></argument>, <argument><expr><name>PropInfo</name> <name>protectedPropInfo</name></expr></argument>, <argument><expr><name>PropDef</name> <name>def</name></expr></argument>)</argument_list>
    <name>boolean</name> <name>handlePropInfo</name><argument_list>(<argument><expr><name>NodeImpl</name> <name>parent</name></expr></argument>, <argument><expr><name>PropInfo</name> <name>protectedPropInfo</name></expr></argument>, <argument><expr><name>QPropertyDefinition</name> <name>def</name></expr></argument>)</argument_list>
             <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -56,7 +56,7 @@ public interface ProtectedPropertyImporter {
      * &lt;code&gt;false&lt;/code&gt; otherwise.
      * @throws RepositoryException If an error occurs.
      */</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>handlePropInfo</name><argument_list>(<argument><expr><name>NodeState</name> <name>parent</name></expr></argument>, <argument><expr><name>PropInfo</name> <name>protectedPropInfo</name></expr></argument>, <argument><expr><name>PropDef</name> <name>def</name></expr></argument>)</argument_list>
    <name>boolean</name> <name>handlePropInfo</name><argument_list>(<argument><expr><name>NodeState</name> <name>parent</name></expr></argument>, <argument><expr><name>PropInfo</name> <name>protectedPropInfo</name></expr></argument>, <argument><expr><name>QPropertyDefinition</name> <name>def</name></expr></argument>)</argument_list>
             <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws></decl>;</decl_stmt>
 
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>SessionImporter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>SessionImporter</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ec069508c</name><operator>..</operator><name>f75da8963</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>SessionImporter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>SessionImporter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>NodeImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>SessionImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>authorization</name><operator>.</operator><name>Permission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>ReferenceChangeTracker</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">153</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">153</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SessionImporter</name> implements <name>Importer</name> <block>{
     }</block>
 
 
    <specifier>protected</specifier> <name>void</name> <call><name>createProperty</name><argument_list>(<argument><expr><name>NodeImpl</name> <name>node</name></expr></argument>, <argument><expr><name>PropInfo</name> <name>pInfo</name></expr></argument>, <argument><expr><name>PropDef</name> <name>def</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>RepositoryException</name> <block>{
    <expr><specifier>protected</specifier> <name>void</name> <call><name>createProperty</name><argument_list>(<argument><expr><name>NodeImpl</name> <name>node</name></expr></argument>, <argument><expr><name>PropInfo</name> <name>pInfo</name></expr></argument>, <argument><expr><name>QPropertyDefinition</name> <name>def</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>RepositoryException</name> <block>{
         <comment type="line">// convert serialized values to Value objects</comment>
         <expr><name><name>Value</name><index>[]</index></name> <name>va</name> <operator>=</operator> <call><name><name>pInfo</name><operator>.</operator><name>getValues</name></name><argument_list>(<argument><expr><call><name><name>pInfo</name><operator>.</operator><name>getTargetType</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">369</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">369</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SessionImporter</name> implements <name>Importer</name> <block>{
 
         <for>for <control>(<init><decl><type><name>PropInfo</name></type> <name>pi</name> <range>: <expr><name>propInfos</name></expr></range></decl></init>)</control> <block>{<block_content>
             <comment type="line">// find applicable definition</comment>
            <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name><name>pi</name><operator>.</operator><name>getApplicablePropertyDef</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>pi</name><operator>.</operator><name>getApplicablePropertyDef</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getEffectiveNodeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                 <comment type="line">// skip protected property</comment>
                 <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Skipping protected property "</literal> <operator>+</operator> <call><name><name>pi</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>WorkspaceImporter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>WorkspaceImporter</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9b64d0db6</literal><operator>..</operator><literal type="number">428824a8a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>WorkspaceImporter</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>WorkspaceImporter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>WorkspaceImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>PropertyId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>EffectiveNodeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ChildNodeEntry</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>NodeState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>PropertyState</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>version</name><operator>.</operator><name>InternalVersionManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>version</name><operator>.</operator><name>VersionHistoryInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>MalformedPathException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">348</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">348</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkspaceImporter</name> implements <name>Importer</name> <block>{
 
     <expr><specifier>protected</specifier> <name>void</name> <call><name>processProperty</name><argument_list>(<argument><expr><name>NodeState</name> <name>node</name></expr></argument>, <argument><expr><name>PropInfo</name> <name>pInfo</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>RepositoryException</name> <block>{
         <expr><name>PropertyState</name> <name>prop</name></expr></block></expr></argument></throws></expr>;
        <name>PropDef</name> <name>def</name></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name></decl>;</decl_stmt>
 
         <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><call><name><name>pInfo</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>pInfo</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">357</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">357</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkspaceImporter</name> implements <name>Importer</name> <block>{
             <comment type="line">// a property with that name already exists...</comment>
             <expr><name>PropertyId</name> <name>idExisting</name> <operator>=</operator> <operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;
             <name>prop</name> <operator>=</operator> <operator>(</operator><name>PropertyState</name><operator>)</operator> <call><name><name>itemOps</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><name>idExisting</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
            <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>ntReg</name><operator>.</operator><name>getPropDef</name></name><argument_list>(<argument><expr><call><name><name>prop</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>def</name> <operator>=</operator> <call><name><name>itemOps</name><operator>.</operator><name>findApplicablePropertyDefinition</name></name><argument_list>(<argument><expr><call><name><name>prop</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prop</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prop</name><operator>.</operator><name>isMultiValued</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                 <comment type="line">// skip protected property</comment>
                 <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"skipping protected property "</literal>
@@ <operator>-</operator><literal type="number">429</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">429</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>WorkspaceImporter</name> implements <name>Importer</name> <block>{
             <expr><name>InternalValue</name> <name>value</name></expr></block></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>RepositoryException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>node</name><operator>.</operator><name>hasPropertyName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name><name>itemOps</name><operator>.</operator><name>findApplicablePropertyDefinition</name></name><argument_list>(
            <argument><expr><name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name><name>itemOps</name><operator>.</operator><name>findApplicablePropertyDefinition</name></name><argument_list>(
                     <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>multiple</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
             <decl_stmt><decl><type><name>PropertyState</name></type> <name>prop</name> <init>= <expr><call><name><name>itemOps</name><operator>.</operator><name>createPropertyState</name></name><argument_list>(
                     <argument><expr><name>node</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">492</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">492</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkspaceImporter</name> implements <name>Importer</name> <block>{
                         <expr><call><name><name>parent</name><operator>.</operator><name>getChildNodeEntry</name></name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
                 <name>NodeId</name> <name>idExisting</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
                 <decl_stmt><decl><type><name>NodeState</name></type> <name>existing</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>itemOps</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><name>idExisting</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeDef</name></type> <name>def</name> <init>= <expr><call><name><name>ntReg</name><operator>.</operator><name>getNodeDef</name></name><argument_list>(<argument><expr><call><name><name>existing</name><operator>.</operator><name>getDefinitionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>QNodeDefinition</name></type> <name>def</name> <init>= <expr><call><name><name>itemOps</name><operator>.</operator><name>findApplicableNodeDefinition</name></name><argument_list>(
                        <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><call><name><name>existing</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>def</name><operator>.</operator><name>allowsSameNameSiblings</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                     <comment type="line">// existing doesn't allow same-name siblings,</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">528</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">529</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkspaceImporter</name> implements <name>Importer</name> <block>{
                 <comment type="line">// there's no node with that name...</comment>
                 <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                     <comment type="line">// no potential uuid conflict, always create new node</comment>
                    <decl_stmt><decl><type><name>NodeDef</name></type> <name>def</name> <init>= <expr><call><name><name>itemOps</name><operator>.</operator><name>findApplicableNodeDefinition</name></name><argument_list>(
                    <argument><expr><name>QNodeDefinition</name> <name>def</name> <operator>=</operator> <call><name><name>itemOps</name><operator>.</operator><name>findApplicableNodeDefinition</name></name><argument_list>(
                             <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>ntName</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
                     <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                         <comment type="line">// skip protected node</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">561</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">562</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkspaceImporter</name> implements <name>Importer</name> <block>{
                         }</block></expr></expr_stmt>
                     </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>ItemNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                         <comment type="line">// create new with given uuid</comment>
                        <decl_stmt><decl><type><name>NodeDef</name></type> <name>def</name> <init>= <expr><call><name><name>itemOps</name><operator>.</operator><name>findApplicableNodeDefinition</name></name><argument_list>(
                        <argument><expr><name>QNodeDefinition</name> <name>def</name> <operator>=</operator> <call><name><name>itemOps</name><operator>.</operator><name>findApplicableNodeDefinition</name></name><argument_list>(
                                 <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>ntName</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
                         <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                             <comment type="line">// skip protected node</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>CyclicNodeTypeRegistrationTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>CyclicNodeTypeRegistrationTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5c5eacae1</literal><operator>..</operator><literal type="number">2fd2dfbb7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>CyclicNodeTypeRegistrationTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>CyclicNodeTypeRegistrationTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameFactoryImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>QNodeDefinitionBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>QPropertyDefinitionBuilder</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>test</name><operator>.</operator><name>AbstractJCRTest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>NameFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PropertyType</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>CyclicNodeTypeRegistrationTest</name> extends <name>AbstractJCRTest</name> <block>{
         <expr><call><name><name>bar</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <call><name><name>bar</name><operator>.</operator><name>setSupertypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr>}</block></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>NodeDefImpl</name></type> <name>myBarInFoo</name> <init>= <expr><operator>new</operator> <call><name>NodeDefImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QNodeDefinitionBuilder</name></type> <name>myBarInFoo</name> <init>= <expr><operator>new</operator> <call><name>QNodeDefinitionBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>myBarInFoo</name><operator>.</operator><name>setRequiredPrimaryTypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><call><name><name>bar</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>myBarInFoo</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"myBarInFoo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>myBarInFoo</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>foo</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>NodeDefImpl</name></type> <name>myFooInBar</name> <init>= <expr><operator>new</operator> <call><name>NodeDefImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QNodeDefinitionBuilder</name></type> <name>myFooInBar</name> <init>= <expr><operator>new</operator> <call><name>QNodeDefinitionBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>myFooInBar</name><operator>.</operator><name>setRequiredPrimaryTypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><call><name><name>foo</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>myFooInBar</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"myFooInBar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>myFooInBar</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>bar</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <expr_stmt><expr><call><name><name>foo</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDefImpl</name><index>[]</index></name><block>{<expr><name>myBarInFoo</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bar</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDefImpl</name><index>[]</index></name><block>{<expr><name>myFooInBar</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>foo</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[]</index></name><block>{<expr><call><name><name>myBarInFoo</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bar</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[]</index></name><block>{<expr><call><name><name>myFooInBar</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>ntDefCollection</name> <operator>=</operator> <operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>ntDefCollection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>ntDefCollection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">167</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>CyclicNodeTypeRegistrationTest</name> extends <name>AbstractJCRTest</name> <block>{
         <expr><call><name><name>foo</name><operator>.</operator><name>setSupertypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;
 
 
        <name>NodeDefImpl</name> <name>myBarInFoo</name> <operator>=</operator> <operator>new</operator> <call><name>NodeDefImpl</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QNodeDefinitionBuilder</name></type> <name>myBarInFoo</name> <init>= <expr><operator>new</operator> <call><name>QNodeDefinitionBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>myBarInFoo</name><operator>.</operator><name>setRequiredPrimaryTypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"I_am_an_invalid_required_primary_type"</literal></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>myBarInFoo</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"myNTInFoo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>myBarInFoo</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>foo</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <expr_stmt><expr><call><name><name>foo</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDefImpl</name><index>[]</index></name><block>{<expr><name>myBarInFoo</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>foo</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[]</index></name><block>{<expr><call><name><name>myBarInFoo</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>ntDefCollection</name> <operator>=</operator> <operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>ntDefCollection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">208</literal></expr><operator>,</operator><expr><literal type="number">36</literal> <operator>+</operator><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">38</literal> @@ <specifier>public</specifier> <name>class</name> <name>CyclicNodeTypeRegistrationTest</name> extends <name>AbstractJCRTest</name> <block>{
         <expr><name>final</name> <name>NodeTypeDef</name> <name>cmsObject</name> <operator>=</operator> <operator>new</operator> <call><name>NodeTypeDef</name><argument_list>()</argument_list></call></expr>;
         <call><name><name>cmsObject</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"CmsObject"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>cmsObject</name><operator>.</operator><name>setSupertypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>NodeDefImpl</name></type> <name>parentFolder</name> <init>= <expr><operator>new</operator> <call><name>NodeDefImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>QNodeDefinitionBuilder</name></type> <name>parentFolder</name> <init>= <expr><operator>new</operator> <call><name>QNodeDefinitionBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>parentFolder</name><operator>.</operator><name>setRequiredPrimaryTypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><call><name><name>folder</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>parentFolder</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"parentFolder"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>parentFolder</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>cmsObject</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmsObject</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDefImpl</name><index>[]</index></name><block>{<expr><name>parentFolder</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmsObject</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[]</index></name><block>{<expr><call><name><name>parentFolder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
 
         <decl_stmt><decl><type><specifier>final</specifier> <name>NodeTypeDef</name></type> <name>document</name> <init>= <expr><operator>new</operator> <call><name>NodeTypeDef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"Document"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>setSupertypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><call><name><name>cmsObject</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PropDefImpl</name></type> <name>sizeProp</name> <init>= <expr><operator>new</operator> <call><name>PropDefImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinitionBuilder</name></type> <name>sizeProp</name> <init>= <expr><operator>new</operator> <call><name>QPropertyDefinitionBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>sizeProp</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>sizeProp</name><operator>.</operator><name>setRequiredType</name></name><argument_list>(<argument><expr><name><name>PropertyType</name><operator>.</operator><name>LONG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>sizeProp</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>document</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>setPropertyDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PropDef</name><index>[]</index></name><block>{<expr><name>sizeProp</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>setPropertyDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[]</index></name><block>{<expr><call><name><name>sizeProp</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
 
         <expr_stmt><expr><call><name><name>folder</name><operator>.</operator><name>setSupertypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><call><name><name>cmsObject</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>NodeDefImpl</name></type> <name>folders</name> <init>= <expr><operator>new</operator> <call><name>NodeDefImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QNodeDefinitionBuilder</name></type> <name>folders</name> <init>= <expr><operator>new</operator> <call><name>QNodeDefinitionBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>setRequiredPrimaryTypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><call><name><name>folder</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"folders"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>folder</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>NodeDefImpl</name></type> <name>documents</name> <init>= <expr><operator>new</operator> <call><name>NodeDefImpl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QNodeDefinitionBuilder</name></type> <name>documents</name> <init>= <expr><operator>new</operator> <call><name>QNodeDefinitionBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>documents</name><operator>.</operator><name>setRequiredPrimaryTypes</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><call><name><name>document</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>documents</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>nameFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"documents"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>documents</name><operator>.</operator><name>setDeclaringNodeType</name></name><argument_list>(<argument><expr><call><name><name>folder</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <expr_stmt><expr><call><name><name>folder</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeDefImpl</name><index>[]</index></name><block>{<expr><name>folders</name></expr>, <expr><name>documents</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>folder</name><operator>.</operator><name>setChildNodeDefs</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[]</index></name><block>{
                <expr><call><name><name>folders</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>, <expr><call><name><name>documents</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>ntDefCollection</name> <operator>=</operator> <operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>ntDefCollection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>ntDefCollection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">226743030..7e4f511e2</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>nodetype</name><operator>/</operator><name>xml</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>AssertionFailedError</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>api</name><operator>.</operator><name>JackrabbitNodeTypeManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>commons</name><operator>.</operator><name>cnd</name><operator>.</operator><name>CndImporter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>InvalidNodeTypeDefException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDef</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeTypeDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropDef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>value</name><operator>.</operator><name>InternalValueFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>NameFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>DefaultNamePathResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameFactoryImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>namespace</name><operator>.</operator><name>NamespaceResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueFactoryQImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>test</name><operator>.</operator><name>AbstractJCRTest</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">130</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">131</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
      <expr><operator>*</operator> @<name>param</name> <name>propertyName</name> <name>property</name> <name>name</name></expr>, <expr><name><name>or</name> <argument_list type="generic">&lt;<argument><name>code</name></argument>&gt;</argument_list></name><literal type="null">null</literal><operator>&lt;</operator><operator>/</operator><name>code</name><operator>&gt;</operator>
      <operator>*</operator> @</expr><return>return <expr><name>property</name> <name>definition</name>
      <operator>*</operator><operator>/</operator>
    <specifier>private</specifier> <name>PropDef</name> <call><name>getPropDef</name><argument_list>(<argument><expr><name>String</name> <name>typeName</name></expr></argument>, <argument><expr><name>String</name> <name>propertyName</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>private</specifier> <name>QPropertyDefinition</name> <call><name>getPropDef</name><argument_list>(<argument><expr><name>String</name> <name>typeName</name></expr></argument>, <argument><expr><name>String</name> <name>propertyName</name></expr></argument>)</argument_list></call> <block>{
         <expr><name>Name</name> <name>name</name></expr>;</block></expr>
         <if_stmt><if>if <condition>(<expr><name>propertyName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>FACTORY</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>TEST_NAMESPACE</name></expr></argument>, <argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>PropDef</name><operator>.</operator><name>ANY_NAME</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name></name></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>
 
         <name>NodeTypeDef</name> <name>def</name> <operator>=</operator> <call><name>getNodeType</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></block></expr>;</return>
        <name><name>PropDef</name><index>[]</index></name> <name>defs</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>defs</name> <init>= <expr><call><name><name>def</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>defs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <return>return <expr><name><name>defs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">157</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
      <expr><operator>*</operator> @<name>param</name> <name>index</name> default <name>value</name> <name>index</name>
      <operator>*</operator> @</expr><return>return <expr>default <name>value</name>
      <operator>*</operator><operator>/</operator>
    <specifier>private</specifier> <name>String</name> <call><name>getDefaultValue</name><argument_list>(<argument><expr><name>PropDef</name> <name>def</name></expr></argument>, <argument><expr><name>int</name> <name>index</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>private</specifier> <name>String</name> <call><name>getDefaultValue</name><argument_list>(<argument><expr><name>QPropertyDefinition</name> <name>def</name></expr></argument>, <argument><expr><name>int</name> <name>index</name></expr></argument>)</argument_list></call> <block>{
         <try>try <block>{<block_content>
            <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>QValue</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>NamespaceResolver</name></type> <name>nsResolver</name> <init>= <expr><operator>new</operator> <call><name>AdditionalNamespaceResolver</name><argument_list>(<argument><expr><name>registry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>NamePathResolver</name></type> <name>resolver</name> <init>= <expr><operator>new</operator> <call><name>DefaultNamePathResolver</name><argument_list>(<argument><expr><name>nsResolver</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>ValueFactoryQImpl</name></type> <name>factory</name> <init>= <expr><operator>new</operator> <call><name>ValueFactoryQImpl</name><argument_list>(<argument><expr><call><name><name>InternalValueFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">178</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">179</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
      <expr><operator>*</operator> @<name>param</name> <name>nodeName</name> <name>child</name> <name>node</name> <name>name</name>
      <operator>*</operator> @</expr><return>return <expr><name>child</name> <name>node</name> <name>definition</name>
      <operator>*</operator><operator>/</operator>
    <specifier>private</specifier> <name>NodeDef</name> <call><name>getChildNode</name><argument_list>(<argument><expr><name>String</name> <name>typeName</name></expr></argument>, <argument><expr><name>String</name> <name>nodeName</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>private</specifier> <name>QNodeDefinition</name> <call><name>getChildNode</name><argument_list>(<argument><expr><name>String</name> <name>typeName</name></expr></argument>, <argument><expr><name>String</name> <name>nodeName</name></expr></argument>)</argument_list></call> <block>{
         <expr><name>Name</name> <name>name</name> <operator>=</operator> <call><name><name>FACTORY</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>TEST_NAMESPACE</name></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;
 
         <name>NodeTypeDef</name> <name>def</name> <operator>=</operator> <call><name>getNodeType</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></block></expr>;
        <name><name>NodeDef</name><index>[]</index></name> <name>defs</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></block></expr>;</return>
        <name><name>QNodeDefinition</name><index>[]</index></name> <name>defs</name> <operator>=</operator> <call><name><name>def</name><operator>.</operator><name>getChildNodeDefs</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>defs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <return>return <expr><name><name>defs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">240</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">241</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
                 <expr><call><name><name>def</name><operator>.</operator><name>getPrimaryItemName</name></name><argument_list>()</argument_list></call></expr>)</block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"itemNodeType propertyDefs"</literal></expr></argument>,
                 <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getPropertyDefs</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>pdef</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>pdef</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"itemNodeType wildcard property"</literal></expr></argument>, <argument><expr><call><name><name>pdef</name><operator>.</operator><name>definesResidual</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
 
@@ -319</block><operator>,</operator><expr_stmt><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">320</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the empty item definition. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testEmptyItem</name><argument_list>()</argument_list></call> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"emptyItem"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"emptyItem"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"emptyItem autoCreate"</literal></expr></argument>,
                 <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></if></if_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"emptyItem mandatory"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">332</literal></expr></argument>,<argument><expr><literal type="number">56</literal> <operator>+</operator><literal type="number">333</literal></expr></argument>,<argument><expr><literal type="number">56</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;autoCreated&lt;/code&gt; item definition attribute. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testAutoCreateItem</name><argument_list>()</argument_list></call> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"autoCreatedItem"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"autoCreatedItem"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"autoCreatedItem autoCreated"</literal></expr></argument>,
                 <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
     <expr_stmt/>}</block_content>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;mandatory&lt;/code&gt; item definition attribute. */</comment>
     public void testMandatoryItem(</block></for>)</block_content> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"mandatoryItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"mandatoryItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"mandatoryItem mandatory"</literal></expr></argument>,
                 <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>isMandatory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;copy&lt;/code&gt; parent version action. */</comment>
     public void testCopyItem(</block></block></try>)</block> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"copyItem"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"copyItem"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"copyItem onParentVersion"</literal></expr></argument>,
                 <argument><expr><name><name>OnParentVersionAction</name><operator>.</operator><name>COPY</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getOnParentVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</return>
     }</block></expr></expr_stmt>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;version&lt;/code&gt; parent version action. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testVersionItem</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"versionItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"versionItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"versionItem onParentVersion"</literal></expr></argument>,
                 <argument><expr><name><name>OnParentVersionAction</name><operator>.</operator><name>VERSION</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getOnParentVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;initialize&lt;/code&gt; parent version action. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testInitializeItem</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"initializeItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"initializeItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"initializeItem onParentVersion"</literal></expr></argument>,
                 <argument><expr><name><name>OnParentVersionAction</name><operator>.</operator><name>INITIALIZE</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getOnParentVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;compute&lt;/code&gt; parent version action. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testComputeItem</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"computeItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"computeItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"computeItem onParentVersion"</literal></expr></argument>,
                 <argument><expr><name><name>OnParentVersionAction</name><operator>.</operator><name>COMPUTE</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getOnParentVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;abort&lt;/code&gt; parent version action. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testAbortItem</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"abortItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"abortItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"abortItem onParentVersion"</literal></expr></argument>,
                 <argument><expr><name><name>OnParentVersionAction</name><operator>.</operator><name>ABORT</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getOnParentVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;protected&lt;/code&gt; item definition attribute. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testProtectedItem</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"protectedItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"itemNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"protectedItem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"protectedItem protected"</literal></expr></argument>,
                 <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">395</literal></expr><operator>,</operator><expr><literal type="number">33</literal> <operator>+</operator><literal type="number">396</literal></expr><operator>,</operator><expr><literal type="number">33</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the empty property definition. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testEmptyProperty</name><argument_list>()</argument_list></call> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"emptyProperty"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"emptyProperty"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"emptyProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"emptyProperty multiple"</literal></expr></argument>,
                 <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"emptyProperty defaultValues"</literal></expr></argument>,
                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"emptyProperty defaultValues"</literal></expr></argument>,
                <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"emptyProperty valueConstraints"</literal></expr></argument>,
                 <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getValueConstraints</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;binary&lt;/code&gt; property definition type. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testBinaryProperty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"binaryProperty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"binaryProperty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"binaryProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>BINARY</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"binaryProperty valueConstraints"</literal></expr></argument>,
                 <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getValueConstraints</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"binaryProperty valueConstraints[0]"</literal></expr></argument>,
                 <argument><expr><literal type="string">"[0,)"</literal></expr></argument>, <argument><expr><operator>(</operator><call><name><name>def</name><operator>.</operator><name>getValueConstraints</name></name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"binaryProperty defaultValues"</literal></expr></argument>,
                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"binaryProperty defaultValues"</literal></expr></argument>,
                <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;boolean&lt;/code&gt; property definition type. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testBooleanProperty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"booleanProperty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"booleanProperty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"booleanProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>BOOLEAN</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"booleanProperty valueConstraints"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">438</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">439</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;date&lt;/code&gt; property definition type. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testDateProperty</name><argument_list>()</argument_list></call> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"dateProperty"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"dateProperty"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"dateProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>DATE</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"dateProperty valueConstraints"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">454</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">455</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;double&lt;/code&gt; property definition type. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testDoubleProperty</name><argument_list>()</argument_list></call> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"doubleProperty"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"doubleProperty"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"doubleProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>DOUBLE</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"doubleProperty valueConstraints"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">473</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">474</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;long&lt;/code&gt; property definition type. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testLongProperty</name><argument_list>()</argument_list></call> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"longProperty"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"longProperty"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"longProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>LONG</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"longProperty valueConstraints"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">492</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">493</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;name&lt;/code&gt; property definition type. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testNameProperty</name><argument_list>()</argument_list></call> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"nameProperty"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"nameProperty"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"nameProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"nameProperty valueConstraints"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">508</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">509</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;path&lt;/code&gt; property definition type. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testPathProperty</name><argument_list>()</argument_list></call> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"pathProperty"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"pathProperty"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>PATH</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty valueConstraints"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">516</literal></expr></argument>,<argument><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">517</literal></expr></argument>,<argument><expr><literal type="number">13</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty valueConstraints[0]"</literal></expr></argument>,
                 <argument><expr><literal type="string">"{}\t{http://www.apache.org/jackrabbit/test}testPath"</literal></expr></argument>,
                 <argument><expr><operator>(</operator><call><name><name>def</name><operator>.</operator><name>getValueConstraints</name></name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty defaultValues"</literal></expr></argument>,
                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"pathProperty defaultValues"</literal></expr></argument>,
                <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;path&lt;/code&gt; property definition type. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testPathProperty1</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"pathProperty1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"pathProperty1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>PATH</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty valueConstraints"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">530</literal></expr></argument>,<argument><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">531</literal></expr></argument>,<argument><expr><literal type="number">13</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty valueConstraints[0]"</literal></expr></argument>,
                 <argument><expr><literal type="string">"{}\t{http://www.apache.org/jackrabbit/test}testPath\t{}*"</literal></expr></argument>,
                 <argument><expr><operator>(</operator><call><name><name>def</name><operator>.</operator><name>getValueConstraints</name></name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty defaultValues"</literal></expr></argument>,
                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"pathProperty defaultValues"</literal></expr></argument>,
                <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;path&lt;/code&gt; property definition type. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testPathProperty2</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"pathProperty2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"pathProperty2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>PATH</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty valueConstraints"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">544</literal></expr></argument>,<argument><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">545</literal></expr></argument>,<argument><expr><literal type="number">13</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty valueConstraints[0]"</literal></expr></argument>,
                 <argument><expr><literal type="string">"{http://www.apache.org/jackrabbit/test}testPath\t{}*"</literal></expr></argument>,
                 <argument><expr><operator>(</operator><call><name><name>def</name><operator>.</operator><name>getValueConstraints</name></name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"pathProperty defaultValues"</literal></expr></argument>,
                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"pathProperty defaultValues"</literal></expr></argument>,
                <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;reference&lt;/code&gt; property definition type. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testReferenceProperty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"referenceProperty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"referenceProperty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"referenceProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>REFERENCE</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"referenceProperty valueConstraints"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">558</literal></expr></argument>,<argument><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">559</literal></expr></argument>,<argument><expr><literal type="number">13</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"referenceProperty valueConstraints[0]"</literal></expr></argument>,
                 <argument><expr><literal type="string">"{http://www.jcp.org/jcr/nt/1.0}base"</literal></expr></argument>,
                 <argument><expr><operator>(</operator><call><name><name>def</name><operator>.</operator><name>getValueConstraints</name></name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"referenceProperty defaultValues"</literal></expr></argument>,
                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"referenceProperty defaultValues"</literal></expr></argument>,
                <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultValues</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;string&lt;/code&gt; property definition type. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testStringProperty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PropDef</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"stringProperty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QPropertyDefinition</name></type> <name>def</name> <init>= <expr><call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"stringProperty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"stringProperty requiredType"</literal></expr></argument>,
                 <argument><expr><name><name>PropertyType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"stringProperty valueConstraints"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">582</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">583</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;multiple&lt;/code&gt; property definition attribute. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testMultipleProperty</name><argument_list>()</argument_list></call> <block>{
        <expr><name>PropDef</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"multipleProperty"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QPropertyDefinition</name> <name>def</name> <operator>=</operator> <call><name>getPropDef</name><argument_list>(<argument><expr><literal type="string">"propertyNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"multipleProperty"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"multipleProperty multiple"</literal></expr></argument>,
                 <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>isMultiple</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">596</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">597</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the empty child node definition. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testEmptyNode</name><argument_list>()</argument_list></call> <block>{
        <expr><name>NodeDef</name> <name>def</name> <operator>=</operator> <call><name>getChildNode</name><argument_list>(<argument><expr><literal type="string">"childNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"emptyNode"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QNodeDefinition</name> <name>def</name> <operator>=</operator> <call><name>getChildNode</name><argument_list>(<argument><expr><literal type="string">"childNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"emptyNode"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"emptyNode allowsSameNameSiblings"</literal></expr></argument>,
                 <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>allowsSameNameSiblings</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"emptyNode defaultPrimaryType"</literal></expr></argument>,
<argument>@@ <expr><operator>-</operator><literal type="number">605</literal></expr></argument>,<argument><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">606</literal></expr></argument>,<argument><expr><literal type="number">14</literal> @@ <specifier>public</specifier> class <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;allowsSameNameSiblings&lt;/code&gt; child node attribute. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testSiblingNode</name><argument_list>()</argument_list></call> <block>{
        <expr><name>NodeDef</name> <name>def</name> <operator>=</operator> <call><name>getChildNode</name><argument_list>(<argument><expr><literal type="string">"childNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"siblingNode"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QNodeDefinition</name> <name>def</name> <operator>=</operator> <call><name>getChildNode</name><argument_list>(<argument><expr><literal type="string">"childNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"siblingNode"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"siblingNode allowsSameNameSiblings"</literal></expr></argument>,
                 <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>allowsSameNameSiblings</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
     </block_content>}</block></for>
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;defaultPrimaryType&lt;/code&gt; child node attribute. */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultTypeNode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>NodeDef</name></type> <name>def</name> <init>= <expr><call><name>getChildNode</name><argument_list>(<argument><expr><literal type="string">"childNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"defaultTypeNode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QNodeDefinition</name></type> <name>def</name> <init>= <expr><call><name>getChildNode</name><argument_list>(<argument><expr><literal type="string">"childNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"defaultTypeNode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"defaultTypeNode defaultPrimaryType"</literal></expr></argument>,
                 <argument><expr><call><name><name>FACTORY</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Name</name><operator>.</operator><name>NS_NT_URI</name></name></expr></argument>, <argument><expr><literal type="string">"base"</literal></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name><name>def</name><operator>.</operator><name>getDefaultPrimaryType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">620</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">621</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>AbstractJCRTest</name> <block>{
 
     <comment type="block" format="javadoc">/** Test for the &lt;code&gt;requiredPrimaryTypes&lt;/code&gt; child node attributes. */</comment>
     <expr><specifier>public</specifier> <name>void</name> <call><name>testRequiredTypeNode</name><argument_list>()</argument_list></call> <block>{
        <expr><name>NodeDef</name> <name>def</name> <operator>=</operator> <call><name>getChildNode</name><argument_list>(<argument><expr><literal type="string">"childNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"requiredTypeNode"</literal></expr></argument>)</argument_list></call></expr>;
        <name>QNodeDefinition</name> <name>def</name> <operator>=</operator> <call><name>getChildNode</name><argument_list>(<argument><expr><literal type="string">"childNodeType"</literal></expr></argument>, <argument><expr><literal type="string">"requiredTypeNode"</literal></expr></argument>)</argument_list></call></block></expr>;
         <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"requiredTypeNode requiredPrimaryTypes"</literal></expr></argument>,
                 <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>def</name><operator>.</operator><name>getRequiredPrimaryTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>Name</name><index>[]</index></name></type> <name>types</name> <init>= <expr><call><name><name>def</name><operator>.</operator><name>getRequiredPrimaryTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QItemDefinitionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QItemDefinitionImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9826582fb</literal><operator>..</operator><name>c0d7458c9</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QItemDefinitionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QItemDefinitionImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QItemDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameFactoryImpl</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
  <expr_stmt><expr><operator>*</operator><operator>/</operator>
 <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>QItemDefinitionImpl</name> implements <name>QItemDefinition</name></expr><operator>,</operator> <expr><name>Serializable</name> <block>{
 
    <comment type="block" format="javadoc">/**
     * The special wildcard name used as the name of residual item definitions.
     * TODO don't rely on specific factory impl
     */</comment>
    <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>Name</name> <name>ANY_NAME</name> <operator>=</operator> <call><name><name>NameFactoryImpl</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;

     <comment type="block" format="javadoc">/**
      * The name of the child item.
      */</comment>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QNodeDefinitionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QNodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fb2c95a7f</name><operator>..</operator><literal type="number">4bb63981d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QNodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name><name>QNodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal><operator>,</operator><literal type="number">6</literal> <operator>+</operator><literal type="number">21</literal><operator>,</operator><literal type="number">8</literal> @@</block></expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * &lt;code&gt;QNodeDefinitionImpl&lt;/code&gt; implements a &lt;code&gt;QNodeDefinition&lt;/code&gt;.
@@ -35,8 +37,7 @@ public class QNodeDefinitionImpl extends QItemDefinitionImpl implements QNodeDef
     /**
      * The names of the required primary types.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Name</name><index>[]</index></name></type> <name>requiredPrimaryTypes</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name></type> <name>requiredPrimaryTypes</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <comment type="block" format="javadoc">/**
      * The 'allowsSameNameSiblings' flag.
      */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QNodeDefinitionImpl</name> extends <name>QItemDefinitionImpl</name> implements <name>QNodeDef</name>
         <call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>declaringNodeType</name></expr></argument>, <argument><expr><name>isAutoCreated</name></expr></argument>, <argument><expr><name>isMandatory</name></expr></argument>,
                 <argument><expr><name>onParentVersion</name></expr></argument>, <argument><expr><name>isProtected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultPrimaryType</name></name> <operator>=</operator> <name>defaultPrimaryType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>requiredPrimaryTypes</name></name> <operator>=</operator> <name>requiredPrimaryTypes</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>requiredPrimaryTypes</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>requiredPrimaryTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowsSameNameSiblings</name></name> <operator>=</operator> <name>allowsSameNameSiblings</name></expr>;</expr_stmt>
     </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">93</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>QNodeDefinitionImpl</name> extends <name>QItemDefinitionImpl</name> implements <name>QNodeDef</name>
      <operator>*</operator> <block>{@<expr><name>inheritDoc</name></expr>}</block>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>Name</name><index>[]</index></name> <call><name>getRequiredPrimaryTypes</name><argument_list>()</argument_list></call> <block>{
        <return>return <expr><name>requiredPrimaryTypes</name></expr>;</return></block></expr></expr_stmt>
        <return>return <expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[<expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -130,7 +131,8 @@ public class QNodeDefinitionImpl extends QItemDefinitionImpl implements QNodeDef
         if (obj instanceof QNodeDefinition) {
             QNodeDefinition other = (QNodeDefinition) obj;
             return super.equals(obj)
                    &amp;&amp; Arrays.equals(requiredPrimaryTypes, other.getRequiredPrimaryTypes())
                    &amp;&amp; requiredPrimaryTypes.equals(new HashSet&lt;Name&gt;(
                            Arrays.asList(other.getRequiredPrimaryTypes())))
                     &amp;&amp; (defaultPrimaryType == null
                             ? other.getDefaultPrimaryType() == null
                             : defaultPrimaryType.equals(other.getDefaultPrimaryType()))
diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/QNodeTypeDefinitionImpl.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/QNodeTypeDefinitionImpl.java
index 8f9feaf25..1f337e52e 100644
-- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/QNodeTypeDefinitionImpl.java
++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/QNodeTypeDefinitionImpl.java
@@ -25,6 +25,7 @@ import org.apache.jackrabbit.spi.QValue;
 import org.apache.jackrabbit.spi.QValueFactory;
 import org.apache.jackrabbit.spi.QValueConstraint;
 import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
import org.apache.jackrabbit.spi.commons.name.NameConstants;
 import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
 import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
 import org.apache.jackrabbit.spi.commons.value.ValueFormat;
@@ -40,23 +41,28 @@ import java.util.Collection;
 import java.util.HashSet;
 import java.util.Collections;
 import java.util.Arrays;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Set;
 import java.io.Serializable;
 
 /**
  * &lt;code&gt;QNodeTypeDefinitionImpl&lt;/code&gt; implements a serializable SPI node
  * type definition.
  */</comment>
<class><specifier>public</specifier> class <name>QNodeTypeDefinitionImpl</name> <super_list><implements>implements <super><name>QNodeTypeDefinition</name></super>, <super><name>Serializable</name></super></implements></super_list> <block>{
<class><specifier>public</specifier> class <name>QNodeTypeDefinitionImpl</name> <super_list><implements>implements <super><name>QNodeTypeDefinition</name></super>, <super><name>Serializable</name></super>, <super><name>Cloneable</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><operator>-</operator><literal type="number">4065300714874671511L</literal></expr></init></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * The name of the node definition.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Name</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Name</name></type> <name>name</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * The names of the declared super types of this node type definition.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Name</name><index>[]</index></name></type> <name>supertypes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Name</name><index>[]</index></name></type> <name>supertypes</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * The names of the supported mixins on this node type (or &lt;code&gt;null&lt;/code&gt;)
@@ -66,44 +72,51 @@ public class QNodeTypeDefinitionImpl implements QNodeTypeDefinition, Serializabl
     /**
      * Indicates whether this is a mixin node type definition.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isMixin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isMixin</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * Indicates whether this is an abstract node type definition.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isAbstract</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isAbstract</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * Indicates whether this is a queryable node type definition.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isQueryable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isQueryable</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * Indicates whether this node type definition has orderable child nodes.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>hasOrderableChildNodes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>hasOrderableChildNodes</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * The name of the primary item or &lt;code&gt;null&lt;/code&gt; if none is defined.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Name</name></type> <name>primaryItemName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Name</name></type> <name>primaryItemName</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
     * The list of property definitions.
     * The list of child node definitions.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>propertyDefs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>propertyDefs</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
     * The list of child node definitions.
     * The list of property definitions.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>QNodeDefinition</name><index>[]</index></name></type> <name>childNodeDefs</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name></type> <name>childNodeDefs</name></decl>;</decl_stmt>
     <comment type="block" format="javadoc">/**
      * Unmodifiable collection of dependent node type &lt;code&gt;Name&lt;/code&gt;s.
      * @see #getDependencies()
      */</comment>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>transient</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name></type> <name>dependencies</name></decl>;</decl_stmt>
 
    <comment type="block" format="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>QNodeTypeDefinitionImpl</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Name</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                <argument><expr><name><name>QPropertyDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr></argument>, <argument><expr><name><name>QNodeDefinition</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

     <comment type="block" format="javadoc">/**
      * Copy constructor.
      *
@@ -143,7 +156,6 @@ public class QNodeTypeDefinitionImpl implements QNodeTypeDefinition, Serializabl
                                    QPropertyDefinition[] declaredPropDefs,
                                    QNodeDefinition[] declaredNodeDefs) {
         this.name = name;
        this.supertypes = supertypes;
         this.supportedMixins = supportedMixins;
         this.isMixin = isMixin;
         this.isAbstract = isAbstract;
@@ -152,6 +164,7 @@ public class QNodeTypeDefinitionImpl implements QNodeTypeDefinition, Serializabl
         this.primaryItemName = primaryItemName;
         this.propertyDefs = getSerializablePropertyDefs(declaredPropDefs);
         this.childNodeDefs = getSerializableNodeDefs(declaredNodeDefs);
        setSupertypes(supertypes); // make sure supertypes are sorted
     }
 
     /**
@@ -194,7 +207,105 @@ public class QNodeTypeDefinitionImpl implements QNodeTypeDefinition, Serializabl
                 createQNodeDefinitions(name, def.getDeclaredChildNodeDefinitions(), resolver));
     }
 
    /**
     * Sets the name of the node type being defined.
     *
     * @param name The name of the node type.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the supertypes.
     *
     * @param names the names of the supertypes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSupertypes</name><parameter_list>(<parameter><decl><type><name><name>Name</name><index>[]</index></name></type> <name>names</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>resetDependencies</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Optimize common cases (zero or one supertypes)</comment>
        <if_stmt><if>if <condition>(<expr><name><name>names</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>supertypes</name> <operator>=</operator> <name><name>Name</name><operator>.</operator><name>EMPTY_ARRAY</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>names</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>supertypes</name> <operator>=</operator> <operator>new</operator> <name><name>Name</name><index>[]</index></name> <block>{ <expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> }</block></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// Sort and remove duplicates</comment>
            <decl_stmt><decl><type><name><name>SortedSet</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name></type> <name>types</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>supertypes</name> <operator>=</operator> <call><name><name>types</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[<expr><call><name><name>types</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the mixin flag.
     *
     * @param mixin flag
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMixin</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>mixin</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isMixin</name></name> <operator>=</operator> <name>mixin</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the orderableChildNodes flag.
     *
     * @param orderableChildNodes flag
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOrderableChildNodes</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>orderableChildNodes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hasOrderableChildNodes</name></name> <operator>=</operator> <name>orderableChildNodes</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'abstract' flag.
     *
     * @param abstractStatus flag
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAbstract</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>abstractStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isAbstract</name></name> <operator>=</operator> <name>abstractStatus</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the 'queryable' flag.
     *
     * @param queryable flag
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQueryable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>queryable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isQueryable</name></name> <operator>=</operator> <name>queryable</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the name of the primary item (one of the child items of the node's
     * of this node type)
     *
     * @param primaryItemName The name of the primary item.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrimaryItemName</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>primaryItemName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>primaryItemName</name></name> <operator>=</operator> <name>primaryItemName</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the property definitions.
     *
     * @param defs An array of &lt;code&gt;QPropertyDefinition&lt;/code&gt; objects.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPropertyDefs</name><parameter_list>(<parameter><decl><type><name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>defs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>resetDependencies</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>propertyDefs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>propertyDefs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>defs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the child node definitions.
     *
     * @param defs An array of &lt;code&gt;QNodeDefinition&lt;/code&gt; objects
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setChildNodeDefs</name><parameter_list>(<parameter><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>defs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>resetDependencies</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>childNodeDefs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>childNodeDefs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>defs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

     <comment type="line">//------------------------------------------------&lt; QNodeTypeDefinition &gt;---</comment>

     <comment type="block" format="javadoc">/**
      * {@inheritDoc}
      */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">206</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">317</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>QNodeTypeDefinitionImpl</name> implements <name>QNodeTypeDefinition</name></expr><operator>,</operator> <expr><name>Serializabl</name>
      <operator>*</operator> <block>{@<expr><name>inheritDoc</name></expr>}</block>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name><name>Name</name><index>[]</index></name> <call><name>getSupertypes</name><argument_list>()</argument_list></call> <block>{
        <expr><name><name>Name</name><index>[]</index></name> <name>sTypes</name> <operator>=</operator> <operator>new</operator> <name><name>Name</name><index>[<expr><name><name>supertypes</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;
        <call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>supertypes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sTypes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>supertypes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <return>return <expr><name>sTypes</name></expr>;</return>
        <if_stmt><if>if <condition>(<expr><name><name>supertypes</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
                <operator>||</operator> <call><name>isMixin</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>supertypes</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <name><name>Name</name><index>[]</index></name> <block>{ <expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr> }</block></expr>;</return>
        </block_content>}</block></else></if_stmt>
     }</block></class>
 
     <comment type="block" format="javadoc">/**
@@ -250,24 +364,20 @@ public class QNodeTypeDefinitionImpl implements QNodeTypeDefinition, Serializabl
      * {@inheritDoc}
      */</comment>
     <function><type><specifier>public</specifier> <name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>getPropertyDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>pDefs</name> <init>= <expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><name><name>propertyDefs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>propertyDefs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pDefs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>propertyDefs</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>pDefs</name></expr>;</return>
        <return>return <expr><call><name><name>propertyDefs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><call><name><name>propertyDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
      * {@inheritDoc}
      */</comment>
     <function><type><specifier>public</specifier> <name><name>QNodeDefinition</name><index>[]</index></name></type> <name>getChildNodeDefs</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>QNodeDefinition</name><index>[]</index></name></type> <name>cnDefs</name> <init>= <expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><name><name>childNodeDefs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>childNodeDefs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnDefs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>childNodeDefs</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cnDefs</name></expr>;</return>
        <return>return <expr><call><name><name>childNodeDefs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><call><name><name>childNodeDefs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
      * {@inheritDoc}
      */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name></type> <name>getDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><name>dependencies</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name></type> <name>deps</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <comment type="line">// supertypes</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">320</literal></expr><operator>,</operator><expr><literal type="number">46</literal> <operator>+</operator><literal type="number">430</literal></expr><operator>,</operator><expr><literal type="number">92</literal> @@ <specifier>public</specifier> <name>class</name> <name>QNodeTypeDefinitionImpl</name> implements <name>QNodeTypeDefinition</name></expr><operator>,</operator> <expr><name>Serializabl</name></expr></expr_stmt>
         </block_content>}</block></if></if_stmt>
     </block_content>}</block></function>
     
    <comment type="line">//-------------------------------------------&lt; java.lang.Object overrides &gt;</comment>

    <function><type><specifier>public</specifier> <name>QNodeTypeDefinitionImpl</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <comment type="line">// todo: itemdefs should be cloned as well, since mutable</comment>
            <return>return <expr><operator>(</operator><name>QNodeTypeDefinitionImpl</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// does not happen, this class is cloneable</comment>
            <throw>throw <expr><operator>new</operator> <call><name>InternalError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>QNodeTypeDefinitionImpl</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>QNodeTypeDefinitionImpl</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>QNodeTypeDefinitionImpl</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>other</name><operator>.</operator><name>name</name></name> <operator>==</operator> <literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator>
                    <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>primaryItemName</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>other</name><operator>.</operator><name>primaryItemName</name></name> <operator>==</operator> <literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>primaryItemName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>primaryItemName</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator>
                    <operator>&amp;&amp;</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getSupertypes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>getSupertypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <name>isMixin</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>isMixin</name></name>
                    <operator>&amp;&amp;</operator> <name>hasOrderableChildNodes</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>hasOrderableChildNodes</name></name>
                    <operator>&amp;&amp;</operator> <name>isAbstract</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>isAbstract</name></name>
                    <operator>&amp;&amp;</operator> <name>isQueryable</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>isQueryable</name></name>
                    <operator>&amp;&amp;</operator> <call><name><name>propertyDefs</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>propertyDefs</name></name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name><name>childNodeDefs</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>childNodeDefs</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns zero to satisfy the Object equals/hashCode contract.
     * This class is mutable and not meant to be used as a hash key.
     *
     * @return always zero
     * @see Object#hashCode()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

     <comment type="line">//-------------------------------&lt; internal &gt;-------------------------------</comment>
 
    <function><type><specifier>private</specifier> <name>void</name></type> <name>resetDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>dependencies</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
     * Returns an array of serializable property definitions for
     * Returns a set of serializable property definitions for
      * &lt;code&gt;propDefs&lt;/code&gt;.
      *
      * @param propDefs the SPI property definitions.
     * @return an array of serializable property definitions.
     * @return a set of serializable property definitions.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>QPropertyDefinition</name><index>[]</index></name></type> <name>getSerializablePropertyDefs</name><argument_list>(
    <argument><expr><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name> <call><name>getSerializablePropertyDefs</name><argument_list>(
             <argument><expr><name><name>QPropertyDefinition</name><index>[]</index></name> <name>propDefs</name></expr></argument>)</argument_list></call> <block>{
        <expr><name><name>QPropertyDefinition</name><index>[]</index></name> <name>serDefs</name> <operator>=</operator> <operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><name><name>propDefs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</block></expr></argument></argument_list></decl></decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>propDefs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>instanceof</operator> <name>Serializable</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>serDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>QPropertyDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QPropertyDefinition</name></type> <name>pd</name> <range>: <expr><name>propDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>pd</name> <operator>instanceof</operator> <name>Serializable</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>serDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>QPropertyDefinitionImpl</name><argument_list>(<argument><expr><name><name>propDefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
         </block_content>}</block></for>
        <return>return <expr><name>serDefs</name></expr>;</return>
        <return>return <expr><name>defs</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
     <comment type="block" format="javadoc">/**
     * Returns an array of serializable node definitions for
     * Returns a set of serializable node definitions for
      * &lt;code&gt;nodeDefs&lt;/code&gt;.
      *
      * @param nodeDefs the node definitions.
     * @return an array of serializable node definitions.
     * @return a set of serializable node definitions.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>QNodeDefinition</name><index>[]</index></name></type> <name>getSerializableNodeDefs</name><argument_list>(
    <argument><expr><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name> <call><name>getSerializableNodeDefs</name><argument_list>(
             <argument><expr><name><name>QNodeDefinition</name><index>[]</index></name> <name>nodeDefs</name></expr></argument>)</argument_list></call> <block>{
        <expr><name><name>QNodeDefinition</name><index>[]</index></name> <name>serDefs</name> <operator>=</operator> <operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><name><name>nodeDefs</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</block></expr></argument></argument_list></decl></decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodeDefs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>instanceof</operator> <name>Serializable</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>serDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>QNodeDefinition</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>QNodeDefinition</name></type> <name>nd</name> <range>: <expr><name>nodeDefs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>nd</name> <operator>instanceof</operator> <name>Serializable</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>serDefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>QNodeDefinitionImpl</name><argument_list>(<argument><expr><name><name>nodeDefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QNodeDefinitionImpl</name><argument_list>(<argument><expr><name>nd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
         </block_content>}</block></for>
        <return>return <expr><name>serDefs</name></expr>;</return>
        <return>return <expr><name>defs</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
     <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Name</name><index>[]</index></name></type> <name>getNames</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>jcrNames</name></decl></parameter>, <parameter><decl><type><name>NamePathResolver</name></type> <name>resolver</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NamespaceException</name></expr></argument>, <argument><expr><name>IllegalNameException</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">381</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">537</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>QNodeTypeDefinitionImpl</name> implements <name>QNodeTypeDefinition</name></expr><operator>,</operator> <expr><name>Serializabl</name>
         <name><name>QPropertyDefinition</name><index>[]</index></name> <name>declaredPropDefs</name> <operator>=</operator> <operator>new</operator> <name><name>QPropertyDefinition</name><index>[<expr><name><name>pds</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pds</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>PropertyDefinition</name></type> <name>propDef</name> <init>= <expr><name><name>pds</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><ternary><condition><expr><call><name><name>propDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>QItemDefinitionImpl</name><operator>.</operator><name>ANY_NAME</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                    ?</condition><then> <expr><name><name>QItemDefinitionImpl</name><operator>.</operator><name>ANY_NAME</name></name>
            <name>Name</name> <name>name</name> <operator>=</operator> <ternary><condition><expr><call><name><name>propDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                    ?</condition><then> <expr><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name></name></expr>
                     </then><else>: <expr><call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name><name>propDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></then></ternary></expr></init></decl>;</decl_stmt>
             <comment type="line">// check if propDef provides declaring node type and if it matches 'this' one.</comment>
             <if_stmt><if>if <condition>(<expr><call><name><name>propDef</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">429</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">585</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>QNodeTypeDefinitionImpl</name> implements <name>QNodeTypeDefinition</name></expr><operator>,</operator> <expr><name>Serializabl</name>
         <name><name>QNodeDefinition</name><index>[]</index></name> <name>declaredNodeDefs</name> <operator>=</operator> <operator>new</operator> <name><name>QNodeDefinition</name><index>[<expr><name><name>nds</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nds</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>NodeDefinition</name></type> <name>nodeDef</name> <init>= <expr><name><name>nds</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Name</name></type> <name>name</name> <init>= <expr><ternary><condition><expr><call><name><name>nodeDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>QItemDefinitionImpl</name><operator>.</operator><name>ANY_NAME</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                    ?</condition><then> <expr><name><name>QItemDefinitionImpl</name><operator>.</operator><name>ANY_NAME</name></name>
            <name>Name</name> <name>name</name> <operator>=</operator> <ternary><condition><expr><call><name><name>nodeDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                    ?</condition><then> <expr><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name></name></expr>
                     </then><else>: <expr><call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></then></ternary></expr></init></decl>;</decl_stmt>
             <comment type="line">// check if propDef provides declaring node type and if it matches 'this' one.</comment>
             <if_stmt><if>if <condition>(<expr><call><name><name>nodeDef</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefinitionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9c6828c90</literal><operator>..</operator><name>add410450</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>NodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>NodeDefinitionImpl</name> extends <name>ItemDefinitionImpl</name> implements <name>NodeDefini</name>
         <call><name>super</name><argument_list>(<argument><expr><name>itemDef</name></expr></argument>, <argument><expr><name>ntMgr</name></expr></argument>, <argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
    <comment type="block" format="javadoc">/**
     * Returns the wrapped node definition.
     *
     * @return the wrapped node definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>QNodeDefinition</name></type> <name>unwrap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>QNodeDefinition</name><operator>)</operator> <name>itemDef</name></expr>;</return>
    </block_content>}</block></function>

     <comment type="line">//-------------------------------------------------------&lt; NodeDefinition &gt;</comment>

     <comment type="block" format="javadoc">/**
      * {@inheritDoc}
      */</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ff343e552</name><operator>..</operator><literal type="number">3feeda985</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>PropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>PropertyDefinitionImpl</name> extends <name>ItemDefinitionImpl</name> implements <name>Proper</name>
         <name><name>this</name><operator>.</operator><name>valueFactory</name></name> <operator>=</operator> <name>valueFactory</name></expr>;</expr_stmt>
     </block_content>}</block></for>
 
    <comment type="block" format="javadoc">/**
     * Returns the wrapped property definition.
     *
     * @return the wrapped property definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>QPropertyDefinition</name></type> <name>unwrap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>QPropertyDefinition</name><operator>)</operator> <name>itemDef</name></expr>;</return>
    </block_content>}</block></function>

     <comment type="line">//-------------------------------------------------&lt; PropertyDefinition &gt;---</comment>

     <comment type="block" format="javadoc">/**
      * {@inheritDoc}
      */</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QDefinitionBuilderFactory</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QDefinitionBuilderFactory</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">70e251b54</literal><operator>..</operator><name>c63bf0656</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QDefinitionBuilderFactory</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QDefinitionBuilderFactory</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">327</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">327</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>QDefinitionBuilderFactory</name> extends <name>DefinitionBuilderFactory</name><operator>&lt;</operator><name>QNodeTyp</name>
 
         @<name>Override</name>
         <specifier>public</specifier> <name>void</name> <call><name>build</name><argument_list>()</argument_list></call> <block>{
            <if_stmt><if>if <condition>(<expr><call><name><name>builder</name><operator>.</operator><name>getRequiredPrimaryTypes</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addRequiredPrimaryType</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

             <call><name><name>ntd</name><operator>.</operator><name>childNodeDefs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
     </block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QItemDefinitionBuilder</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QItemDefinitionBuilder</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">02aadcf25</literal><operator>..</operator><name>bea5d96ad</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QItemDefinitionBuilder</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi</name><operator>-</operator><name>commons</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi</name><operator>/</operator><name>commons</name><operator>/</operator><name>nodetype</name><operator>/</operator><name><name>QItemDefinitionBuilder</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name></name>;</package>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>ItemDefinition</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>version</name><operator>.</operator><name>OnParentVersionAction</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QItemDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * A builder for {@link QItemDefinition}.
  */</comment>
 <class><specifier>public</specifier> <specifier>abstract</specifier> class <name>QItemDefinitionBuilder</name> <block>{
 
    <decl_stmt><decl><type><specifier>private</specifier> <name>Name</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Name</name></type> <name>declaringType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isAutocreated</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>onParentVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isProtected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isMandatory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Name</name></type> <name>name</name> <init>= <expr><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Name</name></type> <name>declaringType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isAutocreated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>onParentVersion</name> <init>= <expr><name><name>OnParentVersionAction</name><operator>.</operator><name>COPY</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isProtected</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isMandatory</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * @param name  the name of the child item definition being build
diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QNodeDefinitionBuilder.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QNodeDefinitionBuilder.java
index 8808a4b6c..a88569914 100644
-- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QNodeDefinitionBuilder.java
++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QNodeDefinitionBuilder.java
@@ -16,13 +16,14 @@
  */</comment>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QNodeDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>QNodeDefinitionImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * A builder for a {@link QNodeDefinition}.
@@ -30,7 +31,7 @@ import org.apache.jackrabbit.spi.commons.QNodeDefinitionImpl;
 public class QNodeDefinitionBuilder extends QItemDefinitionBuilder {
 
     private Name defaultPrimaryType;
    private List&lt;Name&gt; requiredPrimaryTypes;
    private Set&lt;Name&gt; requiredPrimaryTypes = new HashSet&lt;Name&gt;();
     private boolean allowsSameNameSiblings;
 
     /**
@@ -55,9 +56,6 @@ public class QNodeDefinitionBuilder extends QItemDefinitionBuilder {
      * @param name the name of a required primary type.
      */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>addRequiredPrimaryType</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>requiredPrimaryTypes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>requiredPrimaryTypes</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>QNodeDefinitionBuilder</name> extends <name>QItemDefinitionBuilder</name> <block>{
      <expr><operator>*</operator>              <name>definition</name> <name>being</name> <name><name>built</name><operator>.</operator></name>
      *<operator>/</operator>
     <specifier>public</specifier> <name>void</name> <call><name>setRequiredPrimaryTypes</name><argument_list>(<argument><expr><name><name>Name</name><index>[]</index></name> <name>names</name></expr></argument>)</argument_list></call> <block>{
        <if_stmt><if>if <condition>(<expr><name>names</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>requiredPrimaryTypes</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt/>}</block_content> else <block>{<block_content>
            <expr_stmt><expr><name>requiredPrimaryTypes</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Name</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>names</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/>}</block_content>
     }
 
@@ -78</block><operator>,</operator><expr_stmt><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">75</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>QNodeDefinitionBuilder</name> extends <name>QItemDefinitionBuilder</name> <block>{
      <expr><operator>*</operator>         <name>definition</name> <name>being</name> <name><name>built</name><operator>.</operator></name>
      *<operator>/</operator>
     <specifier>public</specifier> <name><name>Name</name><index>[]</index></name> <call><name>getRequiredPrimaryTypes</name><argument_list>()</argument_list></call> <block>{
        <if_stmt><if>if <condition>(<expr><name>requiredPrimaryTypes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        <if_stmt><if>if <condition>(<expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <name><name>Name</name><index>[]</index></name><block>{<expr><name><name>NameConstants</name><operator>.</operator><name>NT_BASE</name></name></expr>}</block></expr>;</return>
         <expr_stmt/>}</block_content> else <block>{<block_content>
             <return>return <expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Name</name><index>[<expr><call><name><name>requiredPrimaryTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
         <expr_stmt/>}</block_content>
@@ -111</block></block><operator>,</operator><expr_stmt><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>QNodeDefinitionBuilder</name> extends <name>QItemDefinitionBuilder</name> <block>{
      <expr><operator>*</operator>                               <name><name>instance</name><operator>.</operator></name>
      *<operator>/</operator>
     <specifier>public</specifier> <name>QNodeDefinition</name> <call><name>build</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IllegalStateException</name> <block>{</block></expr></argument></throws></expr>
        <return>return <expr><operator>new</operator> <call><name>QNodeDefinitionImpl</name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDeclaringNodeType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAutoCreated</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getMandatory</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getOnParentVersion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProtected</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDefaultPrimaryType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRequiredPrimaryTypes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAllowsSameNameSiblings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>QNodeDefinitionImpl</name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDeclaringNodeType</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getAutoCreated</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getMandatory</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getOnParentVersion</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getProtected</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDefaultPrimaryType</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>getRequiredPrimaryTypes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAllowsSameNameSiblings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     <expr_stmt/>}</block_content>
 
 }
diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QPropertyDefinitionBuilder.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QPropertyDefinitionBuilder.java
index 6311173fa..06a315b34 100644
-- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QPropertyDefinitionBuilder.java
++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/QPropertyDefinitionBuilder.java
@@ -21</block><operator>,</operator><expr_stmt><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt></if></if_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import></block></expr>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import></block></expr></expr_stmt></if></if_stmt>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinition</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PropertyType</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QPropertyDefinition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValue</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>QPropertyDefinitionImpl</name></name>;</import>
  <expr_stmt><expr><operator>*</operator><operator>/</operator>
 <specifier>public</specifier> <name>class</name> <name>QPropertyDefinitionBuilder</name> extends <name>QItemDefinitionBuilder</name> <block>{
 
    <expr><specifier>private</specifier> <name>int</name> <name>requiredType</name></expr>;
    <specifier>private</specifier> <name>int</name> <name>requiredType</name> <operator>=</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>QValueConstraint</name></argument>&gt;</argument_list></name></type> <name>valueConstraints</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QValueConstraint</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>QValue</name></argument>&gt;</argument_list></name></type> <name>defaultValues</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isMultiple</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isMultiple</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fullTextSearchable</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>queryOrderable</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>queryOperators</name> <init>= <expr><call><name><name>Operator</name><operator>.</operator><name>getAllQueryOperators</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi2jcr</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi2jcr</name><operator>/</operator><name><name>QNodeDefinitionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi2jcr</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi2jcr</name><operator>/</operator><name><name>QNodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0bda75cb9</literal><operator>..</operator><name>fd1d182d8</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi2jcr</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi2jcr</name><operator>/</operator><name><name>QNodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi2jcr</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi2jcr</name><operator>/</operator><name><name>QNodeDefinitionImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi2jcr</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NameException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>NodeDefinition</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>QNodeDefinitionImpl</name>
     <call><name>QNodeDefinitionImpl</name><argument_list>(<argument><expr><name>NodeDefinition</name> <name>nodeDef</name></expr></argument>,
                         <argument><expr><name>NamePathResolver</name> <name>resolver</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>NameException</name></expr></argument>, <argument><expr><name>NamespaceException</name> <block>{
        <expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>ANY_NAME</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>?</operator> <name>ANY_NAME</name></expr></argument></argument_list></call></expr></block></expr></argument></throws> <operator>:</operator> <call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
        <expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>?</operator> <name><name>NameConstants</name><operator>.</operator><name>ANY_NAME</name></name> <operator>:</operator> <call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>?</operator> <call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>getDeclaringNodeType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="null">null</literal></expr></argument>,
                 <argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>isAutoCreated</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>isMandatory</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>getOnParentVersion</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nodeDef</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi2jcr</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi2jcr</name><operator>/</operator><name><name>QPropertyDefinitionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi2jcr</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi2jcr</name><operator>/</operator><name><name>QPropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">19ba1a418</literal><operator>..</operator><name>d13edf8ce</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi2jcr</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi2jcr</name><operator>/</operator><name><name>QPropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>spi2jcr</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>spi2jcr</name><operator>/</operator><name><name>QPropertyDefinitionImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">18</literal></expr></argument>,<argument><expr><literal type="number">15</literal> @@</expr></argument></argument_list></call></expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi2jcr</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValue</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>QValueConstraint</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NameException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>IllegalNameException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ValueConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>NameConstants</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>nodetype</name><operator>.</operator><name>PropertyDefinition</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PropertyType</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * &lt;code&gt;QPropertyDefinitionImpl&lt;/code&gt; implements a property
@@ -53,7 +49,7 @@ class QPropertyDefinitionImpl
                             NamePathResolver resolver,
                             QValueFactory qValueFactory)
             throws RepositoryException, NameException {
        super(propDef.getName().equals(ANY_NAME.getLocalName()) ? ANY_NAME : resolver.getQName(propDef.getName()),
        super(propDef.getName().equals(NameConstants.ANY_NAME.getLocalName()) ? NameConstants.ANY_NAME : resolver.getQName(propDef.getName()),
                 resolver.getQName(propDef.getDeclaringNodeType().getName()),
                 propDef.isAutoCreated(),
                 propDef.isMandatory(),
@@ -91,21 +87,4 @@ class QPropertyDefinitionImpl
         }
         return defaultValues;
     }

    /**
     * Convert String jcr names to Name objects.
     *
     * @param aqos
     * @param resolver
     * @return
     * @throws NamespaceException
     * @throws IllegalNameException
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Name</name><index>[]</index></name></type> <name>convertQueryOperators</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>aqos</name></decl></parameter>, <parameter><decl><type><name>NamePathResolver</name></type> <name>resolver</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NamespaceException</name></expr></argument>, <argument><expr><name>IllegalNameException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Name</name><index>[]</index></name></type> <name>names</name> <init>= <expr><operator>new</operator> <name><name>Name</name><index>[<expr><name><name>aqos</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>aqos</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><name><name>aqos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content>
        return names</block><empty_stmt>;</empty_stmt></for>
    <expr_stmt/>}</block_content>
 }
- 
2.19.1.windows.1</block></function></block_content></block></block></if></if_stmt></block></expr></block></expr></expr_stmt></block></class></block_content></block></function></block_content></block></for></block_content></block></for></block_content></block></function></block></class></block_content></block></catch></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block></expr></expr_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></function></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></decl></decl_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></while></block_content></block></synchronized></expr></expr_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block></block></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></function></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></for></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></for></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></catch></block_content></block></catch></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></block></expr></expr_stmt></block_content></block></if></if_stmt>

</unit>
