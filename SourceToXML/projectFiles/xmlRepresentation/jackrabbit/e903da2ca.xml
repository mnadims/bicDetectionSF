<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/e903da2ca.java"><expr_stmt><expr><name>From</name> <name>e903da2ca8f8635de1526e82bb5e1156204620c6</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Marcel</name> <name><name>Reutegger</name> <argument_list type="generic">&lt;<argument><name>mreutegg</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">23</literal> <name>Feb</name> <literal type="number">2009</literal> <literal type="number">10</literal><operator>:</operator><literal type="number">04</literal><operator>:</operator><literal type="number">53</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">1990</literal><operator>:</operator> <name>Optimize</name> <name>queries</name> <name>with</name> <name>relative</name> <name>path</name> <name>in</name> <name>order</name> <name>by</name>
 <name>clause</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@746946 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AbstractNamespaceMappings</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">72</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AggregateRule</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">14</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AggregateRuleImpl</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">194</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>ComparableBoolean</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">43</literal> <operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name><name>FileBasedNamespaceMappings</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">36</literal> <operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexFormatVersion</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">12</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name><name>IndexingConfigurationEntityResolver</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationImpl</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>JQOM2LuceneQueryBuilder</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>NSRegistryBasedNamespaceMappings</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">29</literal> <operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NameQuery</name><operator>.</operator><name>java</name></name>          <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NameRangeQuery</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NamespaceMappings</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">20</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SearchIndex</name><operator>.</operator><name>java</name></name>        <operator>|</operator> <literal type="number">118</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">127</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldSortComparator</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">76</literal> <operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SingletonTokenStream</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>lucene</name><operator>/</operator><name>indexing</name><operator>-</operator><name>configuration</name><operator>-</operator><literal type="number">1.2.dtd</literal>     <operator>|</operator>  <literal type="number">93</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>IndexingAggregateTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">98</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>OrderByTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">91</literal> <operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator>default<operator>/</operator><name>indexing</name><operator>-</operator><name><name>configuration</name><operator>.</operator><name>xml</name></name>        <operator>|</operator>  <literal type="number">10</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>workspaces</name><operator>/</operator>default<operator>/</operator><name><name>workspace</name><operator>.</operator><name>xml</name></name>          <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>indexing</name><operator>-</operator><name>test</name><operator>/</operator><name>indexing</name><operator>-</operator><name><name>configuration</name><operator>.</operator><name>xml</name></name>  <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">24</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">809</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">262</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AbstractNamespaceMappings</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>ComparableBoolean</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name>indexing</name><operator>-</operator><name>configuration</name><operator>-</operator><literal type="number">1.2.dtd</literal>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator>default<operator>/</operator><name>indexing</name><operator>-</operator><name><name>configuration</name><operator>.</operator><name>xml</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AbstractNamespaceMappings</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AbstractNamespaceMappings</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..00a0e79de</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AbstractNamespaceMappings</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">72</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>IllegalNameException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NamePathResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>namespace</name><operator>.</operator><name>NamespaceResolver</name></name>;</import>

<comment type="block" format="javadoc">/**
 * &lt;code&gt;AbstractNamespaceMappings&lt;/code&gt; is the base class for index internal
 * namespace mappings.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractNamespaceMappings</name>
        <super_list><implements>implements <super><name>NamespaceMappings</name></super>, <super><name>NamespaceResolver</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The name resolver used to translate the qualified name to JCR name
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>NamePathResolver</name></type> <name>resolver</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AbstractNamespaceMappings</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resolver</name></name> <operator>=</operator> <call><name><name>NamePathResolverImpl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="line">//----------------------------&lt; NamespaceMappings &gt;-------------------------</comment>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>translateName</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>qName</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IllegalNameException</name></expr></argument></throws> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>resolver</name><operator>.</operator><name>getJCRName</name></name><argument_list>(<argument><expr><name>qName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NamespaceException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// should never happen actually, because we create yet unknown</comment>
            <comment type="line">// uri mappings on the fly.</comment>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalNameException</name><argument_list>(<argument><expr><literal type="string">"Internal error."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>translatePath</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalNameException</name></expr></argument></throws> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>resolver</name><operator>.</operator><name>getJCRPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NamespaceException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// should never happen actually, because we create yet unknown</comment>
            <comment type="line">// uri mappings on the fly.</comment>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalNameException</name><argument_list>(<argument><expr><literal type="string">"Internal error."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AggregateRule</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AggregateRule</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e1fc78635</name><operator>..</operator><literal type="number">187e20157</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AggregateRule</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AggregateRule</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>NodeState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>PropertyState</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> interface <name>AggregateRule</name> <block>{
      <expr><operator>*</operator><operator>/</operator>
     <name><name>NodeState</name><index>[]</index></name> <call><name>getAggregatedNodeStates</name><argument_list>(<argument><expr><name>NodeState</name> <name>nodeState</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>ItemStateException</name></expr></argument></throws></expr>;

    <comment type="block" format="javadoc">/**
     * Returns the property states that are part of the indexing aggregate of
     * the &lt;code&gt;nodeState&lt;/code&gt;.
     *
     * @param nodeState a node state
     * @return the property states that are part of the indexing aggregate of
     *         &lt;code&gt;nodeState&lt;/code&gt;. Returns &lt;code&gt;null&lt;/code&gt; if this
     *         aggregate does not apply to &lt;code&gt;nodeState&lt;/code&gt;.
     * @throws ItemStateException if an error occurs.
     */</comment>
    <expr><specifier>public</specifier> <name><name>PropertyState</name><index>[]</index></name> <call><name>getAggregatedPropertyStates</name><argument_list>(<argument><expr><name>NodeState</name> <name>nodeState</name></expr></argument>)</argument_list></call>
            <throws>throws <argument><expr><name>ItemStateException</name></expr></argument></throws></expr>;
 }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AggregateRuleImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AggregateRuleImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">368b438b3</literal><operator>..</operator><name>b4a1adbfe</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AggregateRuleImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>AggregateRuleImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>NodeState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ChildNodeEntry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>PropertyState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>HierarchyManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>NodeId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>PropertyId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>Text</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>NodeList</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>CharacterData</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PathNotFoundException</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>class</name> <name>AggregateRuleImpl</name> implements <name>AggregateRule</name> <block>{
     <expr><specifier>private</specifier> <name>final</name> <name>Name</name> <name>nodeTypeName</name></expr>;
 
     <comment type="block" format="javadoc">/**
     * The rules that define this indexing aggregate.
     * The node includes of this indexing aggregate.
     */</comment>
    <expr><specifier>private</specifier> <name>final</name> <name><name>NodeInclude</name><index>[]</index></name> <name>nodeIncludes</name></expr>;

    <comment type="block" format="javadoc">/**
     * The property includes of this indexing aggregate.
      */</comment>
    <expr><specifier>private</specifier> <name>final</name> <name><name>Rule</name><index>[]</index></name> <name>rules</name></expr>;
    <expr><specifier>private</specifier> <name>final</name> <name><name>PropertyInclude</name><index>[]</index></name> <name>propertyIncludes</name></expr>;
 
     <comment type="block" format="javadoc">/**
      * The item state manager to retrieve additional item states.
@@ -91,11 +100,12 @@ class AggregateRuleImpl implements AggregateRule {
     AggregateRuleImpl(Node config,
                       NameResolver resolver,
                       ItemStateManager ism,
                      HierarchyManager hmgr)
            throws MalformedPathException, IllegalNameException, NamespaceException {
                      HierarchyManager hmgr) throws MalformedPathException,
            IllegalNameException, NamespaceException, PathNotFoundException {
         this.resolver = resolver;
         this.nodeTypeName = getNodeTypeName(config);
        this.rules = getRules(config);
        this.nodeIncludes = getNodeIncludes(config);
        this.propertyIncludes = getPropertyIncludes(config);
         this.ism = ism;
         this.hmgr = hmgr;
     }
@@ -104,7 +114,7 @@ class AggregateRuleImpl implements AggregateRule {
      * Returns root node state for the indexing aggregate where
      * &lt;code&gt;nodeState&lt;/code&gt; belongs to.
      *
     * @param nodeState
     * @param nodeState the node state.
      * @return the root node state of the indexing aggregate or
      *         &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;nodeState&lt;/code&gt; does not belong to an
      *         indexing aggregate.
@@ -113,8 +123,16 @@ class AggregateRuleImpl implements AggregateRule {
      */</comment>
     <expr><specifier>public</specifier> <name>NodeState</name> <call><name>getAggregateRoot</name><argument_list>(<argument><expr><name>NodeState</name> <name>nodeState</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>ItemStateException</name></expr></argument>, <argument><expr><name>RepositoryException</name> <block>{</block></expr></argument></throws></expr>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rules</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>NodeState</name></type> <name>aggregateRoot</name> <init>= <expr><name><name>rules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodeIncludes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>NodeState</name></type> <name>aggregateRoot</name> <init>= <expr><name><name>nodeIncludes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>aggregateRoot</name> <operator>!=</operator> <literal type="null">null</literal>
                    <operator>&amp;&amp;</operator> <call><name><name>aggregateRoot</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>nodeTypeName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>aggregateRoot</name></expr>;</return>
            <expr_stmt/></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>}</block></expr></expr_stmt>
        }
        <comment type="line">// check property includes</comment>
        for <expr_stmt><expr><operator>(</operator><name>int</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal>; <name>i</name> <operator>&lt;</operator> <name><name>propertyIncludes</name><operator>.</operator><name>length</name></name>; <name>i</name><operator>++</operator><operator>)</operator> <block>{
            <expr><name>NodeState</name> <name>aggregateRoot</name> <operator>=</operator> <name><name>propertyIncludes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>)</argument_list></call></expr>;
             <if_stmt><if>if <condition>(<expr><name>aggregateRoot</name> <operator>!=</operator> <literal type="null">null</literal>
                     <operator>&amp;&amp;</operator> <call><name><name>aggregateRoot</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>nodeTypeName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <return>return <expr><name>aggregateRoot</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">137</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">155</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>AggregateRuleImpl</name> implements <name>AggregateRule</name> <block>{
             <throws>throws <argument><expr><name>ItemStateException</name> <block>{</block></expr></argument></throws>
         <if_stmt><if>if <condition>(<expr><call><name><name>nodeState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>nodeTypeName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
             <decl_stmt><decl><type><name>List</name></type> <name>nodeStates</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rules</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>nodeStates</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>rules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodeIncludes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>nodeStates</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>nodeIncludes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resolve</name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
             <if_stmt><if>if <condition>(<expr><call><name><name>nodeStates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                 <return>return <expr><operator>(</operator><name><name>NodeState</name><index>[]</index></name><operator>)</operator> <call><name><name>nodeStates</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeState</name><index>[<expr><call><name><name>nodeStates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">147</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">165</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <name>class</name> <name>AggregateRuleImpl</name> implements <name>AggregateRule</name> <block>{
         <return>return <expr><literal type="null">null</literal></expr>;</return>
     }</block></expr></expr_stmt>
 
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PropertyState</name><index>[]</index></name></type> <name>getAggregatedPropertyStates</name><parameter_list>(<parameter><decl><type><name>NodeState</name></type> <name>nodeState</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>ItemStateException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>nodeState</name><operator>.</operator><name>getNodeTypeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>nodeTypeName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>List</name></type> <name>propStates</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>propertyIncludes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>propStates</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(
                        <argument><expr><name><name>propertyIncludes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resolvePropertyStates</name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><call><name><name>propStates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>(</operator><name><name>PropertyState</name><index>[]</index></name><operator>)</operator> <call><name><name>propStates</name><operator>.</operator><name>toArray</name></name><argument_list>(
                        <argument><expr><operator>new</operator> <name><name>PropertyState</name><index>[<expr><call><name><name>propStates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

     <comment type="line">//---------------------------&lt; internal &gt;-----------------------------------</comment>
 
     <comment type="block" format="javadoc">/**
@@ -166,10 +203,10 @@ class AggregateRuleImpl implements AggregateRule {
     }
 
     /**
     * Creates rules defined in the &lt;code&gt;config&lt;/code&gt;.
     * Creates node includes defined in the &lt;code&gt;config&lt;/code&gt;.
      *
      * @param config the indexing aggregate configuration.
     * @return the rules defined in the &lt;code&gt;config&lt;/code&gt;.
     * @return the node includes defined in the &lt;code&gt;config&lt;/code&gt;.
      * @throws MalformedPathException if a path in the configuration is
      *                                malformed.
      * @throws IllegalNameException   if the node type name contains illegal
@@ -177,9 +214,9 @@ class AggregateRuleImpl implements AggregateRule {
      * @throws NamespaceException if the node type contains an unknown
      *                                prefix.
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Rule</name><index>[]</index></name></type> <name>getRules</name><argument_list>(<argument><expr><name>Node</name> <name>config</name></expr></argument>)</argument_list>
    private <name><name>NodeInclude</name><index>[]</index></name> <name>getNodeIncludes</name><argument_list>(<argument><expr><name>Node</name> <name>config</name></expr></argument>)</argument_list>
             <throws>throws <argument><expr><name>MalformedPathException</name></expr></argument>, <argument><expr><name>IllegalNameException</name></expr></argument>, <argument><expr><name>NamespaceException</name> <block>{
        <expr><name>List</name> <name>rules</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>includes</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>NodeList</name></type> <name>childNodes</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getChildNodes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>childNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">198</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">235</literal></expr><operator>,</operator><expr><literal type="number">44</literal> @@ <name>class</name> <name>AggregateRuleImpl</name> implements <name>AggregateRule</name> <block>{
                         <expr><call><name><name>builder</name><operator>.</operator><name>addLast</name></name><argument_list>(<argument><expr><call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
                     }</block></expr></expr_stmt>
                 </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>rules</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Rule</name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ntName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>includes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NodeInclude</name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ntName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         }
        return <expr_stmt><expr><operator>(</operator><name><name>Rule</name><index>[]</index></name><operator>)</operator> <call><name><name>rules</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Rule</name><index>[<expr><call><name><name>rules</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name><name>NodeInclude</name><index>[]</index></name><operator>)</operator> <call><name><name>includes</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeInclude</name><index>[<expr><call><name><name>includes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }

    <comment type="block" format="javadoc">/**
     * Creates property includes defined in the &lt;code&gt;config&lt;/code&gt;.
     *
     * @param config the indexing aggregate configuration.
     * @return the property includes defined in the &lt;code&gt;config&lt;/code&gt;.
     * @throws MalformedPathException if a path in the configuration is
     *                                malformed.
     * @throws IllegalNameException   if the node type name contains illegal
     *                                characters.
     * @throws NamespaceException if the node type contains an unknown
     *                                prefix.
     */</comment>
    private <function><type><name><name>PropertyInclude</name><index>[]</index></name></type> <name>getPropertyIncludes</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>config</name></decl></parameter>)</parameter_list> <throws>throws
            <argument><expr><name>MalformedPathException</name></expr></argument>, <argument><expr><name>IllegalNameException</name></expr></argument>, <argument><expr><name>NamespaceException</name></expr></argument>,
            <argument><expr><name>PathNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>List</name></type> <name>includes</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NodeList</name></type> <name>childNodes</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getChildNodes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childNodes</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>childNodes</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"include-property"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>Text</name><operator>.</operator><name>explode</name></name><argument_list>(<argument><expr><call><name>getTextContent</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PathBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>PathBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>elements</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>IllegalNameException</name><argument_list>(<argument><expr><literal type="string">"* not supported in include-property"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addLast</name></name><argument_list>(<argument><expr><call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>includes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyInclude</name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>(</operator><name><name>PropertyInclude</name><index>[]</index></name><operator>)</operator> <call><name><name>includes</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PropertyInclude</name><index>[<expr><call><name><name>includes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="line">//---------------------------&lt; internal &gt;-----------------------------------</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">222</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">293</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>class</name> <name>AggregateRuleImpl</name> implements <name>AggregateRule</name> <block>{
         <return>return <expr><call><name><name>content</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
    <class><specifier>private</specifier> <specifier>final</specifier> class <name>Rule</name> <block>{
    <class><specifier>private</specifier> <specifier>abstract</specifier> class <name>AbstractInclude</name> <block>{
 
         <comment type="block" format="javadoc">/**
          * Optional node type name.
          */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Name</name></type> <name>nodeTypeName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Name</name></type> <name>nodeTypeName</name></decl>;</decl_stmt>
 
         <comment type="block" format="javadoc">/**
          * A relative path pattern.
          */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Path</name></type> <name>pattern</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Path</name></type> <name>pattern</name></decl>;</decl_stmt>
 
         <comment type="block" format="javadoc">/**
          * Creates a new rule with a relative path pattern and an optional node
@@ -242,7 +313,7 @@ class AggregateRuleImpl implements AggregateRule {
          *                     types are allowed.
          * @param pattern      a relative path pattern.
          */</comment>
        <constructor><specifier>private</specifier> <name>Rule</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>nodeTypeName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>AbstractInclude</name><argument_list>(<argument><expr><name>Path</name> <name>pattern</name></expr></argument>, <argument><expr><name>Name</name> <name>nodeTypeName</name></expr></argument>)</argument_list></call> <block>{
             <expr><name><name>this</name><operator>.</operator><name>nodeTypeName</name></name> <operator>=</operator> <name>nodeTypeName</name></expr>;
             <expr><name><name>this</name><operator>.</operator><name>pattern</name></name> <operator>=</operator> <name>pattern</name></expr>;
         }</block>
@@ <operator>-</operator><literal type="number">255</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">326</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>AggregateRuleImpl</name> implements <name>AggregateRule</name> <block>{
          <expr><operator>*</operator> @</expr><return>return <expr><name>the</name> <name>root</name> <name>node</name> <name>state</name> <name>of</name> <name>the</name> <name>indexing</name> <name>aggregate</name> <name>or</name>
          <operator>*</operator>         <operator>&lt;</operator><name>code</name><operator>&gt;</operator><literal type="null">null</literal><operator>&lt;</operator><operator>/</operator><name>code</name><operator>&gt;</operator></expr></return> <if_stmt><if>if &lt;code&gt;nodeState&lt;/code&gt; does not belong
          *         to an indexing aggregate defined by this rule.
         * @<throws>throws <argument><expr><name>ItemStateException</name></expr></argument></throws> if an error occurs while accessing node
         *                            states.
         * @<throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> if another error occurs.
          */
         NodeState matches<condition>(<expr><name>NodeState</name> <name>nodeState</name></expr>)</condition><block type="pseudo"><block_content>
                 <throws>throws <argument><expr><name>ItemStateException</name></expr></argument>, <argument><expr><name>RepositoryException</name> <block>{</block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">290</literal></expr></argument>,<argument><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">364</literal></expr></argument>,<argument><expr><literal type="number">6</literal> @@ <name>class</name> <name>AggregateRuleImpl</name> implements <name>AggregateRule</name></expr></argument></throws> <block>{<block_content>
             <return>return <expr><literal type="null">null</literal></expr>;</return>
         </block_content>}</block></block_content></block></if></if_stmt>
 
        <comment type="block" format="javadoc">/**
         * Resolves the &lt;code&gt;nodeState&lt;/code&gt; using this rule.
         *
         * @param nodeState the root node of the enclosing indexing aggregate.
         * @return the descendant node states as defined by this rule.
         * @throws ItemStateException if an error occurs while resolving the
         *                            node states.
         */</comment>
        <name><name>NodeState</name><index>[]</index></name> <call><name>resolve</name><argument_list>(<argument><expr><name>NodeState</name> <name>nodeState</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>ItemStateException</name> <block>{
            <expr><name>List</name> <name>nodeStates</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>resolve</name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>, <argument><expr><name>nodeStates</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>(</operator><name><name>NodeState</name><index>[]</index></name><operator>)</operator> <call><name><name>nodeStates</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeState</name><index>[<expr><call><name><name>nodeStates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></constructor>

         <comment type="line">//-----------------------------&lt; internal &gt;-----------------------------</comment>
 
         <comment type="block" format="javadoc">/**
@@ -316,7 +376,7 @@ class AggregateRuleImpl implements AggregateRule {
          * @throws ItemStateException if an error occurs while accessing node
          *                            states.
          */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>void</name></type> <name>resolve</name><argument_list>(<argument><expr><name>NodeState</name> <name>nodeState</name></expr></argument>, <argument><expr><name>List</name> <name>collector</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>)</argument_list>
        protected <name>void</name> <name>resolve</name><argument_list>(<argument><expr><name>NodeState</name> <name>nodeState</name></expr></argument>, <argument><expr><name>List</name> <name>collector</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>)</argument_list>
                 <throws>throws <argument><expr><name>ItemStateException</name> <block>{
             <expr><name>Name</name> <name>currentName</name> <operator>=</operator> <call><name><name>pattern</name><operator>.</operator><name>getElements</name></name><argument_list>()</argument_list></call><index>[<expr><name>offset</name></expr>]</index><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>List</name></type> <name>cne</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">347</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">407</literal></expr><operator>,</operator><expr><literal type="number">68</literal> @@ <name>class</name> <name>AggregateRuleImpl</name> implements <name>AggregateRule</name> <block>{
             }</block></expr></expr_stmt>
         }</block></class>
     }</block></class>

    <class><specifier>private</specifier> <specifier>final</specifier> class <name>NodeInclude</name> <super_list><extends>extends <super><name>AbstractInclude</name></super></extends></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new node include with a relative path pattern and an
         * optional node type name.
         *
         * @param nodeTypeName node type name or &lt;code&gt;null&lt;/code&gt; if all node
         *                     types are allowed.
         * @param pattern      a relative path pattern.
         */</comment>
        <constructor><name>NodeInclude</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>nodeTypeName</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>nodeTypeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Resolves the &lt;code&gt;nodeState&lt;/code&gt; using this rule.
         *
         * @param nodeState the root node of the enclosing indexing aggregate.
         * @return the descendant node states as defined by this rule.
         * @throws ItemStateException if an error occurs while resolving the
         *                            node states.
         */</comment>
        <function><type><name><name>NodeState</name><index>[]</index></name></type> <name>resolve</name><parameter_list>(<parameter><decl><type><name>NodeState</name></type> <name>nodeState</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ItemStateException</name></expr></argument></throws> <block>{<block_content>
            <decl_stmt><decl><type><name>List</name></type> <name>nodeStates</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>resolve</name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>, <argument><expr><name>nodeStates</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>(</operator><name><name>NodeState</name><index>[]</index></name><operator>)</operator> <call><name><name>nodeStates</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>NodeState</name><index>[<expr><call><name><name>nodeStates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>final</specifier> class <name>PropertyInclude</name> <super_list><extends>extends <super><name>AbstractInclude</name></super></extends></super_list> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Name</name></type> <name>propertyName</name></decl>;</decl_stmt>

        <constructor><name>PropertyInclude</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>pattern</name></decl></parameter>)</parameter_list>
                <throws>throws <argument><expr><name>PathNotFoundException</name></expr></argument></throws> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>pattern</name><operator>.</operator><name>getAncestor</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>propertyName</name></name> <operator>=</operator> <call><name><name>pattern</name><operator>.</operator><name>getNameElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Resolves the &lt;code&gt;nodeState&lt;/code&gt; using this rule.
         *
         * @param nodeState the root node of the enclosing indexing aggregate.
         * @return the descendant property states as defined by this rule.
         * @throws ItemStateException if an error occurs while resolving the
         *                            property states.
         */</comment>
        <function><type><name><name>PropertyState</name><index>[]</index></name></type> <name>resolvePropertyStates</name><parameter_list>(<parameter><decl><type><name>NodeState</name></type> <name>nodeState</name></decl></parameter>)</parameter_list>
                <throws>throws <argument><expr><name>ItemStateException</name></expr></argument></throws> <block>{<block_content>
            <decl_stmt><decl><type><name>List</name></type> <name>nodeStates</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>resolve</name><argument_list>(<argument><expr><name>nodeState</name></expr></argument>, <argument><expr><name>nodeStates</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>List</name></type> <name>propStates</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>nodeStates</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>NodeState</name></type> <name>state</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>hasPropertyName</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>PropertyId</name></type> <name>propId</name> <init>= <expr><operator>new</operator> <call><name>PropertyId</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>propStates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ism</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><name>propId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><operator>(</operator><name><name>PropertyState</name><index>[]</index></name><operator>)</operator> <call><name><name>propStates</name><operator>.</operator><name>toArray</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <name><name>PropertyState</name><index>[<expr><call><name><name>propStates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>ComparableBoolean</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>ComparableBoolean</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..7e84aa46e</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>ComparableBoolean</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">43</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Represents a boolean that implement {@link Comparable}. This class can
 * be removed when we move to Java 5.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ComparableBoolean</name> <super_list><implements>implements <super><name>Comparable</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ComparableBoolean</name></type> <name>TRUE</name> <init>= <expr><operator>new</operator> <call><name>ComparableBoolean</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ComparableBoolean</name></type> <name>FALSE</name> <init>= <expr><operator>new</operator> <call><name>ComparableBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>value</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ComparableBoolean</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ComparableBoolean</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>ComparableBoolean</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><ternary><condition><expr><name><name>b</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name>value</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ComparableBoolean</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>FileBasedNamespaceMappings</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>FileBasedNamespaceMappings</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c913e684e</name><operator>..</operator><name>fe969d01f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>FileBasedNamespaceMappings</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>FileBasedNamespaceMappings</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>IllegalNameException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NameResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>namespace</name><operator>.</operator><name>NamespaceResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
 * The class &lt;code&gt;NamespaceMappings&lt;/code&gt; implements a {@link
 * org.apache.jackrabbit.core.NamespaceResolver} that holds a namespace
 * The class &lt;code&gt;NamespaceMappings&lt;/code&gt; implements a
 * {@link NamespaceResolver} that holds a namespace
  * mapping that is used internally in the search index. Storing paths with the
  * full uri of a namespace would require too much space in the search index.
  * &lt;p/&gt;
@@ -46,8 +43,7 @@ import java.util.Properties;
  * prefix is created on the fly and associated with the namespace. Known
  * namespace mappings are stored in a properties file.
  */</comment>
<class><specifier>public</specifier> class <name>FileBasedNamespaceMappings</name>
        <super_list><implements>implements <super><name>NamespaceResolver</name></super>, <super><name>NamespaceMappings</name></super></implements></super_list> <block>{
<class><specifier>public</specifier> class <name>FileBasedNamespaceMappings</name> <super_list><extends>extends <super><name>AbstractNamespaceMappings</name></super></extends></super_list> <block>{
 
     <comment type="block" format="javadoc">/**
      * Default logger instance for this class
@@ -59,11 +55,6 @@ public class FileBasedNamespaceMappings
      */</comment>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>storage</name></decl>;</decl_stmt>
 
    <comment type="block" format="javadoc">/**
     * The name resolver used to translate the qualified name to JCR name
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>NameResolver</name></type> <name>nameResolver</name></decl>;</decl_stmt>

     <comment type="block" format="javadoc">/**
      * Map of uris indexed by prefixes
      */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>FileBasedNamespaceMappings</name>
     <specifier>public</specifier> <call><name>FileBasedNamespaceMappings</name><argument_list>(<argument><expr><name>File</name> <name>file</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><name>storage</name> <operator>=</operator> <name>file</name></expr></block></expr></argument></throws></expr>;</expr_stmt>
         <constructor_decl><name>load</name><parameter_list>()</parameter_list>;</constructor_decl>
        <expr_stmt><expr><name>nameResolver</name> <operator>=</operator> <call><name><name>NamePathResolverImpl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }</block></class>
 
     <comment type="block" format="javadoc">/**
@@ -138,26 +128,6 @@ public class FileBasedNamespaceMappings
         return prefix;
     }
 
    //----------------------------&lt; NamespaceMappings &gt;-------------------------

    /**
     * Translates a property name from a session local namespace mapping
     * into a search index private namespace mapping.
     *
     * @param qName     the property name to translate
     * @return the translated property name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>translatePropertyName</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>qName</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IllegalNameException</name></expr></argument></throws> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>nameResolver</name><operator>.</operator><name>getJCRName</name></name><argument_list>(<argument><expr><name>qName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NamespaceException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// should never happen actually, because we create yet unknown</comment>
            <comment type="line">// uri mappings on the fly.</comment>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalNameException</name><argument_list>(<argument><expr><literal type="string">"Internal error."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

     <comment type="line">//-----------------------&lt; internal &gt;---------------------------------------</comment>
 
     <comment type="block" format="javadoc">/**
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexFormatVersion.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexFormatVersion.java
index c4791c8f7..b55625c40 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexFormatVersion.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexFormatVersion.java
@@ -78,6 +78,18 @@ public class IndexFormatVersion {
         return version;
     }
 
    /**
     * Returns &lt;code&gt;true&lt;/code&gt; if this version is at least as high as the
     * given &lt;code&gt;version&lt;/code&gt;.
     *
     * @param version the other version to compare.
     * @return &lt;code&gt;true&lt;/code&gt; if this version is at least as high as the
     *         provided; &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAtLeast</name><parameter_list>(<parameter><decl><type><name>IndexFormatVersion</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <call><name><name>version</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * @return a string representation of this index format version.
      */</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationEntityResolver</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationEntityResolver</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">83976b7ec</literal><operator>..</operator><literal type="number">295eed317</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationEntityResolver</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationEntityResolver</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexingConfigurationEntityResolver</name> implements <name>EntityResolver</name> <block>{
         <expr><call><name><name>systemIds</name><operator>.</operator><name>put</name></name><argument_list>(
                 <argument><expr><literal type="string">"http://jackrabbit.apache.org/dtd/indexing-configuration-1.1.dtd"</literal></expr></argument>,
                 <argument><expr><literal type="string">"indexing-configuration-1.1.dtd"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>systemIds</name><operator>.</operator><name>put</name></name><argument_list>(
                <argument><expr><literal type="string">"http://jackrabbit.apache.org/dtd/indexing-configuration-1.2.dtd"</literal></expr></argument>,
                <argument><expr><literal type="string">"indexing-configuration-1.2.dtd"</literal></expr></argument>)</argument_list></call></expr>;
         <expr><name>SYSTEM_IDS</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>systemIds</name></expr></argument>)</argument_list></call></expr>;
     }</block>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">16862aab5</literal><operator>..</operator><name>de268b469</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingConfigurationImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">162</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">162</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexingConfigurationImpl</name> implements <name>IndexingConfiguration</name> <block>{
                                     <if_stmt><if>if <condition>(<expr><call><name><name>propertyNode</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"property"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                         <comment type="line">// get property name</comment>
                                         <decl_stmt><decl><type><name>Name</name></type> <name>propName</name> <init>= <expr><call><name><name>resolver</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name>getTextContent</name><argument_list>(<argument><expr><name>propertyNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <decl_stmt><decl><type><name>String</name></type> <name>fieldName</name> <init>= <expr><call><name><name>nsMappings</name><operator>.</operator><name>translatePropertyName</name></name><argument_list>(<argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <decl_stmt><decl><type><name>String</name></type> <name>fieldName</name> <init>= <expr><call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>propName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                         <comment type="line">// set analyzer for the fulltext property fieldname</comment>
                                         <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>fieldName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                         <expr_stmt><expr><name>fieldName</name> <operator>=</operator> <call><name><name>fieldName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>JQOM2LuceneQueryBuilder</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>JQOM2LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3e872c31a</literal><operator>..</operator><name>ad6c65d72</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>JQOM2LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>JQOM2LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">690</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">690</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>JQOM2LuceneQueryBuilder</name> implements <name>QOMTreeVisitor</name></expr><operator>,</operator> <expr><name>QueryObjectModel</name>
                 <name><name>NodeType</name><index>[]</index></name> <name>superTypes</name> <operator>=</operator> <call><name><name>nt</name><operator>.</operator><name>getSupertypes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 <if_stmt><if>if <condition>(<expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>superTypes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                     <decl_stmt><decl><type><name>Name</name></type> <name>n</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name><name>nt</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>ntName</name> <init>= <expr><call><name><name>nsMappings</name><operator>.</operator><name>translatePropertyName</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>ntName</name> <init>= <expr><call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                     <decl_stmt><decl><type><name>Term</name></type> <name>t</name></decl>;</decl_stmt>
                     <if_stmt><if>if <condition>(<expr><call><name><name>nt</name><operator>.</operator><name>isMixin</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                         <comment type="line">// search on jcr:mixinTypes</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">740</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">740</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>JQOM2LuceneQueryBuilder</name> implements <name>QOMTreeVisitor</name></expr><operator>,</operator> <expr><name>QueryObjectModel</name></expr></expr_stmt>
                 <return>return <expr><call><name><name>LongField</name><operator>.</operator><name>longToString</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
             <case>case <expr><name><name>PropertyType</name><operator>.</operator><name>NAME</name></name></expr>:</case>
                 <decl_stmt><decl><type><name>Name</name></type> <name>n</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>nsMappings</name><operator>.</operator><name>translatePropertyName</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
                <return>return <expr><call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
             <case>case <expr><name><name>PropertyType</name><operator>.</operator><name>PATH</name></name></expr>:</case>
                 <decl_stmt><decl><type><name>Path</name></type> <name>p</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getQPath</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <return>return <expr><call><name><name>npResolver</name><operator>.</operator><name>getJCRPath</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">248e7a4bf</literal><operator>..</operator><literal type="number">1b8cad6b4</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">330</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">330</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>LuceneQueryBuilder</name> implements <name>QueryNodeVisitor</name> <block>{
                 <expr><name><name>NodeType</name><index>[]</index></name> <name>superTypes</name> <operator>=</operator> <call><name><name>nt</name><operator>.</operator><name>getSupertypes</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
                 <if_stmt><if>if <condition>(<expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>superTypes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                     <decl_stmt><decl><type><name>Name</name></type> <name>n</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><call><name><name>nt</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>ntName</name> <init>= <expr><call><name><name>nsMappings</name><operator>.</operator><name>translatePropertyName</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>ntName</name> <init>= <expr><call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                     <decl_stmt><decl><type><name>Term</name></type> <name>t</name></decl>;</decl_stmt>
                     <if_stmt><if>if <condition>(<expr><call><name><name>nt</name><operator>.</operator><name>isMixin</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                         <comment type="line">// search on jcr:mixinTypes</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">954</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">954</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>LuceneQueryBuilder</name> implements <name>QueryNodeVisitor</name> <block>{
                     <comment type="line">// try to translate name</comment>
                     <try>try <block>{<block_content>
                         <decl_stmt><decl><type><name>Name</name></type> <name>n</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><name>literal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>nsMappings</name><operator>.</operator><name>translatePropertyName</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Coerced "</literal> <operator>+</operator> <name>literal</name> <operator>+</operator> <literal type="string">" into NAME."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt/></block_content></block></try></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>NameException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                         <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Unable to coerce '"</literal> <operator>+</operator> <name>literal</name> <operator>+</operator> <literal type="string">"' into a NAME: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1028</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1028</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>LuceneQueryBuilder</name> implements <name>QueryNodeVisitor</name> <block>{
                 <comment type="line">// might be a name</comment>
                 <try>try <block>{<block_content>
                     <decl_stmt><decl><type><name>Name</name></type> <name>n</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getQName</name></name><argument_list>(<argument><expr><name>literal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>nsMappings</name><operator>.</operator><name>translatePropertyName</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Coerced "</literal> <operator>+</operator> <name>literal</name> <operator>+</operator> <literal type="string">" into NAME."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt/></block_content></block></try>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                     <comment type="line">// not a name</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NSRegistryBasedNamespaceMappings</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NSRegistryBasedNamespaceMappings</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f597e290c</name><operator>..</operator><literal type="number">3f50bdcff</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NSRegistryBasedNamespaceMappings</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NSRegistryBasedNamespaceMappings</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>IllegalNameException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>NameResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>NamespaceRegistryImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>namespace</name><operator>.</operator><name>NamespaceResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>
  <expr_stmt><expr><operator>*</operator> <operator>&lt;</operator><name>code</name><operator>&gt;</operator><name><name>NSRegistryBasedNamespaceMappings</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name> implements <name>a</name> <name>namespace</name> <name>mapping</name>
  <operator>*</operator> <name>based</name> <name>on</name> <name>the</name> <name>stable</name> <name>index</name> <name>prefix</name> <name>provided</name> <name>by</name> <name>the</name> <name>namespace</name> <name><name>registry</name><operator>.</operator></name>
  *<operator>/</operator>
<specifier>public</specifier> <name>class</name> <name>NSRegistryBasedNamespaceMappings</name>
        implements <name>NamespaceResolver</name></expr><operator>,</operator> <expr><name>NamespaceMappings</name> <block>{
<expr><specifier>public</specifier> <name>class</name> <name>NSRegistryBasedNamespaceMappings</name> extends <name>AbstractNamespaceMappings</name> <block>{
 
     <comment type="block" format="javadoc">/**
      * The namespace registry.
      */</comment>
     <expr><specifier>private</specifier> <name>final</name> <name>NamespaceRegistryImpl</name> <name>nsReg</name></expr>;
 
        <comment type="block" format="javadoc">/**
     * The name resolver used to translate the qualified name to JCR name
     */</comment>
    <expr><specifier>private</specifier> <name>final</name> <name>NameResolver</name> <name>nameResolver</name></expr>;

     <comment type="block" format="javadoc">/**
      * Creates a new &lt;code&gt;NSRegistryBasedNamespaceMappings&lt;/code&gt;.
      *
@@ -48,7 +38,6 @@ public class NSRegistryBasedNamespaceMappings
      */</comment>
     <expr><call><name>NSRegistryBasedNamespaceMappings</name><argument_list>(<argument><expr><name>NamespaceRegistryImpl</name> <name>nsReg</name></expr></argument>)</argument_list></call> <block>{
         <expr><name><name>this</name><operator>.</operator><name>nsReg</name></name> <operator>=</operator> <name>nsReg</name></expr>;
        <expr><name><name>this</name><operator>.</operator><name>nameResolver</name></name> <operator>=</operator> <call><name><name>NamePathResolverImpl</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
     }</block>
 
     <comment type="line">//-------------------------------&lt; NamespaceResolver &gt;----------------------</comment>
@@ <operator>-</operator><literal type="number">77</literal></expr>,<expr><literal type="number">20</literal> <operator>+</operator><literal type="number">66</literal></expr>,<expr><literal type="number">4</literal> @@ <specifier>public</specifier> <name>class</name> <name>NSRegistryBasedNamespaceMappings</name>
                     <literal type="string">"Unknown namespace URI: "</literal> <operator>+</operator> <name>uri</name></expr>, <expr><name>e</name></expr>)</block></expr>;
         }</block></expr></expr_stmt>
     </block_content>}</block></catch>

    <comment type="line">//-------------------------------&lt; NamespaceMappings &gt;----------------------</comment>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>translatePropertyName</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>qName</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IllegalNameException</name></expr></argument></throws> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>nameResolver</name><operator>.</operator><name>getJCRName</name></name><argument_list>(<argument><expr><name>qName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NamespaceException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// should never happen actually, there is always a stable index</comment>
            <comment type="line">// prefix for a known namespace uri</comment>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalNameException</name><argument_list>(<argument><expr><literal type="string">"Internal error."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
 </block_content>}</block></catch>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NameQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NameQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6617dc708</literal><operator>..</operator><literal type="number">9e729a72b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NameQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NameQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">87</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NameQuery</name> extends <name>Query</name> <block>{
             <comment type="line">// use LABEL field</comment>
             <try>try <block>{<block_content>
                 <return>return <expr><operator>new</operator> <call><name>TermQuery</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name><name>FieldNames</name><operator>.</operator><name>LABEL</name></name></expr></argument>,
                        <argument><expr><call><name><name>nsMappings</name><operator>.</operator><name>translatePropertyName</name></name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                        <expr_stmt><expr><call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></try>)</block></expr>;</expr_stmt>
             }</block></class> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalNameException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                 <throw>throw <expr><call><name><name>Util</name><operator>.</operator><name>createIOException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
             </block_content>}</block></catch>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NameRangeQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NameRangeQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cf37fc2b4</name><operator>..</operator><literal type="number">3b68e4695</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NameRangeQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NameRangeQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">164</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">164</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NameRangeQuery</name> extends <name>Query</name> <block>{
             <if_stmt><if>if <condition>(<expr><name>lowerName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>nsMappings</name><operator>.</operator><name>getPrefix</name></name><argument_list>(<argument><expr><call><name><name>upperName</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":"</literal></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>nsMappings</name><operator>.</operator><name>translatePropertyName</name></name><argument_list>(<argument><expr><name>lowerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>lowerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
             <return>return <expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name><name>FieldNames</name><operator>.</operator><name>LABEL</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
         } catch <expr_stmt><expr><operator>(</operator><name>RepositoryException</name> <name>e</name><operator>)</operator> <block>{
@@ <expr><operator>-</operator><literal type="number">182</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">182</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>NameRangeQuery</name> extends <name>Query</name> <block>{
             <if_stmt><if>if <condition>(<expr><name>upperName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>nsMappings</name><operator>.</operator><name>getPrefix</name></name><argument_list>(<argument><expr><call><name><name>lowerName</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":\uFFFF"</literal></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></if></if_stmt>}</block></expr> <if_stmt><else>else <block>{<block_content>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>nsMappings</name><operator>.</operator><name>translatePropertyName</name></name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>nsMappings</name><operator>.</operator><name>translateName</name></name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></else></if_stmt>}</block></expr></expr_stmt>
             <return>return <expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name><name>FieldNames</name><operator>.</operator><name>LABEL</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
         } catch <expr_stmt><expr><operator>(</operator><name>RepositoryException</name> <name>e</name><operator>)</operator> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NamespaceMappings</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NamespaceMappings</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f4793bb72</name><operator>..</operator><literal type="number">93cc6a42a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NamespaceMappings</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>NamespaceMappings</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr>,<expr><literal type="number">7</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package></block></expr></expr_stmt>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>IllegalNameException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>namespace</name><operator>.</operator><name>NamespaceResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Path</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * The class &lt;code&gt;NamespaceMappings&lt;/code&gt; holds a namespace mapping that is
@@ -28,12 +29,21 @@ import org.apache.jackrabbit.spi.Name;
 public interface NamespaceMappings extends NamespaceResolver {
 
     /**
     * Translates a property name from a session local namespace mapping into a
     * search index private namespace mapping.
     * Translates a name from a session local namespace mapping into a search
     * index private namespace mapping.
      *
     * @param qName     the property name to translate
     * @return the translated JCR property name
     * @param name the name to translate
     * @return the translated JCR name
     * @throws IllegalNameException if the name cannot be translated.
      */</comment>
    <function_decl><type><name>String</name></type> <name>translatePropertyName</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>qName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalNameException</name></expr></argument></throws>;</function_decl>
    <function_decl><type><name>String</name></type> <name>translateName</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalNameException</name></expr></argument></throws>;</function_decl>
 
    <comment type="block" format="javadoc">/**
     * Translates a path into a search index private namespace mapping.
     *
     * @param path the path to translate
     * @return the translated path.
     * @throws IllegalNameException if the name cannot be translated.
     */</comment>
    <function_decl><type><name>String</name></type> <name>translatePath</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalNameException</name></expr></argument></throws>;</function_decl>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SearchIndex</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SearchIndex</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cf8700616</name><operator>..</operator><literal type="number">99a9d3f2f</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SearchIndex</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SearchIndex</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>ItemManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>SessionImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>NodeId</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>NodeIdIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>HierarchyManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystemResource</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystemException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name><operator>.</operator><name>directory</name><operator>.</operator><name>FSDirectoryManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>NodeState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>NodeStateIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>PropertyState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>state</name><operator>.</operator><name>ItemStateException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>extractor</name><operator>.</operator><name>DefaultTextExtractor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>extractor</name><operator>.</operator><name>TextExtractor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Name</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>uuid</name><operator>.</operator><name>UUID</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Token</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>MultiReader</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">162</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">166</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>SearchIndex</name> extends <name>AbstractQueryHandler</name> <block>{
      <expr><operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>int</name> <name>DEFAULT_TERM_INFOS_INDEX_DIVISOR</name> <operator>=</operator> <literal type="number">1</literal></expr>;
 
    <comment type="block" format="javadoc">/**
     * The path factory.
     */</comment>
    <expr><specifier>protected</specifier> <specifier>static</specifier> <name>final</name> <name>PathFactory</name> <name>PATH_FACTORY</name> <operator>=</operator> <call><name><name>PathFactoryImpl</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;

     <comment type="block" format="javadoc">/**
      * The path of the root node.
      */</comment>
@@ <expr><operator>-</operator><literal type="number">173</literal></expr>,<expr><literal type="number">10</literal> <operator>+</operator><literal type="number">182</literal></expr>,<expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>SearchIndex</name> extends <name>AbstractQueryHandler</name> <block>{
     <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>Path</name> <name>JCR_SYSTEM_PATH</name></expr>;
 
     <expr><specifier>static</specifier> <block>{
        <expr><name>PathFactory</name> <name>factory</name> <operator>=</operator> <call><name><name>PathFactoryImpl</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name>ROOT_PATH</name> <operator>=</operator> <call><name><name>factory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>ROOT</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><name>ROOT_PATH</name> <operator>=</operator> <call><name><name>PATH_FACTORY</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>NameConstants</name><operator>.</operator><name>ROOT</name></name></expr></argument>)</argument_list></call></expr>;
         <try>try <block>{<block_content>
            <expr_stmt><expr><name>JCR_SYSTEM_PATH</name> <operator>=</operator> <call><name><name>factory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ROOT_PATH</name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_SYSTEM</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>JCR_SYSTEM_PATH</name> <operator>=</operator> <call><name><name>PATH_FACTORY</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ROOT_PATH</name></expr></argument>, <argument><expr><name><name>NameConstants</name><operator>.</operator><name>JCR_SYSTEM</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></try>}</block></expr> <catch>catch <parameter_list>(<parameter><decl><type><name>RepositoryException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <comment type="line">// should never happen, path is always valid</comment>
             <throw>throw <expr><operator>new</operator> <call><name>InternalError</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1168</literal></expr><operator>,</operator><expr><literal type="number">29</literal> <operator>+</operator><literal type="number">1176</literal></expr><operator>,</operator><expr><literal type="number">69</literal> @@ <specifier>public</specifier> <name>class</name> <name>SearchIndex</name> extends <name>AbstractQueryHandler</name> <block>{
                 <return>return;</return></block></expr></expr_stmt></block_content></block></catch>
             }</block></expr>
             <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>ItemStateManager</name></type> <name>ism</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemStateManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>aggregateRules</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>ruleMatched</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                    <comment type="line">// node includes</comment>
                     <decl_stmt><decl><type><name><name>NodeState</name><index>[]</index></name></type> <name>aggregates</name> <init>= <expr><name><name>aggregateRules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getAggregatedNodeStates</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>aggregates</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    <if_stmt><if>if <condition>(<expr><name>aggregates</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>ruleMatched</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>aggregates</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>Document</name></type> <name>aDoc</name> <init>= <expr><call><name>createDocument</name><argument_list>(<argument><expr><name><name>aggregates</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
                                    <argument><expr><call><name>getNamespaceMappings</name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>index</name><operator>.</operator><name>getIndexFormatVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <comment type="line">// transfer fields to doc if there are any</comment>
                            <decl_stmt><decl><type><name><name>Fieldable</name><index>[]</index></name></type> <name>fulltextFields</name> <init>= <expr><call><name><name>aDoc</name><operator>.</operator><name>getFieldables</name></name><argument_list>(<argument><expr><name><name>FieldNames</name><operator>.</operator><name>FULLTEXT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>fulltextFields</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>fulltextFields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>fulltextFields</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt/></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></try>}</block>
                                <call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Field</name><argument_list>(<argument><expr><name><name>FieldNames</name><operator>.</operator><name>AGGREGATED_NODE_UUID</name></name></expr></argument>,
                                        <argument><expr><name><name>aggregates</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getNodeId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUUID</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                                        <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>,
                                        <argument><expr><name><name>Field</name><operator>.</operator><name>Index</name><operator>.</operator><name>NO_NORMS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }
                        }
                     }
                    for <expr_stmt><expr><operator>(</operator><name>int</name> <name>j</name> <operator>=</operator> <literal type="number">0</literal>; <name>j</name> <operator>&lt;</operator> <name><name>aggregates</name><operator>.</operator><name>length</name></name>; <name>j</name><operator>++</operator><operator>)</operator> <block>{
                        <expr><name>Document</name> <name>aDoc</name> <operator>=</operator> <call><name>createDocument</name><argument_list>(<argument><expr><name><name>aggregates</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
                                <argument><expr><call><name>getNamespaceMappings</name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>index</name><operator>.</operator><name>getIndexFormatVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
                        <comment type="line">// transfer fields to doc if there are any</comment>
                        <expr><name><name>Fieldable</name><index>[]</index></name> <name>fulltextFields</name> <operator>=</operator> <call><name><name>aDoc</name><operator>.</operator><name>getFieldables</name></name><argument_list>(<argument><expr><name><name>FieldNames</name><operator>.</operator><name>FULLTEXT</name></name></expr></argument>)</argument_list></call></expr>;
                        <if_stmt><if>if <condition>(<expr><name>fulltextFields</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>fulltextFields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>fulltextFields</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// property includes</comment>
                    <decl_stmt><decl><type><name><name>PropertyState</name><index>[]</index></name></type> <name>propStates</name> <init>= <expr><name><name>aggregateRules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getAggregatedPropertyStates</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>propStates</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>ruleMatched</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>propStates</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>PropertyState</name></type> <name>propState</name> <init>= <expr><name><name>propStates</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>String</name></type> <name>namePrefix</name> <init>= <expr><call><name><name>FieldNames</name><operator>.</operator><name>createNamedValue</name></name><argument_list>(
                                    <argument><expr><call><name>getNamespaceMappings</name><argument_list>()</argument_list></call><operator>.</operator><call><name>translateName</name><argument_list>(<argument><expr><call><name><name>propState</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>NodeState</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>ism</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><call><name><name>propState</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>Document</name></type> <name>aDoc</name> <init>= <expr><call><name>createDocument</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name>getNamespaceMappings</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getIndex</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIndexFormatVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <comment type="line">// find the right fields to transfer</comment>
                            <decl_stmt><decl><type><name><name>Fieldable</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>aDoc</name><operator>.</operator><name>getFieldables</name></name><argument_list>(<argument><expr><name><name>FieldNames</name><operator>.</operator><name>PROPERTIES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                <decl_stmt><decl><type><name>Fieldable</name></type> <name>field</name> <init>= <expr><name><name>fields</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                                <comment type="line">// assume properties fields use SingleTokenStream</comment>
                                <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><call><name><name>field</name><operator>.</operator><name>tokenStreamValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>termBuffer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>termLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>namePrefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <comment type="line">// extract value</comment>
                                    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>namePrefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <comment type="line">// create new named value</comment>
                                    <decl_stmt><decl><type><name>Path</name></type> <name>p</name> <init>= <expr><call><name>getRelativePath</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>propState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name>getNamespaceMappings</name><argument_list>()</argument_list></call><operator>.</operator><call><name>translatePath</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>FieldNames</name><operator>.</operator><name>createNamedValue</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setTermText</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Field</name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>SingletonTokenStream</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Field</name><argument_list>(<argument><expr><name><name>FieldNames</name><operator>.</operator><name>AGGREGATED_NODE_UUID</name></name></expr></argument>,
                                            <argument><expr><call><name><name>parent</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUUID</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>,
                                            <argument><expr><name><name>Field</name><operator>.</operator><name>Index</name><operator>.</operator><name>NO_NORMS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt/></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
                             }
                            doc<expr_stmt><expr><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Field</name><argument_list>(<argument><expr><name><name>FieldNames</name><operator>.</operator><name>AGGREGATED_NODE_UUID</name></name></expr></argument>,
                                    <argument><expr><name><name>aggregates</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getNodeId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUUID</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>Field</name><operator>.</operator><name>Store</name><operator>.</operator><name>NO</name></name></expr></argument>,
                                    <argument><expr><name><name>Field</name><operator>.</operator><name>Index</name><operator>.</operator><name>NO_NORMS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         }
                     }

                     <comment type="line">// only use first aggregate definition that matches</comment>
                    <break>break;</break>
                    <if_stmt><if>if <condition>(<expr><name>ruleMatched</name></expr>)</condition> <block>{<block_content>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                 }
             } <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                 <comment type="line">// do not fail if aggregate cannot be created</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1200</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1248</literal></expr><operator>,</operator><expr><literal type="number">38</literal> @@ <specifier>public</specifier> <name>class</name> <name>SearchIndex</name> extends <name>AbstractQueryHandler</name> <block>{
         }</block></expr></expr_stmt>
     </block_content>}</block></catch>
 
    <comment type="block" format="javadoc">/**
     * Returns the relative path from &lt;code&gt;nodeState&lt;/code&gt; to
     * &lt;code&gt;propState&lt;/code&gt;.
     *
     * @param nodeState a node state.
     * @param propState a property state.
     * @return the relative path.
     * @throws RepositoryException if an error occurs while resolving paths.
     * @throws ItemStateException  if an error occurs while reading item
     *                             states.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Path</name></type> <name>getRelativePath</name><parameter_list>(<parameter><decl><type><name>NodeState</name></type> <name>nodeState</name></decl></parameter>, <parameter><decl><type><name>PropertyState</name></type> <name>propState</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>RepositoryException</name></expr></argument>, <argument><expr><name>ItemStateException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>HierarchyManager</name></type> <name>hmgr</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHierarchyManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>nodePath</name> <init>= <expr><call><name><name>hmgr</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><call><name><name>nodeState</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>propPath</name> <init>= <expr><call><name><name>hmgr</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><call><name><name>propState</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> <init>= <expr><call><name><name>nodePath</name><operator>.</operator><name>computeRelativePath</name></name><argument_list>(<argument><expr><name>propPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// make sure it does not contain indexes</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>clean</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Path</name><operator>.</operator><name>Element</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elements</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getIndex</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>PATH_FACTORY</name><operator>.</operator><name>createElement</name></name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>clean</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clean</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name><name>PATH_FACTORY</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * Retrieves the root of the indexing aggregate for &lt;code&gt;state&lt;/code&gt; and
      * puts it into &lt;code&gt;map&lt;/code&gt;.
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SharedFieldCache.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SharedFieldCache.java
index 533a39499..2dcaad6df 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SharedFieldCache.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SharedFieldCache.java
@@ -18,8 +18,9 @@ package org.apache.jackrabbit.core.query.lucene;
 
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Term;
import org.apache.lucene.index.TermDocs;
 import org.apache.lucene.index.TermEnum;
import org.apache.lucene.index.TermPositions;
import org.apache.lucene.index.TermDocs;
 import org.apache.lucene.search.SortComparator;
 
 import java.io.IOException;
@@ -27,6 +28,8 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.WeakHashMap;
 
import javax.jcr.PropertyType;

 /**
  * Implements a variant of the lucene class &lt;code&gt;org.apache.lucene.search.FieldCacheImpl&lt;/code&gt;.
  * The lucene FieldCache class has some sort of support for custom comparators
@@ -38,7 +41,7 @@ class SharedFieldCache {
     /**
      * Expert: Stores term text values and document ordering data.
      */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>StringIndex</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ValueIndex</name> <block>{
 
         <comment type="block" format="javadoc">/**
          * Some heuristic factor that determines whether the array is sparse. Note that if less then
@@ -48,62 +51,62 @@ class SharedFieldCache {
         private static final int SPARSE_FACTOR = 100;
 
         /**
         * Terms indexed by document id.
         * Values indexed by document id.
          */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>terms</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparable</name><index>[]</index></name></type> <name>values</name></decl>;</decl_stmt>
 
         <comment type="block" format="javadoc">/**
         * Terms map indexed by document id.
         * Values (Comparable) map indexed by document id.
          */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Map</name></type> <name>termsMap</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Map</name></type> <name>valuesMap</name></decl>;</decl_stmt>
 
         <comment type="block" format="javadoc">/**
         * Boolean indicating whether the hashMap impl has to be used
         * Boolean indicating whether the {@link #valuesMap} impl has to be used
          */</comment>
         <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>sparse</name></decl>;</decl_stmt>
 
         <comment type="block" format="javadoc">/**
          * Creates one of these objects
          */</comment>
        <constructor><specifier>public</specifier> <name>StringIndex</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>terms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isSparse</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>setValues</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <constructor><specifier>public</specifier> <name>ValueIndex</name><parameter_list>(<parameter><decl><type><name><name>Comparable</name><index>[]</index></name></type> <name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isSparse</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>setValues</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sparse</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>terms</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>values</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                 <if_stmt><if>if <condition>(<expr><name>setValues</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>termsMap</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valuesMap</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                 </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>termsMap</name></name> <operator>=</operator> <call><name>getTermsMap</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>setValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valuesMap</name></name> <operator>=</operator> <call><name>getValuesMap</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>setValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></else></if_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
                 <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sparse</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>terms</name></name> <operator>=</operator> <name>terms</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>termsMap</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>values</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valuesMap</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
         </block_content>}</block></constructor>
 
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getTerm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><name>sparse</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><ternary><condition><expr><name>termsMap</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>termsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
                <return>return <expr><ternary><condition><expr><name>valuesMap</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>(</operator><name>Comparable</name><operator>)</operator> <call><name><name>valuesMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
             </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><name><name>terms</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
                <return>return <expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
             </block_content>}</block></else></if_stmt>
         </block_content>}</block></function>
 
        <function><type><specifier>private</specifier> <name>Map</name></type> <name>getTermsMap</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>terms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <function><type><specifier>private</specifier> <name>Map</name></type> <name>getValuesMap</name><parameter_list>(<parameter><decl><type><name><name>Comparable</name><index>[]</index></name></type> <name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>(<argument><expr><name>setValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><name><name>terms</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>setValues</name></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>terms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>terms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><name><name>values</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>setValues</name></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><name>setValues</name><operator>--</operator></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
             <return>return <expr><name>map</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
 
        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isSparse</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>terms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isSparse</name><parameter_list>(<parameter><decl><type><name><name>Comparable</name><index>[]</index></name></type> <name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <comment type="line">// some really simple test to test whether the array is sparse. Currently, when less then 1% is set, the array is already sparse </comment>
             <comment type="line">// for this typical cache to avoid memory issues</comment>
            <if_stmt><if>if <condition>(<expr><name>setValues</name> <operator>*</operator> <name>SPARSE_FACTOR</name> <operator>&lt;</operator> <name><name>terms</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>setValues</name> <operator>*</operator> <name>SPARSE_FACTOR</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                 <return>return <expr><literal type="boolean">true</literal></expr>;</return>
             </block_content>}</block></if></if_stmt>
             <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">127</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">130</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <name>class</name> <name>SharedFieldCache</name> <block>{
     }</block>
 
     <comment type="block" format="javadoc">/**
     * Creates a &lt;code&gt;StringIndex&lt;/code&gt; for a &lt;code&gt;field&lt;/code&gt; and a term
     * Creates a &lt;code&gt;ValueIndex&lt;/code&gt; for a &lt;code&gt;field&lt;/code&gt; and a term
      * &lt;code&gt;prefix&lt;/code&gt;. The term prefix acts as the property name for the
      * shared &lt;code&gt;field&lt;/code&gt;.
      * &lt;p/&gt;
      * This method is an adapted version of: &lt;code&gt;FieldCacheImpl.getStringIndex()&lt;/code&gt;
     * The returned string index will &lt;b&gt;not&lt;/b&gt; have a term lookup array!
     * See {@link SharedFieldSortComparator} for more info.
      *
      * @param reader     the &lt;code&gt;IndexReader&lt;/code&gt;.
      * @param field      name of the shared field.
      * @param prefix     the property name, will be used as term prefix.
      * @param comparator the sort comparator instance.
     * @return a StringIndex that contains the field values and order
     * @return a ValueIndex that contains the field values and order
      *         information.
      * @throws IOException if an error occurs while reading from the index.
      */</comment>
    <specifier>public</specifier> <name><name>SharedFieldCache</name><operator>.</operator><name>StringIndex</name></name> <call><name>getStringIndex</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>,
                                                 <argument><expr><name>String</name> <name>field</name></expr></argument>,
                                                 <argument><expr><name>String</name> <name>prefix</name></expr></argument>,
                                                 <argument><expr><name>SortComparator</name> <name>comparator</name></expr></argument>)</argument_list></call>
    <specifier>public</specifier> <name>ValueIndex</name> <call><name>getValueIndex</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>,
                                    <argument><expr><name>String</name> <name>field</name></expr></argument>,
                                    <argument><expr><name>String</name> <name>prefix</name></expr></argument>,
                                    <argument><expr><name>SortComparator</name> <name>comparator</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
 
         <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>instanceof</operator> <name>ReadOnlyIndexReader</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">154</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">155</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <name>class</name> <name>SharedFieldCache</name> <block>{
         }</block>
 
         <name>field</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>intern</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>SharedFieldCache</name><operator>.</operator><name>StringIndex</name></name></type> <name>ret</name> <init>= <expr><call><name>lookup</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueIndex</name></type> <name>ret</name> <init>= <expr><call><name>lookup</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>retArray</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Comparable</name><index>[]</index></name></type> <name>retArray</name> <init>= <expr><operator>new</operator> <name><name>Comparable</name><index>[<expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>int</name></type> <name>setValues</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><name><name>retArray</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>TermDocs</name></type> <name>termDocs</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>termDocs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>IndexFormatVersion</name></type> <name>version</name> <init>= <expr><call><name><name>IndexFormatVersion</name><operator>.</operator><name>getVersion</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>hasPayloads</name> <init>= <expr><call><name><name>version</name><operator>.</operator><name>isAtLeast</name></name><argument_list>(<argument><expr><name><name>IndexFormatVersion</name><operator>.</operator><name>V3</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TermDocs</name></type> <name>termDocs</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>payload</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>hasPayloads</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>termDocs</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>termPositions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>payload</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>termDocs</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>termDocs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                 <decl_stmt><decl><type><name>TermEnum</name></type> <name>termEnum</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>terms</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
                 <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>tmp</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">185</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">196</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>class</name> <name>SharedFieldCache</name> <block>{
 
                         <expr><call><name><name>termDocs</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>termEnum</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
                         <while>while <condition>(<expr><call><name><name>termDocs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>hasPayloads</name></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>TermPositions</name></type> <name>termPos</name> <init>= <expr><operator>(</operator><name>TermPositions</name><operator>)</operator> <name>termDocs</name></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>termPos</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><call><name><name>termPos</name><operator>.</operator><name>isPayloadAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>termPos</name><operator>.</operator><name>getPayload</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>PropertyMetaData</name><operator>.</operator><name>fromByteArray</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPropertyType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>
                             <expr_stmt><expr><name>setValues</name><operator>++</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>retArray</name><index>[<expr><call><name><name>termDocs</name><operator>.</operator><name>doc</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>retArray</name><index>[<expr><call><name><name>termDocs</name><operator>.</operator><name>doc</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>getValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         </block_content>}</block></while>
                     </block_content>}</block></if></if_stmt> <while>while <condition>(<expr><call><name><name>termEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
                 </block_content>}</block></if></if_stmt> <finally>finally <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">194</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">214</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>SharedFieldCache</name> <block>{
                     <expr><call><name><name>termEnum</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;
                 }</block></expr></expr_stmt>
             </block_content>}</block></finally>
            <decl_stmt><decl><type><name><name>SharedFieldCache</name><operator>.</operator><name>StringIndex</name></name></type> <name>value</name> <init>= <expr><operator>new</operator> <call><name><name>SharedFieldCache</name><operator>.</operator><name>StringIndex</name></name><argument_list>(<argument><expr><name>retArray</name></expr></argument>, <argument><expr><name>setValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueIndex</name></type> <name>value</name> <init>= <expr><operator>new</operator> <call><name>ValueIndex</name><argument_list>(<argument><expr><name>retArray</name></expr></argument>, <argument><expr><name>setValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name>store</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <return>return <expr><name>value</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">202</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">222</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>SharedFieldCache</name> <block>{
     }</block>
 
     <comment type="block" format="javadoc">/**
     * See if a &lt;code&gt;StringIndex&lt;/code&gt; object is in the cache.
     * See if a &lt;code&gt;ValueIndex&lt;/code&gt; object is in the cache.
      */</comment>
    <name><name>SharedFieldCache</name><operator>.</operator><name>StringIndex</name></name> <call><name>lookup</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>String</name> <name>field</name></expr></argument>,
    <argument><expr><name>ValueIndex</name> <call><name>lookup</name><argument_list>(<argument><expr><name>IndexReader</name> <name>reader</name></expr></argument>, <argument><expr><name>String</name> <name>field</name></expr></argument>,
                                   <argument><expr><name>String</name> <name>prefix</name></expr></argument>, <argument><expr><name>SortComparator</name> <name>comparer</name></expr></argument>)</argument_list></call> <block>{
         <expr><name>Key</name> <name>key</name> <operator>=</operator> <operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>comparer</name></expr></argument>)</argument_list></call></expr>;
         <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">232</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ class <name>SharedFieldCache</name> <block>{
             <if_stmt><if>if <condition>(<expr><name>readerCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                 <return>return <expr><literal type="null">null</literal></expr>;</return>
             </block_content>}</block></if></if_stmt></block></expr></expr_stmt>
            <return>return <expr><operator>(</operator><name><name>SharedFieldCache</name><operator>.</operator><name>StringIndex</name></name><operator>)</operator> <call><name><name>readerCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
            <return>return <expr><operator>(</operator><name>ValueIndex</name><operator>)</operator> <call><name><name>readerCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
         </block_content>}</block></synchronized>
     }</block></expr></argument></argument_list></call></expr></expr_stmt>
 
     <comment type="block" format="javadoc">/**
     * Put a &lt;code&gt;StringIndex&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; to cache.
     * Put a &lt;code&gt;ValueIndex&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; to cache.
      */</comment>
     <function><type><name>Object</name></type> <name>store</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>,
                 <parameter><decl><type><name>SortComparator</name></type> <name>comparer</name></decl></parameter>, <parameter><decl><type><name><name>SharedFieldCache</name><operator>.</operator><name>StringIndex</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
                 <decl_stmt><decl><type><name>SortComparator</name></type> <name>comparer</name></decl>, <decl><type ref="prev"/><name>ValueIndex</name> <name>value</name></decl>) <block>{<block_content>
         <decl_stmt><decl><type><name>Key</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>comparer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
             <decl_stmt><decl><type><name>HashMap</name></type> <name>readerCache</name> <init>= <expr><operator>(</operator><name>HashMap</name><operator>)</operator> <call><name><name>cache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">232</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">252</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <name>class</name> <name>SharedFieldCache</name> <block>{
         }</block></expr></expr_stmt>
     </block_content>}</block></synchronized>
 
    <comment type="block" format="javadoc">/**
     * Returns a comparable for the given &lt;code&gt;value&lt;/code&gt; that is read from
     * the index.
     *
     * @param value the value as read from the index.
     * @param type the property type.
     * @return a comparable for the &lt;code&gt;value&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <name>Comparable</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>PropertyType</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
                <return>return <expr><call><name><name>ComparableBoolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>booleanValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><name><name>PropertyType</name><operator>.</operator><name>DATE</name></name></expr>:</case>
                <return>return <expr><operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><call><name><name>DateField</name><operator>.</operator><name>stringToTime</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><name><name>PropertyType</name><operator>.</operator><name>LONG</name></name></expr>:</case>
                <return>return <expr><operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><call><name><name>LongField</name><operator>.</operator><name>stringToLong</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><name><name>PropertyType</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
                <return>return <expr><operator>new</operator> <call><name>Double</name><argument_list>(<argument><expr><call><name><name>DoubleField</name><operator>.</operator><name>stringToDouble</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            <default>default:</default>
                <return>return <expr><name>value</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * A compound &lt;code&gt;Key&lt;/code&gt; that consist of &lt;code&gt;field&lt;/code&gt;
      * &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;comparator&lt;/code&gt;.
@@ -243,7 +286,7 @@ class SharedFieldCache {
         private final SortComparator comparator;
 
         /**
         * Creates &lt;code&gt;Key&lt;/code&gt; for StringIndex lookup.
         * Creates &lt;code&gt;Key&lt;/code&gt; for ValueIndex lookup.
          */</comment>
         <expr_stmt><expr><call><name>Key</name><argument_list>(<argument><expr><name>String</name> <name>field</name></expr></argument>, <argument><expr><name>String</name> <name>prefix</name></expr></argument>, <argument><expr><name>SortComparator</name> <name>comparator</name></expr></argument>)</argument_list></call> <block>{
             <expr><name><name>this</name><operator>.</operator><name>field</name></name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>intern</name></name><argument_list>()</argument_list></call></expr>;
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldSortComparator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldSortComparator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1a06f70e4</literal><operator>..</operator><name>fd8ee0dcb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldSortComparator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldSortComparator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">44</literal><operator>,</operator><literal type="number">13</literal> <operator>+</operator><literal type="number">44</literal><operator>,</operator><literal type="number">6</literal> @@</block></expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>uuid</name><operator>.</operator><name>UUID</name></name>;</import>
 <comment type="block" format="javadoc">/**
  * Implements a &lt;code&gt;SortComparator&lt;/code&gt; which knows how to sort on a lucene
  * field that contains values for multiple properties.
 * &lt;p/&gt;
 * &lt;b&gt;Important:&lt;/b&gt; The ScoreDocComparator returned by {@link #newComparator}
 * does not implement the contract for {@link ScoreDocComparator#sortValue(ScoreDoc)}
 * properly. The method will always return an empty String to save memory consumption
 * on large property ranges. Those values are only of relevance when queries
 * are executed with a &lt;code&gt;MultiSearcher&lt;/code&gt;, which is currently not the
 * case in Jackrabbit.
  */</comment>
 <class><specifier>public</specifier> class <name>SharedFieldSortComparator</name> <super_list><extends>extends <super><name>SortComparator</name></super></extends></super_list> <block>{
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldSortComparator</name> extends <name>SortComparator</name> <block>{
             <throws>throws <argument><expr><name>IOException</name> <block>{
         <expr><name>PathFactory</name> <name>factory</name> <operator>=</operator> <call><name><name>PathFactoryImpl</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws>;
         <name>Path</name> <name>p</name> <operator>=</operator> <call><name><name>factory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>relPath</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>p</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>SimpleScoreDocComparator</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,
                        <argument><expr><call><name><name>nsMappings</name><operator>.</operator><name>translatePropertyName</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getNameElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalNameException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>Util</name><operator>.</operator><name>createIOException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>ScoreDocComparator</name></type> <name>simple</name> <init>= <expr><operator>new</operator> <call><name>SimpleScoreDocComparator</name><argument_list>(
                    <argument><expr><name>reader</name></expr></argument>, <argument><expr><call><name><name>nsMappings</name><operator>.</operator><name>translatePath</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>p</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>simple</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>CompoundScoreDocComparator</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,
                        <argument><expr><operator>new</operator> <name><name>ScoreDocComparator</name><index>[]</index></name><block>{
                                <expr><name>simple</name></expr>,
                                <expr><operator>new</operator> <call><name>RelPathScoreDocComparator</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>
                        }</block></expr></argument>)</argument_list></call></expr>;</return>
             </block_content>}</block></else></if_stmt>
        </block_content>}</block></try> <if_stmt><else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>RelPathScoreDocComparator</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalNameException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>Util</name><operator>.</operator><name>createIOException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></catch>
     </block_content>}</block></catch></try>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">250</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">248</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldSortComparator</name> extends <name>SortComparator</name> <block>{
         <comment type="block" format="javadoc">/**
          * The term look ups of the index segments.
          */</comment>
        <expr><specifier>protected</specifier> <name>final</name> <name><name>SharedFieldCache</name><operator>.</operator><name>StringIndex</name><index>[]</index></name> <name>indexes</name></expr>;
        <specifier>protected</specifier> <name>final</name> <name><name>SharedFieldCache</name><operator>.</operator><name>ValueIndex</name><index>[]</index></name> <name>indexes</name></block></expr>;</expr_stmt>
 
         <constructor><specifier>public</specifier> <name>SimpleScoreDocComparator</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>,
                                         <parameter><decl><type><name>String</name></type> <name>propertyName</name></decl></parameter>)</parameter_list>
                 <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
             <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexes</name></name> <operator>=</operator> <operator>new</operator> <name><name>SharedFieldCache</name><operator>.</operator><name>StringIndex</name><index>[<expr><call><name><name>readers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexes</name></name> <operator>=</operator> <operator>new</operator> <name><name>SharedFieldCache</name><operator>.</operator><name>ValueIndex</name><index>[<expr><call><name><name>readers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
 
             <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>readers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                 <decl_stmt><decl><type><name>IndexReader</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>IndexReader</name><operator>)</operator> <call><name><name>readers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>indexes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>SharedFieldCache</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>getStringIndex</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>field</name></expr></argument>,
                <argument><expr><name><name>indexes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>SharedFieldCache</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>getValueIndex</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>field</name></expr></argument>,
                         <argument><expr><call><name><name>FieldNames</name><operator>.</operator><name>createNamedValue</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name><name>SharedFieldSortComparator</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
             </block_content>}</block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">274</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">272</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldSortComparator</name> extends <name>SortComparator</name> <block>{
          <expr><operator>*</operator><operator>/</operator>
         <specifier>public</specifier> <name>Comparable</name> <call><name>sortValue</name><argument_list>(<argument><expr><name>ScoreDoc</name> <name>i</name></expr></argument>)</argument_list></call> <block>{
             <expr><name>int</name> <name>idx</name> <operator>=</operator> <call><name>readerIndex</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>doc</name></name></expr></argument>)</argument_list></call></expr>;</block></expr>
            <return>return <expr><name><name>indexes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>getTerm</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>doc</name></name> <operator>-</operator> <name><name>starts</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
            <return>return <expr><name><name>indexes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>doc</name></name> <operator>-</operator> <name><name>starts</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
         </block_content>}</block></constructor>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">359</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">357</literal></expr><operator>,</operator><expr><literal type="number">34</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldSortComparator</name> extends <name>SortComparator</name> <block>{
     }</block>
 
     <comment type="block" format="javadoc">/**
     * Represents a boolean that implement {@link Comparable}. This class can
     * be removed when we move to Java 5.
     * Implements a compound score doc comparator that delegates to several
     * other comparators. The comparators are asked for a sort value in the
     * sequence they are passed to the constructor. The first non-null value
     * will be returned by {@link #sortValue(ScoreDoc)}.
      */</comment>
    <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>class</name> <name>ComparableBoolean</name> implements <name>Comparable</name> <block>{

        <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>ComparableBoolean</name> <name>TRUE</name> <operator>=</operator> <operator>new</operator> <call><name>ComparableBoolean</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <specifier>private</specifier> <name>final</name> <name>class</name> <name>CompoundScoreDocComparator</name>
            extends <name>AbstractScoreDocComparator</name> <block>{
 
        <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>ComparableBoolean</name> <name>FALSE</name> <operator>=</operator> <operator>new</operator> <call><name>ComparableBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;

        <specifier>private</specifier> <name>final</name> <name>boolean</name> <name>value</name></block></block></expr>;</expr_stmt>

        <constructor><specifier>private</specifier> <name>ComparableBoolean</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ScoreDocComparator</name><index>[]</index></name></type> <name>comparators</name></decl>;</decl_stmt>
 
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>ComparableBoolean</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>ComparableBoolean</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><ternary><condition><expr><name><name>b</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name>value</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>
        <constructor><specifier>public</specifier> <name>CompoundScoreDocComparator</name><parameter_list>(<parameter><decl><type><name>IndexReader</name></type> <name>reader</name></decl></parameter>,
                                          <parameter><decl><type><name><name>ScoreDocComparator</name><index>[]</index></name></type> <name>comparators</name></decl></parameter>)</parameter_list>
                <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>comparators</name></name> <operator>=</operator> <name>comparators</name></expr>;</expr_stmt>
         </block_content>}</block></constructor>
 
        <function><type><specifier>static</specifier> <name>ComparableBoolean</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
        <comment type="block" format="javadoc">/**
         * {@inheritDoc}
         */</comment>
        <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>sortValue</name><parameter_list>(<parameter><decl><type><name>ScoreDoc</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>comparators</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Comparable</name></type> <name>c</name> <init>= <expr><name><name>comparators</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>sortValue</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>c</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
         </block_content>}</block></function>
     </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SingletonTokenStream</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SingletonTokenStream</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7d581a781</literal><operator>..</operator><literal type="number">1e9fa40e5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SingletonTokenStream</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SingletonTokenStream</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SingletonTokenStream</name> extends <name>TokenStream</name> <block>{
         <expr><call><name><name>t</name><operator>.</operator><name>setPayload</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Payload</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyMetaData</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
 
    <comment type="block" format="javadoc">/**
     * Creates a new SingleTokenStream with the given token.
     *
     * @param t the token.
     */</comment>
    <constructor><specifier>public</specifier> <name>SingletonTokenStream</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

     <comment type="block" format="javadoc">/**
      * {@inheritDoc}
      */</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name>indexing</name><operator>-</operator><name>configuration</name><operator>-</operator><literal type="number">1.2.dtd</literal> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name>indexing</name><operator>-</operator><name>configuration</name><operator>-</operator><literal type="number">1.2.dtd</literal>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..ad5bdda16</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name>indexing</name><operator>-</operator><name>configuration</name><operator>-</operator><literal type="number">1.2.dtd</literal>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">93</literal> @@
<operator>&lt;</operator><operator>!</operator><operator>--</operator>
   <name>Licensed</name> <name>to</name> <name>the</name> <name>Apache</name> <name>Software</name> <call><name>Foundation</name> <argument_list>(<argument><expr><name>ASF</name></expr></argument>)</argument_list></call> <name>under</name> <name>one</name> <name>or</name> <name>more</name>
   <name>contributor</name> <name>license</name> <name><name>agreements</name><operator>.</operator>  <name>See</name></name> <name>the</name> <name>NOTICE</name> <name>file</name> <name>distributed</name> <name>with</name>
   <name>this</name> <name>work</name></expr></expr_stmt> <for>for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License<operator>,</operator> <expr_stmt><expr><name>Version</name> <literal type="number">2.0</literal>
   <operator>(</operator><name>the</name> <literal type="string">"License"</literal><operator>)</operator></expr>;</expr_stmt></for> <expr_stmt><expr><name>you</name> <name>may</name> <name>not</name> <name>use</name> <name>this</name> <name>file</name> <name>except</name> <name>in</name> <name>compliance</name> <name>with</name>
   <name>the</name> <name><name>License</name><operator>.</operator>  <name>You</name></name> <name>may</name> <name>obtain</name> <name>a</name> <name>copy</name> <name>of</name> <name>the</name> <name>License</name> <name>at</name>

       <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>

   <name>Unless</name> <name>required</name> <name>by</name> <name>applicable</name> <name>law</name> <name>or</name> <name>agreed</name> <name>to</name> <name>in</name> <name>writing</name></expr><operator>,</operator> <expr><name>software</name>
   <name>distributed</name> <name>under</name> <name>the</name> <name>License</name> <name>is</name> <name>distributed</name> <name>on</name> <name>an</name> <literal type="string">"AS IS"</literal> <name>BASIS</name></expr><operator>,</operator>
   <expr><name>WITHOUT</name> <name>WARRANTIES</name> <name>OR</name> <name>CONDITIONS</name> <name>OF</name> <name>ANY</name> <name>KIND</name></expr><operator>,</operator> <expr><name>either</name> <name>express</name> <name>or</name> <name><name>implied</name><operator>.</operator>
   <name>See</name></name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
   limitations under the License.
--&gt;
&lt;!--
    The configuration element configures the indexing behaviour of the lucene
    backed query handler in Jackrabbit. It allows you to define indexing
    aggregates and configure which properties of a node are indexed.
    This element must contain all the namespace declarations that are used
    throughout this configuration.
--&gt;
&lt;!ELEMENT configuration <control>(<init><expr><name>aggregate</name><operator>*</operator></expr><operator>,</operator><expr><name>index</name><operator>-</operator><name>rule</name><operator>*</operator></expr></init>)</control><block type="pseudo"><block_content><expr_stmt><expr><operator>&gt;</operator>

<operator>&lt;</operator><operator>!</operator><operator>--</operator>
    <name>Each</name> <name>aggregate</name> <name>element</name> <name>defines</name> <name>an</name> <name>indexing</name> <name>aggregate</name> <name>based</name> <name>on</name> <name>the</name> <name>name</name> <name>of</name> <name>a</name>
    <name>primary</name> <name>node</name> <name><name>type</name><operator>.</operator></name>
--<operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><name>ELEMENT</name> <call><name>aggregate</name> <argument_list>(<argument><expr><name>include</name><operator>*</operator></expr></argument>,<argument><expr><name>include</name><operator>-</operator><name>property</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><name>ATTLIST</name> <name>aggregate</name> <name>primaryType</name> <name>CDATA</name> <operator>#</operator><name>REQUIRED</name><operator>&gt;</operator>

<operator>&lt;</operator><operator>!</operator><operator>--</operator>
    <name>An</name> <name>include</name> <name>element</name> <name>contains</name> <name>a</name> <name>relative</name> <name>path</name> <name>pattern</name> <name>using</name> <name>either</name> <name>an</name> <name>exact</name>
    <name>node</name> <name>name</name> <name>or</name> <operator>*</operator><operator>.</operator> <name>Nodes</name> <name>that</name> <name>match</name> <name>the</name> <name>path</name> <name>pattern</name> <name>against</name> <name>the</name> <name>root</name> <name>of</name> <name>an</name>
    <name>indexing</name> <name>aggregate</name> <name>are</name> <name>included</name> <name>in</name> <name>the</name> <name>aggregated</name> <name>node</name> <name><name>index</name><operator>.</operator> <name>An</name></name> <name>include</name>
    <name>element</name> <name>may</name> <name>optionally</name> <name>specify</name> <name>a</name> <name>primary</name> <name>node</name> <name>type</name> <name>name</name> <name>that</name> <name>needs</name> <name>to</name> <name>match</name></expr></expr_stmt></block_content></block></for>
    <for>for the included node.
--&gt;
&lt;!ELEMENT include <control>(<init><expr><operator>#</operator><name>PCDATA</name></expr></init>)</control><block type="pseudo"><block_content><expr_stmt><expr><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><name>ATTLIST</name> <name>include</name> <name>primaryType</name> <name>CDATA</name> <operator>#</operator><name>IMPLIED</name><operator>&gt;</operator>

<operator>&lt;</operator><operator>!</operator><operator>--</operator>
    <name>An</name> <name>include</name><operator>-</operator><name>property</name> <name>element</name> <name>contains</name> <name>a</name> <name>relative</name> <name>path</name> <name>to</name> <name>a</name> <name><name>property</name><operator>.</operator> <name>Properties</name></name>
    <name>that</name> <name>match</name> <name>the</name> <name>path</name> <name>against</name> <name>the</name> <name>root</name> <name>of</name> <name>an</name> <name>indexing</name> <name>aggregate</name> <name>are</name> <name>included</name>
    <name>in</name> <name>the</name> <name>aggregated</name> <name>node</name> <name><name>index</name><operator>.</operator> <name>Aggregated</name></name> <name>properties</name> <name>may</name> <name>be</name> <name>used</name> <name>to</name> <name>speed</name>
    <name>up</name> <name>sorting</name> <name>of</name> <name>query</name> <name>results</name> <name>when</name> <name>the</name> <name>order</name> <name>by</name> <name>clause</name> <name>references</name> <name>a</name> <name>property</name>
    <name>with</name> <name>a</name> <name>relative</name> <name><name>path</name><operator>.</operator></name>
--<operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><name>ELEMENT</name> <name>include</name><operator>-</operator><call><name>property</name> <argument_list>(<argument><expr><operator>#</operator><name>PCDATA</name></expr></argument>)</argument_list></call><operator>&gt;</operator>

<operator>&lt;</operator><operator>!</operator><operator>--</operator>
    <name>An</name> <name>index</name><operator>-</operator><name>rule</name> <name>element</name> <name>defines</name> <name>which</name> <name>properties</name> <name>of</name> <name>a</name> <name>node</name> <name>should</name> <name>be</name> <name><name>indexed</name><operator>.</operator>
    <name>When</name></name> <name>a</name> <name>node</name> <name>is</name> <name>indexed</name> <name>the</name> <name>list</name> <name>of</name> <name>index</name><operator>-</operator><name>rules</name> <name>is</name> <name>check</name></expr></expr_stmt></block_content></block></for> <for>for a matching
    node type and whether the condition is true. If a match is found the
    property is looked up.
    The index-rule element also contains a boost value for the entire node
    being indexed. A value higher than 1.0 will boost the score value for a node
    that matched this index-rule.
--&gt;
&lt;!ELEMENT index-rule <control>(<init><expr><name>property</name><operator>*</operator></expr></init>)</control><block type="pseudo"><block_content><expr_stmt><expr><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><name>ATTLIST</name> <name>index</name><operator>-</operator><name>rule</name> <name>nodeType</name> <name>CDATA</name> <operator>#</operator><name>REQUIRED</name>
                     <name>condition</name> <name>CDATA</name> <operator>#</operator><name>IMPLIED</name>
                     <name>boost</name> <name>CDATA</name> <literal type="string">"1.0"</literal><operator>&gt;</operator>

<operator>&lt;</operator><operator>!</operator><operator>--</operator>
    <name>A</name> <name>property</name> <name>element</name> <name>defines</name> <name>the</name> <name>boost</name> <name>value</name></expr></expr_stmt></block_content></block></for> <for>for a matching property and a
    flag that indicates whether the value of a string property should also be
    included in the node scope fulltext index. Both boost and nodeScopeIndex
    attributes only affect string properties and are ignored if the property
    is not of type string. If isRegexp is set to true the name of the property
    is interpreted as a regular expression to match properties on a node. Please
    note that you may only use a regular expression for the local part of a
    property name. The attribute useInExcerpt controls whether the contents
    of the property is used to construct an excerpt. The default value for this
    attribute is true.
--&gt;
&lt;!ELEMENT property <control>(<init><expr><operator>#</operator><name>PCDATA</name></expr></init>)</control><block type="pseudo"><block_content><expr_stmt><expr><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><name>ATTLIST</name> <name>property</name> <name>boost</name> <name>CDATA</name> <literal type="string">"1.0"</literal>
                   <name>nodeScopeIndex</name> <name>CDATA</name> <literal type="string">"true"</literal>
                   <name>isRegexp</name> <name>CDATA</name> <literal type="string">"false"</literal>
                   <name>useInExcerpt</name> <name>CDATA</name> <literal type="string">"true"</literal><operator>&gt;</operator>

<operator>&lt;</operator><operator>!</operator><operator>--</operator>
    <name>An</name> <name>analyzer</name> <name>element</name> <name>with</name> <name>property</name> <name>elements</name> <name>in</name> <name>it</name> <name>defines</name> <name>which</name> <name>analyzer</name> <name>is</name> <name>to</name>
    <name>be</name> <name>used</name></expr></expr_stmt></block_content></block></for> <for>for indexing and parsing the full text of this property. If the analyzer
    class can not be found<operator>,</operator> <decl_stmt><decl><type><name>the</name> default <name>analyzer</name> <name>is</name> <name><name>used</name><operator>.</operator> <name>The</name></name> <name>node</name> <name>scope</name> <name>is</name> <name>always</name>
    <name>indexed</name> <name>with</name> <name>the</name> default <name>analyzer</name></type></decl>, <decl><type ref="prev"/><name>so</name> <name>might</name> return <name>different</name> <name>results</name> for <name>search</name>
    <name>queries</name> <name>in</name> <name>some</name> <name>rare</name> <name><name>cases</name><operator>.</operator></name>
--&gt;
<name><argument_list type="generic">&lt;<argument><operator>!</operator><name>ELEMENT</name> <name>analyzers</name></argument> <argument/></argument_list></name>(<name>analyzer</name><modifier>*</modifier>)&gt;
<name><argument_list type="generic">&lt;<argument><operator>!</operator><name>ELEMENT</name> <name>analyzer</name></argument> <argument/></argument_list></name>(<name>property</name><modifier>*</modifier>)&gt;
<argument_list type="generic">&lt;<argument><operator>!</operator><name>ATTLIST</name> <name>analyzer</name> class <name>CDATA</name> <operator>#</operator><name>REQUIRED</name></argument>&gt;</argument_list>
<name>diff</name> --<name>git</name> <name>a</name>/<name>jackrabbit</name>-<name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>jackrabbit</name>/<name>core</name>/<name>query</name>/<name><name>IndexingAggregateTest</name><operator>.</operator><name>java</name></name> <name>b</name>/<name>jackrabbit</name>-<name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>jackrabbit</name>/<name>core</name>/<name>query</name>/<name><name>IndexingAggregateTest</name><operator>.</operator><name>java</name></name>
<name>index</name> 2e34e4f6e..<name>c16396614</name> 100644
-- <name>a</name>/<name>jackrabbit</name>-<name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>jackrabbit</name>/<name>core</name>/<name>query</name>/<name><name>IndexingAggregateTest</name><operator>.</operator><name>java</name></name>
++ <name>b</name>/<name>jackrabbit</name>-<name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>jackrabbit</name>/<name>core</name>/<name>query</name>/<name><name>IndexingAggregateTest</name><operator>.</operator><name>java</name></name>
@@ -18</decl>,12 +18,18 @@ package <decl><type ref="prev"/><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name></name></decl>;</decl_stmt></for>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>query</name><operator>.</operator><name>Query</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStreamWriter</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * &lt;code&gt;IndexingAggregateTest&lt;/code&gt; checks if the nt:file nt:resource
@@ -89,4 +95,96 @@ public class IndexingAggregateTest extends AbstractIndexingTest {
 
         executeSQLQuery(sqlCat, new Node[]{file});
     }

    public void testContentLastModified() throws RepositoryException {
        List expected = new ArrayList();
        long time = System.currentTimeMillis();
        for (int i = 0; i &lt; 10; i++) {
            expected.add(addFile(testRootNode, "file" + i, time));
            time += 1000;
        }
        testRootNode.save();

        String stmt = testPath + "/* order by jcr:content/@jcr:lastModified";
        Query q = qm.createQuery(stmt, Query.XPATH);
        checkResultSequence(q.execute().getRows(), (Node[]) expected.toArray(new Node[expected.size()]));

        // descending
        stmt = testPath + "/* order by jcr:content/@jcr:lastModified descending";
        q = qm.createQuery(stmt, Query.XPATH);
        Collections.reverse(expected);
        checkResultSequence(q.execute().getRows(), (Node[]) expected.toArray(new Node[expected.size()]));

        // reverse order in content
        for (Iterator it = expected.iterator(); it.hasNext(); ) {
            Node file = (Node) it.next();
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(time);
            file.getNode("jcr:content").setProperty("jcr:lastModified", cal);
            time -= 1000;
        }
        testRootNode.save();

        stmt = testPath + "/* order by jcr:content/@jcr:lastModified descending";
        q = qm.createQuery(stmt, Query.XPATH);
        checkResultSequence(q.execute().getRows(), (Node[]) expected.toArray(new Node[expected.size()]));
    }

    public void disabled_testPerformance() throws RepositoryException {
        createNodes(testRootNode, 10, 4, 0, new NodeCreationCallback() {
            public void nodeCreated(Node node, int count) throws
                    RepositoryException {
                node.addNode("child").setProperty("property", "value" + count);
                // save once in a while
                if (count % 1000 == 0) {
                    session.save();
                    System.out.println("added " + count + " nodes so far.");
                }
            }
        });
        session.save();

        String xpath = testPath + "//*[child/@property] order by child/@property";
        for (int i = 0; i &lt; 3; i++) {
            long time = System.currentTimeMillis();
            Query query = qm.createQuery(xpath, Query.XPATH);
            ((QueryImpl) query).setLimit(20);
            query.execute().getNodes().getSize();
            time = System.currentTimeMillis() - time;
            System.out.println("executed query in " + time + " ms.");
        }
    }

    private static Node addFile(Node folder, String name, long lastModified)
            throws RepositoryException {
        Node file = folder.addNode(name, "nt:file");
        Node resource = file.addNode("jcr:content", "nt:resource");
        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(lastModified);
        resource.setProperty("jcr:lastModified", cal);
        resource.setProperty("jcr:encoding", "UTF-8");
        resource.setProperty("jcr:mimeType", "text/plain");
        resource.setProperty("jcr:data", new ByteArrayInputStream("test".getBytes()));
        return file;
    }

    private int createNodes(Node n, int nodesPerLevel, int levels,
                            int count, NodeCreationCallback callback)
            throws RepositoryException {
        levels--;
        for (int i = 0; i &lt; nodesPerLevel; i++) {
            Node child = n.addNode("node" + i);
            count++;
            callback.nodeCreated(child, count);
            if (levels &gt; 0) {
                count = createNodes(child, nodesPerLevel, levels, count, callback);
            }
        }
        return count;
    }

    private static interface NodeCreationCallback {

        public void nodeCreated(Node node, int count) throws RepositoryException;
    }
 }
diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java
index 419c50bc6..673071c40 100644
-- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java
++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java
@@ -145,31 +145,6 @@ public class OrderByTest extends AbstractQueryTest {
         checkChildAxis(new Value[]{getValue(2.0), getValue(1)});
     }
 
    public void disabled_testPerformance() throws RepositoryException {
        createNodes(testRootNode, 10, 4, 0, new NodeCreationCallback() {
            public void nodeCreated(Node node, int count) throws
                    RepositoryException {
                node.addNode("child").setProperty("property", "value" + count);
                // save once in a while
                if (count % 1000 == 0) {
                    superuser.save();
                    System.out.println("added " + count + " nodes so far.");
                }
            }
        });
        superuser.save();

        String xpath = testPath + "//*[child/@property] order by child/@property";
        for (int i = 0; i &lt; 3; i++) {
            long time = System.currentTimeMillis();
            Query query = qm.createQuery(xpath, Query.XPATH);
            ((QueryImpl) query).setLimit(20);
            query.execute().getNodes().getSize();
            time = System.currentTimeMillis() - time;
            System.out.println("executed query in " + time + " ms.");
        }
    }

     //------------------------------&lt; helper &gt;----------------------------------
 
     private Value getValue(String value) throws RepositoryException {
@@ -208,27 +183,55 @@ public class OrderByTest extends AbstractQueryTest {
      * @throws RepositoryException if an error occurs.
      */</comment>
     <function><type><specifier>private</specifier> <name>void</name></type> <name>checkChildAxis</name><parameter_list>(<parameter><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// child/prop is part of the test indexing configuration,</comment>
        <comment type="line">// this will use SimpleScoreDocComparator internally</comment>
        <expr_stmt><expr><call><name>checkChildAxis</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"child"</literal></expr></argument>, <argument><expr><literal type="string">"prop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanUpTestRoot</name><argument_list>(<argument><expr><name>superuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// c/p is not in the indexing configuration,</comment>
        <comment type="line">// this will use RelPathScoreDocComparator internally</comment>
        <expr_stmt><expr><call><name>checkChildAxis</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if order by with a relative path works on the the passed values.
     * The values are expected to be in ascending order.
     *
     * @param values   the values in ascending order.
     * @param child    the name of the child node.
     * @param property the name of the property.
     * @throws RepositoryException if an error occurs.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkChildAxis</name><parameter_list>(<parameter><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>child</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>List</name></type> <name>vals</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// add initial value null -&gt; property not set</comment>
        <comment type="line">// inexistent property is always less than any property value set</comment>
        <expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <decl_stmt><decl><type><name>List</name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vals</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>n</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>n</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"child"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"prop"</literal></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Node</name></type> <name>c</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>vals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><operator>(</operator><name>Value</name><operator>)</operator> <call><name><name>vals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><call><name><name>testRootNode</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
        <decl_stmt><decl><type><name>String</name></type> <name>xpath</name> <init>= <expr><name>testPath</name> <operator>+</operator> <literal type="string">"/* order by child/@prop"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>xpath</name> <init>= <expr><name>testPath</name> <operator>+</operator> <literal type="string">"/* order by "</literal> <operator>+</operator> <name>child</name> <operator>+</operator> <literal type="string">"/@"</literal> <operator>+</operator> <name>property</name></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>collectPaths</name><argument_list>(<argument><expr><call><name>executeQuery</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <comment type="line">// descending</comment>
         <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xpath</name> <operator>=</operator> <name>testPath</name> <operator>+</operator> <literal type="string">"/* order by child/@prop descending"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>xpath</name> <operator>+=</operator> <literal type="string">" descending"</literal></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>collectPaths</name><argument_list>(<argument><expr><call><name>executeQuery</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <comment type="line">// reverse order in content</comment>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>child</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>getNode</name></name><argument_list>(<argument><expr><literal type="string">"node"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"child"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"prop"</literal></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vals</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>c</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>getNode</name></name><argument_list>(<argument><expr><literal type="string">"node"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><operator>(</operator><name>Value</name><operator>)</operator> <call><name><name>vals</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><call><name><name>testRootNode</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">244</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">247</literal></expr><operator>,</operator><expr><literal type="number">4</literal> @@ <specifier>public</specifier> <name>class</name> <name>OrderByTest</name> extends <name>AbstractQueryTest</name> <block>{
         }</block></expr></expr_stmt>
         <return>return <expr><name>paths</name></expr>;</return>
     </block_content>}</block></for>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>createNodes</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodesPerLevel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>levels</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>NodeCreationCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>levels</name><operator>--</operator></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodesPerLevel</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>child</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>nodeCreated</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>levels</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>createNodes</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>nodesPerLevel</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></function>

    <interface><specifier>private</specifier> <specifier>static</specifier> interface <name>NodeCreationCallback</name> <block>{

        <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>nodeCreated</name><argument_list>(<argument><expr><name>Node</name> <name>node</name></expr></argument>, <argument><expr><name>int</name> <name>count</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws></decl>;</decl_stmt>
    }</block></interface>
 </block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator>default<operator>/</operator><name>indexing</name><operator>-</operator><name><name>configuration</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator>default<operator>/</operator><name>indexing</name><operator>-</operator><name><name>configuration</name><operator>.</operator><name>xml</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..5d83543d8</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator>default<operator>/</operator><name>indexing</name><operator>-</operator><name><name>configuration</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><ternary><condition><expr><literal type="number">10</literal> @@
<operator>&lt;</operator></expr>?</condition><then><expr><name>xml</name> <name>version</name><operator>=</operator><ternary><condition><expr><literal type="string">"1.0"</literal></expr>?</condition><then><expr><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><name>DOCTYPE</name> <name>configuration</name> <name>SYSTEM</name> <literal type="string">"http://jackrabbit.apache.org/dtd/indexing-configuration-1.2.dtd"</literal><operator>&gt;</operator>
<operator>&lt;</operator><name>configuration</name> <name>xmlns</name></expr></then><else>:<expr><name>jcr</name><operator>=</operator><literal type="string">"http://www.jcp.org/jcr/1.0"</literal>
               <name>xmlns</name></expr></else></ternary></expr></then><else>:<expr><name>nt</name><operator>=</operator><literal type="string">"http://www.jcp.org/jcr/nt/1.0"</literal><operator>&gt;</operator>

    <operator>&lt;</operator><name>aggregate</name> <name>primaryType</name><operator>=</operator><literal type="string">"nt:unstructured"</literal><operator>&gt;</operator>
        <operator>&lt;</operator><name>include</name><operator>-</operator><name>property</name><operator>&gt;</operator><name>child</name><operator>/</operator><name>prop</name><operator>&lt;</operator><operator>/</operator><name>include</name><operator>-</operator><name>property</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>aggregate</name><operator>&gt;</operator>

<operator>&lt;</operator><operator>/</operator><name>configuration</name><operator>&gt;</operator>
<operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator>default<operator>/</operator><name><name>workspace</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator>default<operator>/</operator><name><name>workspace</name><operator>.</operator><name>xml</name></name>
<name>index</name> <name>a0baa74f9</name><operator>..</operator><literal type="number">35ecb432a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator>default<operator>/</operator><name><name>workspace</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator>default<operator>/</operator><name><name>workspace</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">41</literal></expr></else></ternary></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
     <operator>&lt;</operator><name>param</name> <name>name</name><operator>=</operator><literal type="string">"synonymProviderConfigPath"</literal> <name>value</name><operator>=</operator><literal type="string">"../synonyms.properties"</literal><operator>/</operator><operator>&gt;</operator>
     <operator>&lt;</operator><name>param</name> <name>name</name><operator>=</operator><literal type="string">"supportHighlighting"</literal> <name>value</name><operator>=</operator><literal type="string">"true"</literal><operator>/</operator><operator>&gt;</operator>
     <operator>&lt;</operator><name>param</name> <name>name</name><operator>=</operator><literal type="string">"excerptProviderClass"</literal> <name>value</name><operator>=</operator><literal type="string">"org.apache.jackrabbit.core.query.lucene.WeightedHTMLExcerpt"</literal><operator>/</operator><operator>&gt;</operator>
    <operator>&lt;</operator><name>param</name> <name>name</name><operator>=</operator><literal type="string">"indexingConfiguration"</literal> <name>value</name><operator>=</operator><literal type="string">"${wsp.home}/indexing-configuration.xml"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><operator>/</operator><name>SearchIndex</name><operator>&gt;</operator>
 <operator>&lt;</operator><operator>/</operator><name>Workspace</name><operator>&gt;</operator>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator><name>indexing</name><operator>-</operator><name>test</name><operator>/</operator><name>indexing</name><operator>-</operator><name><name>configuration</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator><name>indexing</name><operator>-</operator><name>test</name><operator>/</operator><name>indexing</name><operator>-</operator><name><name>configuration</name><operator>.</operator><name>xml</name></name>
<name>index</name> <literal type="number">74c799c0d</literal><operator>..</operator><literal type="number">1fe1da536</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator><name>indexing</name><operator>-</operator><name>test</name><operator>/</operator><name>indexing</name><operator>-</operator><name><name>configuration</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator><name>indexing</name><operator>-</operator><name>test</name><operator>/</operator><name>indexing</name><operator>-</operator><name><name>configuration</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><ternary><condition><expr><literal type="number">5</literal> @@
 <operator>&lt;</operator></expr>?</condition><then><expr><name>xml</name> <name>version</name><operator>=</operator><ternary><condition><expr><literal type="string">"1.0"</literal></expr>?</condition><then><expr><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><name>DOCTYPE</name> <name>configuration</name> <name>SYSTEM</name> <literal type="string">"http://jackrabbit.apache.org/dtd/indexing-configuration-1.1.dtd"</literal><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><name>DOCTYPE</name> <name>configuration</name> <name>SYSTEM</name> <literal type="string">"http://jackrabbit.apache.org/dtd/indexing-configuration-1.2.dtd"</literal><operator>&gt;</operator>
 <operator>&lt;</operator><name>configuration</name> <name>xmlns</name></expr></then><else>:<expr><name>jcr</name><operator>=</operator><literal type="string">"http://www.jcp.org/jcr/1.0"</literal>
                <name>xmlns</name></expr></else></ternary></expr></then><else>:<expr><name>nt</name><operator>=</operator><literal type="string">"http://www.jcp.org/jcr/nt/1.0"</literal><operator>&gt;</operator>
 
@@ <operator>-</operator><literal type="number">44</literal></expr></else></ternary></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@
     <operator>&lt;</operator><name>aggregate</name> <name>primaryType</name><operator>=</operator><literal type="string">"nt:file"</literal><operator>&gt;</operator>
         <operator>&lt;</operator><name>include</name><operator>&gt;</operator><name>jcr</name><operator>:</operator><name><name>content</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>include</name></argument>&gt;</argument_list></name>
         <operator>&lt;</operator><name>include</name><operator>&gt;</operator><name>jcr</name><operator>:</operator><name>content</name></expr></expr_stmt></block_content></block></function></block></class></block_content></block></decl_stmt></block_content></block></function></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></for></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block_content></block></constructor></block></class></block></class><comment type="block">/*&lt;/include&gt;
        &lt;include-property&gt;jcr:content/jcr:lastModified&lt;/include-property&gt;
    &lt;/aggregate&gt;

    &lt;aggregate primaryType="nt:unstructured"&gt;
        &lt;include-property&gt;child/property&lt;/include-property&gt;
     &lt;/aggregate&gt;
 
 &lt;/configuration&gt;
\ No newline at end of file
- 
2.19.1.windows.1

</comment></unit>
