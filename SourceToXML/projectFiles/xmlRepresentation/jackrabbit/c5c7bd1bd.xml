<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/c5c7bd1bd.java"><expr_stmt><expr><name>From</name> <name>c5c7bd1bde42c364b59df276e20d92300067b6e5</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Dominique</name> <name><name>Pfister</name> <argument_list type="generic">&lt;<argument><name>dpfister</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">29</literal> <name>Nov</name> <literal type="number">2011</literal> <literal type="number">16</literal><operator>:</operator><literal type="number">41</literal><operator>:</operator><literal type="number">20</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">3138</literal> <operator>-</operator> <name>Skip</name> <name>sync</name> <name>delay</name> <name>when</name> <name>changes</name> <name>are</name> <name>found</name> <operator>-</operator> <name>made</name>
 <name>behaviour</name> <name>subclass</name> <name>overridable</name> <operator>-</operator> <name>added</name> <name>test</name></expr></expr_stmt> <case>case

<expr><name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name></expr>:</case> <label><name>https</name>:</label><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@1207957 13f79535-47bb-0310-9956-ffa450edef68</comment>
<expr_stmt><expr><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>ClusterNode</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">23</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>journal</name><operator>/</operator><name><name>AbstractJournal</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">70</literal> <operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>ClusterSyncTest</name><operator>.</operator><name>java</name></name>         <operator>|</operator> <literal type="number">207</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <literal type="number">4</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">271</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">30</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>ClusterSyncTest</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>ClusterNode</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>ClusterNode</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3fe804214</literal><operator>..</operator><name>ae351602f</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>ClusterNode</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>ClusterNode</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">187</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">187</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClusterNode</name> implements <name>Runnable</name></expr><operator>,</operator>
      <expr><operator>*</operator> <name>Record</name> <name><name>deserializer</name><operator>.</operator></name>
      *<operator>/</operator>
     <specifier>private</specifier> <name>ClusterRecordDeserializer</name> <name>deserializer</name> <operator>=</operator> <operator>new</operator> <call><name>ClusterRecordDeserializer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" format="javadoc">/**
     * Flag indicating whether sync is manual.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>disableAutoSync</name></decl>;</decl_stmt>
 
     <comment type="block" format="javadoc">/**
      * Initialize this cluster node.
@@ -243,6 +248,13 @@ public class ClusterNode implements Runnable,
     public long getStopDelay() {
         return stopDelay;
     }
    
    /**
     * Disable periodic background synchronization. Used for testing purposes, only.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>disableAutoSync</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>disableAutoSync</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
      * Starts this cluster node.
@@ -253,11 +265,12 @@ public class ClusterNode implements Runnable,
         if (status == NONE) {
             sync();
 
            Thread t = new Thread(this, "ClusterNode-" + clusterNodeId);
            t.setDaemon(true);
            t.start();
            syncThread = t;

            if (!disableAutoSync) {
                Thread t = new Thread(this, "ClusterNode-" + clusterNodeId);
                t.setDaemon(true);
                t.start();
                syncThread = t;
            }
             status = STARTED;
         }
     }
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/journal/AbstractJournal.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/journal/AbstractJournal.java
index 00d4a96bc..72d193c8b 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/journal/AbstractJournal.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/journal/AbstractJournal.java
@@ -217,39 +217,59 @@ public abstract class AbstractJournal implements Journal {
      * @throws JournalException if an error occurs
      */</comment>
     <function><type><specifier>protected</specifier> <name>void</name></type> <name>doSync</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>startRevision</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JournalException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>RecordIterator</name></type> <name>iterator</name> <init>= <expr><call><name>getRecords</name><argument_list>(<argument><expr><name>startRevision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>stopRevision</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Record</name></type> <name>record</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>nextRecord</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>getJournalId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Record with revision '"</literal> <operator>+</operator> <call><name><name>record</name><operator>.</operator><name>getRevision</name></name><argument_list>()</argument_list></call>
                            <operator>+</operator> <literal type="string">"' created by this journal, skipped."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>RecordConsumer</name></type> <name>consumer</name> <init>= <expr><call><name>getConsumer</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>getProducerId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>consumer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <try>try <block>{<block_content>
                            <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>consume</name></name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Could not synchronize to revision: "</literal> <operator>+</operator> <call><name><name>record</name><operator>.</operator><name>getRevision</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" due illegal state of RecordConsumer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <return>return;</return>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>RecordIterator</name></type> <name>iterator</name> <init>= <expr><call><name>getRecords</name><argument_list>(<argument><expr><name>startRevision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>stopRevision</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
    
            <try>try <block>{<block_content>
                <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Record</name></type> <name>record</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>nextRecord</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>getJournalId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Record with revision '"</literal> <operator>+</operator> <call><name><name>record</name><operator>.</operator><name>getRevision</name></name><argument_list>()</argument_list></call>
                                <operator>+</operator> <literal type="string">"' created by this journal, skipped."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <decl_stmt><decl><type><name>RecordConsumer</name></type> <name>consumer</name> <init>= <expr><call><name>getConsumer</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>getProducerId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>consumer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <try>try <block>{<block_content>
                                <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>consume</name></name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Could not synchronize to revision: "</literal> <operator>+</operator> <call><name><name>record</name><operator>.</operator><name>getRevision</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" due illegal state of RecordConsumer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <return>return;</return>
                            </block_content>}</block></catch></try>
                         </block_content>}</block></if></if_stmt>
                     </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name>stopRevision</name> <operator>=</operator> <call><name><name>record</name><operator>.</operator><name>getRevision</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></while>
                <expr_stmt><expr><name>stopRevision</name> <operator>=</operator> <call><name><name>record</name><operator>.</operator><name>getRevision</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <finally>finally <block>{<block_content>
                <expr_stmt><expr><call><name><name>iterator</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></finally></try>
        </block_content>}</block></for> <finally>finally <block>{<block_content>
            <expr_stmt><expr><call><name><name>iterator</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally>
    
            <if_stmt><if>if <condition>(<expr><name>stopRevision</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>RecordConsumer</name></type> <name>consumer</name> <range>: <expr><call><name><name>consumers</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>setRevision</name></name><argument_list>(<argument><expr><name>stopRevision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Synchronized to revision: "</literal> <operator>+</operator> <name>stopRevision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <if_stmt><if>if <condition>(<expr><name>stopRevision</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>RecordConsumer</name></type> <name>consumer</name> <range>: <expr><call><name><name>consumers</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>setRevision</name></name><argument_list>(<argument><expr><name>stopRevision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>syncAgainOnNewRecords</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// changes detected, sync again</comment>
                    <expr_stmt><expr><name>startRevision</name> <operator>=</operator> <name>stopRevision</name></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Synchronized to revision: "</literal> <operator>+</operator> <name>stopRevision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
         </block_content>}</block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
    
    <comment type="block" format="javadoc">/**
     * Return a flag indicating whether synchronization should continue
     * in a loop until no more new records are found. Subclass overridable.
     * 
     * @return &lt;code&gt;true&lt;/code&gt; if synchronization should continue;
     *         &lt;code&gt;false&lt;/code&gt; otherwise
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>syncAgainOnNewRecords</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
      * Lock the journal revision, disallowing changes from other sources until
diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/ClusterSyncTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/ClusterSyncTest.java
new file mode 100644
index 000000000..83fbfa8ad
-- /dev/null
++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/ClusterSyncTest.java
@@ -0,0 +1,207 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>cluster</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>cluster</name><operator>.</operator><name>SimpleEventListener</name><operator>.</operator><name>LockEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>config</name><operator>.</operator><name>ClusterConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>id</name><operator>.</operator><name>NodeId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>journal</name><operator>.</operator><name>Journal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>journal</name><operator>.</operator><name>JournalFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>journal</name><operator>.</operator><name>MemoryJournal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>journal</name><operator>.</operator><name>Record</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>journal</name><operator>.</operator><name>RecordConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>journal</name><operator>.</operator><name>MemoryJournal</name><operator>.</operator><name>MemoryRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>namespace</name><operator>.</operator><name>NamespaceResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>test</name><operator>.</operator><name>JUnitTest</name></name>;</import>

<import>import <name><name>EDU</name><operator>.</operator><name>oswego</name><operator>.</operator><name>cs</name><operator>.</operator><name>dl</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Latch</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Test cases for cluster synchronization.
 */</comment>
<class><specifier>public</specifier> class <name>ClusterSyncTest</name> <super_list><extends>extends <super><name>JUnitTest</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/** Defaut workspace name. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_WORKSPACE</name> <init>= <expr><literal type="string">"default"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Default sync delay: 5 seconds. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>SYNC_DELAY</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Master node. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ClusterNode</name></type> <name>master</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Slave node. */</comment>
    <comment type="block">/* avoid synthetic accessor */</comment> <decl_stmt><decl><type><name>ClusterNode</name></type> <name>slave</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Records shared among multiple memory journals. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>MemoryRecord</name></argument>&gt;</argument_list></name></type> <name>records</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>MemoryRecord</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>master</name> <operator>=</operator> <call><name>createClusterNode</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>master</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>slave</name> <operator>=</operator> <call><name>createClusterNode</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>slave</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>slave</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>slave</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>master</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>master</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Verify that sync() on a cluster node will continue fetching results until no more
     * changes are detected. 
     * 
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSyncAllChanges</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// create channel on master and slave</comment>
        <decl_stmt><decl><type><name>LockEventChannel</name></type> <name>channel</name> <init>= <expr><call><name><name>master</name><operator>.</operator><name>createLockChannel</name></name><argument_list>(<argument><expr><name>DEFAULT_WORKSPACE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>slave</name><operator>.</operator><name>createLockChannel</name></name><argument_list>(<argument><expr><name>DEFAULT_WORKSPACE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setListener</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SimpleEventListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// add blocking consumer to slave, this will block on the first non-empty sync()</comment>
        <decl_stmt><decl><type><name>BlockingConsumer</name></type> <name>consumer</name> <init>= <expr><operator>new</operator> <call><name>BlockingConsumer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>slave</name><operator>.</operator><name>getJournal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>register</name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// add first entry</comment>
        <decl_stmt><decl><type><name>LockEvent</name></type> <name>event</name> <init>= <expr><operator>new</operator> <call><name>LockEvent</name><argument_list>(<argument><expr><call><name><name>NodeId</name><operator>.</operator><name>randomId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"admin"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>channel</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>isDeep</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>ended</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// start a manual sync on the slave and ...</comment>
        <decl_stmt><decl><type><name>Thread</name></type> <name>syncOnce</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>slave</name><operator>.</operator><name>sync</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClusterException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <comment type="block">/* ignore */</comment>
                </block_content>}</block></catch></try>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>syncOnce</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ... wait until it blocks</comment>
        <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>waitUntilBlocked</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// add second entry</comment>
        <expr_stmt><expr><name>event</name> <operator>=</operator> <operator>new</operator> <call><name>LockEvent</name><argument_list>(<argument><expr><call><name><name>NodeId</name><operator>.</operator><name>randomId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"admin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>channel</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>isDeep</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getUserId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>ended</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// now unblock slave</comment>
        <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>unblock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// wait for the sync to finish</comment>
        <expr_stmt><expr><call><name><name>syncOnce</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>master</name><operator>.</operator><name>getRevision</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>slave</name><operator>.</operator><name>getRevision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a cluster node, with a memory journal referencing a list of records.
     *
     * @param id cluster node id
     * @param records memory journal's list of records
     * @param disableAutoSync if &lt;code&gt;true&lt;/code&gt; background synchronization is disabled
     */</comment>
    <function><type><specifier>private</specifier> <name>ClusterNode</name></type> <name>createClusterNode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>disableAutoSync</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>MemoryJournal</name></type> <name>journal</name> <init>= <expr><operator>new</operator> <class><super><name>MemoryJournal</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>syncAgainOnNewRecords</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JournalFactory</name></type> <name>jf</name> <init>= <expr><operator>new</operator> <class><super><name>JournalFactory</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>Journal</name></type> <name>getJournal</name><parameter_list>(<parameter><decl><type><name>NamespaceResolver</name></type> <name>resolver</name></decl></parameter>)</parameter_list>
                    <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
                <return>return <expr><name>journal</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClusterConfig</name></type> <name>cc</name> <init>= <expr><operator>new</operator> <call><name>ClusterConfig</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>SYNC_DELAY</name></expr></argument>, <argument><expr><name>jf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SimpleClusterContext</name></type> <name>context</name> <init>= <expr><operator>new</operator> <call><name>SimpleClusterContext</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>journal</name><operator>.</operator><name>setRepositoryHome</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getRepositoryHome</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>journal</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getNamespaceResolver</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>journal</name><operator>.</operator><name>setRecords</name></name><argument_list>(<argument><expr><name>records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>ClusterNode</name></type> <name>clusterNode</name> <init>= <expr><operator>new</operator> <call><name>ClusterNode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clusterNode</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>disableAutoSync</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>clusterNode</name><operator>.</operator><name>disableAutoSync</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>clusterNode</name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Custom consumer that will block inside the journal's sync() method
     * until it is unblocked.
     */</comment>
    <class><specifier>static</specifier> class <name>BlockingConsumer</name> <super_list><implements>implements <super><name>RecordConsumer</name></super></implements></super_list> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Latch</name></type> <name>blockLatch</name> <init>= <expr><operator>new</operator> <call><name>Latch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Latch</name></type> <name>unblockLatch</name> <init>= <expr><operator>new</operator> <call><name>Latch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>revision</name></decl>;</decl_stmt>
        
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="string">"CUSTOM"</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>getRevision</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>revision</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>consume</name><parameter_list>(<parameter><decl><type><name>Record</name></type> <name>record</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="block">/* nothing to be done here */</comment>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setRevision</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>revision</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>blockLatch</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>unblockLatch</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="block">/* ignore */</comment>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>revision</name></name> <operator>=</operator> <name>revision</name></expr>;</expr_stmt>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>void</name></type> <name>waitUntilBlocked</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
            <expr_stmt><expr><call><name><name>blockLatch</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>void</name></type> <name>unblock</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>unblockLatch</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>da45f3719</name><operator>..</operator><literal type="number">2034dba58</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>cluster</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>TestCase</name> <block>{
         <expr><name>TestSuite</name> <name>suite</name> <operator>=</operator> <operator>new</operator> <call><name>TestSuite</name><argument_list>()</argument_list></call></expr>;
 
         <call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>ClusterRecordTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>ClusterSyncTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>DbClusterTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <return>return <expr><name>suite</name></expr>;</return>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></catch></try></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></while></block_content></block></try></block_content></block></function>

</unit>
