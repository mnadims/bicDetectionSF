<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/65e4aae32.java"><expr_stmt><expr><name>From</name> <literal type="number">65e4aae32c772409164415aecf3d5c9a177e030c</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Felix</name> <name><name>Meschberger</name> <argument_list type="generic">&lt;<argument><name>fmeschbe</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">30</literal> <name>Jun</name> <literal type="number">2006</literal> <literal type="number">18</literal><operator>:</operator><literal type="number">30</literal><operator>:</operator><literal type="number">55</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">367</literal> <operator>-</operator> <name>Remove</name> <name>dependency</name> <name>on</name> <name>Xerces</name>    <name>Part</name> <literal type="number">1</literal><operator>:</operator> <name>XMLChar</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@418356 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name><name>LocalNamespaceMappings</name><operator>.</operator><name>java</name></name>          <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name><name>NamespaceRegistryImpl</name><operator>.</operator><name>java</name></name>           <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>name</name><operator>/</operator><name><name>Path</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>name</name><operator>/</operator><name><name>QName</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ISO9075</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">1</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>XMLChar</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">681</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>test</name><operator>/</operator><name>api</name><operator>/</operator><name><name>EscapeJCRUtil</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ISO9075Test</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">1</literal> <operator>-</operator>
 <literal type="number">9</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">689</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">9</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>XMLChar</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>LocalNamespaceMappings</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>LocalNamespaceMappings</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1f16dc6e0</literal><operator>..</operator><literal type="number">0879180aa</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>LocalNamespaceMappings</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>LocalNamespaceMappings</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>UnknownPrefixException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>NoPrefixDeclaredException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>AbstractNamespaceResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>NamespaceListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>xerces</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NamespaceRegistryImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NamespaceRegistryImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9f30d094b</literal><operator>..</operator><literal type="number">7d4a8b36d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NamespaceRegistryImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>NamespaceRegistryImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>AbstractNamespaceResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>IllegalNameException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>UnknownPrefixException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>NoPrefixDeclaredException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>xerces</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>AccessDeniedException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a066ef15c</name><operator>..</operator><literal type="number">6a6b89c23</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>Path</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>QName</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>UnknownPrefixException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>ISO8601</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Analyzer</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>index</name><operator>.</operator><name>Term</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>BooleanQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>Query</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>search</name><operator>.</operator><name>TermQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>xerces</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PropertyType</name></name>;</import>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>name</name><operator>/</operator><name><name>Path</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>name</name><operator>/</operator><name><name>Path</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9cd5903f8</literal><operator>..</operator><name>d458b0537</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>name</name><operator>/</operator><name><name>Path</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>name</name><operator>/</operator><name><name>Path</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>xerces</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>PathNotFoundException</name></name>;</import>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>name</name><operator>/</operator><name><name>QName</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>name</name><operator>/</operator><name><name>QName</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2fea52c9a</literal><operator>..</operator><literal type="number">2a4ce9852</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>name</name><operator>/</operator><name><name>QName</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>name</name><operator>/</operator><name><name>QName</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>xerces</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>

 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NamespaceException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ISO9075</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ISO9075</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a89401e9d</name><operator>..</operator><literal type="number">5fa16ccb6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ISO9075</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ISO9075</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>xerces</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>QName</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>XMLChar</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>XMLChar</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..12cdaeb25</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>util</name><operator>/</operator><name><name>XMLChar</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">681</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * &lt;http://www.apache.org/&gt;.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name></name>;</package>

<comment type="block" format="javadoc">/**
 * This class defines the basic XML character properties. The data
 * in this class can be used to verify that a character is a valid
 * XML character or if the character is a space, name start, or name
 * character.
 * &lt;p&gt;
 * A series of convenience methods are supplied to ease the burden
 * of the developer. Because inlining the checks can improve per
 * character performance, the tables of character properties are
 * public. Using the character as an index into the &lt;code&gt;CHARS&lt;/code&gt;
 * array and applying the appropriate mask flag (e.g.
 * &lt;code&gt;MASK_VALID&lt;/code&gt;), yields the same results as calling the
 * convenience methods. There is one exception: check the comments
 * for the &lt;code&gt;isValid&lt;/code&gt; method for details.
 *
 * @author Glenn Marcy, IBM
 * @author Andy Clark, IBM
 * @author Eric Ye, IBM
 * @author Arnaud  Le Hors, IBM
 * @author Rahul Srivastava, Sun Microsystems Inc.
 *
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>XMLChar</name> <block>{

    <comment type="line">//</comment>
    <comment type="line">// Constants</comment>
    <comment type="line">//</comment>

    <comment type="block" format="javadoc">/** Character flags. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>CHARS</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Valid character mask. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MASK_VALID</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Space character mask. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MASK_SPACE</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Name start character mask. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MASK_NAME_START</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Name character mask. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MASK_NAME</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Pubid character mask. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MASK_PUBID</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Content character mask. Special characters are those that can
     * be considered the start of markup, such as '&amp;lt;' and '&amp;amp;'.
     * The various newline characters are considered special as well.
     * All other valid XML characters can be considered content.
     * &lt;p&gt;
     * This is an optimization for the inner loop of character scanning.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MASK_CONTENT</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** NCName start character mask. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MASK_NCNAME_START</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** NCName character mask. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MASK_NCNAME</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Static initialization</comment>
    <comment type="line">//</comment>

    <static>static <block>{<block_content>

        <comment type="line">//</comment>
        <comment type="line">// [2] Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] |</comment>
        <comment type="line">//              [#xE000-#xFFFD] | [#x10000-#x10FFFF]</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>int</name></type> <name><name>charRange</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x0009</literal></expr>, <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">0xD7FF</literal></expr>, <expr><literal type="number">0xE000</literal></expr>, <expr><literal type="number">0xFFFD</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// [3] S ::= (#x20 | #x9 | #xD | #xA)+</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>int</name></type> <name><name>spaceChar</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">0x0009</literal></expr>, <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">0x000A</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// [4] NameChar ::= Letter | Digit | '.' | '-' | '_' | ':' |</comment>
        <comment type="line">//                  CombiningChar | Extender</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>int</name></type> <name><name>nameChar</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x002D</literal></expr>, <expr><literal type="number">0x002E</literal></expr>, <comment type="line">// '-' and '.'</comment>
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// [5] Name ::= (Letter | '_' | ':') (NameChar)*</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>int</name></type> <name><name>nameStartChar</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x003A</literal></expr>, <expr><literal type="number">0x005F</literal></expr>, <comment type="line">// ':' and '_'</comment>
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// [13] PubidChar ::= #x20 | 0xD | 0xA | [a-zA-Z0-9] | [-'()+,./:=?;!*#@$_%]</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>int</name></type> <name><name>pubidChar</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">0x000D</literal></expr>, <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">0x0021</literal></expr>, <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">0x0025</literal></expr>, <expr><literal type="number">0x003D</literal></expr>,
            <expr><literal type="number">0x005F</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name><name>pubidRange</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x0027</literal></expr>, <expr><literal type="number">0x003B</literal></expr>, <expr><literal type="number">0x003F</literal></expr>, <expr><literal type="number">0x005A</literal></expr>, <expr><literal type="number">0x0061</literal></expr>, <expr><literal type="number">0x007A</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// [84] Letter ::= BaseChar | Ideographic</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>int</name></type> <name><name>letterRange</name><index>[]</index></name> <init>= <expr><block>{
            <comment type="line">// BaseChar</comment>
            <expr><literal type="number">0x0041</literal></expr>, <expr><literal type="number">0x005A</literal></expr>, <expr><literal type="number">0x0061</literal></expr>, <expr><literal type="number">0x007A</literal></expr>, <expr><literal type="number">0x00C0</literal></expr>, <expr><literal type="number">0x00D6</literal></expr>, <expr><literal type="number">0x00D8</literal></expr>, <expr><literal type="number">0x00F6</literal></expr>,
            <expr><literal type="number">0x00F8</literal></expr>, <expr><literal type="number">0x0131</literal></expr>, <expr><literal type="number">0x0134</literal></expr>, <expr><literal type="number">0x013E</literal></expr>, <expr><literal type="number">0x0141</literal></expr>, <expr><literal type="number">0x0148</literal></expr>, <expr><literal type="number">0x014A</literal></expr>, <expr><literal type="number">0x017E</literal></expr>,
            <expr><literal type="number">0x0180</literal></expr>, <expr><literal type="number">0x01C3</literal></expr>, <expr><literal type="number">0x01CD</literal></expr>, <expr><literal type="number">0x01F0</literal></expr>, <expr><literal type="number">0x01F4</literal></expr>, <expr><literal type="number">0x01F5</literal></expr>, <expr><literal type="number">0x01FA</literal></expr>, <expr><literal type="number">0x0217</literal></expr>,
            <expr><literal type="number">0x0250</literal></expr>, <expr><literal type="number">0x02A8</literal></expr>, <expr><literal type="number">0x02BB</literal></expr>, <expr><literal type="number">0x02C1</literal></expr>, <expr><literal type="number">0x0388</literal></expr>, <expr><literal type="number">0x038A</literal></expr>, <expr><literal type="number">0x038E</literal></expr>, <expr><literal type="number">0x03A1</literal></expr>,
            <expr><literal type="number">0x03A3</literal></expr>, <expr><literal type="number">0x03CE</literal></expr>, <expr><literal type="number">0x03D0</literal></expr>, <expr><literal type="number">0x03D6</literal></expr>, <expr><literal type="number">0x03E2</literal></expr>, <expr><literal type="number">0x03F3</literal></expr>, <expr><literal type="number">0x0401</literal></expr>, <expr><literal type="number">0x040C</literal></expr>,
            <expr><literal type="number">0x040E</literal></expr>, <expr><literal type="number">0x044F</literal></expr>, <expr><literal type="number">0x0451</literal></expr>, <expr><literal type="number">0x045C</literal></expr>, <expr><literal type="number">0x045E</literal></expr>, <expr><literal type="number">0x0481</literal></expr>, <expr><literal type="number">0x0490</literal></expr>, <expr><literal type="number">0x04C4</literal></expr>,
            <expr><literal type="number">0x04C7</literal></expr>, <expr><literal type="number">0x04C8</literal></expr>, <expr><literal type="number">0x04CB</literal></expr>, <expr><literal type="number">0x04CC</literal></expr>, <expr><literal type="number">0x04D0</literal></expr>, <expr><literal type="number">0x04EB</literal></expr>, <expr><literal type="number">0x04EE</literal></expr>, <expr><literal type="number">0x04F5</literal></expr>,
            <expr><literal type="number">0x04F8</literal></expr>, <expr><literal type="number">0x04F9</literal></expr>, <expr><literal type="number">0x0531</literal></expr>, <expr><literal type="number">0x0556</literal></expr>, <expr><literal type="number">0x0561</literal></expr>, <expr><literal type="number">0x0586</literal></expr>, <expr><literal type="number">0x05D0</literal></expr>, <expr><literal type="number">0x05EA</literal></expr>,
            <expr><literal type="number">0x05F0</literal></expr>, <expr><literal type="number">0x05F2</literal></expr>, <expr><literal type="number">0x0621</literal></expr>, <expr><literal type="number">0x063A</literal></expr>, <expr><literal type="number">0x0641</literal></expr>, <expr><literal type="number">0x064A</literal></expr>, <expr><literal type="number">0x0671</literal></expr>, <expr><literal type="number">0x06B7</literal></expr>,
            <expr><literal type="number">0x06BA</literal></expr>, <expr><literal type="number">0x06BE</literal></expr>, <expr><literal type="number">0x06C0</literal></expr>, <expr><literal type="number">0x06CE</literal></expr>, <expr><literal type="number">0x06D0</literal></expr>, <expr><literal type="number">0x06D3</literal></expr>, <expr><literal type="number">0x06E5</literal></expr>, <expr><literal type="number">0x06E6</literal></expr>,
            <expr><literal type="number">0x0905</literal></expr>, <expr><literal type="number">0x0939</literal></expr>, <expr><literal type="number">0x0958</literal></expr>, <expr><literal type="number">0x0961</literal></expr>, <expr><literal type="number">0x0985</literal></expr>, <expr><literal type="number">0x098C</literal></expr>, <expr><literal type="number">0x098F</literal></expr>, <expr><literal type="number">0x0990</literal></expr>,
            <expr><literal type="number">0x0993</literal></expr>, <expr><literal type="number">0x09A8</literal></expr>, <expr><literal type="number">0x09AA</literal></expr>, <expr><literal type="number">0x09B0</literal></expr>, <expr><literal type="number">0x09B6</literal></expr>, <expr><literal type="number">0x09B9</literal></expr>, <expr><literal type="number">0x09DC</literal></expr>, <expr><literal type="number">0x09DD</literal></expr>,
            <expr><literal type="number">0x09DF</literal></expr>, <expr><literal type="number">0x09E1</literal></expr>, <expr><literal type="number">0x09F0</literal></expr>, <expr><literal type="number">0x09F1</literal></expr>, <expr><literal type="number">0x0A05</literal></expr>, <expr><literal type="number">0x0A0A</literal></expr>, <expr><literal type="number">0x0A0F</literal></expr>, <expr><literal type="number">0x0A10</literal></expr>,
            <expr><literal type="number">0x0A13</literal></expr>, <expr><literal type="number">0x0A28</literal></expr>, <expr><literal type="number">0x0A2A</literal></expr>, <expr><literal type="number">0x0A30</literal></expr>, <expr><literal type="number">0x0A32</literal></expr>, <expr><literal type="number">0x0A33</literal></expr>, <expr><literal type="number">0x0A35</literal></expr>, <expr><literal type="number">0x0A36</literal></expr>,
            <expr><literal type="number">0x0A38</literal></expr>, <expr><literal type="number">0x0A39</literal></expr>, <expr><literal type="number">0x0A59</literal></expr>, <expr><literal type="number">0x0A5C</literal></expr>, <expr><literal type="number">0x0A72</literal></expr>, <expr><literal type="number">0x0A74</literal></expr>, <expr><literal type="number">0x0A85</literal></expr>, <expr><literal type="number">0x0A8B</literal></expr>,
            <expr><literal type="number">0x0A8F</literal></expr>, <expr><literal type="number">0x0A91</literal></expr>, <expr><literal type="number">0x0A93</literal></expr>, <expr><literal type="number">0x0AA8</literal></expr>, <expr><literal type="number">0x0AAA</literal></expr>, <expr><literal type="number">0x0AB0</literal></expr>, <expr><literal type="number">0x0AB2</literal></expr>, <expr><literal type="number">0x0AB3</literal></expr>,
            <expr><literal type="number">0x0AB5</literal></expr>, <expr><literal type="number">0x0AB9</literal></expr>, <expr><literal type="number">0x0B05</literal></expr>, <expr><literal type="number">0x0B0C</literal></expr>, <expr><literal type="number">0x0B0F</literal></expr>, <expr><literal type="number">0x0B10</literal></expr>, <expr><literal type="number">0x0B13</literal></expr>, <expr><literal type="number">0x0B28</literal></expr>,
            <expr><literal type="number">0x0B2A</literal></expr>, <expr><literal type="number">0x0B30</literal></expr>, <expr><literal type="number">0x0B32</literal></expr>, <expr><literal type="number">0x0B33</literal></expr>, <expr><literal type="number">0x0B36</literal></expr>, <expr><literal type="number">0x0B39</literal></expr>, <expr><literal type="number">0x0B5C</literal></expr>, <expr><literal type="number">0x0B5D</literal></expr>,
            <expr><literal type="number">0x0B5F</literal></expr>, <expr><literal type="number">0x0B61</literal></expr>, <expr><literal type="number">0x0B85</literal></expr>, <expr><literal type="number">0x0B8A</literal></expr>, <expr><literal type="number">0x0B8E</literal></expr>, <expr><literal type="number">0x0B90</literal></expr>, <expr><literal type="number">0x0B92</literal></expr>, <expr><literal type="number">0x0B95</literal></expr>,
            <expr><literal type="number">0x0B99</literal></expr>, <expr><literal type="number">0x0B9A</literal></expr>, <expr><literal type="number">0x0B9E</literal></expr>, <expr><literal type="number">0x0B9F</literal></expr>, <expr><literal type="number">0x0BA3</literal></expr>, <expr><literal type="number">0x0BA4</literal></expr>, <expr><literal type="number">0x0BA8</literal></expr>, <expr><literal type="number">0x0BAA</literal></expr>,
            <expr><literal type="number">0x0BAE</literal></expr>, <expr><literal type="number">0x0BB5</literal></expr>, <expr><literal type="number">0x0BB7</literal></expr>, <expr><literal type="number">0x0BB9</literal></expr>, <expr><literal type="number">0x0C05</literal></expr>, <expr><literal type="number">0x0C0C</literal></expr>, <expr><literal type="number">0x0C0E</literal></expr>, <expr><literal type="number">0x0C10</literal></expr>,
            <expr><literal type="number">0x0C12</literal></expr>, <expr><literal type="number">0x0C28</literal></expr>, <expr><literal type="number">0x0C2A</literal></expr>, <expr><literal type="number">0x0C33</literal></expr>, <expr><literal type="number">0x0C35</literal></expr>, <expr><literal type="number">0x0C39</literal></expr>, <expr><literal type="number">0x0C60</literal></expr>, <expr><literal type="number">0x0C61</literal></expr>,
            <expr><literal type="number">0x0C85</literal></expr>, <expr><literal type="number">0x0C8C</literal></expr>, <expr><literal type="number">0x0C8E</literal></expr>, <expr><literal type="number">0x0C90</literal></expr>, <expr><literal type="number">0x0C92</literal></expr>, <expr><literal type="number">0x0CA8</literal></expr>, <expr><literal type="number">0x0CAA</literal></expr>, <expr><literal type="number">0x0CB3</literal></expr>,
            <expr><literal type="number">0x0CB5</literal></expr>, <expr><literal type="number">0x0CB9</literal></expr>, <expr><literal type="number">0x0CE0</literal></expr>, <expr><literal type="number">0x0CE1</literal></expr>, <expr><literal type="number">0x0D05</literal></expr>, <expr><literal type="number">0x0D0C</literal></expr>, <expr><literal type="number">0x0D0E</literal></expr>, <expr><literal type="number">0x0D10</literal></expr>,
            <expr><literal type="number">0x0D12</literal></expr>, <expr><literal type="number">0x0D28</literal></expr>, <expr><literal type="number">0x0D2A</literal></expr>, <expr><literal type="number">0x0D39</literal></expr>, <expr><literal type="number">0x0D60</literal></expr>, <expr><literal type="number">0x0D61</literal></expr>, <expr><literal type="number">0x0E01</literal></expr>, <expr><literal type="number">0x0E2E</literal></expr>,
            <expr><literal type="number">0x0E32</literal></expr>, <expr><literal type="number">0x0E33</literal></expr>, <expr><literal type="number">0x0E40</literal></expr>, <expr><literal type="number">0x0E45</literal></expr>, <expr><literal type="number">0x0E81</literal></expr>, <expr><literal type="number">0x0E82</literal></expr>, <expr><literal type="number">0x0E87</literal></expr>, <expr><literal type="number">0x0E88</literal></expr>,
            <expr><literal type="number">0x0E94</literal></expr>, <expr><literal type="number">0x0E97</literal></expr>, <expr><literal type="number">0x0E99</literal></expr>, <expr><literal type="number">0x0E9F</literal></expr>, <expr><literal type="number">0x0EA1</literal></expr>, <expr><literal type="number">0x0EA3</literal></expr>, <expr><literal type="number">0x0EAA</literal></expr>, <expr><literal type="number">0x0EAB</literal></expr>,
            <expr><literal type="number">0x0EAD</literal></expr>, <expr><literal type="number">0x0EAE</literal></expr>, <expr><literal type="number">0x0EB2</literal></expr>, <expr><literal type="number">0x0EB3</literal></expr>, <expr><literal type="number">0x0EC0</literal></expr>, <expr><literal type="number">0x0EC4</literal></expr>, <expr><literal type="number">0x0F40</literal></expr>, <expr><literal type="number">0x0F47</literal></expr>,
            <expr><literal type="number">0x0F49</literal></expr>, <expr><literal type="number">0x0F69</literal></expr>, <expr><literal type="number">0x10A0</literal></expr>, <expr><literal type="number">0x10C5</literal></expr>, <expr><literal type="number">0x10D0</literal></expr>, <expr><literal type="number">0x10F6</literal></expr>, <expr><literal type="number">0x1102</literal></expr>, <expr><literal type="number">0x1103</literal></expr>,
            <expr><literal type="number">0x1105</literal></expr>, <expr><literal type="number">0x1107</literal></expr>, <expr><literal type="number">0x110B</literal></expr>, <expr><literal type="number">0x110C</literal></expr>, <expr><literal type="number">0x110E</literal></expr>, <expr><literal type="number">0x1112</literal></expr>, <expr><literal type="number">0x1154</literal></expr>, <expr><literal type="number">0x1155</literal></expr>,
            <expr><literal type="number">0x115F</literal></expr>, <expr><literal type="number">0x1161</literal></expr>, <expr><literal type="number">0x116D</literal></expr>, <expr><literal type="number">0x116E</literal></expr>, <expr><literal type="number">0x1172</literal></expr>, <expr><literal type="number">0x1173</literal></expr>, <expr><literal type="number">0x11AE</literal></expr>, <expr><literal type="number">0x11AF</literal></expr>,
            <expr><literal type="number">0x11B7</literal></expr>, <expr><literal type="number">0x11B8</literal></expr>, <expr><literal type="number">0x11BC</literal></expr>, <expr><literal type="number">0x11C2</literal></expr>, <expr><literal type="number">0x1E00</literal></expr>, <expr><literal type="number">0x1E9B</literal></expr>, <expr><literal type="number">0x1EA0</literal></expr>, <expr><literal type="number">0x1EF9</literal></expr>,
            <expr><literal type="number">0x1F00</literal></expr>, <expr><literal type="number">0x1F15</literal></expr>, <expr><literal type="number">0x1F18</literal></expr>, <expr><literal type="number">0x1F1D</literal></expr>, <expr><literal type="number">0x1F20</literal></expr>, <expr><literal type="number">0x1F45</literal></expr>, <expr><literal type="number">0x1F48</literal></expr>, <expr><literal type="number">0x1F4D</literal></expr>,
            <expr><literal type="number">0x1F50</literal></expr>, <expr><literal type="number">0x1F57</literal></expr>, <expr><literal type="number">0x1F5F</literal></expr>, <expr><literal type="number">0x1F7D</literal></expr>, <expr><literal type="number">0x1F80</literal></expr>, <expr><literal type="number">0x1FB4</literal></expr>, <expr><literal type="number">0x1FB6</literal></expr>, <expr><literal type="number">0x1FBC</literal></expr>,
            <expr><literal type="number">0x1FC2</literal></expr>, <expr><literal type="number">0x1FC4</literal></expr>, <expr><literal type="number">0x1FC6</literal></expr>, <expr><literal type="number">0x1FCC</literal></expr>, <expr><literal type="number">0x1FD0</literal></expr>, <expr><literal type="number">0x1FD3</literal></expr>, <expr><literal type="number">0x1FD6</literal></expr>, <expr><literal type="number">0x1FDB</literal></expr>,
            <expr><literal type="number">0x1FE0</literal></expr>, <expr><literal type="number">0x1FEC</literal></expr>, <expr><literal type="number">0x1FF2</literal></expr>, <expr><literal type="number">0x1FF4</literal></expr>, <expr><literal type="number">0x1FF6</literal></expr>, <expr><literal type="number">0x1FFC</literal></expr>, <expr><literal type="number">0x212A</literal></expr>, <expr><literal type="number">0x212B</literal></expr>,
            <expr><literal type="number">0x2180</literal></expr>, <expr><literal type="number">0x2182</literal></expr>, <expr><literal type="number">0x3041</literal></expr>, <expr><literal type="number">0x3094</literal></expr>, <expr><literal type="number">0x30A1</literal></expr>, <expr><literal type="number">0x30FA</literal></expr>, <expr><literal type="number">0x3105</literal></expr>, <expr><literal type="number">0x312C</literal></expr>,
            <expr><literal type="number">0xAC00</literal></expr>, <expr><literal type="number">0xD7A3</literal></expr>,
            <comment type="line">// Ideographic</comment>
            <expr><literal type="number">0x3021</literal></expr>, <expr><literal type="number">0x3029</literal></expr>, <expr><literal type="number">0x4E00</literal></expr>, <expr><literal type="number">0x9FA5</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>letterChar</name><index>[]</index></name> <init>= <expr><block>{
            <comment type="line">// BaseChar</comment>
            <expr><literal type="number">0x0386</literal></expr>, <expr><literal type="number">0x038C</literal></expr>, <expr><literal type="number">0x03DA</literal></expr>, <expr><literal type="number">0x03DC</literal></expr>, <expr><literal type="number">0x03DE</literal></expr>, <expr><literal type="number">0x03E0</literal></expr>, <expr><literal type="number">0x0559</literal></expr>, <expr><literal type="number">0x06D5</literal></expr>,
            <expr><literal type="number">0x093D</literal></expr>, <expr><literal type="number">0x09B2</literal></expr>, <expr><literal type="number">0x0A5E</literal></expr>, <expr><literal type="number">0x0A8D</literal></expr>, <expr><literal type="number">0x0ABD</literal></expr>, <expr><literal type="number">0x0AE0</literal></expr>, <expr><literal type="number">0x0B3D</literal></expr>, <expr><literal type="number">0x0B9C</literal></expr>,
            <expr><literal type="number">0x0CDE</literal></expr>, <expr><literal type="number">0x0E30</literal></expr>, <expr><literal type="number">0x0E84</literal></expr>, <expr><literal type="number">0x0E8A</literal></expr>, <expr><literal type="number">0x0E8D</literal></expr>, <expr><literal type="number">0x0EA5</literal></expr>, <expr><literal type="number">0x0EA7</literal></expr>, <expr><literal type="number">0x0EB0</literal></expr>,
            <expr><literal type="number">0x0EBD</literal></expr>, <expr><literal type="number">0x1100</literal></expr>, <expr><literal type="number">0x1109</literal></expr>, <expr><literal type="number">0x113C</literal></expr>, <expr><literal type="number">0x113E</literal></expr>, <expr><literal type="number">0x1140</literal></expr>, <expr><literal type="number">0x114C</literal></expr>, <expr><literal type="number">0x114E</literal></expr>,
            <expr><literal type="number">0x1150</literal></expr>, <expr><literal type="number">0x1159</literal></expr>, <expr><literal type="number">0x1163</literal></expr>, <expr><literal type="number">0x1165</literal></expr>, <expr><literal type="number">0x1167</literal></expr>, <expr><literal type="number">0x1169</literal></expr>, <expr><literal type="number">0x1175</literal></expr>, <expr><literal type="number">0x119E</literal></expr>,
            <expr><literal type="number">0x11A8</literal></expr>, <expr><literal type="number">0x11AB</literal></expr>, <expr><literal type="number">0x11BA</literal></expr>, <expr><literal type="number">0x11EB</literal></expr>, <expr><literal type="number">0x11F0</literal></expr>, <expr><literal type="number">0x11F9</literal></expr>, <expr><literal type="number">0x1F59</literal></expr>, <expr><literal type="number">0x1F5B</literal></expr>,
            <expr><literal type="number">0x1F5D</literal></expr>, <expr><literal type="number">0x1FBE</literal></expr>, <expr><literal type="number">0x2126</literal></expr>, <expr><literal type="number">0x212E</literal></expr>,
            <comment type="line">// Ideographic</comment>
            <expr><literal type="number">0x3007</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// [87] CombiningChar ::= ...</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>int</name></type> <name><name>combiningCharRange</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x0300</literal></expr>, <expr><literal type="number">0x0345</literal></expr>, <expr><literal type="number">0x0360</literal></expr>, <expr><literal type="number">0x0361</literal></expr>, <expr><literal type="number">0x0483</literal></expr>, <expr><literal type="number">0x0486</literal></expr>, <expr><literal type="number">0x0591</literal></expr>, <expr><literal type="number">0x05A1</literal></expr>,
            <expr><literal type="number">0x05A3</literal></expr>, <expr><literal type="number">0x05B9</literal></expr>, <expr><literal type="number">0x05BB</literal></expr>, <expr><literal type="number">0x05BD</literal></expr>, <expr><literal type="number">0x05C1</literal></expr>, <expr><literal type="number">0x05C2</literal></expr>, <expr><literal type="number">0x064B</literal></expr>, <expr><literal type="number">0x0652</literal></expr>,
            <expr><literal type="number">0x06D6</literal></expr>, <expr><literal type="number">0x06DC</literal></expr>, <expr><literal type="number">0x06DD</literal></expr>, <expr><literal type="number">0x06DF</literal></expr>, <expr><literal type="number">0x06E0</literal></expr>, <expr><literal type="number">0x06E4</literal></expr>, <expr><literal type="number">0x06E7</literal></expr>, <expr><literal type="number">0x06E8</literal></expr>,
            <expr><literal type="number">0x06EA</literal></expr>, <expr><literal type="number">0x06ED</literal></expr>, <expr><literal type="number">0x0901</literal></expr>, <expr><literal type="number">0x0903</literal></expr>, <expr><literal type="number">0x093E</literal></expr>, <expr><literal type="number">0x094C</literal></expr>, <expr><literal type="number">0x0951</literal></expr>, <expr><literal type="number">0x0954</literal></expr>,
            <expr><literal type="number">0x0962</literal></expr>, <expr><literal type="number">0x0963</literal></expr>, <expr><literal type="number">0x0981</literal></expr>, <expr><literal type="number">0x0983</literal></expr>, <expr><literal type="number">0x09C0</literal></expr>, <expr><literal type="number">0x09C4</literal></expr>, <expr><literal type="number">0x09C7</literal></expr>, <expr><literal type="number">0x09C8</literal></expr>,
            <expr><literal type="number">0x09CB</literal></expr>, <expr><literal type="number">0x09CD</literal></expr>, <expr><literal type="number">0x09E2</literal></expr>, <expr><literal type="number">0x09E3</literal></expr>, <expr><literal type="number">0x0A40</literal></expr>, <expr><literal type="number">0x0A42</literal></expr>, <expr><literal type="number">0x0A47</literal></expr>, <expr><literal type="number">0x0A48</literal></expr>,
            <expr><literal type="number">0x0A4B</literal></expr>, <expr><literal type="number">0x0A4D</literal></expr>, <expr><literal type="number">0x0A70</literal></expr>, <expr><literal type="number">0x0A71</literal></expr>, <expr><literal type="number">0x0A81</literal></expr>, <expr><literal type="number">0x0A83</literal></expr>, <expr><literal type="number">0x0ABE</literal></expr>, <expr><literal type="number">0x0AC5</literal></expr>,
            <expr><literal type="number">0x0AC7</literal></expr>, <expr><literal type="number">0x0AC9</literal></expr>, <expr><literal type="number">0x0ACB</literal></expr>, <expr><literal type="number">0x0ACD</literal></expr>, <expr><literal type="number">0x0B01</literal></expr>, <expr><literal type="number">0x0B03</literal></expr>, <expr><literal type="number">0x0B3E</literal></expr>, <expr><literal type="number">0x0B43</literal></expr>,
            <expr><literal type="number">0x0B47</literal></expr>, <expr><literal type="number">0x0B48</literal></expr>, <expr><literal type="number">0x0B4B</literal></expr>, <expr><literal type="number">0x0B4D</literal></expr>, <expr><literal type="number">0x0B56</literal></expr>, <expr><literal type="number">0x0B57</literal></expr>, <expr><literal type="number">0x0B82</literal></expr>, <expr><literal type="number">0x0B83</literal></expr>,
            <expr><literal type="number">0x0BBE</literal></expr>, <expr><literal type="number">0x0BC2</literal></expr>, <expr><literal type="number">0x0BC6</literal></expr>, <expr><literal type="number">0x0BC8</literal></expr>, <expr><literal type="number">0x0BCA</literal></expr>, <expr><literal type="number">0x0BCD</literal></expr>, <expr><literal type="number">0x0C01</literal></expr>, <expr><literal type="number">0x0C03</literal></expr>,
            <expr><literal type="number">0x0C3E</literal></expr>, <expr><literal type="number">0x0C44</literal></expr>, <expr><literal type="number">0x0C46</literal></expr>, <expr><literal type="number">0x0C48</literal></expr>, <expr><literal type="number">0x0C4A</literal></expr>, <expr><literal type="number">0x0C4D</literal></expr>, <expr><literal type="number">0x0C55</literal></expr>, <expr><literal type="number">0x0C56</literal></expr>,
            <expr><literal type="number">0x0C82</literal></expr>, <expr><literal type="number">0x0C83</literal></expr>, <expr><literal type="number">0x0CBE</literal></expr>, <expr><literal type="number">0x0CC4</literal></expr>, <expr><literal type="number">0x0CC6</literal></expr>, <expr><literal type="number">0x0CC8</literal></expr>, <expr><literal type="number">0x0CCA</literal></expr>, <expr><literal type="number">0x0CCD</literal></expr>,
            <expr><literal type="number">0x0CD5</literal></expr>, <expr><literal type="number">0x0CD6</literal></expr>, <expr><literal type="number">0x0D02</literal></expr>, <expr><literal type="number">0x0D03</literal></expr>, <expr><literal type="number">0x0D3E</literal></expr>, <expr><literal type="number">0x0D43</literal></expr>, <expr><literal type="number">0x0D46</literal></expr>, <expr><literal type="number">0x0D48</literal></expr>,
            <expr><literal type="number">0x0D4A</literal></expr>, <expr><literal type="number">0x0D4D</literal></expr>, <expr><literal type="number">0x0E34</literal></expr>, <expr><literal type="number">0x0E3A</literal></expr>, <expr><literal type="number">0x0E47</literal></expr>, <expr><literal type="number">0x0E4E</literal></expr>, <expr><literal type="number">0x0EB4</literal></expr>, <expr><literal type="number">0x0EB9</literal></expr>,
            <expr><literal type="number">0x0EBB</literal></expr>, <expr><literal type="number">0x0EBC</literal></expr>, <expr><literal type="number">0x0EC8</literal></expr>, <expr><literal type="number">0x0ECD</literal></expr>, <expr><literal type="number">0x0F18</literal></expr>, <expr><literal type="number">0x0F19</literal></expr>, <expr><literal type="number">0x0F71</literal></expr>, <expr><literal type="number">0x0F84</literal></expr>,
            <expr><literal type="number">0x0F86</literal></expr>, <expr><literal type="number">0x0F8B</literal></expr>, <expr><literal type="number">0x0F90</literal></expr>, <expr><literal type="number">0x0F95</literal></expr>, <expr><literal type="number">0x0F99</literal></expr>, <expr><literal type="number">0x0FAD</literal></expr>, <expr><literal type="number">0x0FB1</literal></expr>, <expr><literal type="number">0x0FB7</literal></expr>,
            <expr><literal type="number">0x20D0</literal></expr>, <expr><literal type="number">0x20DC</literal></expr>, <expr><literal type="number">0x302A</literal></expr>, <expr><literal type="number">0x302F</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name><name>combiningCharChar</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x05BF</literal></expr>, <expr><literal type="number">0x05C4</literal></expr>, <expr><literal type="number">0x0670</literal></expr>, <expr><literal type="number">0x093C</literal></expr>, <expr><literal type="number">0x094D</literal></expr>, <expr><literal type="number">0x09BC</literal></expr>, <expr><literal type="number">0x09BE</literal></expr>, <expr><literal type="number">0x09BF</literal></expr>,
            <expr><literal type="number">0x09D7</literal></expr>, <expr><literal type="number">0x0A02</literal></expr>, <expr><literal type="number">0x0A3C</literal></expr>, <expr><literal type="number">0x0A3E</literal></expr>, <expr><literal type="number">0x0A3F</literal></expr>, <expr><literal type="number">0x0ABC</literal></expr>, <expr><literal type="number">0x0B3C</literal></expr>, <expr><literal type="number">0x0BD7</literal></expr>,
            <expr><literal type="number">0x0D57</literal></expr>, <expr><literal type="number">0x0E31</literal></expr>, <expr><literal type="number">0x0EB1</literal></expr>, <expr><literal type="number">0x0F35</literal></expr>, <expr><literal type="number">0x0F37</literal></expr>, <expr><literal type="number">0x0F39</literal></expr>, <expr><literal type="number">0x0F3E</literal></expr>, <expr><literal type="number">0x0F3F</literal></expr>,
            <expr><literal type="number">0x0F97</literal></expr>, <expr><literal type="number">0x0FB9</literal></expr>, <expr><literal type="number">0x20E1</literal></expr>, <expr><literal type="number">0x3099</literal></expr>, <expr><literal type="number">0x309A</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// [88] Digit ::= ...</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>int</name></type> <name><name>digitRange</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x0030</literal></expr>, <expr><literal type="number">0x0039</literal></expr>, <expr><literal type="number">0x0660</literal></expr>, <expr><literal type="number">0x0669</literal></expr>, <expr><literal type="number">0x06F0</literal></expr>, <expr><literal type="number">0x06F9</literal></expr>, <expr><literal type="number">0x0966</literal></expr>, <expr><literal type="number">0x096F</literal></expr>,
            <expr><literal type="number">0x09E6</literal></expr>, <expr><literal type="number">0x09EF</literal></expr>, <expr><literal type="number">0x0A66</literal></expr>, <expr><literal type="number">0x0A6F</literal></expr>, <expr><literal type="number">0x0AE6</literal></expr>, <expr><literal type="number">0x0AEF</literal></expr>, <expr><literal type="number">0x0B66</literal></expr>, <expr><literal type="number">0x0B6F</literal></expr>,
            <expr><literal type="number">0x0BE7</literal></expr>, <expr><literal type="number">0x0BEF</literal></expr>, <expr><literal type="number">0x0C66</literal></expr>, <expr><literal type="number">0x0C6F</literal></expr>, <expr><literal type="number">0x0CE6</literal></expr>, <expr><literal type="number">0x0CEF</literal></expr>, <expr><literal type="number">0x0D66</literal></expr>, <expr><literal type="number">0x0D6F</literal></expr>,
            <expr><literal type="number">0x0E50</literal></expr>, <expr><literal type="number">0x0E59</literal></expr>, <expr><literal type="number">0x0ED0</literal></expr>, <expr><literal type="number">0x0ED9</literal></expr>, <expr><literal type="number">0x0F20</literal></expr>, <expr><literal type="number">0x0F29</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// [89] Extender ::= ...</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>int</name></type> <name><name>extenderRange</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x3031</literal></expr>, <expr><literal type="number">0x3035</literal></expr>, <expr><literal type="number">0x309D</literal></expr>, <expr><literal type="number">0x309E</literal></expr>, <expr><literal type="number">0x30FC</literal></expr>, <expr><literal type="number">0x30FE</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name><name>extenderChar</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x00B7</literal></expr>, <expr><literal type="number">0x02D0</literal></expr>, <expr><literal type="number">0x02D1</literal></expr>, <expr><literal type="number">0x0387</literal></expr>, <expr><literal type="number">0x0640</literal></expr>, <expr><literal type="number">0x0E46</literal></expr>, <expr><literal type="number">0x0EC6</literal></expr>, <expr><literal type="number">0x3005</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// SpecialChar ::= '&lt;', '&amp;', '\n', '\r', ']'</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>int</name></type> <name><name>specialChar</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="char">'&lt;'</literal></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'\n'</literal></expr>, <expr><literal type="char">'\r'</literal></expr>, <expr><literal type="char">']'</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Initialize</comment>
        <comment type="line">//</comment>

        <comment type="line">// set valid characters</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>charRange</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>charRange</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>charRange</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <name>MASK_VALID</name> <operator>|</operator> <name>MASK_CONTENT</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <comment type="line">// remove special characters</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>specialChar</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name><name>specialChar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name><name>CHARS</name><index>[<expr><name><name>specialChar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><name>MASK_CONTENT</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// set space characters</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>spaceChar</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name><name>spaceChar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>|=</operator> <name>MASK_SPACE</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// set name start characters</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nameStartChar</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name><name>nameStartChar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>|=</operator> <name>MASK_NAME_START</name> <operator>|</operator> <name>MASK_NAME</name> <operator>|</operator>
                                       <name>MASK_NCNAME_START</name> <operator>|</operator> <name>MASK_NCNAME</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>letterRange</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>letterRange</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>letterRange</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <name>MASK_NAME_START</name> <operator>|</operator> <name>MASK_NAME</name> <operator>|</operator>
                            <name>MASK_NCNAME_START</name> <operator>|</operator> <name>MASK_NCNAME</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>letterChar</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name><name>letterChar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>|=</operator> <name>MASK_NAME_START</name> <operator>|</operator> <name>MASK_NAME</name> <operator>|</operator>
                                    <name>MASK_NCNAME_START</name> <operator>|</operator> <name>MASK_NCNAME</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// set name characters</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nameChar</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name><name>nameChar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>|=</operator> <name>MASK_NAME</name> <operator>|</operator> <name>MASK_NCNAME</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>digitRange</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>digitRange</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>digitRange</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <name>MASK_NAME</name> <operator>|</operator> <name>MASK_NCNAME</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>combiningCharRange</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>combiningCharRange</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>combiningCharRange</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <name>MASK_NAME</name> <operator>|</operator> <name>MASK_NCNAME</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>combiningCharChar</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name><name>combiningCharChar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>|=</operator> <name>MASK_NAME</name> <operator>|</operator> <name>MASK_NCNAME</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>extenderRange</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>extenderRange</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>extenderRange</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <name>MASK_NAME</name> <operator>|</operator> <name>MASK_NCNAME</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>extenderChar</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name><name>extenderChar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>|=</operator> <name>MASK_NAME</name> <operator>|</operator> <name>MASK_NCNAME</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// remove ':' from allowable MASK_NCNAME_START and MASK_NCNAME chars</comment>
        <expr_stmt><expr><name><name>CHARS</name><index>[<expr><literal type="char">':'</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>MASK_NCNAME_START</name> <operator>|</operator> <name>MASK_NCNAME</name><operator>)</operator></expr>;</expr_stmt>

        <comment type="line">// set Pubid characters</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pubidChar</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name><name>pubidChar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>|=</operator> <name>MASK_PUBID</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pubidRange</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>pubidRange</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>pubidRange</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>CHARS</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <name>MASK_PUBID</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

    </block_content>}</block></static> <comment type="line">// &lt;clinit&gt;()</comment>

    <comment type="line">//</comment>
    <comment type="line">// Public static methods</comment>
    <comment type="line">//</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified character is a supplemental character.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSupplemental</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x10FFFF</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true the supplemental character corresponding to the given
     * surrogates.
     *
     * @param h The high surrogate.
     * @param l The low surrogate.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>supplemental</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">0xD800</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x400</literal> <operator>+</operator> <operator>(</operator><name>l</name> <operator>-</operator> <literal type="number">0xDC00</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x10000</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the high surrogate of a supplemental character
     *
     * @param c The supplemental character to "split".
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name></type> <name>highSurrogate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">0x00010000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xD800</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the low surrogate of a supplemental character
     *
     * @param c The supplemental character to "split".
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name></type> <name>lowSurrogate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">0x00010000</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xDC00</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether the given character is a high surrogate
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isHighSurrogate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><literal type="number">0xD800</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xDBFF</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether the given character is a low surrogate
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isLowSurrogate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><literal type="number">0xDC00</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xDFFF</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Returns true if the specified character is valid. This method
     * also checks the surrogate character range from 0x10000 to 0x10FFFF.
     * &lt;p&gt;
     * If the program chooses to apply the mask directly to the
     * &lt;code&gt;CHARS&lt;/code&gt; array, then they are responsible for checking
     * the surrogate character range.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CHARS</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_VALID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
               <operator>(</operator><literal type="number">0x10000</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x10FFFF</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isValid(int):boolean</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified character is invalid.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isInvalid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name>isValid</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isInvalid(int):boolean</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified character can be considered content.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isContent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CHARS</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_CONTENT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
               <operator>(</operator><literal type="number">0x10000</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x10FFFF</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isContent(int):boolean</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified character can be considered markup.
     * Markup characters include '&amp;lt;', '&amp;amp;', and '%'.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isMarkup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'%'</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isMarkup(int):boolean</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified character is a space character
     * as defined by production [3] in the XML 1.0 specification.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSpace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CHARS</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_SPACE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isSpace(int):boolean</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified character is a valid name start
     * character as defined by production [5] in the XML 1.0
     * specification.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNameStart</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CHARS</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_NAME_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isNameStart(int):boolean</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified character is a valid name
     * character as defined by production [4] in the XML 1.0
     * specification.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CHARS</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_NAME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isName(int):boolean</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified character is a valid NCName start
     * character as defined by production [4] in Namespaces in XML
     * recommendation.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNCNameStart</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CHARS</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_NCNAME_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isNCNameStart(int):boolean</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified character is a valid NCName
     * character as defined by production [5] in Namespaces in XML
     * recommendation.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNCName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CHARS</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_NCNAME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isNCName(int):boolean</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified character is a valid Pubid
     * character as defined by production [13] in the XML 1.0
     * specification.
     *
     * @param c The character to check.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isPubid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>CHARS</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_PUBID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isPubid(int):boolean</comment>

    <comment type="block">/*
     * [5] Name ::= (Letter | '_' | ':') (NameChar)*
     */</comment>
    <comment type="block" format="javadoc">/**
     * Check to see if a string is a valid Name according to [5]
     * in the XML 1.0 Recommendation
     *
     * @param name string to check
     * @return true if name is a valid Name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>isNameStart</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><block type="pseudo"><block_content>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
           <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if<condition>( <expr><call><name>isName</name><argument_list>( <argument><expr><name>ch</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr> )</condition><block>{<block_content>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
           </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isValidName(String):boolean</comment>


    <comment type="block">/*
     * from the namespace rec
     * [4] NCName ::= (Letter | '_') (NCNameChar)*
     */</comment>
    <comment type="block" format="javadoc">/**
     * Check to see if a string is a valid NCName according to [4]
     * from the XML Namespaces 1.0 Recommendation
     *
     * @param name string to check
     * @return true if name is a valid NCName
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidNCName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ncName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>ncName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name><name>ncName</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>isNCNameStart</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><block type="pseudo"><block_content>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ncName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
           <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name><name>ncName</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if<condition>( <expr><call><name>isNCName</name><argument_list>( <argument><expr><name>ch</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr> )</condition><block>{<block_content>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
           </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isValidNCName(String):boolean</comment>

    <comment type="block">/*
     * [7] Nmtoken ::= (NameChar)+
     */</comment>
    <comment type="block" format="javadoc">/**
     * Check to see if a string is a valid Nmtoken according to [7]
     * in the XML 1.0 Recommendation
     *
     * @param nmtoken string to check
     * @return true if nmtoken is a valid Nmtoken
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidNmtoken</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>nmtoken</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>nmtoken</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nmtoken</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
           <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name><name>nmtoken</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <if_stmt><if>if<condition>(  <expr><operator>!</operator> <call><name>isName</name><argument_list>( <argument><expr><name>ch</name></expr></argument> )</argument_list></call></expr> )</condition><block>{<block_content>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
           </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isValidName(String):boolean</comment>





    <comment type="line">// encodings</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the encoding name is a valid IANA encoding.
     * This method does not verify that there is a decoder available
     * for this encoding, only that the characters are valid for an
     * IANA encoding name.
     *
     * @param ianaEncoding The IANA encoding name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidIANAEncoding</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ianaEncoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ianaEncoding</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>ianaEncoding</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>ianaEncoding</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>ianaEncoding</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="char">'A'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="char">'a'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                            <operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator>
                            <name>c</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
                            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isValidIANAEncoding(String):boolean</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the encoding name is a valid Java encoding.
     * This method does not verify that there is a decoder available
     * for this encoding, only that the characters are valid for an
     * Java encoding name.
     *
     * @param javaEncoding The Java encoding name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidJavaEncoding</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>javaEncoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>javaEncoding</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>javaEncoding</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>javaEncoding</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="char">'A'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="char">'a'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                        <operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator>
                        <name>c</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function> <comment type="line">// isValidIANAEncoding(String):boolean</comment>

}</block></class> <comment type="line">// class XMLChar</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>test</name><operator>/</operator><name>api</name><operator>/</operator><name><name>EscapeJCRUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>test</name><operator>/</operator><name>api</name><operator>/</operator><name><name>EscapeJCRUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">38d32b2a0</literal><operator>..</operator><name>e435e4a06</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>test</name><operator>/</operator><name>api</name><operator>/</operator><name><name>EscapeJCRUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>test</name><operator>/</operator><name>api</name><operator>/</operator><name><name>EscapeJCRUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>test</name><operator>.</operator><name>api</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>xerces</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Class providing some character escape methods. The escape schemata are
diff --git a/jackrabbit/src/test/java/org/apache/jackrabbit/util/ISO9075Test.java b/jackrabbit/src/test/java/org/apache/jackrabbit/util/ISO9075Test.java
index 9087be368..c19262a43 100644
-- a/jackrabbit/src/test/java/org/apache/jackrabbit/util/ISO9075Test.java
++ b/jackrabbit/src/test/java/org/apache/jackrabbit/util/ISO9075Test.java
@@ -16,7 +16,6 @@
  */</comment>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name></name>;</package>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>xerces</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLChar</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>name</name><operator>.</operator><name>QName</name></name>;</import>
 <import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name></name>;</import>
 
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
