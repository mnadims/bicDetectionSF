<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/cfca91590.java"><expr_stmt><expr><name>From</name> <name>cfca915908a449f7c79d6bd85742d3c662513d3a</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Stefan</name> <name><name>Guggisberg</name> <argument_list type="generic">&lt;<argument><name>stefan</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">4</literal> <name>Dec</name> <literal type="number">2009</literal> <literal type="number">17</literal><operator>:</operator><literal type="number">24</literal><operator>:</operator><literal type="number">44</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">2425</literal><operator>:</operator> <call><name><name>Session</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call> <name>and</name> <call><name><name>Session</name><operator>.</operator><name>refresh</name></name><argument_list>(<argument><expr><name>boolean</name></expr></argument>)</argument_list></call> <name>rely</name> <name>on</name>
 <name>accessibility</name> <name>of</name> <name>the</name> <name>root</name> <name>node</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@887279 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SessionImpl</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">15</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SessionItemStateManager</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">110</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">116</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">11</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">266106c28</literal><operator>..</operator><literal type="number">656060c03</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ItemImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">979</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">979</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>ItemImpl</name> implements <name>Item</name> <block>{
              <expr><operator>*</operator><operator>/</operator>
             <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ItemState</name></argument>&gt;</argument_list></name> <name>removed</name> <operator>=</operator> <call><name>getRemovedStates</name><argument_list>()</argument_list></call></expr>;
 
            <comment type="line">// All affected item states. They keys are used to look up whether</comment>
            <comment type="line">// All affected item states. The keys are used to look up whether</comment>
             <comment type="line">// an item is affected, and the values are iterated through below</comment>
             <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ItemId</name></argument>, <argument><name>ItemState</name></argument>&gt;</argument_list></name> <name>affected</name> <operator>=</operator>
                 <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ItemId</name></argument>, <argument><name>ItemState</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>dirty</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>removed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SessionImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SessionImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>de38b0c09</name><operator>..</operator><literal type="number">7a322468d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SessionImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>SessionImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">914</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">914</literal></expr>,<expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>SessionImpl</name> extends <name>AbstractSession</name>
         <comment type="line">// check sanity of this session</comment>
         <call><name>sanityCheck</name><argument_list>()</argument_list></call></expr>;
 
        <expr><call><name>getItemManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRootNode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;
        <comment type="line">// /JCR-2425: check whether session is allowed to read root node</comment>
        <if_stmt><if>if <condition>(<expr><call><name>hasPermission</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>ACTION_READ</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>getItemManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRootNode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
            <decl_stmt><decl><type><name>NodeId</name></type> <name>id</name> <init>= <expr><call><name>getItemStateManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdOfRootTransientNodeState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>getItemManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItem</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
     }
 
     <comment type="block" format="javadoc">/**
@@ -936,11 +942,12 @@ public class SessionImpl extends AbstractSession
         }
 
         if (!keepChanges) {
            // optimization
             itemStateMgr.disposeAllTransientItemStates();
            return;
        } else {
            /** todo FIXME should reset Item#status field to STATUS_NORMAL
             * of all non-transient instances; maybe also
             * have to reset stale ItemState instances */</comment>
         }
        <expr_stmt><expr><call><name>getItemManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRootNode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>refresh</name><argument_list>(<argument><expr><name>keepChanges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
 
     <comment type="block" format="javadoc">/**
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java
index 808733fd6..918e43a9e 100644
-- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java
++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java
@@ -22,12 +22,12 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
import java.util.LinkedList;
 
 import javax.jcr.InvalidItemStateException;
 import javax.jcr.ItemNotFoundException;
 import javax.jcr.ReferentialIntegrityException;
 import javax.jcr.RepositoryException;
import javax.jcr.nodetype.NoSuchNodeTypeException;
 
 import org.apache.commons.collections.iterators.IteratorChain;
 import org.apache.jackrabbit.core.CachingHierarchyManager;
@@ -38,10 +38,12 @@ import org.apache.jackrabbit.core.id.NodeId;
 import org.apache.jackrabbit.core.id.PropertyId;
 import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
 import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
 import org.apache.jackrabbit.core.util.Dumpable;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.QNodeDefinition;
import org.apache.jackrabbit.spi.Path;
import org.apache.jackrabbit.spi.PathFactory;
import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -391,7 +393,7 @@ public class SessionItemStateManager
      * Returns an iterator over those transient item state instances that are
      * direct or indirect descendants of the item state with the given
      * &lt;code&gt;parentId&lt;/code&gt;. The transient item state instance with the given
     * &lt;code&gt;parentId&lt;/code&gt; itself (if there is such)                                                                            not be included.
     * &lt;code&gt;parentId&lt;/code&gt; itself (if there is such) will not be included.
      * &lt;p/&gt;
      * The instances are returned in depth-first tree traversal order.
      *
@@ -417,9 +419,7 @@ public class SessionItemStateManager
         List[] la = new List[10];
         try {
             HierarchyManager atticAware = getAtticAwareHierarchyMgr();
            Iterator iter = transientStore.values().iterator();
            while (iter.hasNext()) {
                ItemState state = (ItemState) iter.next();
            for (ItemState state : transientStore.values()) {
                 // determine relative depth: &gt; 0 means it's a descendant
                 int depth;
                 try {
@@ -561,6 +561,104 @@ public class SessionItemStateManager
         return resultIter;
     }
 
    /**
     * Returns the id of the root of the minimal subtree including all
     * transient states.
     *
     * @return id of nearest common ancestor of all transient states or null
     *         if there's no transient state.
     * @throws RepositoryException if an error occurs
     */</comment>
    public <function><type><name>NodeId</name></type> <name>getIdOfRootTransientNodeState</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>transientStore</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// short cut</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>transientStore</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>hierMgr</name><operator>.</operator><name>getRootNodeId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>hierMgr</name><operator>.</operator><name>getRootNodeId</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// the nearest common ancestor of all transient states</comment>
        <comment type="line">// must be either</comment>
        <comment type="line">// a) a node state with STATUS_EXISTING_MODIFIED, or</comment>
        <comment type="line">// b) the parent node of a property state with STATUS_EXISTING_MODIFIED </comment>

        <comment type="line">// collect all candidates based on above criteria</comment>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>NodeId</name></argument>&gt;</argument_list></name></type> <name>candidateIds</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>NodeId</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>HierarchyManager</name></type> <name>hierMgr</name> <init>= <expr><call><name>getHierarchyMgr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>ItemState</name></type> <name>state</name> <range>: <expr><call><name><name>transientStore</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ItemState</name><operator>.</operator><name>STATUS_EXISTING_MODIFIED</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>NodeId</name></type> <name>nodeId</name></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>isNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>nodeId</name> <operator>=</operator> <operator>(</operator><name>NodeId</name><operator>)</operator> <call><name><name>state</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>nodeId</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <comment type="line">// remove any descendant candidates</comment>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>skip</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>NodeId</name></type> <name>id</name> <range>: <expr><name>candidateIds</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>nodeId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>hierMgr</name><operator>.</operator><name>isAncestor</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>nodeId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <comment type="line">// already a candidate or a descendant thereof</comment>
                            <comment type="line">// =&gt; skip</comment>
                            <expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>hierMgr</name><operator>.</operator><name>isAncestor</name></name><argument_list>(<argument><expr><name>nodeId</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <comment type="line">// candidate is a descendant =&gt; remove</comment>
                            <expr_stmt><expr><call><name><name>candidateIds</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>
                        <comment type="line">// add to candidates</comment>
                        <expr_stmt><expr><call><name><name>candidateIds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>nodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><call><name><name>candidateIds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>candidateIds</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// pick (any) candidate with shortest path to start with</comment>
            <decl_stmt><decl><type><name>NodeId</name></type> <name>candidateId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>NodeId</name></type> <name>id</name> <range>: <expr><name>candidateIds</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>candidateId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>candidateId</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>hierMgr</name><operator>.</operator><name>getDepth</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>hierMgr</name><operator>.</operator><name>getDepth</name></name><argument_list>(<argument><expr><name>candidateId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>candidateId</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// starting with this candidate closest to root, find first parent</comment>
            <comment type="line">// which is an ancestor of all candidates</comment>
            <decl_stmt><decl><type><name>NodeState</name></type> <name>state</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name>getItemState</name><argument_list>(<argument><expr><name>candidateId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>NodeId</name></type> <name>parentId</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>continueWithParent</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>parentId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>NodeId</name></type> <name>id</name> <range>: <expr><name>candidateIds</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>hierMgr</name><operator>.</operator><name>getRelativeDepth</name></name><argument_list>(<argument><expr><name>parentId</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>continueWithParent</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>continueWithParent</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>NodeState</name><operator>)</operator> <call><name>getItemState</name><argument_list>(<argument><expr><name>candidateId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>parentId</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>continueWithParent</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>parentId</name></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ItemStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RepositoryException</name><argument_list>(<argument><expr><literal type="string">"failed to determine common root of transient changes"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * Return a flag indicating whether the specified item is in the transient
      * item state manager's attic space.
- 
2.19.1.windows.1

</comment></unit>
