<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/bff7f1d1d.java"><expr_stmt><expr><name>From</name> <name>bff7f1d1d0d42b76e23427de758ee505b509dc6b</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Marcel</name> <name><name>Reutegger</name> <argument_list type="generic">&lt;<argument><name>mreutegg</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Wed</name></expr><operator>,</operator> <expr><literal type="number">1</literal> <name>Apr</name> <literal type="number">2009</literal> <literal type="number">14</literal><operator>:</operator><literal type="number">48</literal><operator>:</operator><literal type="number">44</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">2035</literal><operator>:</operator> <name>IndexingQueue</name> <name>not</name> <name>checked</name> <name>on</name> <name>initial</name> <name>index</name> <name>creation</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@760906 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>MultiIndex</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">70</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestHelper</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">38</literal> <operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>AbstractIndexingTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingQueueTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">121</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>workspaces</name><operator>/</operator><name>indexing</name><operator>-</operator><name>test</name><operator>/</operator><name><name>workspace</name><operator>.</operator><name>xml</name></name>    <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <literal type="number">5</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">220</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">14</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestHelper</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>MultiIndex</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>MultiIndex</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>af83bca15</name><operator>..</operator><literal type="number">3ef0715fe</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>MultiIndex</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>MultiIndex</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>util</name><operator>.</operator><name>Timer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>Path</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>PathFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>name</name><operator>.</operator><name>PathFactoryImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>PathResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>spi</name><operator>.</operator><name>commons</name><operator>.</operator><name>conversion</name><operator>.</operator><name>DefaultNamePathResolver</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>lucene</name><operator>.</operator><name>document</name><operator>.</operator><name>Document</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">353</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">355</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiIndex</name> <block>{
      <expr><operator>*</operator>
      <operator>*</operator> @<name>param</name> <name>stateMgr</name> <name>the</name> <name>item</name> <name>state</name> <name><name>manager</name><operator>.</operator></name>
      * @<name>param</name> <name>rootId</name>   <name>the</name> <name>id</name> <name>of</name> <name>the</name> <name>node</name> <name>from</name> <name>where</name> <name>to</name> <name><name>start</name><operator>.</operator></name>
     * @<name>param</name> <name>rootPath</name> <name>the</name> <name>path</name> <name>of</name> <name>the</name> <name>node</name> <name>from</name> <name>where</name> <name>to</name> <name><name>start</name><operator>.</operator></name>
      * @<throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr>           <if_stmt><if>if an error occurs while indexing the
      *                               workspace.
      * @<throws>throws <argument><expr><name>IllegalStateException</name></expr></argument></throws> if this index is not empty.
      */
    void createInitialIndex<condition>(<expr><name>ItemStateManager</name> <name>stateMgr</name></expr><operator>,</operator> <expr><name>NodeId</name> <name>rootId</name></expr><operator>,</operator> <expr><name>Path</name> <name>rootPath</name></expr>)</condition><block type="pseudo"><block_content>
    <function><type><name>void</name></type> <name>createInitialIndex</name><parameter_list>(<parameter><decl><type><name>ItemStateManager</name></type> <name>stateMgr</name></decl></parameter>,
                            <parameter><decl><type><name>NodeId</name></type> <name>rootId</name></decl></parameter>,
                            <parameter><decl><type><name>Path</name></type> <name>rootPath</name></decl></parameter>)</parameter_list>
             <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <comment type="line">// only do an initial index if there are no indexes at all</comment>
         <if_stmt><if>if <condition>(<expr><call><name><name>indexNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>reindexing</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
             <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                 <comment type="line">// traverse and index workspace</comment>
                 <expr_stmt><expr><call><name>executeAndLog</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Start</name><argument_list>(<argument><expr><name><name>Action</name><operator>.</operator><name>INTERNAL_TRANSACTION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <decl_stmt><decl><type><name>NodeState</name></type> <name>rootState</name> <init>= <expr><operator>(</operator><name>NodeState</name><operator>)</operator> <call><name><name>stateMgr</name><operator>.</operator><name>getItemState</name></name><argument_list>(<argument><expr><name>rootId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>createIndex</name><argument_list>(<argument><expr><name>rootState</name></expr></argument>, <argument><expr><name>rootPath</name></expr></argument>, <argument><expr><name>stateMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>createIndex</name><argument_list>(<argument><expr><name>rootState</name></expr></argument>, <argument><expr><name>rootPath</name></expr></argument>, <argument><expr><name>stateMgr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name>executeAndLog</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Commit</name><argument_list>(<argument><expr><call><name>getTransactionId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Created initial index for {} nodes"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name>scheduleFlushTask</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></try></block_content></block></if></if_stmt></block_content></block></function></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                 <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"Error indexing workspace"</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1042</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">1049</literal></expr><operator>,</operator><expr><literal type="number">33</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiIndex</name> <block>{
      <expr><operator>*</operator> <operator>&lt;</operator><name>code</name><operator>&gt;</operator><name><name><name>node</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>code</name></argument>&gt;</argument_list></name><operator>.</operator></name>
      *
      <operator>*</operator> @<name>param</name> <name>node</name>     <name>the</name> <name>current</name> <name><name>NodeState</name><operator>.</operator></name>
     * @<name>param</name> <name>path</name>     <name>the</name> <name>path</name> <name>of</name> <name>the</name> <name>current</name> <name><name>node</name><operator>.</operator></name>
      * @<name>param</name> <name>stateMgr</name> <name>the</name> <name>shared</name> <name>item</name> <name>state</name> <name><name>manager</name><operator>.</operator></name>
     * @<name>param</name> <name>count</name>    <name>the</name> <name>number</name> <name>of</name> <name>nodes</name> <name>already</name> <name><name>indexed</name><operator>.</operator></name>
     * @</expr><return>return <expr><name>the</name> <name>number</name> <name>of</name> <name>nodes</name> <name>indexed</name> <name>so</name> <name><name>far</name><operator>.</operator></name>
      * @<throws>throws <argument><expr><name>IOException</name></expr></argument></throws></expr></return>         <if_stmt><if>if an error occurs while writing to the
      *                             index.
      * @<throws>throws <argument><expr><name>ItemStateException</name></expr></argument></throws>  if an node state cannot be found.
      * @<throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> if any other error occurs
      */
    private void createIndex<condition>(<expr><name>NodeState</name> <name>node</name></expr><operator>,</operator> <expr><name>Path</name> <name>path</name></expr><operator>,</operator> <expr><name>ItemStateManager</name> <name>stateMgr</name></expr>)</condition><block type="pseudo"><block_content>
    <function><type><specifier>private</specifier> <name>long</name></type> <name>createIndex</name><parameter_list>(<parameter><decl><type><name>NodeState</name></type> <name>node</name></decl></parameter>,
                             <parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>,
                             <parameter><decl><type><name>ItemStateManager</name></type> <name>stateMgr</name></decl></parameter>,
                             <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>
             <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ItemStateException</name></expr></argument>, <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>NodeId</name></type> <name>id</name> <init>= <expr><call><name><name>node</name><operator>.</operator><name>getNodeId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>excludedIDs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
            <return>return <expr><name>count</name></expr>;</return>
         </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><call><name>executeAndLog</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AddNode</name><argument_list>(<argument><expr><call><name>getTransactionId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>id</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>%</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PathResolver</name></type> <name>resolver</name> <init>= <expr><operator>new</operator> <call><name>DefaultNamePathResolver</name><argument_list>(
                    <argument><expr><call><name><name>handler</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNamespaceRegistry</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"indexing... {} ({})"</literal></expr></argument>, <argument><expr><call><name><name>resolver</name><operator>.</operator><name>getJCRPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>checkIndexingQueue</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><call><name>checkVolatileCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>List</name></type> <name>children</name> <init>= <expr><call><name><name>node</name><operator>.</operator><name>getChildNodeEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>children</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1069</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">1090</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiIndex</name> <block>{
                         <expr><name>e</name></expr>, <expr><name>handler</name></expr>, <expr><name>path</name></expr>, <expr><name>node</name></expr>, <expr><name>child</name></expr>)</block></expr>;</expr_stmt>
             </block_content>}</block></for>
             <if_stmt><if>if <condition>(<expr><name>childState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>createIndex</name><argument_list>(<argument><expr><name>childState</name></expr></argument>, <argument><expr><name>childPath</name></expr></argument>, <argument><expr><name>stateMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>createIndex</name><argument_list>(<argument><expr><name>childState</name></expr></argument>, <argument><expr><name>childPath</name></expr></argument>, <argument><expr><name>stateMgr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></function></block_content></block></if></if_stmt></block></expr></expr_stmt>
        <return>return <expr><name>count</name></expr>;</return>
     </block_content>}</block></catch>
 
     <comment type="block" format="javadoc">/**
@@ -1140,10 +1162,27 @@ public class MultiIndex {
     }
 
     /**
     * Checks the indexing queue for finished text extrator jobs and
     * updates the index accordingly if there are any new ones.
     * Checks the indexing queue for finished text extrator jobs and updates the
     * index accordingly if there are any new ones. This method is synchronized
     * and should only be called by the timer task that periodically checks if
     * there are documents ready in the indexing queue. A new transaction is
     * used when documents are transfered from the indexing queue to the index.
      */</comment>
     <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>checkIndexingQueue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkIndexingQueue</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks the indexing queue for finished text extrator jobs and updates the
     * index accordingly if there are any new ones.
     *
     * @param transactionPresent whether a transaction is in progress and the
     *                           current {@link #getTransactionId()} should be
     *                           used. If &lt;code&gt;false&lt;/code&gt; a new transaction
     *                           is created when documents are transfered from
     *                           the indexing queue to the index.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkIndexingQueue</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>transactionPresent</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name><name>Document</name><index>[]</index></name></type> <name>docs</name> <init>= <expr><call><name><name>indexingQueue</name><operator>.</operator><name>getFinishedDocuments</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>Map</name></type> <name>finished</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>docs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1153</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">1192</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <specifier>public</specifier> <name>class</name> <name>MultiIndex</name> <block>{
 
         <comment type="line">// now update index with the remaining ones if there are any</comment>
         <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>finished</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"updating index with {} nodes from indexing queue."</literal></expr></argument>,
            <argument><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"updating index with {} nodes from indexing queue."</literal></expr></argument>,
                     <argument><expr><operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><call><name><name>finished</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
 
             <comment type="line">// remove documents from the queue</comment>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>finished</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>finished</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
                 <expr_stmt><expr><call><name><name>indexingQueue</name><operator>.</operator><name>removeDocument</name></name><argument_list>(<argument><expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></for></block_content></block></while></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
 
             <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><call><name><name>finished</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>finished</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>transactionPresent</name></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>finished</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
                        <expr_stmt><expr><call><name>executeAndLog</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DeleteNode</name><argument_list>(<argument><expr><call><name>getTransactionId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>UUID</name><operator>)</operator> <call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <for>for <control>(<init><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>finished</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
                        <expr_stmt><expr><call><name>executeAndLog</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AddNode</name><argument_list>(
                                <argument><expr><call><name>getTransactionId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>Document</name><operator>)</operator> <call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><call><name><name>finished</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>finished</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
             </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                 <comment type="line">// update failed</comment>
                 <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Failed to update index with deferred text extraction"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestHelper</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestHelper</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..0b8d24cee</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestHelper</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">38</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * &lt;code&gt;TestHelper&lt;/code&gt; provides test utility methods.
 */</comment>
<class><specifier>public</specifier> class <name>TestHelper</name> <block>{

    <comment type="block" format="javadoc">/**
     * Shuts down the workspace with the given &lt;code&gt;name&lt;/code&gt;.
     *
     * @param name the name of the workspace to shut down.
     * @param repo the repository.
     * @throws RepositoryException if the shutdown fails or there is no
     *                             workspace with the given name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>shutdownWorkspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>RepositoryImpl</name></type> <name>repo</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>repo</name><operator>.</operator><name>getWorkspaceInfo</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>dispose</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>AbstractIndexingTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>AbstractIndexingTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d8142d6cc</name><operator>..</operator><literal type="number">707c6bb9e</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>AbstractIndexingTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>AbstractIndexingTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Node</name></name>;</import>
  <expr_stmt><expr><operator>*</operator><operator>/</operator>
 <specifier>public</specifier> <name>class</name> <name>AbstractIndexingTest</name> extends <name>AbstractQueryTest</name> <block>{
 
    <expr><specifier>protected</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>WORKSPACE_NAME</name> <operator>=</operator> <literal type="string">"indexing-test"</literal></expr>;

     <expr><specifier>protected</specifier> <name>Session</name> <name>session</name></expr>;
 
     <expr><specifier>protected</specifier> <name>Node</name> <name>testRootNode</name></expr>;
 
     <expr><specifier>protected</specifier> <name>void</name> <call><name>setUp</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
         <expr><call><name><name>super</name><operator>.</operator><name>setUp</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
        <expr><name>session</name> <operator>=</operator> <call><name><name>helper</name><operator>.</operator><name>getSuperuserSession</name></name><argument_list>(<argument><expr><literal type="string">"indexing-test"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name>session</name> <operator>=</operator> <call><name><name>helper</name><operator>.</operator><name>getSuperuserSession</name></name><argument_list>(<argument><expr><name>WORKSPACE_NAME</name></expr></argument>)</argument_list></call></expr>;
         <expr><name>testRootNode</name> <operator>=</operator> <call><name>cleanUpTestRoot</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;
         <comment type="line">// overwrite query manager</comment>
         <expr><name>qm</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQueryManager</name><argument_list>()</argument_list></call></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingQueueTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingQueueTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>be82dc85c</name><operator>..</operator><name>d4879a6a1</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingQueueTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>IndexingQueueTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr>,<expr><literal type="number">28</literal> <operator>+</operator><literal type="number">18</literal></expr>,<expr><literal type="number">38</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package></block></expr></expr_stmt>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>extractor</name><operator>.</operator><name>TextExtractor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>AbstractIndexingTest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>RepositoryImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>TestHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>fs</name><operator>.</operator><name>local</name><operator>.</operator><name>FileUtil</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Node</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NodeIterator</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>query</name><operator>.</operator><name>Query</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FilenameFilter</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * &lt;code&gt;IndexingQueueTest&lt;/code&gt; checks if the indexing queue properly indexes
 * nodes in a background thread when text extraction takes more than 100 ms.
 * nodes in a background thread when text extraction takes more than 10 ms. See
 * the workspace.xml file for the indexing-test workspace.
  */</comment>
 <class><specifier>public</specifier> class <name>IndexingQueueTest</name> <super_list><extends>extends <super><name>AbstractIndexingTest</name></super></extends></super_list> <block>{
 
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>File</name></type> <name>TEMP_DIR</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.io.tmpdir"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CONTENT_TYPE</name> <init>= <expr><literal type="string">"application/indexing-queue-test"</literal></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ENCODING</name> <init>= <expr><literal type="string">"UTF-8"</literal></expr></init></decl>;</decl_stmt>
 
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testQueue</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name><name>Extractor</name><operator>.</operator><name>sleepTime</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>SearchIndex</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>SearchIndex</name><operator>)</operator> <call><name>getQueryHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>IndexingQueue</name></type> <name>queue</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIndexingQueue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">71</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">115</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexingQueueTest</name> extends <name>AbstractIndexingTest</name> <block>{
         <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>nodes</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
 
    <specifier>public</specifier> <name>void</name> <call><name>testInitialIndex</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
        <expr><name><name>Extractor</name><operator>.</operator><name>sleepTime</name></name> <operator>=</operator> <literal type="number">200</literal></expr></block></expr></argument></throws></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SearchIndex</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>SearchIndex</name><operator>)</operator> <call><name>getQueryHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>indexDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// fill workspace</comment>
        <decl_stmt><decl><type><name>Node</name></type> <name>testFolder</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"folder"</literal></expr></argument>, <argument><expr><literal type="string">"nt:folder"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><literal type="string">"the quick brown fox jumps over the lazy dog."</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>createFiles</name><argument_list>(<argument><expr><name>testFolder</name></expr></argument>, <argument><expr><call><name><name>text</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>ENCODING</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// shutdown workspace</comment>
        <decl_stmt><decl><type><name>RepositoryImpl</name></type> <name>repo</name> <init>= <expr><operator>(</operator><name>RepositoryImpl</name><operator>)</operator> <call><name><name>session</name><operator>.</operator><name>getRepository</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>logout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>session</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>superuser</name><operator>.</operator><name>logout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>superuser</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TestHelper</name><operator>.</operator><name>shutdownWorkspace</name></name><argument_list>(<argument><expr><name>WORKSPACE_NAME</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// delete index</comment>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>FileUtil</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>indexDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Unable to delete index directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>int</name></type> <name>initialNumExtractorFiles</name> <init>= <expr><call><name>getNumExtractorFiles</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>Extractor</name><operator>.</operator><name>sleepTime</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><name>session</name> <operator>=</operator> <call><name><name>helper</name><operator>.</operator><name>getSuperuserSession</name></name><argument_list>(<argument><expr><name>WORKSPACE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RepositoryException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><call><name><name>t</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// there must not be more than 20 extractor files, because:</comment>
            <comment type="line">// - initial index creation checks indexing queue every 10 nodes</comment>
            <comment type="line">// - there is an aggregate definition on the workspace that causes</comment>
            <comment type="line">//   2 extractor jobs per nt:resource</comment>
            <comment type="line">// =&gt; 2 * 10 = 20</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>numFiles</name> <init>= <expr><call><name>getNumExtractorFiles</name><argument_list>()</argument_list></call> <operator>-</operator> <name>initialNumExtractorFiles</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>numFiles</name> <operator>&lt;=</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name>qm</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getWorkspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQueryManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>SearchIndex</name><operator>)</operator> <call><name>getQueryHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>IndexingQueue</name></type> <name>queue</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIndexingQueue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// flush index to make sure any documents in the buffer are written</comment>
        <comment type="line">// to the index. this is to make sure all nodes are pushed either to</comment>
        <comment type="line">// the index or to the indexing queue</comment>
        <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <synchronized>synchronized <init>(<expr><call><name><name>index</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr>)</init> <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>queue</name><operator>.</operator><name>getNumPendingDocuments</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>wait</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></synchronized>

        <decl_stmt><decl><type><name>String</name></type> <name>stmt</name> <init>= <expr><name>testPath</name> <operator>+</operator> <literal type="string">"//element(*, nt:resource)[jcr:contains(., 'fox')]"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Query</name></type> <name>q</name> <init>= <expr><call><name><name>qm</name><operator>.</operator><name>createQuery</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>Query</name><operator>.</operator><name>XPATH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><call><name><name>q</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>createFiles</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>folder</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>filesPerLevel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>levels</name><operator>--</operator></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filesPerLevel</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// create files</comment>
            <decl_stmt><decl><type><name>Node</name></type> <name>file</name> <init>= <expr><call><name><name>folder</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"file"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"nt:file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name></type> <name>resource</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"jcr:content"</literal></expr></argument>, <argument><expr><literal type="string">"nt:resource"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:data"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:lastModified"</literal></expr></argument>, <argument><expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:mimeType"</literal></expr></argument>, <argument><expr><name>CONTENT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"jcr:encoding"</literal></expr></argument>, <argument><expr><name>ENCODING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>levels</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filesPerLevel</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <comment type="line">// create files</comment>
                <decl_stmt><decl><type><name>Node</name></type> <name>subFolder</name> <init>= <expr><call><name><name>folder</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"folder"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"nt:folder"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>createFiles</name><argument_list>(<argument><expr><name>subFolder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                        <argument><expr><name>filesPerLevel</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>getNumExtractorFiles</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>TEMP_DIR</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FilenameFilter</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"extractor"</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr>;</return>
    </block_content>}</block></function>

     <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Extractor</name> <super_list><implements>implements <super><name>TextExtractor</name></super></implements></super_list> <block>{
 
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>sleepTime</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>

         <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getContentTypes</name><parameter_list>()</parameter_list> <block>{<block_content>
             <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name>CONTENT_TYPE</name></expr>}</block></expr>;</return>
         </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">80</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">197</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>IndexingQueueTest</name> extends <name>AbstractIndexingTest</name> <block>{
         <expr><specifier>public</specifier> <name>Reader</name> <call><name>extractText</name><argument_list>(<argument><expr><name>InputStream</name> <name>stream</name></expr></argument>, <argument><expr><name>String</name> <name>type</name></expr></argument>, <argument><expr><name>String</name> <name>encoding</name></expr></argument>)</argument_list></call>
         <throws>throws <argument><expr><name>IOException</name> <block>{</block></expr></argument></throws></expr>
             <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>sleepTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></try>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                 <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>()</argument_list></call></expr>;</throw>
             </block_content>}</block></catch>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator><name>indexing</name><operator>-</operator><name>test</name><operator>/</operator><name><name>workspace</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator><name>indexing</name><operator>-</operator><name>test</name><operator>/</operator><name><name>workspace</name><operator>.</operator><name>xml</name></name>
<name>index</name> <literal type="number">93e578aa0</literal><operator>..</operator><name>e0d77de01</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator><name>indexing</name><operator>-</operator><name>test</name><operator>/</operator><name><name>workspace</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>repository</name><operator>/</operator><name>workspaces</name><operator>/</operator><name>indexing</name><operator>-</operator><name>test</name><operator>/</operator><name><name>workspace</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
     <operator>&lt;</operator><name>param</name> <name>name</name><operator>=</operator><literal type="string">"excerptProviderClass"</literal> <name>value</name><operator>=</operator><literal type="string">"org.apache.jackrabbit.core.query.lucene.WeightedHTMLExcerpt"</literal><operator>/</operator><operator>&gt;</operator>
     <operator>&lt;</operator><name>param</name> <name>name</name><operator>=</operator><literal type="string">"textFilterClasses"</literal> <name>value</name><operator>=</operator><literal type="string">"org.apache.jackrabbit.extractor.PlainTextExtractor,org.apache.jackrabbit.core.query.lucene.IndexingQueueTest$Extractor"</literal><operator>/</operator><operator>&gt;</operator>
     <operator>&lt;</operator><name>param</name> <name>name</name><operator>=</operator><literal type="string">"extractorPoolSize"</literal> <name>value</name><operator>=</operator><literal type="string">"2"</literal><operator>/</operator><operator>&gt;</operator>
    <operator>&lt;</operator><name>param</name> <name>name</name><operator>=</operator><literal type="string">"extractorTimeout"</literal> <name>value</name><operator>=</operator><literal type="string">"10"</literal><operator>/</operator><operator>&gt;</operator>
   <operator>&lt;</operator><operator>/</operator><name>SearchIndex</name><operator>&gt;</operator>
 <operator>&lt;</operator><operator>/</operator><name>Workspace</name><operator>&gt;</operator>
 
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block></class></block></class></block_content></block></catch></try></block_content></block></for></block_content></block></function>

</unit>
