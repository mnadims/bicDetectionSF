<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/ffc6210b9.java"><expr_stmt><expr><name>From</name> <name>ffc6210b921faa28879d626b0e2c0444fc4b9888</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Alexandru</name> <name><name>Parvulescu</name> <argument_list type="generic">&lt;<argument><name>alexparvulescu</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">1</literal> <name>Dec</name> <literal type="number">2011</literal> <literal type="number">13</literal><operator>:</operator><literal type="number">05</literal><operator>:</operator><literal type="number">38</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">2906</literal> <name>Multivalued</name> <name>property</name> <name>sorted</name> <name>by</name> <name>last</name><operator>/</operator><name>random</name> <name>value</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@1209063 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">122</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>Util</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">19</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>OrderByTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">32</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>SQL2OrderByTest</name><operator>.</operator><name>java</name></name>           <operator>|</operator>  <literal type="number">24</literal> <operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>ComparableArrayTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">53</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <literal type="number">5</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">232</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">18</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>ComparableArrayTest</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">554a3fc07</literal><operator>..</operator><name>d9d77a673</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>WeakHashMap</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">112</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">113</literal></expr><operator>,</operator><expr><literal type="number">78</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldCache</name> <block>{
         }</block></expr></expr_stmt>
     }
 
    static <class>class <name>ComparableArray</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>ComparableArray</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>c</name> <init>= <expr><operator>new</operator> <name><name>Comparable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ComparableArray</name><parameter_list>(<parameter><decl><type><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>ComparableArray</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>Util</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * testing purpose only.
         * 
         * @return the offset
         */</comment>
        <function><type><name>int</name></type> <name>getOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>offset</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ComparableArray</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// optimize for most common scenario</comment>
            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>new</operator> <name><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name> <block>{ <expr><name>item</name></expr> }</block></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// inside</comment>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name><name>c</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>c</name><index>[<expr><name>index</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// before</comment>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>relativeOffset</name> <init>= <expr><name>offset</name> <operator>-</operator> <name>index</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>newC</name> <init>= <expr><operator>new</operator> <name><name>Comparable</name><index>[<expr><name>relativeOffset</name> <operator>+</operator> <name><name>c</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>newC</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newC</name></expr></argument>, <argument><expr><name>relativeOffset</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <name>newC</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// after</comment>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>offset</name> <operator>+</operator> <name><name>c</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>index</name> <operator>-</operator> <name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>c</name><index>[<expr><name>index</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block">/*
         * This is needed by {@link UpperCaseSortComparator} and {@link LowerCaseSortComparator}
         */</comment>
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

     <comment type="block" format="javadoc">/**
      * Reference to the single instance of &lt;code&gt;SharedFieldCache&lt;/code&gt;.
      */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">152</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">225</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldCache</name> <block>{
         <expr><name>field</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>intern</name></name><argument_list>()</argument_list></call></expr>;
         <expr><name>ValueIndex</name> <name>ret</name> <operator>=</operator> <call><name>lookup</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;
         <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>retArray</name> <init>= <expr><operator>new</operator> <name><name>Comparable</name><index>[<expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxDocs</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ComparableArray</name><index>[]</index></name></type> <name>retArray</name> <init>= <expr><operator>new</operator> <name><name>ComparableArray</name><index>[<expr><name>maxDocs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>int</name></type> <name>setValues</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>retArray</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>maxDocs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                 <decl_stmt><decl><type><name>IndexFormatVersion</name></type> <name>version</name> <init>= <expr><call><name><name>IndexFormatVersion</name><operator>.</operator><name>getVersion</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <decl_stmt><decl><type><name>boolean</name></type> <name>hasPayloads</name> <init>= <expr><call><name><name>version</name><operator>.</operator><name>isAtLeast</name></name><argument_list>(<argument><expr><name><name>IndexFormatVersion</name><operator>.</operator><name>V3</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <decl_stmt><decl><type><name>TermDocs</name></type> <name>termDocs</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">167</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">241</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldCache</name> <block>{
                     <expr><name>termDocs</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>termDocs</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
                 }</block>
                 <name>TermEnum</name> <name>termEnum</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>terms</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Term</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>tmp</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                 <try>try <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><call><name><name>termEnum</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                         <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"no terms in field "</literal> <operator>+</operator> <name>field</name></expr></argument>)</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">178</literal></expr><operator>,</operator><expr><literal type="number">30</literal> <operator>+</operator><literal type="number">250</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldCache</name> <block>{
                         <if_stmt><if>if <condition>(<expr><call><name><name>term</name><operator>.</operator><name>field</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>field</name> <operator>||</operator> <operator>!</operator><call><name><name>term</name><operator>.</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                             <break>break;</break>
                         </block_content>}</block></if></if_stmt>

                        <comment type="line">// make sure term is compacted</comment>
                        <name>String</name> <name>text</name> <operator>=</operator> <call><name><name>term</name><operator>.</operator><name>text</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>prefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
                            <comment type="line">// grow tmp</comment>
                            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>new</operator> <name><name>char</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>getChars</name></name><argument_list>(<argument><expr><call><name><name>prefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name><name>termDocs</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>termEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name> <init>= <expr><call><name>termValueAsString</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>termDocs</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <while>while <condition>(<expr><call><name><name>termDocs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>int</name></type> <name>termPosition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                             <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>PropertyType</name><operator>.</operator><name>UNDEFINED</name></name></expr>;</expr_stmt>
                             <if_stmt><if>if <condition>(<expr><name>hasPayloads</name></expr>)</condition> <block>{<block_content>
                                 <decl_stmt><decl><type><name>TermPositions</name></type> <name>termPos</name> <init>= <expr><operator>(</operator><name>TermPositions</name><operator>)</operator> <name>termDocs</name></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>termPos</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>termPosition</name> <operator>=</operator> <call><name><name>termPos</name><operator>.</operator><name>nextPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                 <if_stmt><if>if <condition>(<expr><call><name><name>termPos</name><operator>.</operator><name>isPayloadAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                     <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name><name>termPos</name><operator>.</operator><name>getPayload</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                     <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>PropertyMetaData</name><operator>.</operator><name>fromByteArray</name></name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPropertyType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                 </block_content>}</block></if></if_stmt>
                             </block_content>}</block></if></if_stmt>
                             <expr_stmt><expr><name>setValues</name><operator>++</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>retArray</name><index>[<expr><call><name><name>termDocs</name><operator>.</operator><name>doc</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>getValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <decl_stmt><decl><type><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>v</name> <init>= <expr><call><name>getValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>termDocs</name><operator>.</operator><name>doc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>ComparableArray</name></type> <name>ca</name> <init>= <expr><name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ca</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>ComparableArray</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>termPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name> <operator>=</operator> <call><name><name>ca</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>termPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                         </block_content>}</block></while>
                     </block_content>}</block></if></if_stmt> <while>while <condition>(<expr><call><name><name>termEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
                 </block_content>}</block> <finally>finally <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">216</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">286</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldCache</name> <block>{
         <return>return <expr><name>ret</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <comment type="block" format="javadoc">/**
     * Extracts the value from a given Term as a String
     * 
     * @param term
     * @param prefix
     * @return string value contained in the term
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>termValueAsString</name><parameter_list>(<parameter><decl><type><name>Term</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// make sure term is compacted</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name><name>term</name><operator>.</operator><name>text</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>prefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>tmp</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>getChars</name></name><argument_list>(<argument><expr><call><name><name>prefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * See if a &lt;code&gt;ValueIndex&lt;/code&gt; object is in the cache.
      */</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>Util</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>Util</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ba1d16626</name><operator>..</operator><literal type="number">1b83b2005</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>Util</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>Util</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">235</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">235</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>class</name> <name>Util</name> <block>{
         }</block></expr></expr_stmt>
     </block_content>}</block></finally></try>
 
    <comment type="block" format="javadoc">/**
     * Compares two arrays of comparables.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>c2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c1</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>c2</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>compare</name><argument_list>(<argument><expr><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>d</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name><name>c1</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>c2</name><operator>.</operator><name>length</name></name></expr>;</return>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * Compares the two values. If the values have differing types, then an
      * attempt is made to convert the second value into the type of the first
diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java
index c1197632c..c7c09d6bf 100644
-- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java
++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java
@@ -60,6 +60,38 @@ public class OrderByTest extends AbstractIndexingTest {
         checkResult(result, 3);
     }
 
    /**
     * Test for JCR-2906
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrderByMVP</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>n1</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>n2</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>n3</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node3"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>n4</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node4"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>n5</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node5"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>n1</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"extra"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"12345"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>n1</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"ccc"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>n2</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"eee"</literal></expr>, <expr><literal type="string">"bbb"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>n3</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"aaa"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>n4</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"bbb"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>n5</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"eee"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>testRootNode</name><operator>.</operator><name>getSession</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT value FROM nt:unstructured WHERE "</literal>
                <operator>+</operator> <literal type="string">"jcr:path LIKE '"</literal> <operator>+</operator> <name>testRoot</name> <operator>+</operator> <literal type="string">"/%' ORDER BY text"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>checkResultSequence</name><argument_list>(<argument><expr><call><name>executeQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRows</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <name><name>Node</name><index>[]</index></name> <block>{ <expr><name>n3</name></expr>, <expr><name>n4</name></expr>,
                <expr><name>n1</name></expr>, <expr><name>n5</name></expr>, <expr><name>n2</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>xpath</name> <init>= <expr><literal type="string">"/"</literal>
                <operator>+</operator> <name>testRoot</name>
                <operator>+</operator> <literal type="string">"/*[@jcr:primaryType='nt:unstructured'] order by jcr:score(), @text"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>checkResultSequence</name><argument_list>(<argument><expr><call><name>executeQuery</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRows</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <name><name>Node</name><index>[]</index></name> <block>{ <expr><name>n3</name></expr>, <expr><name>n4</name></expr>,
                <expr><name>n1</name></expr>, <expr><name>n5</name></expr>, <expr><name>n2</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrderByUpperCase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>Node</name></type> <name>n1</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>Node</name></type> <name>n2</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>SQL2OrderByTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>SQL2OrderByTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6a0ca6b9b</literal><operator>..</operator><literal type="number">8bda83f81</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>SQL2OrderByTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>SQL2OrderByTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@ <specifier>public</specifier> <name>class</name> <name>SQL2OrderByTest</name> extends <name>AbstractQueryTest</name> <block>{
 
     }</block>
 
    <comment type="block" format="javadoc">/**
     * SQL2 Test for JCR-2906
     */</comment>
    <specifier>public</specifier> <name>void</name> <call><name>testOrderByMVP</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>RepositoryException</name> <block>{
        <expr><name>Node</name> <name>n1</name> <operator>=</operator> <call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node1"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>n2</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>n3</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node3"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>n4</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node4"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>n5</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node5"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>n1</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"ccc"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>n2</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"eee"</literal></expr>, <expr><literal type="string">"bbb"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>n3</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"aaa"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>n4</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"bbb"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>n5</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"eee"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>testRootNode</name><operator>.</operator><name>getSession</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"SELECT value FROM [nt:unstructured] WHERE ISCHILDNODE(["</literal>
                <operator>+</operator> <name>testRoot</name> <operator>+</operator> <literal type="string">"]) ORDER BY text"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>checkSeq</name><argument_list>(<argument><expr><call><name>executeSQL2Query</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <name><name>Node</name><index>[]</index></name> <block>{ <expr><name>n3</name></expr>, <expr><name>n4</name></expr>, <expr><name>n1</name></expr>, <expr><name>n5</name></expr>, <expr><name>n2</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrderByVal</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
 
         <decl_stmt><decl><type><name>Node</name></type> <name>n1</name> <init>= <expr><call><name><name>testRootNode</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>ComparableArrayTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>ComparableArrayTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..49507d6b7</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>ComparableArrayTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">53</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name></name>;</package>

<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name><operator>.</operator><name>lucene</name><operator>.</operator><name>SharedFieldCache</name><operator>.</operator><name>ComparableArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>ComparableArrayTest</name> <block>{

    <comment type="block" format="javadoc">/**
     * Test for JCR-2906 to make sure the SharedFieldCache arranges the entries
     * properly and keeps the internal array creation efficient.
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testInsert</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ComparableArray</name></type> <name>ca</name> <init>= <expr><operator>new</operator> <call><name>ComparableArray</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><call><name><name>ca</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>ca</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// insert before</comment>
        <expr_stmt><expr><call><name><name>ca</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"[b, a]"</literal></expr></argument>, <argument><expr><call><name><name>ca</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>ca</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// insert after</comment>
        <expr_stmt><expr><call><name><name>ca</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"[b, a, null, c]"</literal></expr></argument>, <argument><expr><call><name><name>ca</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>ca</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// insert inside</comment>
        <expr_stmt><expr><call><name><name>ca</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"[b, a, d, c]"</literal></expr></argument>, <argument><expr><call><name><name>ca</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>ca</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function>

</unit>
