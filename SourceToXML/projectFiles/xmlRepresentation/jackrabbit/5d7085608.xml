<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/5d7085608.java"><expr_stmt><expr><name>From</name> <literal type="number">5d70856087220c44d9bd9d8dfc0a2a8be3303599</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Marcel</name> <name><name>Reutegger</name> <argument_list type="generic">&lt;<argument><name>mreutegg</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">12</literal> <name>Feb</name> <literal type="number">2008</literal> <literal type="number">14</literal><operator>:</operator><literal type="number">58</literal><operator>:</operator><literal type="number">47</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">1365</literal><operator>:</operator> <name>Query</name> <name>path</name> <name>constraints</name> <name>like</name> <name>foo</name><comment type="line">//*/bar do not scale</comment>
 <operator>-</operator> <name>add</name> <name>test</name></expr></expr_stmt> <case>case <expr><name>and</name> <name>fix</name> <name>minor</name> <name>bug</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name></expr>:</case> <label><name>https</name>:</label><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@620820 13f79535-47bb-0310-9956-ffa450edef68</comment>
<expr_stmt><expr><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>AxisQueryTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">189</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">191</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">1</literal> <call><name>deletion</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>AxisQueryTest</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a9913db59</name><operator>..</operator><literal type="number">20c765306</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>LuceneQueryBuilder</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">539</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">539</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>LuceneQueryBuilder</name> implements <name>QueryNodeVisitor</name> <block>{
 
         <if_stmt><if>if <condition>(<expr><call><name><name>node</name><operator>.</operator><name>getIncludeDescendants</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><name>nameTest</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>andQuery</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DescendantSelfAxisQuery</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>nameTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>andQuery</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DescendantSelfAxisQuery</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>nameTest</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Occur</name><operator>.</operator><name>MUST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
                 <comment type="line">// descendant-or-self with nametest=*</comment>
                 <if_stmt><if>if <condition>(<expr><name><name>predicates</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>AxisQueryTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>AxisQueryTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..2b0615a4f</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>AxisQueryTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">189</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name><operator>.</operator><name>query</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>NodeIterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<comment type="block" format="javadoc">/**
 * &lt;code&gt;AxisQueryTest&lt;/code&gt; runs random queries on generated test data. The
 * amount of test data can be controled by {@link #NUM_LEVELS} and
 * {@link #NODES_PER_LEVEL}. The default values create 363 nodes distributed
 * over 5 hierarchy levels.
 */</comment>
<class><specifier>public</specifier> class <name>AxisQueryTest</name> <super_list><extends>extends <super><name>AbstractQueryTest</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Number of levels of test data to create.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NUM_LEVELS</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Number of nodes per level
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NODES_PER_LEVEL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Execute random queries for this amount of time.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RUN_NUM_SECONDS</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Controls if query results are checked for their correctness. When the
     * number of test nodes increases this becomes expensive and should be
     * disabled.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>CHECK_RESULT</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set to a name that is different from {@link #testPath} when number of
     * test nodes is increased. This avoids that the test nodes are removed
     * after a test run. The number of test nodes can be controlled by
     * {@link #NUM_LEVELS} and {@link #NODES_PER_LEVEL}.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>relTestLocation</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Absolute path to the test location.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>absTestLocation</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Random</name></type> <name>rand</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>relTestLocation</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// use default location</comment>
            <expr_stmt><expr><name>relTestLocation</name> <operator>=</operator> <name>testPath</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>absTestLocation</name> <operator>=</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>relTestLocation</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>createNodes</name><argument_list>(<argument><expr><name>testRootNode</name></expr></argument>, <argument><expr><name>NODES_PER_LEVEL</name></expr></argument>, <argument><expr><name>NUM_LEVELS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// customized location</comment>
            <expr_stmt><expr><name>absTestLocation</name> <operator>=</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>relTestLocation</name></expr>;</expr_stmt>
            <comment type="line">// only create test data if not yet present</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>superuser</name><operator>.</operator><name>itemExists</name></name><argument_list>(<argument><expr><name>absTestLocation</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Node</name></type> <name>testLocation</name> <init>= <expr><call><name><name>superuser</name><operator>.</operator><name>getRootNode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addNode</name><argument_list>(<argument><expr><name>relTestLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>createNodes</name><argument_list>(<argument><expr><name>testLocation</name></expr></argument>, <argument><expr><name>NODES_PER_LEVEL</name></expr></argument>, <argument><expr><name>NUM_LEVELS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// uncomment to write log messages to system out</comment>
            <comment type="line">//log.setWriter(new PrintWriter(System.out, true));</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExecuteQueries</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>testLocation</name> <init>= <expr><call><name><name>superuser</name><operator>.</operator><name>getRootNode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><name>relTestLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>end</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000</literal> <operator>*</operator> <name>RUN_NUM_SECONDS</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>end</name> <operator>&gt;</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>statement</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><name>relTestLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>regexp</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><name>absTestLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>numSteps</name> <init>= <expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>NUM_LEVELS</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// at least one step</comment>
            <while>while <condition>(<expr><name>numSteps</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>axis</name> <init>= <expr><call><name>getRandomAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>getRandomName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>axis</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>regexp</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"/(.*/)?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>regexp</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>regexp</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"[^/]*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>regexp</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            <decl_stmt><decl><type><name>long</name></type> <name>time</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>NodeIterator</name></type> <name>nodes</name> <init>= <expr><call><name>executeQuery</name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNodes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nodes</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>time</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>time</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>statement</name> <operator>+</operator> <literal type="string">"\t"</literal> <operator>+</operator> <call><name><name>nodes</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\t"</literal> <operator>+</operator> <name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>CHECK_RESULT</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Set</name></type> <name>paths</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>time</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>traversalEvaluate</name><argument_list>(<argument><expr><name>testLocation</name></expr></argument>,
                        <argument><expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><call><name><name>regexp</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>time</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>time</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\t"</literal> <operator>+</operator> <name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"wrong number of results"</literal></expr></argument>, <argument><expr><call><name><name>paths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nodes</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <while>while <condition>(<expr><call><name><name>nodes</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>nodes</name><operator>.</operator><name>nextNode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <literal type="string">" is not part of the result set"</literal></expr></argument>, <argument><expr><call><name><name>paths</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getRandomAxis</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// 25% descendant axis</comment>
            <return>return <expr><literal type="string">"//"</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// 75% child axis</comment>
            <return>return <expr><literal type="string">"/"</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getRandomName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// 25% any name</comment>
            <return>return <expr><literal type="string">"*"</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// 75% name</comment>
            <return>return <expr><literal type="string">"node"</literal> <operator>+</operator> <call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>NODES_PER_LEVEL</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>traversalEvaluate</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Pattern</name></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name>Set</name></type> <name>matchingPaths</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>pattern</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>n</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>matchingPaths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>n</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>NodeIterator</name></type> <name>it</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getNodes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>traversalEvaluate</name><argument_list>(<argument><expr><call><name><name>it</name><operator>.</operator><name>nextNode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>matchingPaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>createNodes</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodesPerLevel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>levels</name><operator>--</operator></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodesPerLevel</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>child</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"node"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><name>count</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>superuser</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Created "</literal> <operator>+</operator> <operator>(</operator><name>count</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <literal type="string">"k nodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>levels</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>createNodes</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>nodesPerLevel</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>levels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// final save</comment>
            <expr_stmt><expr><call><name><name>superuser</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e552009c9</name><operator>..</operator><name>b24384527</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>TestCase</name> <block>{
         <expr><call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>ArrayHitsTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
         <call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>ExcerptTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>IndexingAggregateTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>AxisQueryTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <comment type="line">// exclude long running tests per default</comment>
         <comment type="line">//suite.addTestSuite(MassiveRangeTest.class);</comment>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt>

</unit>
