<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/5801842a5.java"><expr_stmt><expr><name>From</name> <literal type="number">5801842a5cd9ac9f9b533ddbc97c7bfa658d4c25</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Martijn</name> <name><name>Hendriks</name> <argument_list type="generic">&lt;<argument><name>martijnh</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">29</literal> <name>Jun</name> <literal type="number">2009</literal> <literal type="number">07</literal><operator>:</operator><literal type="number">46</literal><operator>:</operator><literal type="number">50</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">2138</literal> <name>Prevent</name> <name>persistence</name> <name>of</name> <name>faulty</name> <name>back</name><operator>-</operator><name>references</name>

<operator>*</operator> <name>Added</name> <name>testcases</name> <name>and</name> <name>a</name> <name>fix</name> <name>in</name> <name>the</name> <name><name>SharedItemStateManager</name><operator>.</operator>

<name>git</name></name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@789245 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SharedItemStateManager</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">28</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ReferencesTest</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">216</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">233</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">12</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ReferencesTest</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SharedItemStateManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SharedItemStateManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a16ff0b3a</name><operator>..</operator><literal type="number">0d32cf219</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SharedItemStateManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>state</name><operator>/</operator><name><name>SharedItemStateManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">874</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">874</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedItemStateManager</name>
         <specifier>private</specifier> <name>void</name> <call><name>updateReferences</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>ItemStateException</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
             <comment type="line">// process added REFERENCE properties</comment>
             <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ItemState</name></argument>&gt;</argument_list></name></type> <name>i</name> <init>= <expr><call><name><name>local</name><operator>.</operator><name>addedStates</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>addReferences</name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>ItemState</name></type> <name>state</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>state</name><operator>.</operator><name>isNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// remove refs from the target which have been added externally (JCR-2138)</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>hasItemState</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>removeReferences</name><argument_list>(<argument><expr><call><name>getItemState</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <comment type="line">// add new references to the target</comment>
                    <expr_stmt><expr><call><name>addReferences</name><argument_list>(<argument><expr><operator>(</operator><name>PropertyState</name><operator>)</operator> <name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
             </block_content>}</block></for>
 
             <comment type="line">// process modified REFERENCE properties</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">884</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">892</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedItemStateManager</name>
                     <comment type="line">// remove old references from the target</comment>
                     <call><name>removeReferences</name><argument_list>(<argument><expr><call><name>getItemState</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <comment type="line">// add new references to the target</comment>
                    <expr_stmt><expr><call><name>addReferences</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addReferences</name><argument_list>(<argument><expr><operator>(</operator><name>PropertyState</name><operator>)</operator> <name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 }
             }
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">894</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">902</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedItemStateManager</name></expr></expr_stmt>
             }
         }
 
        <function><type><specifier>private</specifier> <name>void</name></type> <name>addReferences</name><parameter_list>(<parameter><decl><type><name>ItemState</name></type> <name>state</name></decl></parameter>)</parameter_list>
                <throws>throws <argument><expr><name>NoSuchItemStateException</name></expr></argument>, <argument><expr><name>ItemStateException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>state</name><operator>.</operator><name>isNode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>PropertyState</name></type> <name>property</name> <init>= <expr><operator>(</operator><name>PropertyState</name><operator>)</operator> <name>state</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>property</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PropertyType</name><operator>.</operator><name>REFERENCE</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>property</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>values</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><call><name>addReference</name><argument_list>(
                                <argument><expr><call><name><name>property</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getUUID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>addReferences</name><parameter_list>(<parameter><decl><type><name>PropertyState</name></type> <name>property</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchItemStateException</name></expr></argument>,
                <argument><expr><name>ItemStateException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>property</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PropertyType</name><operator>.</operator><name>REFERENCE</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>InternalValue</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>property</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>values</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>addReference</name><argument_list>(<argument><expr><call><name><name>property</name><operator>.</operator><name>getPropertyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getUUID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ReferencesTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ReferencesTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..28f32f8cb</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>ReferencesTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">216</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>RepositoryException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Session</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>jcr</name><operator>.</operator><name>ValueFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>jackrabbit</name><operator>.</operator><name>test</name><operator>.</operator><name>AbstractJCRTest</name></name>;</import>

<comment type="block" format="javadoc">/**
 * 
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ReferencesTest</name> <super_list><extends>extends <super><name>AbstractJCRTest</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>uniquePrefix</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>uniquePrefix</name> <operator>=</operator> <literal type="string">"referencesTest"</literal> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <name>cnt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Session</name></type> <name>session</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>a</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>b</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>addNode</name></name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>addMixin</name></name><argument_list>(<argument><expr><literal type="string">"mix:referenceable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>addMixin</name></name><argument_list>(<argument><expr><literal type="string">"mix:referenceable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>saveAndlogout</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tries to create a double back-reference to "ref to B" property.
     * 
     * @throws Exception on test error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDoubleBackReference</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>session1</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>bses1</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref to B"</literal></expr></argument>, <argument><expr><name>bses1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Session</name></type> <name>session2</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>bses2</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref to B"</literal></expr></argument>, <argument><expr><name>bses2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>saveAndlogout</name><argument_list>(<argument><expr><name>session1</name></expr></argument>, <argument><expr><name>session2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertRemoveTestNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tries to create a single back-reference to "ref to B" property which does not exist.
     * 
     * @throws Exception on test error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBackRefToNonExistingProp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>session2</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>bses2</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref to B"</literal></expr></argument>, <argument><expr><name>bses2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Session</name></type> <name>session3</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session3</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref to B"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Value</name><index>[]</index></name><block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>saveAndlogout</name><argument_list>(<argument><expr><name>session2</name></expr></argument>, <argument><expr><name>session3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertRemoveTestNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tries to create a single back-reference to "ref" property for both A and B whereas "ref" is single
     * valued and points to A.
     * 
     * @throws Exception on test error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMisdirectedBackRef</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>session2</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>bses2</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref"</literal></expr></argument>, <argument><expr><name>bses2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Session</name></type> <name>session3</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>ases3</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session3</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session3</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref"</literal></expr></argument>, <argument><expr><name>ases3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>saveAndlogout</name><argument_list>(<argument><expr><name>session2</name></expr></argument>, <argument><expr><name>session3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertRemoveTestNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Variant of {@link #testDoubleBackReference()} for mult-valued props.
     * 
     * @throws Exception on test error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDoubleBackRefReferenceMultiValued</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>session2</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueFactory</name></type> <name>valFac2</name> <init>= <expr><call><name><name>session2</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>bses2</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref to B"</literal></expr></argument>,
            <argument><expr><operator>new</operator> <name><name>Value</name><index>[]</index></name><block>{<expr><call><name><name>valFac2</name><operator>.</operator><name>createValue</name></name><argument_list>(<argument><expr><name>bses2</name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>valFac2</name><operator>.</operator><name>createValue</name></name><argument_list>(<argument><expr><name>bses2</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Session</name></type> <name>session3</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueFactory</name></type> <name>valFac3</name> <init>= <expr><call><name><name>session3</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>bses3</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session3</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session3</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref to B"</literal></expr></argument>,
            <argument><expr><operator>new</operator> <name><name>Value</name><index>[]</index></name><block>{<expr><call><name><name>valFac3</name><operator>.</operator><name>createValue</name></name><argument_list>(<argument><expr><name>bses3</name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>valFac3</name><operator>.</operator><name>createValue</name></name><argument_list>(<argument><expr><name>bses3</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>saveAndlogout</name><argument_list>(<argument><expr><name>session2</name></expr></argument>, <argument><expr><name>session3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertRemoveTestNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Variant of {@link #testMisdirectedBackRef()} for multi-valued props.
     * 
     * @throws Exception on test error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMisdirectedBackRefMultiValued</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>session2</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueFactory</name></type> <name>valFac2</name> <init>= <expr><call><name><name>session2</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>ases2</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref"</literal></expr></argument>,
            <argument><expr><operator>new</operator> <name><name>Value</name><index>[]</index></name><block>{<expr><call><name><name>valFac2</name><operator>.</operator><name>createValue</name></name><argument_list>(<argument><expr><name>ases2</name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>valFac2</name><operator>.</operator><name>createValue</name></name><argument_list>(<argument><expr><name>ases2</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Session</name></type> <name>session3</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueFactory</name></type> <name>valFac3</name> <init>= <expr><call><name><name>session3</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>bses3</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session3</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session3</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Value</name><index>[]</index></name><block>{<expr><call><name><name>valFac3</name><operator>.</operator><name>createValue</name></name><argument_list>(<argument><expr><name>bses3</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>saveAndlogout</name><argument_list>(<argument><expr><name>session2</name></expr></argument>, <argument><expr><name>session3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertRemoveTestNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Regular references usage.
     * 
     * @throws Exception on test error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRegularReference</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>session1</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>bses1</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref to B"</literal></expr></argument>, <argument><expr><name>bses1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Session</name></type> <name>session2</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueFactory</name></type> <name>valFac2</name> <init>= <expr><call><name><name>session2</name><operator>.</operator><name>getValueFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>bses2</name> <init>= <expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"ref to B"</literal></expr></argument>,
            <argument><expr><operator>new</operator> <name><name>Value</name><index>[]</index></name><block>{<expr><call><name><name>valFac2</name><operator>.</operator><name>createValue</name></name><argument_list>(<argument><expr><name>bses2</name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>valFac2</name><operator>.</operator><name>createValue</name></name><argument_list>(<argument><expr><name>bses2</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><literal type="string">"another ref to B"</literal></expr></argument>, <argument><expr><name>bses2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>saveAndlogout</name><argument_list>(<argument><expr><name>session1</name></expr></argument>, <argument><expr><name>session2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertRemoveTestNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertRemoveTestNodes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>session</name> <init>= <expr><call><name>createSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getTestRootNode</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSave</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>logout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param session the session to save
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertSave</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RepositoryException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"saving session failed: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a super user session
     * @throws RepositoryException on error
     */</comment>
    <function><type><specifier>private</specifier> <name>Session</name></type> <name>createSession</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>helper</name><operator>.</operator><name>getSuperuserSession</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>saveAndlogout</name><parameter_list>(<parameter><decl><type><name>Session</name><modifier>...</modifier></type> <name>sessions</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sessions</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Session</name></type> <name>session</name> <range>: <expr><name>sessions</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>logout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param session the session to use
     * @return a node which is more or less unique per testcase
     * @throws RepositoryException on error
     */</comment>
    <function><type><specifier>private</specifier> <name>Node</name></type> <name>getTestRootNode</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>session</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RepositoryException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getRootNode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasNode</name><argument_list>(<argument><expr><name>uniquePrefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>session</name><operator>.</operator><name>getRootNode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNode</name><argument_list>(<argument><expr><name>uniquePrefix</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name><name>session</name><operator>.</operator><name>getRootNode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addNode</name><argument_list>(<argument><expr><name>uniquePrefix</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f503e100d</name><operator>..</operator><name>ad9d98273</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name><name>TestAll</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestAll</name> extends <name>TestCase</name> <block>{
         <expr><call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>RetentionRegistryImplTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
         <call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>InvalidDateTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>SessionGarbageCollectedTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>suite</name><operator>.</operator><name>addTestSuite</name></name><argument_list>(<argument><expr><name><name>ReferencesTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <return>return <expr><name>suite</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></function>

</unit>
