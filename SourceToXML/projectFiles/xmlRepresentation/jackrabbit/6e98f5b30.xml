<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/6e98f5b30.java"><expr_stmt><expr><name>From</name> <literal type="number">6e98f5b30eb1bcfba0973cb2a87c7b2c6d91cacc</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Alexandru</name> <name><name>Parvulescu</name> <argument_list type="generic">&lt;<argument><name>alexparvulescu</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">22</literal> <name>Oct</name> <literal type="number">2012</literal> <literal type="number">11</literal><operator>:</operator><literal type="number">50</literal><operator>:</operator><literal type="number">40</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">3450</literal> <name>Reduce</name> <name>memory</name> <name>usage</name> <name>of</name> <name><name>SharedFieldCache</name><operator>.</operator><name>ValueIndex</name></name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@1400843 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">33</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>-</operator>
 <literal type="number">1</literal> <name>file</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">29</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">4</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">83dcdd509</literal><operator>..</operator><literal type="number">3fbc80cca</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>query</name><operator>/</operator><name>lucene</name><operator>/</operator><name><name>SharedFieldCache</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">228</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">228</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldCache</name> <block>{
         <expr><name>ValueIndex</name> <name>ret</name> <operator>=</operator> <call><name>lookup</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;
         <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxDocs</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>maxDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ComparableArray</name><index>[]</index></name></type> <name>retArray</name> <init>= <expr><operator>new</operator> <name><name>ComparableArray</name><index>[<expr><name>maxDocs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>retArray</name> <init>= <expr><operator>new</operator> <name><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[<expr><name>maxDocs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>positions</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>usingSimpleComparable</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>int</name></type> <name>setValues</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><name>maxDocs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                 <decl_stmt><decl><type><name>IndexFormatVersion</name></type> <name>version</name> <init>= <expr><call><name><name>IndexFormatVersion</name><operator>.</operator><name>getVersion</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">268</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">270</literal></expr><operator>,</operator><expr><literal type="number">34</literal> @@ <specifier>public</specifier> <name>class</name> <name>SharedFieldCache</name> <block>{
                             <expr><name>setValues</name><operator>++</operator></expr>;
                             <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <name>v</name> <operator>=</operator> <call><name>getValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
                             <decl_stmt><decl><type><name>int</name></type> <name>doc</name> <init>= <expr><call><name><name>termDocs</name><operator>.</operator><name>doc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>ComparableArray</name></type> <name>ca</name> <init>= <expr><name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>ca</name> <init>= <expr><name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                             <if_stmt><if>if <condition>(<expr><name>ca</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>ComparableArray</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>termPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>usingSimpleComparable</name></expr>)</condition> <block>{<block_content>
                                    <comment type="line">// put simple value on the queue</comment>
                                    <expr_stmt><expr><call><name><name>positions</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>termPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                                <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
                                    <expr_stmt><expr><name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>ComparableArray</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
                                            <argument><expr><name>termPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                             } else <block>{<block_content>
                                <expr_stmt><expr><name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name> <operator>=</operator> <call><name><name>ca</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>termPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>ca</name> <operator>instanceof</operator> <name>ComparableArray</name></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ComparableArray</name><operator>)</operator> <name>ca</name><operator>)</operator><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
                                            <argument><expr><name>termPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if> <else>else <block>{<block_content>
                                    <comment type="line">// transform all of the existing values from</comment>
                                    <comment type="line">// Comparable to ComparableArray</comment>
                                    <for>for <control>(<init><decl><type><name>int</name></type> <name>pos</name> <range>: <expr><call><name><name>positions</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                                        <expr_stmt><expr><name><name>retArray</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>ComparableArray</name><argument_list>(
                                                <argument><expr><name><name>retArray</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>,
                                                <argument><expr><call><name><name>positions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></for>
                                    <expr_stmt><expr><name>positions</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>usingSimpleComparable</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                                    <decl_stmt><decl><type><name>ComparableArray</name></type> <name>caNew</name> <init>= <expr><operator>(</operator><name>ComparableArray</name><operator>)</operator> <name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                                    <expr_stmt><expr><name><name>retArray</name><index>[<expr><name>doc</name></expr>]</index></name> <operator>=</operator> <call><name><name>caNew</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>,
                                            <argument><expr><name>termPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                             </block_content>}</block>
                         }
                     } <while>while <condition>(<expr><call><name><name>termEnum</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
