<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/jackrabbit/0bc2d8530.java"><expr_stmt><expr><name>From</name> <literal type="number">0bc2d85303dd1a065c2639bf245588316ccbb11d</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Amit</name> <name><name>Jain</name> <argument_list type="generic">&lt;<argument><name>amitj</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">11</literal> <name>Dec</name> <literal type="number">2014</literal> <literal type="number">04</literal><operator>:</operator><literal type="number">24</literal><operator>:</operator><literal type="number">31</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>JCR</name><operator>-</operator><literal type="number">3839</literal><operator>:</operator> <index>[<expr><name>aws</name><operator>-</operator><name>ext</name></expr>]</index> <name>Regression</name> <name>to</name> <name>JCR</name><operator>-</operator><literal type="number">3734</literal> <name>Slow</name> <name>local</name> <name>cache</name>
 <name>built</name><operator>-</operator><name>up</name> <name>time</name> <name>Patch</name> <name>from</name> <name>Shashank</name>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/jackrabbit/trunk@1644551 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>data</name><operator>/</operator><name><name>LocalCache</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">45</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <literal type="number">1</literal> <name>file</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">18</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">27</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>data</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>data</name><operator>/</operator><name><name>LocalCache</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>data</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>data</name><operator>/</operator><name><name>LocalCache</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4f4430a82</literal><operator>..</operator><name>ef9fd1afc</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>data</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>data</name><operator>/</operator><name><name>LocalCache</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>jackrabbit</name><operator>-</operator><name>data</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>jackrabbit</name><operator>/</operator><name>core</name><operator>/</operator><name>data</name><operator>/</operator><name><name>LocalCache</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>LocalCache</name> <block>{
                 <expr><operator>(</operator><name>cachePurgeResizeFactor</name> <operator>*</operator> <name>maxSizeInBytes</name><operator>)</operator></expr> }</block></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
         <expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>new</operator> <call><name>LRUCache</name><argument_list>(<argument><expr><name>maxSizeInBytes</name></expr></argument>, <argument><expr><name>cachePurgeTrigFactor</name></expr></argument>, <argument><expr><name>cachePurgeResizeFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>asyncUploadCache</name></name> <operator>=</operator> <name>asyncUploadCache</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>allFiles</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>it</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>iterateFiles</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>allFiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <decl_stmt><decl><type><name>long</name></type> <name>t1</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Time taken to recursive [{}] took [{}] sec"</literal></expr></argument>,
            <argument><expr><call><name><name>allFiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>t1</name> <operator>-</operator> <name>startTime</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>allFiles</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>o2</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>l1</name> <init>= <expr><call><name><name>o1</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>l2</name> <init>= <expr><call><name><name>o2</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><ternary><condition><expr><name>l1</name> <operator>&lt;</operator> <name>l2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>l1</name> <operator>&gt;</operator> <name>l2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>t2</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Time taken to sort [{}] took [{}] sec"</literal></expr></argument>,
            <argument><expr><call><name><name>allFiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>t2</name> <operator>-</operator> <name>t1</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CacheBuildJob</name><argument_list>(<argument><expr><name>allFiles</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CacheBuildJob</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }
 
     <comment type="block" format="javadoc">/**
@@ -597,17 +578,26 @@ public class LocalCache {
      */</comment>
     private <class>class <name>CacheBuildJob</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{
 
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>allFiles</name></decl> ;</decl_stmt>
         
        <constructor><specifier>private</specifier> <name>CacheBuildJob</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>allFiles</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allFiles</name></name> <operator>=</operator> <name>allFiles</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
         <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>allFiles</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>it</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>iterateFiles</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>allFiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <decl_stmt><decl><type><name>long</name></type> <name>t1</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Time taken to recursive [{}] took [{}] sec"</literal></expr></argument>,
                <argument><expr><call><name><name>allFiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>t1</name> <operator>-</operator> <name>startTime</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <decl_stmt><decl><type><name>String</name></type> <name>dataStorePath</name> <init>= <expr><call><name><name>directory</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"directoryPath = "</literal> <operator>+</operator> <name>dataStorePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// convert to java path format</comment>
             <expr_stmt><expr><name>dataStorePath</name> <operator>=</operator> <call><name><name>dataStorePath</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"directoryPath = "</literal> <operator>+</operator> <name>dataStorePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <decl_stmt><decl><type><name>String</name></type> <name>tmpPath</name> <init>= <expr><call><name><name>tmp</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>tmpPath</name> <operator>=</operator> <call><name><name>tmpPath</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"tmp path [{}]"</literal></expr></argument>, <argument><expr><name>tmpPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
             <decl_stmt><decl><type><name>long</name></type> <name>time</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">616</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">606</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>LocalCache</name> <block>{
                     <expr><name>count</name><operator>++</operator></expr>;
                     <expr><name>String</name> <name>name</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr>;
                     <expr><name>String</name> <name>filePath</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;
                    <comment type="line">// convert to java path format</comment>
                    <expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;
                    <expr><name>filePath</name> <operator>=</operator> <call><name><name>filePath</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;
                     <comment type="line">// skipped any temp file</comment>
                     <if_stmt><if>if<condition>(<expr><call><name><name>filePath</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>tmpPath</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
                         <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name>    <argument_list>(<argument><expr><literal type="string">"tmp file [{}] skipped "</literal></expr></argument>, <argument><expr><name>filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">624</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">617</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>LocalCache</name> <block>{
                     <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>dataStorePath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                         <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>dataStorePath</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt/></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></if></if_stmt>}</block>
                    <comment type="line">// convert to java path format</comment>
                    <name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                         <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block></class>

</unit>
