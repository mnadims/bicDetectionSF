<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/oozie/8ca266fa.java"><expr_stmt><expr><name>From</name> <literal type="number">8ca266face9f7848fde26dd83dafbd45ff7eedb1</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Virag</name> <name>Kothari</name> <operator>&lt;</operator><name>virag</name>@<name>yahoo</name><operator>-</operator><name><name>inc</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">30</literal> <name>Dec</name> <literal type="number">2013</literal> <literal type="number">11</literal><operator>:</operator><literal type="number">49</literal><operator>:</operator><literal type="number">52</literal> <operator>-</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>OOZIE</name><operator>-</operator><literal type="number">1548</literal> <name>OozieDBCLI</name> <name>changes</name> <name>to</name> <name>convert</name> <name>clob</name> <name>to</name> <name>blob</name> <name>and</name>
 <name>remove</name> <name>the</name> <name>discriminator</name> <call><name>column</name> <argument_list>(<argument><expr><name>virag</name></expr></argument>)</argument_list></call>

<operator>--</operator>
 <name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>                               <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>OozieDBCLI</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">473</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>TestOozieDBCLI</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">11</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>TestOozieMySqlDBCLI</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">4</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">320</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">167</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">618219044..3aa3186c7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
 <operator>--</operator> <name>Oozie</name> <literal type="number">4.1.0</literal> <call><name>release</name> <argument_list>(<argument><expr><name>trunk</name> <operator>-</operator> <name>unreleased</name></expr></argument>)</argument_list></call>
 
<name>OOZIE</name><operator>-</operator><literal type="number">1548</literal> <name>OozieDBCLI</name> <name>changes</name> <name>to</name> <name>convert</name> <name>clob</name> <name>to</name> <name>blob</name> <name>and</name> <name>remove</name> <name>the</name> <name>discriminator</name> <call><name>column</name> <argument_list>(<argument><expr><name>virag</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">1504</literal> <name>Allow</name> <name>specifying</name> <name>a</name> <name>fixed</name> <name>instance</name> <name>as</name> <name>the</name> <name>start</name> <name>instance</name> <name>of</name> <name>a</name> <name>data</name><operator>-</operator><call><name>in</name> <argument_list>(<argument><expr><name>puru</name> <name>via</name> <name>rohini</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">1576</literal> <name>Add</name> <name>documentation</name></expr></expr_stmt> <for>for Oozie Sqoop CLI <control>(<init><expr><name>bowenzhangusa</name> <name>via</name> <name>rkanter</name></expr></init>)</control><block type="pseudo"><block_content>
 <expr_stmt><expr><name>OOZIE</name><operator>-</operator><literal type="number">1616</literal> <name>Add</name> <name>sharelib</name> <name>and</name> <name>launcherlib</name> <name>locations</name> <name>to</name> <name>the</name> <name>instrumentation</name> <call><name>info</name> <argument_list>(<argument><expr><name>rkanter</name></expr></argument>)</argument_list></call>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>tools</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>OozieDBCLI</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>tools</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>OozieDBCLI</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e3e70f2cb</name><operator>..</operator><literal type="number">9b650b78d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>tools</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>OozieDBCLI</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>tools</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>OozieDBCLI</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@</expr></expr_stmt></block_content></block></for> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>cli</name><operator>.</operator><name>CommandLine</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>cli</name><operator>.</operator><name>Option</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>cli</name><operator>.</operator><name>Options</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>cli</name><operator>.</operator><name>ParseException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>IOUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>BuildInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>cli</name><operator>.</operator><name>CLIParser</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>JPAService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Blob</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>CallableStatement</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Clob</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DatabaseMetaData</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DriverManager</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Statement</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
     <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>POST_UPGRADE_CMD</name> <operator>=</operator> <literal type="string">"postupgrade"</literal></expr>;
     <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>SQL_FILE_OPT</name> <operator>=</operator> <literal type="string">"sqlfile"</literal></expr>;
     <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>String</name> <name>RUN_OPT</name> <operator>=</operator> <literal type="string">"run"</literal></expr>;
    <expr><specifier>private</specifier> <name>final</name> <specifier>static</specifier> <name>String</name> <name>DB_VERSION</name> <operator>=</operator> <literal type="string">"2"</literal></expr>;
    <expr><specifier>private</specifier> <name>final</name> <specifier>static</specifier> <name>String</name> <name>DB_VERSION_PRE_4_0</name> <operator>=</operator> <literal type="string">"1"</literal></expr>;
    <expr><specifier>private</specifier> <name>final</name> <specifier>static</specifier> <name>String</name> <name>DB_VERSION_FOR_4_0</name> <operator>=</operator> <literal type="string">"2"</literal></expr>;
    <expr><name>final</name> <specifier>static</specifier> <name>String</name> <name>DB_VERSION_FOR_5_0</name> <operator>=</operator> <literal type="string">"3"</literal></expr>;
    <expr><specifier>private</specifier> <name>final</name> <specifier>static</specifier> <name>String</name> <name>DISCRIMINATOR_COLUMN</name> <operator>=</operator> <literal type="string">"bean_type"</literal></expr>;
    <expr><specifier>private</specifier> <name>final</name> <specifier>static</specifier> <name>String</name> <name>TEMP_COLUMN_PREFIX</name> <operator>=</operator> <literal type="string">"temp_"</literal></expr>;
    <expr><specifier>private</specifier> <name><name>HashMap</name> <argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name> <name>clobColumnMap</name></expr>;
 
     <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name><name>String</name><index>[]</index></name> <name>HELP_INFO</name> <operator>=</operator> <block>{
         <expr><literal type="string">""</literal></expr>,
@@ <expr><operator>-</operator><literal type="number">173</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">182</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
         <expr><call><name>validateDBSchema</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>verifyOozieSysTable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>createUpgradeDB</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>createOozieSysTable</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>setSQLMediumTextFlag</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>createOozieSysTable</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>DB_VERSION_FOR_5_0</name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;
         <if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Oozie DB has been created for Oozie version '"</literal> <operator>+</operator>
@@ <operator>-</operator><literal type="number">187</literal></expr></argument>,<argument><expr><literal type="number">63</literal> <operator>+</operator><literal type="number">195</literal></expr></argument>,<argument><expr><literal type="number">66</literal> @@ <specifier>public</specifier> class <name>OozieDBCLI</name> <block>{
         <expr><call><name>validateConnection</name><argument_list>()</argument_list></call></expr>;
         <call><name>validateDBSchema</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr></argument>;</argument_list></call></expr></expr_stmt>
         <expr_stmt><expr><call><name>verifyDBState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>version</name> <init>= <expr><call><name><name>BuildInfo</name><operator>.</operator><name>getBuildInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><name><name>BuildInfo</name><operator>.</operator><name>BUILD_VERSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verifyOozieSysTable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// If OOZIE_SYS table doesn't exist (pre 3.2)</comment>
            <expr_stmt><expr><call><name>upgradeDBTo40</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verifyOozieSysTable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// If OOZIE_SYS table doesn't</comment>
                                                  <comment type="line">// exist (pre 3.2)</comment>
            <expr_stmt><expr><call><name>createOozieSysTable</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>DB_VERSION_PRE_4_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr>
        <if_stmt><else>else <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>ver</name> <init>= <expr><call><name>getOozieDBVersion</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>ver</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// if db.version equals to 1 (after 3.2+), need to upgrade</comment>
                <expr_stmt><expr><call><name>upgradeDBTo40</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>ver</name> <init>= <expr><call><name>getOozieDBVersion</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ver</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>DB_VERSION_FOR_5_0</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Oozie DB already upgraded to Oozie version '"</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt>}</block>
        <call><name>createUpgradeDB</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;

        <while>while <condition>(<expr><operator>!</operator><call><name><name>ver</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>DB_VERSION_FOR_5_0</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>ver</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>DB_VERSION_PRE_4_0</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Upgrading to db schema for Oozie 4.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>upgradeDBTo40</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ver</name> <operator>=</operator> <ternary><condition><expr><name>run</name></expr> ?</condition><then> <expr><call><name>getOozieDBVersion</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>DB_VERSION_FOR_4_0</name></expr></else></ternary></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></if></if_stmt></block_content></block></while>}</block></expr></expr_stmt>
            <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>ver</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// if db.version equals to 2, it's already upgraded</comment>
                <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Oozie DB has already been upgraded"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>ver</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>DB_VERSION_FOR_4_0</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Upgrading to db schema for Oozie "</literal> <operator>+</operator> <name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>upgradeDBto50</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ver</name> <operator>=</operator> <ternary><condition><expr><name>run</name></expr> ?</condition><then> <expr><call><name>getOozieDBVersion</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>DB_VERSION_FOR_5_0</name></expr></else></ternary></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></if></if_stmt>
 
         <if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Oozie DB has been upgraded to Oozie version '"</literal>
                    <operator>+</operator> <call><name><name>BuildInfo</name><operator>.</operator><name>getBuildInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><name><name>BuildInfo</name><operator>.</operator><name>BUILD_VERSION</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Oozie DB has been upgraded to Oozie version '"</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }
 
    private <function><type><name>void</name></type> <name>upgradeDBTo40</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>fromVerOne</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>createUpgradeDB</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fromVerOne</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>upgradeOozieDBVersion</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>createOozieSysTable</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>upgradeDBTo40</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>upgradeOozieDBVersion</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>DB_VERSION_FOR_4_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>postUpgradeTasks</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>ddlTweaks</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fromVerOne</name> <operator>||</operator> <call><name>verifySQLMediumText</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>doSQLMediumTextTweaks</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setSQLMediumTextFlag</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
     </block_content>}</block></function>
 
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>UPDATE_DB_VERSION</name> <init>=
            <expr><literal type="string">"update OOZIE_SYS set data='"</literal> <operator>+</operator> <name>DB_VERSION</name> <operator>+</operator> <literal type="string">"' where name='db.version'"</literal></expr></init></decl>;</decl_stmt>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>upgradeDBto50</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>upgradeOozieDBVersion</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>DB_VERSION_FOR_5_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ddlTweaksFor50</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>UPDATE_OOZIE_VERSION</name> <init>=
             <expr><literal type="string">"update OOZIE_SYS set data='"</literal> <operator>+</operator> <call><name><name>BuildInfo</name><operator>.</operator><name>getBuildInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name><argument_list>(<argument><expr><name><name>BuildInfo</name><operator>.</operator><name>BUILD_VERSION</name></name></expr></argument>)</argument_list></call>
             <operator>+</operator> <literal type="string">"' where name='oozie.version'"</literal></expr></init></decl>;</decl_stmt>
 
    <function><type><specifier>private</specifier> <name>void</name></type> <name>upgradeOozieDBVersion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>upgradeOozieDBVersion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>UPDATE_DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>UPDATE_OOZIE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Update db.version in OOZIE_SYS table to "</literal> <operator>+</operator> <name>DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Update db.version in OOZIE_SYS table to "</literal> <operator>+</operator> <name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
             <decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name>createConnection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <try>try <block>{<block_content>
                 <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>setAutoCommit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <decl_stmt><decl><type><name>Statement</name></type> <name>st</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createStatement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>UPDATE_DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><literal type="string">"update OOZIE_SYS set data='"</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">"' where name='db.version'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>UPDATE_OOZIE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">258</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">269</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
     }</block>
 
     <specifier>private</specifier> <name>void</name> <call><name>postUpgradeDB</name><argument_list>(<argument><expr><name>String</name> <name>sqlFile</name></expr></argument>, <argument><expr><name>boolean</name> <name>run</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
        <expr><call><name>postUpgradeDBTo40</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>version</name> <init>= <expr><call><name>getOozieDBVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getOozieDBVersion</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>DB_VERSION_FOR_4_0</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>postUpgradeDBTo40</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"No Post ugprade updates available for "</literal> <operator>+</operator> <name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
     </block_content>}</block></if></if_stmt>
 
     <function><type><specifier>private</specifier> <name>void</name></type> <name>postUpgradeDBTo40</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name>validateConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>validateDBSchema</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>verifyOozieSysTable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>verifyOozieDBVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>verifyDBState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>postUpgradeTasks</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">405</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">421</literal></expr><operator>,</operator><expr><literal type="number">255</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
         }</block></expr></expr_stmt>
     </block_content>}</block></if></if_stmt>
 
    <function><type><specifier>private</specifier> <name>void</name></type> <name>convertClobToBlobInOracle</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>Connection</name></type> <name>conn</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return ;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Converting clob columns to blob for all tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Statement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createStatement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CallableStatement</name></type> <name>tempBlobCall</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareCall</name></name><argument_list>(<argument><expr><literal type="string">"{call dbms_lob.CREATETEMPORARY(?, TRUE)}"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tempBlobCall</name><operator>.</operator><name>registerOutParameter</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Types</name><operator>.</operator><name>BLOB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CallableStatement</name></type> <name>dbmsLobCallStmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareCall</name></name><argument_list>(<argument><expr><literal type="string">"{call dbms_lob.CONVERTTOBLOB(?, ?, ?, ?, ?, 0, ?, ?)}"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>registerOutParameter</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Types</name><operator>.</operator><name>BLOB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Lob max size</comment>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>registerOutParameter</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Types</name><operator>.</operator><name>INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// dest_offset</comment>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// src_offset</comment>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>registerOutParameter</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Types</name><operator>.</operator><name>INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// blob_csid</comment>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>registerOutParameter</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Types</name><operator>.</operator><name>INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// lang_context</comment>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// warning</comment>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>registerOutParameter</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Types</name><operator>.</operator><name>INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>tableClobColumnMap</name> <range>: <expr><call><name>getTableClobColumnMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>tableClobColumnMap</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columnNames</name> <init>= <expr><call><name><name>tableClobColumnMap</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>column</name> <range>: <expr><name>columnNames</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><call><name>getAddColumnQuery</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>TEMP_COLUMN_PREFIX</name> <operator>+</operator> <name>column</name></expr></argument>, <argument><expr><literal type="string">"blob"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>(<argument><expr><call><name>getSelectQuery</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>columnNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Clob</name></type> <name>srcClob</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getClob</name></name><argument_list>(<argument><expr><call><name><name>columnNames</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>srcClob</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>tempBlobCall</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Blob</name></type> <name>destLob</name> <init>= <expr><call><name><name>tempBlobCall</name><operator>.</operator><name>getBlob</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>setBlob</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>destLob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>setClob</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>srcClob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Blob</name></type> <name>blob</name> <init>= <expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>getBlob</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>PreparedStatement</name></type> <name>ps</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><literal type="string">"update "</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">" set "</literal> <operator>+</operator> <name>TEMP_COLUMN_PREFIX</name>
                            <operator>+</operator> <call><name><name>columnNames</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"=? where id = ?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>setBlob</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>column</name> <range>: <expr><name>columnNames</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><call><name>getDropColumnQuery</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><call><name>getRenameColumnQuery</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>TEMP_COLUMN_PREFIX</name> <operator>+</operator> <name>column</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>dbmsLobCallStmt</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tempBlobCall</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>convertClobToBlobInMysql</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>Connection</name></type> <name>conn</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Converting mediumtext/text columns to mediumblob for all tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Statement</name></type> <name>statement</name> <init>= <expr><ternary><condition><expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>conn</name><operator>.</operator><name>createStatement</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>tableClobColumnMap</name> <range>: <expr><call><name>getTableClobColumnMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>tableClobColumnMap</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columnNames</name> <init>= <expr><call><name><name>tableClobColumnMap</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>modifyColumn</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>modifyColumn</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" ALTER TABLE "</literal> <operator>+</operator> <name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>column</name> <range>: <expr><name>columnNames</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>modifyColumn</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" MODIFY "</literal> <operator>+</operator> <name>column</name> <operator>+</operator> <literal type="string">" mediumblob,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>modifyColumn</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>modifyColumn</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>modifyColumn</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>modifyColumn</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>statement</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><call><name><name>modifyColumn</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>statement</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>convertClobToBlobInPostgres</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>Connection</name></type> <name>conn</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Converting text columns to bytea for all tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Statement</name></type> <name>statement</name> <init>= <expr><ternary><condition><expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>conn</name><operator>.</operator><name>createStatement</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>tableClobColumnMap</name> <range>: <expr><call><name>getTableClobColumnMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>tableClobColumnMap</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columnNames</name> <init>= <expr><call><name><name>tableClobColumnMap</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>column</name> <range>: <expr><name>columnNames</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>addQuery</name> <init>= <expr><call><name>getAddColumnQuery</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>TEMP_COLUMN_PREFIX</name> <operator>+</operator> <name>column</name></expr></argument>, <argument><expr><literal type="string">"bytea"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>addQuery</name> <operator>+</operator> <literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>updateQuery</name> <init>= <expr><literal type="string">"update "</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">" set "</literal> <operator>+</operator> <name>TEMP_COLUMN_PREFIX</name> <operator>+</operator> <name>column</name> <operator>+</operator> <literal type="string">"=decode(replace("</literal>
                        <operator>+</operator> <name>column</name> <operator>+</operator> <literal type="string">", '\\', '\\\\'), 'escape')"</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>updateQuery</name> <operator>+</operator> <literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>dropQuery</name> <init>= <expr><call><name>getDropColumnQuery</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>dropQuery</name> <operator>+</operator> <literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>renameQuery</name> <init>= <expr><call><name>getRenameColumnQuery</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>TEMP_COLUMN_PREFIX</name> <operator>+</operator> <name>column</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>renameQuery</name> <operator>+</operator> <literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>statement</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>addQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>updateQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>dropQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>renameQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>statement</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"DONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>convertClobToBlobinDerby</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>Connection</name></type> <name>conn</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Converting clob columns to blob for all tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Statement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createStatement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>tableClobColumnMap</name> <range>: <expr><call><name>getTableClobColumnMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>tableClobColumnMap</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columnNames</name> <init>= <expr><call><name><name>tableClobColumnMap</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>column</name> <range>: <expr><name>columnNames</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><call><name>getAddColumnQuery</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>TEMP_COLUMN_PREFIX</name> <operator>+</operator> <name>column</name></expr></argument>, <argument><expr><literal type="string">"blob"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>(<argument><expr><call><name>getSelectQuery</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>columnNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Clob</name></type> <name>confClob</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getClob</name></name><argument_list>(<argument><expr><call><name><name>columnNames</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>confClob</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>PreparedStatement</name></type> <name>ps</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><literal type="string">"update "</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">" set "</literal> <operator>+</operator> <name>TEMP_COLUMN_PREFIX</name>
                            <operator>+</operator> <call><name><name>columnNames</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"=? where id = ?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>IOUtils</name><operator>.</operator><name>toByteArray</name></name><argument_list>(<argument><expr><call><name><name>confClob</name><operator>.</operator><name>getCharacterStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>setBinaryStream</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>column</name> <range>: <expr><name>columnNames</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><call><name>getDropColumnQuery</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><literal type="string">"RENAME COLUMN "</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>TEMP_COLUMN_PREFIX</name> <operator>+</operator> <name>column</name> <operator>+</operator> <literal type="string">" TO "</literal>
                        <operator>+</operator> <name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"DONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getRenameColumnQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>srcColumn</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>destColumn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE "</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">" RENAME column "</literal> <operator>+</operator> <name>srcColumn</name> <operator>+</operator> <literal type="string">" TO "</literal> <operator>+</operator> <name>destColumn</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getDropColumnQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE "</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">" DROP column "</literal> <operator>+</operator> <name>column</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getAddColumnQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tempColumn</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE "</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">" ADD "</literal> <operator>+</operator> <name>tempColumn</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getSelectQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columnNames</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>selectQuery</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>selectQuery</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"SELECT id,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>column</name> <range>: <expr><name>columnNames</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>selectQuery</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>selectQuery</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>selectQuery</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>selectQuery</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>selectQuery</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>selectQuery</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" FROM "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>selectQuery</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>selectQuery</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>ddlTweaksFor50</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>dbVendor</name> <init>= <expr><call><name>getDBVendor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>run</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>createConnection</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>dbVendor</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"oracle"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>convertClobToBlobInOracle</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>dbVendor</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"mysql"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>convertClobToBlobInMysql</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>dbVendor</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"postgresql"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>convertClobToBlobInPostgres</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>dbVendor</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"derby"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>convertClobToBlobinDerby</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Dropping discriminator column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ddlQueries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ddlQueries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getDropColumnQuery</name><argument_list>(<argument><expr><literal type="string">"WF_JOBS"</literal></expr></argument>, <argument><expr><name>DISCRIMINATOR_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ddlQueries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getDropColumnQuery</name><argument_list>(<argument><expr><literal type="string">"WF_ACTIONS"</literal></expr></argument>, <argument><expr><name>DISCRIMINATOR_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ddlQueries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getDropColumnQuery</name><argument_list>(<argument><expr><literal type="string">"COORD_JOBS"</literal></expr></argument>, <argument><expr><name>DISCRIMINATOR_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ddlQueries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getDropColumnQuery</name><argument_list>(<argument><expr><literal type="string">"COORD_ACTIONS"</literal></expr></argument>, <argument><expr><name>DISCRIMINATOR_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ddlQueries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getDropColumnQuery</name><argument_list>(<argument><expr><literal type="string">"BUNDLE_JOBS"</literal></expr></argument>, <argument><expr><name>DISCRIMINATOR_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ddlQueries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getDropColumnQuery</name><argument_list>(<argument><expr><literal type="string">"BUNDLE_ACTIONS"</literal></expr></argument>, <argument><expr><name>DISCRIMINATOR_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Statement</name></type> <name>stmt</name> <init>= <expr><ternary><condition><expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>conn</name><operator>.</operator><name>createStatement</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>query</name> <range>: <expr><name>ddlQueries</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>query</name> <operator>+</operator> <literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"DONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getTableClobColumnMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>clobColumnMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>clobColumnMap</name></expr>;</return>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>clobColumnMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clobColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"WF_ACTIONS"</literal></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"conf"</literal></expr></argument>, <argument><expr><literal type="string">"sla_xml"</literal></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><literal type="string">"stats"</literal></expr></argument>, <argument><expr><literal type="string">"external_child_ids"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clobColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"WF_JOBS"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"proto_action_conf"</literal></expr></argument>, <argument><expr><literal type="string">"sla_xml"</literal></expr></argument>, <argument><expr><literal type="string">"conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clobColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(
                    <argument><expr><literal type="string">"COORD_ACTIONS"</literal></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"sla_xml"</literal></expr></argument>, <argument><expr><literal type="string">"created_conf"</literal></expr></argument>, <argument><expr><literal type="string">"run_conf"</literal></expr></argument>, <argument><expr><literal type="string">"action_xml"</literal></expr></argument>,
                            <argument><expr><literal type="string">"missing_dependencies"</literal></expr></argument>, <argument><expr><literal type="string">"push_missing_dependencies"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clobColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"COORD_JOBS"</literal></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"conf"</literal></expr></argument>, <argument><expr><literal type="string">"job_xml"</literal></expr></argument>, <argument><expr><literal type="string">"orig_job_xml"</literal></expr></argument>, <argument><expr><literal type="string">"sla_xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clobColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"BUNDLE_JOBS"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"conf"</literal></expr></argument>, <argument><expr><literal type="string">"job_xml"</literal></expr></argument>, <argument><expr><literal type="string">"orig_job_xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>clobColumnMap</name></expr>;</return>
    </block_content>}</block></function>


     <function><type><specifier>private</specifier> <name>void</name></type> <name>ddlTweaks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">512</literal></expr><operator>,</operator><expr><literal type="number">90</literal> <operator>+</operator><literal type="number">777</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
         <expr><literal type="string">"ALTER TABLE COORD_JOBS DROP COLUMN AUTH_TOKEN"</literal></expr>,
         <expr><literal type="string">"ALTER TABLE WF_JOBS DROP COLUMN AUTH_TOKEN"</literal></expr>}</block></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SET_SQL_MEDIUMTEXT_TRUE</name> <init>= <expr><literal type="string">"insert into OOZIE_SYS (name, data) values ('mysql.mediumtext', 'true')"</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setSQLMediumTextFlag</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getDBVendor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"mysql"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>SET_SQL_MEDIUMTEXT_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Set MySQL MEDIUMTEXT flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name>createConnection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>setAutoCommit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Statement</name></type> <name>st</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createStatement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>SET_SQL_MEDIUMTEXT_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Could not set MySQL MEDIUMTEXT flag: "</literal> <operator>+</operator> <call><name><name>ex</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch>
                <finally>finally <block>{<block_content>
                    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></finally></try>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"DONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>SQL_MEDIUMTEXT_DDL_QUERIES</name> <init>= <expr><block>{<expr><literal type="string">"ALTER TABLE BUNDLE_JOBS MODIFY conf MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE BUNDLE_JOBS MODIFY job_xml MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE BUNDLE_JOBS MODIFY orig_job_xml MEDIUMTEXT"</literal></expr>,

                                                                <expr><literal type="string">"ALTER TABLE COORD_ACTIONS MODIFY action_xml MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE COORD_ACTIONS MODIFY created_conf MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE COORD_ACTIONS MODIFY missing_dependencies MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE COORD_ACTIONS MODIFY run_conf MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE COORD_ACTIONS MODIFY sla_xml MEDIUMTEXT"</literal></expr>,

                                                                <expr><literal type="string">"ALTER TABLE COORD_JOBS MODIFY conf MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE COORD_JOBS MODIFY job_xml MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE COORD_JOBS MODIFY orig_job_xml MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE COORD_JOBS MODIFY sla_xml MEDIUMTEXT"</literal></expr>,

                                                                <expr><literal type="string">"ALTER TABLE SLA_EVENTS MODIFY job_data MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE SLA_EVENTS MODIFY notification_msg MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE SLA_EVENTS MODIFY upstream_apps MEDIUMTEXT"</literal></expr>,

                                                                <expr><literal type="string">"ALTER TABLE WF_ACTIONS MODIFY conf MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE WF_ACTIONS MODIFY external_child_ids MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE WF_ACTIONS MODIFY stats MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE WF_ACTIONS MODIFY data MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE WF_ACTIONS MODIFY sla_xml MEDIUMTEXT"</literal></expr>,

                                                                <expr><literal type="string">"ALTER TABLE WF_JOBS MODIFY conf MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE WF_JOBS MODIFY proto_action_conf MEDIUMTEXT"</literal></expr>,
                                                                <expr><literal type="string">"ALTER TABLE WF_JOBS MODIFY sla_xml MEDIUMTEXT"</literal></expr>}</block></expr></init></decl>;</decl_stmt>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>doSQLMediumTextTweaks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getDBVendor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"mysql"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>run</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>createConnection</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"All MySQL TEXT columns changed to MEDIUMTEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>ddlQuery</name> <range>: <expr><name>SQL_MEDIUMTEXT_DDL_QUERIES</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>ddlQuery</name> <operator>+</operator> <literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>setAutoCommit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>Statement</name></type> <name>st</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createStatement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>ddlQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"DONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <finally>finally <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
 
     <function><type><specifier>private</specifier> <name>Connection</name></type> <name>createConnection</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>conf</name> <init>= <expr><call><name>getJdbcConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">674</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">855</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
 
     <expr><specifier>private</specifier> <name>final</name> <specifier>static</specifier> <name>String</name> <name>GET_OOZIE_DB_VERSION</name> <operator>=</operator> <literal type="string">"select data from OOZIE_SYS where name = 'db.version'"</literal></expr>;
 
    <expr><specifier>private</specifier> <name>void</name> <call><name>verifyOozieDBVersion</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
        <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Verify Oozie DB version"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
        <expr><name>String</name> <name>version</name> <operator>=</operator> <call><name>getOozieDBVersion</name><argument_list>()</argument_list></call></expr>;
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DB_VERSION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>version</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"ERROR: Expected Oozie DB version '"</literal> <operator>+</operator> <name>DB_VERSION</name> <operator>+</operator> <literal type="string">"', found '"</literal> <operator>+</operator> <call><name><name>version</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        <expr_stmt/></block_content></block></if></if_stmt>}</block>
        <call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"DONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

     <function><type><specifier>private</specifier> <name>String</name></type> <name>getOozieDBVersion</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>String</name></type> <name>version</name></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Get Oozie DB version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">709</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">881</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
         <return>return <expr><name>version</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>GET_USE_MYSQL_MEDIUMTEXT</name> <init>= <expr><literal type="string">"select data from OOZIE_SYS where name = 'mysql.mediumtext'"</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>verifySQLMediumText</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ret</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getDBVendor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"mysql"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Check MySQL MEDIUMTEXT flag exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>flag</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name>createConnection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Statement</name></type> <name>st</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createStatement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>executeQuery</name></name><argument_list>(<argument><expr><name>GET_USE_MYSQL_MEDIUMTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></catch>
            <finally>finally <block>{<block_content>
                <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
            <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"DONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>CREATE_OOZIE_SYS</name> <init>=
         <expr><literal type="string">"create table OOZIE_SYS (name varchar(100), data varchar(100))"</literal></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SET_DB_VERSION</name> <init>=
        <expr><literal type="string">"insert into OOZIE_SYS (name, data) values ('db.version', '"</literal> <operator>+</operator> <name>DB_VERSION</name> <operator>+</operator> <literal type="string">"')"</literal></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SET_OOZIE_VERSION</name> <init>=
         <expr><literal type="string">"insert into OOZIE_SYS (name, data) values ('oozie.version', '"</literal> <operator>+</operator>
@@ <operator>-</operator><literal type="number">752</literal></expr></init></decl>,7 +892,8 @@ public <decl><type ref="prev"/><name>class</name> <name>OozieDBCLI</name> <block>{<block_content>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>CREATE_OOZIE_SYS_INDEX</name> <init>=
         <expr><literal type="string">"create clustered index OOZIE_SYS_PK on OOZIE_SYS (name);"</literal></expr></init></decl>;</decl_stmt>
 
    <function><type><specifier>private</specifier> <name>void</name></type> <name>createOozieSysTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>createOozieSysTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>insertDbVerion</name> <init>= <expr><literal type="string">"insert into OOZIE_SYS (name, data) values ('db.version', '"</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">"')"</literal></expr></init></decl>;</decl_stmt>
         <comment type="line">// Some databases do not support tables without a clustered index</comment>
         <comment type="line">// so we need to explicitly create a clustered index for OOZIE_SYS table</comment>
         <decl_stmt><decl><type><name>boolean</name></type> <name>createIndex</name> <init>= <expr><call><name>getDBVendor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"sqlserver"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">763</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">904</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
         <if_stmt><if>if <condition>(<expr><name>createIndex</name></expr>)</condition><block>{<block_content>
             <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>CREATE_OOZIE_SYS_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/>}</block_content>
        writer.println(SET_DB_VERSION</block></if></if_stmt>)</block></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>insertDbVerion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>SET_OOZIE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Create OOZIE_SYS table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">776</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">917</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
                 <if_stmt><if>if <condition>(<expr><name>createIndex</name></expr>)</condition><block>{<block_content>
                     <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>CREATE_OOZIE_SYS_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt/>}</block_content>
                st.executeUpdate(SET_DB_VERSION</block></if></if_stmt>)</block></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>insertDbVerion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>SET_OOZIE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">856</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">997</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
             <expr><call><name><name>args</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-sqlFile"</literal></expr></argument>)</argument_list></call></expr>;
             <expr><call><name><name>args</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>)</argument_list></call></expr>;
         }</block>
        <call><name><name>args</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-indexes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.oozie.WorkflowJobBean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.oozie.WorkflowActionBean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.oozie.CoordinatorJobBean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">874</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1017</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>OozieDBCLI</name> <block>{
         <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>(</operator><name>create</name><operator>)</operator> <operator>?</operator> <literal type="string">"Create SQL schema"</literal> <operator>:</operator> <literal type="string">"Upgrade SQL schema"</literal></expr></argument>)</argument_list></call></expr>;
         <expr><name><name>String</name><index>[]</index></name> <name>args</name> <operator>=</operator> <call><name>createMappingToolArguments</name><argument_list>(<argument><expr><name>sqlFile</name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>openjpa</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>meta</name><operator>.</operator><name>MappingTool</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;
        <if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// With oracle, mapping tool tries to create a table even if already</comment>
        <comment type="line">// exists and fails</comment>
        <comment type="line">// However the update is reflected in the database even though the below</comment>
        <comment type="line">// block is not executed</comment>
        <if_stmt><if>if <condition>(<expr><name>run</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>create</name> <operator>||</operator> <operator>!</operator><call><name>getDBVendor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"oracle"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>createMappingToolArguments</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>openjpa</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>meta</name><operator>.</operator><name>MappingTool</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/>}</block_content>
diff --git a/tools/src/test/java/org/apache/oozie/tools/TestOozieDBCLI.java b/tools/src/test/java/org/apache/oozie/tools/TestOozieDBCLI.java
index acbb36ddd..0dc446277 100644
-- a/tools/src/test/java/org/apache/oozie/tools/TestOozieDBCLI.java
++ b/tools/src/test/java/org/apache/oozie/tools/TestOozieDBCLI.java
@@ -94</block><operator>,</operator><expr_stmt><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">94</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestOozieDBCLI</name> extends <name>XTestCase</name> <block>{
             <expr><call><name><name>System</name><operator>.</operator><name>setOut</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PrintStream</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
             <name><name>String</name><index>[]</index></name> <name>argsVersion</name> <operator>=</operator> <block>{ <expr><literal type="string">"version"</literal></expr> }</block></block></expr>;</expr_stmt></if></if_stmt>
             <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>execOozieDBCLICommands</name><argument_list>(<argument><expr><name>argsVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"db.version: 2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"db.version: "</literal><operator>+</operator> <name><name>OozieDBCLI</name><operator>.</operator><name>DB_VERSION_FOR_5_0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <comment type="line">// show help information</comment>
             <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>argsHelp</name> <init>= <expr><block>{ <expr><literal type="string">"help"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">117</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestOozieDBCLI</name> extends <name>XTestCase</name> <block>{
         <expr><call><name>execSQL</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE BUNDLE_JOBS ADD COLUMN AUTH_TOKEN CLOB"</literal></expr></argument>)</argument_list></call></expr>;
         <call><name>execSQL</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE COORD_JOBS ADD COLUMN AUTH_TOKEN CLOB"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>execSQL</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE WF_JOBS ADD COLUMN AUTH_TOKEN CLOB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>execSQL</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE WF_JOBS ADD COLUMN BEAN_TYPE VARCHAR(31)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>execSQL</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE WF_ACTIONS ADD COLUMN BEAN_TYPE VARCHAR(31)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>execSQL</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE COORD_JOBS ADD COLUMN BEAN_TYPE VARCHAR(31)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>execSQL</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE COORD_ACTIONS ADD COLUMN BEAN_TYPE VARCHAR(31)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>execSQL</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE BUNDLE_JOBS ADD COLUMN BEAN_TYPE VARCHAR(31)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>execSQL</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE BUNDLE_ACTIONS ADD COLUMN BEAN_TYPE VARCHAR(31)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>argsUpgrade</name> <init>= <expr><block>{ <expr><literal type="string">"upgrade"</literal></expr>, <expr><literal type="string">"-sqlfile"</literal></expr>, <expr><call><name><name>upgrade</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"-run"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>execOozieDBCLICommands</name><argument_list>(<argument><expr><name>argsUpgrade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">125</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">131</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestOozieDBCLI</name> extends <name>XTestCase</name> <block>{
         <expr><name>File</name> <name>postUpgrade</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getTestCaseConfDir</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"postUpdate.sql"</literal></expr></argument>)</argument_list></call></expr>;
         <name><name>String</name><index>[]</index></name> <name>argsPostUpgrade</name> <operator>=</operator> <block>{ <expr><literal type="string">"postupgrade"</literal></expr>, <expr><literal type="string">"-sqlfile"</literal></expr>, <expr><call><name><name>postUpgrade</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"-run"</literal></expr> }</block></block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>execOozieDBCLICommands</name><argument_list>(<argument><expr><name>argsPostUpgrade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>postUpgrade</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
 
     private int execOozieDBCLICommands(String[] args</block></if></if_stmt>) <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>tools</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>TestOozieMySqlDBCLI</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>tools</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>TestOozieMySqlDBCLI</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>eec5eee48</name><operator>..</operator><name>f7f8456ad</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>tools</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>TestOozieMySqlDBCLI</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>tools</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>tools</name><operator>/</operator><name><name>TestOozieMySqlDBCLI</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">88</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">88</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestOozieMySqlDBCLI</name> extends <name>XTestCase</name> <block>{
         <expr><name><name>FakeConnection</name><operator>.</operator><name>CREATE</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
 
         <expr><name>File</name> <name>upgrade</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getTestCaseConfDir</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"update.sql"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>String</name><index>[]</index></name> <name>argsUpgrade</name> <operator>=</operator> <block>{ <expr><literal type="string">"upgrade"</literal></expr>, <expr><literal type="string">"-sqlfile"</literal></expr>, <expr><call><name><name>upgrade</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>, <expr><literal type="string">"-run"</literal></expr>}</block></expr>;
        <expr><name><name>String</name><index>[]</index></name> <name>argsUpgrade</name> <operator>=</operator> <block>{ <expr><literal type="string">"upgrade"</literal></expr>, <expr><literal type="string">"-sqlfile"</literal></expr>, <expr><call><name><name>upgrade</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>}</block></expr>;
 
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>execOozieDBCLICommands</name><argument_list>(<argument><expr><name>argsUpgrade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>upgrade</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></block></expr></block></block></expr></expr_stmt></block_content></block></function></block_content></block></decl></decl_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function>

</unit>
