<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/oozie/9df0de78.java"><expr_stmt><expr><name>From</name> <literal type="number">9df0de7807592c606918d268e60bbebc14d7eda0</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name><name>ryota</name> <argument_list type="generic">&lt;<argument><name>ryota</name><annotation>@<name>unknown</name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">20</literal> <name>Sep</name> <literal type="number">2013</literal> <literal type="number">07</literal><operator>:</operator><literal type="number">39</literal><operator>:</operator><literal type="number">43</literal> <operator>+</operator><literal type="number">0000</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>OOZIE</name><operator>-</operator><literal type="number">1524</literal> <name>Change</name> <name>Workflow</name> <name>SELECT</name> <name>query</name> <name>to</name> <name>fetch</name> <name>only</name>
 <name>necessary</name> <name>columns</name> <name>and</name> <name>consolidate</name> <name>JPA</name> <call><name>Executors</name> <argument_list>(<argument><expr><name>ryota</name></expr></argument>)</argument_list></call>

<name>git</name><operator>-</operator><name>svn</name><operator>-</operator><name>id</name><operator>:</operator> <name>https</name><operator>:</operator><comment type="line">//svn.apache.org/repos/asf/oozie/trunk@1524923 13f79535-47bb-0310-9956-ffa450edef68</comment>
<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowActionBean</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">35</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowJobBean</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">16</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordActionStartXCommand</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ActionCheckXCommand</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ActionEndXCommand</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ActionKillXCommand</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ActionStartXCommand</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>CompletedActionXCommand</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>DefinitionXCommand</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>KillXCommand</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ReRunXCommand</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ResumeXCommand</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>SignalXCommand</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">107</literal> <operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>SuspendXCommand</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">206</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>WorkflowActionsRunningGetJPAExecutor</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">68</literal> <operator>--</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>java</name></name>         <operator>|</operator> <literal type="number">148</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>ActionCheckerService</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">8</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AuthorizationService</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>JPAService</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name>  <operator>|</operator> <literal type="number">194</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator>
 <operator>...</operator><name><name>tWorkflowActionsRunningGetJPAExecutor</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">83</literal> <operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowJobQueryExecutor</name><operator>.</operator><name>java</name></name>     <operator>|</operator> <literal type="number">190</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>sla</name><operator>/</operator><name><name>TestSLAEventGeneration</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">10</literal> <operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>test</name><operator>/</operator><name><name>XDataTestCase</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">13</literal> <operator>++</operator>
 <name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>                               <operator>|</operator>   <literal type="number">1</literal> <operator>+</operator>
 <literal type="number">26</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">820</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">332</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowActionBean</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowActionBean</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e7f2638e2</name><operator>..</operator><name>e1cd072de</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowActionBean</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowActionBean</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>simple</name><operator>.</operator><name>JSONObject</name></name>;</import>
 
     <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_CHECK"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.userRetryCount = :userRetryCount, a.stats = :stats, a.externalChildIDs = :externalChildIDs, a.externalStatus = :externalStatus, a.statusStr = :status, a.data = :data, a.pending = :pending, a.errorCode = :errorCode, a.errorMessage = :errorMessage, a.lastCheckTimestamp = :lastCheckTime, a.retries = :retries, a.pendingAgeTimestamp = :pendingAge, a.startTimestamp = :startTime where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_END"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.stats = :stats, a.errorCode = :errorCode, a.errorMessage = :errorMessage, a.retries = :retries, a.endTimestamp = :endTime, a.statusStr = :status, a.pending = :pending, a.pendingAgeTimestamp = :pendingAge, a.signalValue = :signalValue, a.userRetryCount = :userRetryCount, a.externalStatus = :externalStatus where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_END"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.stats = :stats, a.errorCode = :errorCode, a.errorMessage = :errorMessage, a.retries = :retries, a.endTimestamp = :endTime, a.statusStr = :status, a.retries = :retries, a.pending = :pending, a.pendingAgeTimestamp = :pendingAge, a.signalValue = :signalValue, a.userRetryCount = :userRetryCount, a.externalStatus = :externalStatus where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_PENDING"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.pending = :pending where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_PENDING"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.pending = :pending, a.pendingAgeTimestamp = :pendingAge where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_STATUS_PENDING"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.statusStr = :status, a.pending = :pending where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_STATUS_PENDING"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.statusStr = :status, a.pending = :pending, a.pendingAgeTimestamp = :pendingAge where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_PENDING_TRANS"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.pending = :pending, a.transition = :transition where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_PENDING_TRANS"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.pending = :pending, a.pendingAgeTimestamp = :pendingAge, a.transition = :transition where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_PENDING_TRANS_ERROR"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.pending = :pending, a.transition = :transition, a.errorCode = :errorCode, a.errorMessage = :errorMessage where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"UPDATE_ACTION_PENDING_TRANS_ERROR"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"update WorkflowActionBean a set a.pending = :pending, a.pendingAgeTimestamp = :pendingAge, a.transition = :transition, a.errorCode = :errorCode, a.errorMessage = :errorMessage where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
     <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"DELETE_ACTION"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"delete from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>simple</name><operator>.</operator><name>JSONObject</name></name>;</import>
 
     <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select OBJECT(a) from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION_ID_TYPE"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.type from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>

    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION_FAIL"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.wfId, a.name, a.statusStr, a.pending, a.type, a.logToken, a.transition, a.errorCode, a.errorMessage from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>

    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION_SIGNAL"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.wfId, a.name, a.statusStr, a.pending, a.type, a.logToken, a.transition, a.errorCode, a.errorMessage, a.executionPath, a.signalValue, a.slaXml from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>

    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION_START"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.wfId, a.name, a.statusStr, a.pending, a.type, a.logToken, a.transition, a.retries, a.userRetryCount, a.userRetryMax, a.userRetryInterval, a.startTimestamp, a.endTimestamp, a.errorCode, a.errorMessage, a.cred, a.conf, a.slaXml from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>

    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION_CHECK"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.wfId, a.name, a.statusStr, a.pending, a.type, a.logToken, a.transition, a.retries, a.trackerUri, a.startTimestamp, a.endTimestamp, a.lastCheckTimestamp, a.errorCode, a.errorMessage, a.externalId, a.externalStatus, a.externalChildIDs, a.conf from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>

    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION_END"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.wfId, a.name, a.statusStr, a.pending, a.type, a.logToken, a.transition, a.retries, a.trackerUri, a.userRetryCount, a.userRetryMax, a.userRetryInterval, a.startTimestamp, a.endTimestamp, a.errorCode, a.errorMessage, a.externalId, a.externalStatus, a.externalChildIDs, a.conf, a.data, a.stats from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>

    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION_KILL"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.wfId, a.name, a.statusStr, a.pending, a.type, a.logToken, a.transition, a.retries, a.trackerUri, a.startTimestamp, a.endTimestamp, a.errorCode, a.errorMessage, a.externalId, a.conf, a.data from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>

    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION_COMPLETED"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.wfId, a.statusStr, a.type, a.logToken from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>

     <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION_FOR_UPDATE"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select OBJECT(a) from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
     <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTION_FOR_SLA"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.statusStr, a.startTimestamp, a.endTimestamp from WorkflowActionBean a where a.id = :id"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">93</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">109</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>simple</name><operator>.</operator><name>JSONObject</name></name>;</import>
 
     <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_PENDING_ACTIONS"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select OBJECT(a) from WorkflowActionBean a where a.pending = 1 AND a.pendingAgeTimestamp &lt; :pendingAge AND a.statusStr &lt;&gt; 'RUNNING'"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_RUNNING_ACTIONS"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select OBJECT(a) from WorkflowActionBean a where a.pending = 1 AND a.statusStr = 'RUNNING' AND a.lastCheckTimestamp &lt; :lastCheckTime"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_RUNNING_ACTIONS"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id from WorkflowActionBean a where a.pending = 1 AND a.statusStr = 'RUNNING' AND a.lastCheckTimestamp &lt; :lastCheckTime"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
     <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_RETRY_MANUAL_ACTIONS"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select OBJECT(a) from WorkflowActionBean a where a.wfId = :wfId AND (a.statusStr = 'START_RETRY' OR a.statusStr = 'START_MANUAL' OR a.statusStr = 'END_RETRY' OR a.statusStr = 'END_MANUAL')"</literal></expr></argument>)</argument_list></annotation> })
 <annotation>@<name>Table</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"WF_ACTIONS"</literal></expr></argument>)</argument_list></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">414</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">430</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowActionBean</name> implements <name>Writable</name></expr><operator>,</operator> <expr><name>WorkflowAction</name></expr><operator>,</operator> <expr><name>JsonBean</name> <block>{
         <expr><name>pendingAgeTimestamp</name> <operator>=</operator> <call><name><name>DateUtils</name><operator>.</operator><name>convertDateToTimestamp</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
 
    <comment type="block" format="javadoc">/**
     * Set pending flag
     */</comment>
    <specifier>public</specifier> <name>void</name> <call><name>setPending</name><argument_list>(<argument><expr><name>int</name> <name>i</name></expr></argument>)</argument_list></call> <block>{
        <expr><name>pending</name> <operator>=</operator> <name>i</name></expr>;
    }</block></expr></expr_stmt>

     <comment type="block" format="javadoc">/**
      * Set a time when the action will be pending, normally a time in the
      * future.
diff --git a/core/src/main/java/org/apache/oozie/WorkflowJobBean.java b/core/src/main/java/org/apache/oozie/WorkflowJobBean.java
index ac69da631..0ddee0342 100644
-- a/core/src/main/java/org/apache/oozie/WorkflowJobBean.java
++ b/core/src/main/java/org/apache/oozie/WorkflowJobBean.java
@@ -88,6 +88,22 @@ import org.json.simple.JSONObject;
 
     @NamedQuery(name = "GET_WORKFLOW", query = "select OBJECT(w) from WorkflowJobBean w where w.id = :id"),
 
    @NamedQuery(name = "GET_WORKFLOW_STARTTIME", query = "select w.id, w.startTimestamp from WorkflowJobBean w where w.id = :id"),

    @NamedQuery(name = "GET_WORKFLOW_USER_GROUP", query = "select w.user, w.group from WorkflowJobBean w where w.id = :id"),

    @NamedQuery(name = "GET_WORKFLOW_SUSPEND", query = "select w.id, w.user, w.group, w.appName, w.statusStr, w.parentId, w.startTimestamp, w.endTimestamp, w.logToken, w.wfInstance  from WorkflowJobBean w where w.id = :id"),

    @NamedQuery(name = "GET_WORKFLOW_RERUN", query = "select w.id, w.user, w.group, w.appName, w.statusStr, w.run, w.logToken, w.wfInstance from WorkflowJobBean w where w.id = :id"),

    @NamedQuery(name = "GET_WORKFLOW_DEFINITION", query = "select w.id, w.user, w.group, w.appName, w.logToken, w.wfInstance from WorkflowJobBean w where w.id = :id"),

    @NamedQuery(name = "GET_WORKFLOW_ACTION_OP", query = "select w.id, w.user, w.group, w.appName, w.appPath, w.statusStr, w.parentId, w.logToken, w.wfInstance, w.protoActionConf from WorkflowJobBean w where w.id = :id"),

    @NamedQuery(name = "GET_WORKFLOW_KILL", query = "select w.id, w.user, w.group, w.appName, w.appPath, w.statusStr, w.parentId, w.startTimestamp, w.endTimestamp, w.logToken, w.wfInstance, w.slaXml from WorkflowJobBean w where w.id = :id"),

    @NamedQuery(name = "GET_WORKFLOW_RESUME", query = "select w.id, w.user, w.group, w.appName, w.appPath, w.statusStr, w.parentId, w.startTimestamp, w.endTimestamp, w.logToken, w.wfInstance, w.protoActionConf from WorkflowJobBean w where w.id = :id"),

     @NamedQuery(name = "GET_WORKFLOW_FOR_UPDATE", query = "select OBJECT(w) from WorkflowJobBean w where w.id = :id"),
 
     @NamedQuery(name = "GET_WORKFLOW_FOR_SLA", query = "select w.id, w.statusStr, w.startTimestamp, w.endTimestamp from WorkflowJobBean w where w.id = :id"),
diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordActionStartXCommand.java b/core/src/main/java/org/apache/oozie/command/coord/CoordActionStartXCommand.java
index 1a6a931f4..dca5f4a77 100644
-- a/core/src/main/java/org/apache/oozie/command/coord/CoordActionStartXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/coord/CoordActionStartXCommand.java
@@ -47,7 +47,7 @@ import org.apache.oozie.executor.jpa.BatchQueryExecutor.UpdateEntry;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor;
 import org.apache.oozie.executor.jpa.CoordActionQueryExecutor.CoordActionQuery;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
 import org.jdom.Element;
 import org.jdom.JDOMException;
@@ -188,7 +188,7 @@ public class CoordActionStartXCommand extends CoordinatorXCommand&lt;Void&gt; {
                 JPAService jpaService = Services.get().get(JPAService.class);
                 if (jpaService != null) {
                     log.debug("Updating WF record for WFID :" + wfId + " with parent id: " + actionId);
                    WorkflowJobBean wfJob = jpaService.execute(new WorkflowJobGetJPAExecutor(wfId));
                    WorkflowJobBean wfJob = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW_STARTTIME, wfId);
                     wfJob.setParentId(actionId);
                     wfJob.setLastModifiedTime(new Date());
                     BatchQueryExecutor executor = BatchQueryExecutor.getInstance();
diff --git a/core/src/main/java/org/apache/oozie/command/wf/ActionCheckXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/ActionCheckXCommand.java
index f900fc37d..f7cb9405c 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/ActionCheckXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/ActionCheckXCommand.java
@@ -33,10 +33,9 @@ import org.apache.oozie.client.WorkflowJob;
 import org.apache.oozie.command.CommandException;
 import org.apache.oozie.command.PreconditionException;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
import org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor;
 import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor.WorkflowActionQuery;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor.UpdateEntry;
 import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
@@ -87,8 +86,8 @@ public class ActionCheckXCommand extends ActionXCommand&lt;Void&gt; {
         try {
             jpaService = Services.get().get(JPAService.class);
             if (jpaService != null) {
                this.wfJob = jpaService.execute(new WorkflowJobGetJPAExecutor(jobId));
                this.wfAction = jpaService.execute(new WorkflowActionGetJPAExecutor(actionId));
                this.wfJob = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW_ACTION_OP, jobId);
                this.wfAction = WorkflowActionQueryExecutor.getInstance().get(WorkflowActionQuery.GET_ACTION_CHECK, actionId);
                 LogUtils.setLogInfo(wfJob, logInfo);
                 LogUtils.setLogInfo(wfAction, logInfo);
             }
diff --git a/core/src/main/java/org/apache/oozie/command/wf/ActionEndXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/ActionEndXCommand.java
index dfa60fc21..fb9dec3e8 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/ActionEndXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/ActionEndXCommand.java
@@ -42,8 +42,8 @@ import org.apache.oozie.command.PreconditionException;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor.UpdateEntry;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
import org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor.WorkflowActionQuery;
 import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
 import org.apache.oozie.service.ActionService;
@@ -97,8 +97,9 @@ public class ActionEndXCommand extends ActionXCommand&lt;Void&gt; {
         try {
             jpaService = Services.get().get(JPAService.class);
             if (jpaService != null) {
                this.wfJob = jpaService.execute(new WorkflowJobGetJPAExecutor(jobId));
                this.wfAction = jpaService.execute(new WorkflowActionGetJPAExecutor(actionId));
                this.wfJob = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW_ACTION_OP,
                        jobId);
                this.wfAction = WorkflowActionQueryExecutor.getInstance().get(WorkflowActionQuery.GET_ACTION_END, actionId);
                 LogUtils.setLogInfo(wfJob, logInfo);
                 LogUtils.setLogInfo(wfAction, logInfo);
             }
diff --git a/core/src/main/java/org/apache/oozie/command/wf/ActionKillXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/ActionKillXCommand.java
index e51d33e3a..d4d01f3ca 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/ActionKillXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/ActionKillXCommand.java
@@ -34,8 +34,8 @@ import org.apache.oozie.command.PreconditionException;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor.UpdateEntry;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
import org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor.WorkflowActionQuery;
 import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
 import org.apache.oozie.action.ActionExecutor;
@@ -95,8 +95,8 @@ public class ActionKillXCommand extends ActionXCommand&lt;Void&gt; {
             jpaService = Services.get().get(JPAService.class);
 
             if (jpaService != null) {
                this.wfJob = jpaService.execute(new WorkflowJobGetJPAExecutor(jobId));
                this.wfAction = jpaService.execute(new WorkflowActionGetJPAExecutor(actionId));
                this.wfJob = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW_ACTION_OP, jobId);
                this.wfAction = WorkflowActionQueryExecutor.getInstance().get(WorkflowActionQuery.GET_ACTION_KILL, actionId);
                 LogUtils.setLogInfo(wfJob, logInfo);
                 LogUtils.setLogInfo(wfAction, logInfo);
             }
diff --git a/core/src/main/java/org/apache/oozie/command/wf/ActionStartXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/ActionStartXCommand.java
index f7e00aeca..7e9415a10 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/ActionStartXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/ActionStartXCommand.java
@@ -43,9 +43,9 @@ import org.apache.oozie.command.PreconditionException;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor.UpdateEntry;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
import org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor.WorkflowActionQuery;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
 import org.apache.oozie.service.ActionService;
 import org.apache.oozie.service.EventHandlerService;
@@ -97,8 +97,8 @@ public class ActionStartXCommand extends ActionXCommand&lt;Void&gt; {
         try {
             jpaService = Services.get().get(JPAService.class);
             if (jpaService != null) {
                this.wfJob = jpaService.execute(new WorkflowJobGetJPAExecutor(jobId));
                this.wfAction = jpaService.execute(new WorkflowActionGetJPAExecutor(actionId));
                this.wfJob = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW, jobId);
                this.wfAction = WorkflowActionQueryExecutor.getInstance().get(WorkflowActionQuery.GET_ACTION_START, actionId);
                 LogUtils.setLogInfo(wfJob, logInfo);
                 LogUtils.setLogInfo(wfAction, logInfo);
             }
diff --git a/core/src/main/java/org/apache/oozie/command/wf/CompletedActionXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/CompletedActionXCommand.java
index 2dcd82601..65d91bd41 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/CompletedActionXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/CompletedActionXCommand.java
@@ -24,7 +24,8 @@ import org.apache.oozie.WorkflowActionBean;
 import org.apache.oozie.action.ActionExecutor;
 import org.apache.oozie.command.CommandException;
 import org.apache.oozie.command.PreconditionException;
import org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor;
import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor.WorkflowActionQuery;
 import org.apache.oozie.service.ActionService;
 import org.apache.oozie.service.JPAService;
 import org.apache.oozie.service.Services;
@@ -61,7 +62,8 @@ public class CompletedActionXCommand extends WorkflowXCommand&lt;Void&gt; {
         try {
             jpaService = Services.get().get(JPAService.class);
             if (jpaService != null) {
                this.wfactionBean = jpaService.execute(new WorkflowActionGetJPAExecutor(this.actionId));
                this.wfactionBean = WorkflowActionQueryExecutor.getInstance().get(
                        WorkflowActionQuery.GET_ACTION_COMPLETED, this.actionId);
             }
             else {
                 throw new CommandException(ErrorCode.E0610);
diff --git a/core/src/main/java/org/apache/oozie/command/wf/DefinitionXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/DefinitionXCommand.java
index 35ec979d1..64d4822be 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/DefinitionXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/DefinitionXCommand.java
@@ -22,7 +22,8 @@ import org.apache.oozie.WorkflowJobBean;
 import org.apache.oozie.XException;
 import org.apache.oozie.command.CommandException;
 import org.apache.oozie.command.PreconditionException;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
 import org.apache.oozie.service.JPAService;
 import org.apache.oozie.service.Services;
 import org.apache.oozie.util.LogUtils;
@@ -53,7 +54,7 @@ public class DefinitionXCommand extends WorkflowXCommand&lt;String&gt; {
             JPAService jpaService = Services.get().get(JPAService.class);
 
             if (jpaService != null) {
                this.wfJob = jpaService.execute(new WorkflowJobGetJPAExecutor(jobId));
                this.wfJob = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW_DEFINITION, jobId);
                 LogUtils.setLogInfo(wfJob, logInfo);
             }
             else {
diff --git a/core/src/main/java/org/apache/oozie/command/wf/KillXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/KillXCommand.java
index 1ae160d8a..7fb968cd6 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/KillXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/KillXCommand.java
@@ -33,7 +33,7 @@ import org.apache.oozie.executor.jpa.BatchQueryExecutor;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
 import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor.WorkflowActionQuery;
 import org.apache.oozie.executor.jpa.WorkflowActionsGetForJobJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor.UpdateEntry;
 import org.apache.oozie.service.ActionService;
@@ -92,7 +92,7 @@ public class KillXCommand extends WorkflowXCommand&lt;Void&gt; {
         try {
             jpaService = Services.get().get(JPAService.class);
             if (jpaService != null) {
                this.wfJob = jpaService.execute(new WorkflowJobGetJPAExecutor(wfId));
                this.wfJob = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW_KILL, wfId);
                 this.actionList = jpaService.execute(new WorkflowActionsGetForJobJPAExecutor(wfId));
                 LogUtils.setLogInfo(wfJob, logInfo);
             }
diff --git a/core/src/main/java/org/apache/oozie/command/wf/ReRunXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/ReRunXCommand.java
index 7dc0f6e25..9287211af 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/ReRunXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/ReRunXCommand.java
@@ -45,8 +45,8 @@ import org.apache.oozie.command.CommandException;
 import org.apache.oozie.command.PreconditionException;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
 import org.apache.oozie.executor.jpa.WorkflowActionsGetForJobJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor.UpdateEntry;
 import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
 import org.apache.oozie.service.DagXLogInfoService;
@@ -272,7 +272,7 @@ public class ReRunXCommand extends WorkflowXCommand&lt;Void&gt; {
         try {
             jpaService = Services.get().get(JPAService.class);
             if (jpaService != null) {
                this.wfBean = jpaService.execute(new WorkflowJobGetJPAExecutor(this.jobId));
                this.wfBean = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW_RERUN, this.jobId);
                 this.actions = jpaService.execute(new WorkflowActionsGetForJobJPAExecutor(this.jobId));
             }
             else {
diff --git a/core/src/main/java/org/apache/oozie/command/wf/ResumeXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/ResumeXCommand.java
index f6ddd3326..7b8ee3ba3 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/ResumeXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/ResumeXCommand.java
@@ -40,7 +40,7 @@ import org.apache.oozie.executor.jpa.BatchQueryExecutor;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
 import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor.WorkflowActionQuery;
 import org.apache.oozie.executor.jpa.WorkflowJobGetActionsJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
 import org.apache.oozie.service.EventHandlerService;
 import org.apache.oozie.service.HadoopAccessorException;
@@ -182,7 +182,7 @@ public class ResumeXCommand extends WorkflowXCommand&lt;Void&gt; {
             throw new CommandException(ErrorCode.E0610);
         }
         try {
            workflow = jpaService.execute(new WorkflowJobGetJPAExecutor(id));
            workflow = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW_RESUME, id);
         }
         catch (JPAExecutorException e) {
             throw new CommandException(e);
diff --git a/core/src/main/java/org/apache/oozie/command/wf/SignalXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/SignalXCommand.java
index aa1acb071..0992026b1 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/SignalXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/SignalXCommand.java
@@ -34,9 +34,9 @@ import org.apache.oozie.command.wf.ActionXCommand.ActionExecutorContext;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor.UpdateEntry;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
import org.apache.oozie.executor.jpa.WorkflowActionGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor.WorkflowActionQuery;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
 import org.apache.oozie.service.ELService;
 import org.apache.oozie.service.EventHandlerService;
@@ -79,7 +79,6 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
     private String wfJobErrorCode;
     private String wfJobErrorMsg;
 

     public SignalXCommand(String name, int priority, String jobId) {
         super(name, name, priority);
         this.jobId = ParamChecker.notEmpty(jobId, "jobId");
@@ -110,10 +109,10 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
         try {
             jpaService = Services.get().get(JPAService.class);
             if (jpaService != null) {
                this.wfJob = jpaService.execute(new WorkflowJobGetJPAExecutor(jobId));
                this.wfJob = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW, jobId);
                 LogUtils.setLogInfo(wfJob, logInfo);
                 if (actionId != null) {
                    this.wfAction = jpaService.execute(new WorkflowActionGetJPAExecutor(actionId));
                    this.wfAction = WorkflowActionQueryExecutor.getInstance().get(WorkflowActionQuery.GET_ACTION_SIGNAL, actionId);
                     LogUtils.setLogInfo(wfAction, logInfo);
                 }
             }
@@ -158,14 +157,14 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
                 wfJob.setWorkflowInstance(workflowInstance);
                 generateEvent = true;
                 // 1. Add SLA status event for WF-JOB with status STARTED
                SLAEventBean slaEvent = SLADbXOperations.createStatusEvent(wfJob.getSlaXml(), jobId,
                        Status.STARTED, SlaAppType.WORKFLOW_JOB);
                if(slaEvent != null) {
                SLAEventBean slaEvent = SLADbXOperations.createStatusEvent(wfJob.getSlaXml(), jobId, Status.STARTED,
                        SlaAppType.WORKFLOW_JOB);
                if (slaEvent != null) {
                     insertList.add(slaEvent);
                 }
                 // 2. Add SLA registration events for all WF_ACTIONS
                createSLARegistrationForAllActions(workflowInstance.getApp().getDefinition(), wfJob.getUser(), wfJob
                        .getGroup(), wfJob.getConf());
                createSLARegistrationForAllActions(workflowInstance.getApp().getDefinition(), wfJob.getUser(),
                        wfJob.getGroup(), wfJob.getConf());
                 queue(new NotificationXCommand(wfJob));
             }
             else {
@@ -205,7 +204,8 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
                 for (String actionToKillId : WorkflowStoreService.getActionsToKill(workflowInstance)) {
                     WorkflowActionBean actionToKill;
 
                    actionToKill = jpaService.execute(new WorkflowActionGetJPAExecutor(actionToKillId));
                    actionToKill = WorkflowActionQueryExecutor.getInstance().get(
                            WorkflowActionQuery.GET_ACTION_ID_TYPE, actionToKillId);
 
                     actionToKill.setPending();
                     actionToKill.setStatus(WorkflowActionBean.Status.KILLED);
@@ -215,8 +215,8 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
                 }
 
                 for (String actionToFailId : WorkflowStoreService.getActionsToFail(workflowInstance)) {
                    WorkflowActionBean actionToFail = jpaService.execute(new WorkflowActionGetJPAExecutor(
                            actionToFailId));
                    WorkflowActionBean actionToFail = WorkflowActionQueryExecutor.getInstance().get(
                            WorkflowActionQuery.GET_ACTION_FAIL, actionToFailId);
                     actionToFail.resetPending();
                     actionToFail.setStatus(WorkflowActionBean.Status.FAILED);
                     if (wfJobErrorCode != null) {
@@ -226,7 +226,7 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
                     queue(new NotificationXCommand(wfJob, actionToFail));
                     SLAEventBean slaEvent = SLADbXOperations.createStatusEvent(wfAction.getSlaXml(), wfAction.getId(),
                             Status.FAILED, SlaAppType.WORKFLOW_ACTION);
                    if(slaEvent != null) {
                    if (slaEvent != null) {
                         insertList.add(slaEvent);
                     }
                     updateList.add(new UpdateEntry&lt;WorkflowActionQuery&gt;(
@@ -254,9 +254,9 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
                 default: // TODO SUSPENDED
                     break;
             }
            SLAEventBean slaEvent = SLADbXOperations.createStatusEvent(wfJob.getSlaXml(), jobId,
                    slaStatus, SlaAppType.WORKFLOW_JOB);
            if(slaEvent != null) {
            SLAEventBean slaEvent = SLADbXOperations.createStatusEvent(wfJob.getSlaXml(), jobId, slaStatus,
                    SlaAppType.WORKFLOW_JOB);
            if (slaEvent != null) {
                 insertList.add(slaEvent);
             }
             queue(new NotificationXCommand(wfJob));
@@ -276,9 +276,8 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
                         String tmpNodeConf = nodeDef.getConf();
                         String actionConf = context.getELEvaluator().evaluate(tmpNodeConf, String.class);
                         LOG.debug(
                                "Try to resolve KillNode message for jobid [{0}], actionId [{1}], before resolve [{2}], " +
                                "after resolve [{3}]",
                                jobId, actionId, tmpNodeConf, actionConf);
                                "Try to resolve KillNode message for jobid [{0}], actionId [{1}], before resolve [{2}], "
                                        + "after resolve [{3}]", jobId, actionId, tmpNodeConf, actionConf);
                         if (wfAction.getErrorCode() != null) {
                             wfAction.setErrorInfo(wfAction.getErrorCode(), actionConf);
                         }
@@ -304,39 +303,35 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
                 if (skipVar != null) {
                     skipNewAction = skipVar.equals("true");
                 }
                try {
                    if (skipNewAction) {
                        WorkflowActionBean oldAction;

                        oldAction = jpaService.execute(new WorkflowActionGetJPAExecutor(newAction.getId()));
 
                        oldAction.setPending();
                        updateList.add(new UpdateEntry&lt;WorkflowActionQuery&gt;(WorkflowActionQuery.UPDATE_ACTION_PENDING, oldAction));
                if (skipNewAction) {
                    WorkflowActionBean oldAction = new WorkflowActionBean();
                    oldAction.setId(newAction.getId());
                    oldAction.setPending();
                    updateList.add(new UpdateEntry&lt;WorkflowActionQuery&gt;(WorkflowActionQuery.UPDATE_ACTION_PENDING,
                            oldAction));
                    queue(new SignalXCommand(jobId, oldAction.getId()));
                }
                else {
                    try {
                        // Make sure that transition node for a forked action
                        // is inserted only once
                        WorkflowActionQueryExecutor.getInstance().get(WorkflowActionQuery.GET_ACTION_ID_TYPE,
                                newAction.getId());
 
                        queue(new SignalXCommand(jobId, oldAction.getId()));
                        continue;
                     }
                    else {
                        try {
                            // Make sure that transition node for a forked action
                            // is inserted only once
                            jpaService.execute(new WorkflowActionGetJPAExecutor(newAction.getId()));
                            continue;
                        }
                        catch (JPAExecutorException jee) {
                        }
                        checkForSuspendNode(newAction);
                        newAction.setPending();
                        String actionSlaXml = getActionSLAXml(newAction.getName(), workflowInstance.getApp()
                                .getDefinition(), wfJob.getConf());
                        newAction.setSlaXml(actionSlaXml);
                        insertList.add(newAction);
                        LOG.debug("SignalXCommand: Name: " + newAction.getName() + ", Id: " + newAction.getId()
                                + ", Authcode:" + newAction.getCred());
                        queue(new ActionStartXCommand(newAction.getId(), newAction.getType()));
                    catch (JPAExecutorException jee) {
                     }
                }
                catch (JPAExecutorException je) {
                    throw new CommandException(je);
                    checkForSuspendNode(newAction);
                    newAction.setPending();
                    String actionSlaXml = getActionSLAXml(newAction.getName(), workflowInstance.getApp()
                            .getDefinition(), wfJob.getConf());
                    newAction.setSlaXml(actionSlaXml);
                    insertList.add(newAction);
                    LOG.debug("SignalXCommand: Name: " + newAction.getName() + ", Id: " + newAction.getId()
                            + ", Authcode:" + newAction.getCred());
                    queue(new ActionStartXCommand(newAction.getId(), newAction.getType()));
                 }
             }
         }
@@ -354,11 +349,10 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
         catch (JPAExecutorException je) {
             throw new CommandException(je);
         }
        LOG.debug(
                "Updated the workflow status to " + wfJob.getId() + "  status =" + wfJob.getStatusStr());
        LOG.debug("Updated the workflow status to " + wfJob.getId() + "  status =" + wfJob.getStatusStr());
         if (wfJob.getStatus() != WorkflowJob.Status.RUNNING &amp;&amp; wfJob.getStatus() != WorkflowJob.Status.SUSPENDED) {
             updateParentIfNecessary(wfJob);
            new WfEndXCommand(wfJob).call(); //To delete the WF temp dir
            new WfEndXCommand(wfJob).call(); // To delete the WF temp dir
         }
         LOG.debug("ENDED SignalCommand for jobid=" + jobId + ", actionId=" + actionId);
         return null;
@@ -417,11 +411,11 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
                 if (eSla != null) {
                     String slaXml = resolveSla(eSla, conf);
                     eSla = XmlUtils.parseXml(slaXml);
                    String actionId = Services.get().get(UUIDService.class).generateChildId(jobId,
                            action.getAttributeValue("name") + "");
                    String actionId = Services.get().get(UUIDService.class)
                            .generateChildId(jobId, action.getAttributeValue("name") + "");
                     SLAEventBean slaEvent = SLADbXOperations.createSlaRegistrationEvent(eSla, actionId,
                             SlaAppType.WORKFLOW_ACTION, user, group);
                    if(slaEvent != null) {
                    if (slaEvent != null) {
                         insertList.add(slaEvent);
                     }
                 }
@@ -439,7 +433,8 @@ public class SignalXCommand extends WorkflowXCommand&lt;Void&gt; {
             String[] values = wfjobConf.getTrimmedStrings(OozieClient.OOZIE_SUSPEND_ON_NODES);
             if (values != null) {
                 if (values.length == 1 &amp;&amp; values[0].equals("*")) {
                    LOG.info("Reached suspend node at [{0}], suspending workflow [{1}]", newAction.getName(), wfJob.getId());
                    LOG.info("Reached suspend node at [{0}], suspending workflow [{1}]", newAction.getName(),
                            wfJob.getId());
                     queue(new SuspendXCommand(jobId));
                 }
                 else {
diff --git a/core/src/main/java/org/apache/oozie/command/wf/SuspendXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/SuspendXCommand.java
index ea9a3dada..1e8a12295 100644
-- a/core/src/main/java/org/apache/oozie/command/wf/SuspendXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/wf/SuspendXCommand.java
@@ -32,7 +32,7 @@ import org.apache.oozie.executor.jpa.BatchQueryExecutor.UpdateEntry;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
 import org.apache.oozie.executor.jpa.WorkflowActionQueryExecutor.WorkflowActionQuery;
 import org.apache.oozie.executor.jpa.WorkflowActionRetryManualGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobGetJPAExecutor;
import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor;
 import org.apache.oozie.executor.jpa.WorkflowJobQueryExecutor.WorkflowJobQuery;
 import org.apache.oozie.service.EventHandlerService;
 import org.apache.oozie.service.JPAService;
@@ -147,7 +147,8 @@ public class SuspendXCommand extends WorkflowXCommand&lt;Void&gt; {
         try {
             jpaService = Services.get().get(JPAService.class);
             if (jpaService != null) {
                this.wfJobBean = jpaService.execute(new WorkflowJobGetJPAExecutor(this.wfid));
                this.wfJobBean = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQuery.GET_WORKFLOW_SUSPEND,
                        this.wfid);
             }
             else {
                 throw new CommandException(ErrorCode.E0610);
diff --git a/core/src/main/java/org/apache/oozie/executor/jpa/WorkflowActionQueryExecutor.java b/core/src/main/java/org/apache/oozie/executor/jpa/WorkflowActionQueryExecutor.java
index 52d6ae081..a8983df10 100644
-- a/core/src/main/java/org/apache/oozie/executor/jpa/WorkflowActionQueryExecutor.java
++ b/core/src/main/java/org/apache/oozie/executor/jpa/WorkflowActionQueryExecutor.java
@@ -17,14 +17,18 @@
  */</comment>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Timestamp</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>EntityManager</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Query</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>StringBlob</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>WorkflowActionBean</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>JPAService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowActionQueryExecutor</name> extends
         <name>UPDATE_ACTION_STATUS_PENDING</name></expr><operator>,</operator>
         <expr><name>UPDATE_ACTION_PENDING_TRANS</name></expr><operator>,</operator>
         <expr><name>UPDATE_ACTION_PENDING_TRANS_ERROR</name></expr><operator>,</operator>
        <expr><name>GET_ACTION</name>
        <name>GET_ACTION</name></expr><operator>,</operator>
        <expr><name>GET_ACTION_ID_TYPE</name></expr><operator>,</operator>
        <expr><name>GET_ACTION_FAIL</name></expr><operator>,</operator>
        <expr><name>GET_ACTION_SIGNAL</name></expr><operator>,</operator>
        <expr><name>GET_ACTION_START</name></expr><operator>,</operator>
        <expr><name>GET_ACTION_CHECK</name></expr><operator>,</operator>
        <expr><name>GET_ACTION_END</name></expr><operator>,</operator>
        <expr><name>GET_ACTION_KILL</name></expr><operator>,</operator>
        <expr><name>GET_ACTION_COMPLETED</name></expr><operator>,</operator>
        <expr><name>GET_RUNNING_ACTIONS</name></expr></expr_stmt>
     };
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>WorkflowActionQueryExecutor</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>WorkflowActionQueryExecutor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">106</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">119</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowActionQueryExecutor</name> extends</expr></expr_stmt>
                 <break>break;</break>
             <case>case <expr><name>UPDATE_ACTION_PENDING</name></expr>:</case>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"pending"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"pendingAge"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getPendingAgeTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <break>break;</break>
             <case>case <expr><name>UPDATE_ACTION_STATUS_PENDING</name></expr>:</case>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"pending"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"pendingAge"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getPendingAgeTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <break>break;</break>
             <case>case <expr><name>UPDATE_ACTION_PENDING_TRANS</name></expr>:</case>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"transition"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"pending"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"pendingAge"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getPendingAgeTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <break>break;</break>
             <case>case <expr><name>UPDATE_ACTION_PENDING_TRANS_ERROR</name></expr>:</case>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"transition"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"pending"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"pendingAge"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getPendingAgeTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"errorCode"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"errorMessage"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">166</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">183</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowActionQueryExecutor</name> extends
                 <call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"retries"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRetries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"endTime"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getEndTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"retries"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRetries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"pending"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"pendingAge"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getPendingAgeTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"signalValue"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getSignalValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">185</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">203</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowActionQueryExecutor</name> extends
     <specifier>public</specifier> <name>Query</name> <call><name>getSelectQuery</name><argument_list>(<argument><expr><name>WorkflowActionQuery</name> <name>namedQuery</name></expr></argument>, <argument><expr><name>EntityManager</name> <name>em</name></expr></argument>, <argument><expr><name>Object</name><operator>...</operator> <name>parameters</name></expr></argument>)</argument_list></call>
             <throws>throws <argument><expr><name>JPAExecutorException</name> <block>{
         <expr><name>Query</name> <name>query</name> <operator>=</operator> <call><name><name>em</name><operator>.</operator><name>createNamedQuery</name></name><argument_list>(<argument><expr><call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WorkflowActionQuery</name></type> <name>waQuery</name> <init>= <expr><operator>(</operator><name>WorkflowActionQuery</name><operator>)</operator> <name>namedQuery</name></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>waQuery</name></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><name>namedQuery</name></expr>)</condition> <block>{<block_content>
             <case>case <expr><name>GET_ACTION</name></expr>:</case>
            <case>case <expr><name>GET_ACTION_ID_TYPE</name></expr>:</case>
            <case>case <expr><name>GET_ACTION_FAIL</name></expr>:</case>
            <case>case <expr><name>GET_ACTION_SIGNAL</name></expr>:</case>
            <case>case <expr><name>GET_ACTION_START</name></expr>:</case>
            <case>case <expr><name>GET_ACTION_CHECK</name></expr>:</case>
            <case>case <expr><name>GET_ACTION_END</name></expr>:</case>
            <case>case <expr><name>GET_ACTION_KILL</name></expr>:</case>
            <case>case <expr><name>GET_ACTION_COMPLETED</name></expr>:</case>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>parameters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <break>break;</break>
            <case>case <expr><name>GET_RUNNING_ACTIONS</name></expr>:</case>
                <decl_stmt><decl><type><name>Timestamp</name></type> <name>ts</name> <init>= <expr><operator>new</operator> <call><name>Timestamp</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <operator>(</operator><name>Integer</name><operator>)</operator><name><name>parameters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"lastCheckTime"</literal></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
             <default>default:</default>
                 <throw>throw <expr><operator>new</operator> <call><name>JPAExecutorException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E0603</name></name></expr></argument>, <argument><expr><literal type="string">"QueryExecutor cannot set parameters for "</literal>
                        <operator>+</operator> <call><name><name>waQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                        <expr_stmt><expr><operator>+</operator> <call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></switch>
         </block_content>}</block></switch>
         <return>return <expr><name>query</name></expr>;</return>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">205</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">234</literal></expr><operator>,</operator><expr><literal type="number">167</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowActionQueryExecutor</name> extends</expr></expr_stmt>
         <return>return <expr><name>ret</name></expr>;</return>
     }
 
    private <function><type><name>WorkflowActionBean</name></type> <name>constructBean</name><parameter_list>(<parameter><decl><type><name>WorkflowActionQuery</name></type> <name>namedQuery</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>ret</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JPAExecutorException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>WorkflowActionBean</name></type> <name>bean</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>arr</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>namedQuery</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>GET_ACTION</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>(</operator><name>WorkflowActionBean</name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_ACTION_ID_TYPE</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowActionBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_ACTION_FAIL</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowActionBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setJobId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setPending</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setTransition</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setErrorInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_ACTION_SIGNAL</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowActionBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setJobId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setPending</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setTransition</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setErrorInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setExecutionPath</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setSignalValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setSlaXmlBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_ACTION_START</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowActionBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setJobId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setPending</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setTransition</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setRetries</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUserRetryCount</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUserRetryMax</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUserRetryInterval</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setEndTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setErrorInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setCred</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setConfBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setSlaXmlBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_ACTION_CHECK</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowActionBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setJobId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setPending</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setTransition</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setRetries</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setTrackerUri</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setEndTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLastCheckTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setErrorInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setExternalId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setExternalStatus</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setExternalChildIDsBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setConfBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_ACTION_END</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowActionBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setJobId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setPending</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setTransition</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setRetries</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setTrackerUri</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUserRetryCount</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUserRetryMax</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUserRetryInterval</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setEndTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setErrorInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setExternalId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setExternalStatus</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setExternalChildIDsBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setConfBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setDataBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatsBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_ACTION_KILL</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowActionBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setJobId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setPending</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setTransition</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setRetries</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setTrackerUri</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setEndTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setErrorInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setExternalId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setConfBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setDataBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_ACTION_COMPLETED</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowActionBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setJobId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_RUNNING_ACTIONS</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowActionBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <throw>throw <expr><operator>new</operator> <call><name>JPAExecutorException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E0603</name></name></expr></argument>, <argument><expr><literal type="string">"QueryExecutor cannot construct action bean for "</literal>
                        <operator>+</operator> <call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><name>bean</name></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>WorkflowActionBean</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>WorkflowActionQuery</name></type> <name>namedQuery</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>parameters</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JPAExecutorException</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>EntityManager</name></type> <name>em</name> <init>= <expr><call><name><name>jpaService</name><operator>.</operator><name>getEntityManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>getSelectQuery</name><argument_list>(<argument><expr><name>namedQuery</name></expr></argument>, <argument><expr><name>em</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WorkflowActionBean</name></type> <name>bean</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>(</operator><name>WorkflowActionBean</name><operator>)</operator> <call><name><name>jpaService</name><operator>.</operator><name>executeGet</name></name><argument_list>(<argument><expr><call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>bean</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>ret</name> <init>= <expr><call><name><name>jpaService</name><operator>.</operator><name>executeGet</name></name><argument_list>(<argument><expr><call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <throw>throw <expr><operator>new</operator> <call><name>JPAExecutorException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E0605</name></name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>WorkflowActionBean</name></type> <name>bean</name> <init>= <expr><call><name>constructBean</name><argument_list>(<argument><expr><name>namedQuery</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <return>return <expr><name>bean</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">222</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">403</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowActionQueryExecutor</name> extends
             <throws>throws <argument><expr><name>JPAExecutorException</name> <block>{
         <expr><name>EntityManager</name> <name>em</name> <operator>=</operator> <call><name><name>jpaService</name><operator>.</operator><name>getEntityManager</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>getSelectQuery</name><argument_list>(<argument><expr><name>namedQuery</name></expr></argument>, <argument><expr><name>em</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowActionBean</name></argument>&gt;</argument_list></name></type> <name>beanList</name> <init>= <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowActionBean</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>jpaService</name><operator>.</operator><name>executeGetList</name></name><argument_list>(<argument><expr><call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>query</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>beanList</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>beanList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JPAExecutorException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E0605</name></name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>retList</name> <init>= <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>jpaService</name><operator>.</operator><name>executeGetList</name></name><argument_list>(<argument><expr><call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowActionBean</name></argument>&gt;</argument_list></name></type> <name>beanList</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>retList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>beanList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>WorkflowActionBean</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>ret</name> <range>: <expr><name>retList</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>beanList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>constructBean</name><argument_list>(<argument><expr><name>namedQuery</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
         </block_content>}</block></if></if_stmt>
         <return>return <expr><name>beanList</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowActionsRunningGetJPAExecutor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowActionsRunningGetJPAExecutor</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ec722bcdd</name><operator>..</operator><name>e69de29bb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowActionsRunningGetJPAExecutor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowActionsRunningGetJPAExecutor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">68</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Timestamp</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>EntityManager</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Query</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>WorkflowActionBean</name></name>;</import>

<comment type="block" format="javadoc">/**
 * JPA Executor to get running workflow actions
 */</comment>
<class><specifier>public</specifier> class <name>WorkflowActionsRunningGetJPAExecutor</name> <super_list><implements>implements <super><name><name>JPAExecutor</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowActionBean</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>checkAgeSecs</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WorkflowActionsRunningGetJPAExecutor</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>checkAgeSecs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>checkAgeSecs</name></name> <operator>=</operator> <name>checkAgeSecs</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block">/* (non-Javadoc)
     * @see org.apache.oozie.executor.jpa.JPAExecutor#execute(javax.persistence.EntityManager)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowActionBean</name></argument>&gt;</argument_list></name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>EntityManager</name></type> <name>em</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JPAExecutorException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowActionBean</name></argument>&gt;</argument_list></name></type> <name>actions</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Timestamp</name></type> <name>ts</name> <init>= <expr><operator>new</operator> <call><name>Timestamp</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>checkAgeSecs</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Query</name></type> <name>q</name> <init>= <expr><call><name><name>em</name><operator>.</operator><name>createNamedQuery</name></name><argument_list>(<argument><expr><literal type="string">"GET_RUNNING_ACTIONS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"lastCheckTime"</literal></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>actions</name> <operator>=</operator> <call><name><name>q</name><operator>.</operator><name>getResultList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JPAExecutorException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E0605</name></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name>actions</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/* (non-Javadoc)
     * @see org.apache.oozie.executor.jpa.JPAExecutor#getName()
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="string">"WorkflowActionsRunningGetJPAExecutor"</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">58c936bb4</literal><operator>..</operator><literal type="number">6d78deee7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Timestamp</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>EntityManager</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Query</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>BinaryBlob</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>StringBlob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>WorkflowActionBean</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>WorkflowJobBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>WorkflowActionQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>JPAService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowJobQueryExecutor</name> extends <name>QueryExecutor</name><operator>&lt;</operator><name>WorkflowJobBean</name></expr><operator>,</operator> <expr><name>Wor</name>
         <name>UPDATE_WORKFLOW_STATUS_INSTANCE_MOD_START_END</name></expr><operator>,</operator>
         <expr><name>UPDATE_WORKFLOW_RERUN</name></expr><operator>,</operator>
         <expr><name>GET_WORKFLOW</name></expr><operator>,</operator>
        <expr><name>DELETE_WORKFLOW</name>
        <name>GET_WORKFLOW_STARTTIME</name></expr><operator>,</operator>
        <expr><name>GET_WORKFLOW_USER_GROUP</name></expr><operator>,</operator>
        <expr><name>GET_WORKFLOW_SUSPEND</name></expr><operator>,</operator>
        <expr><name>GET_WORKFLOW_ACTION_OP</name></expr><operator>,</operator>
        <expr><name>GET_WORKFLOW_RERUN</name></expr><operator>,</operator>
        <expr><name>GET_WORKFLOW_DEFINITION</name></expr><operator>,</operator>
        <expr><name>GET_WORKFLOW_KILL</name></expr><operator>,</operator>
        <expr><name>GET_WORKFLOW_RESUME</name></expr></expr_stmt>
     </block_content>}</block></function><empty_stmt>;</empty_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>WorkflowJobQueryExecutor</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>WorkflowJobQueryExecutor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">154</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowJobQueryExecutor</name> extends <name>QueryExecutor</name><operator>&lt;</operator><name>WorkflowJobBean</name></expr><operator>,</operator> <expr><name>Wor</name>
         <name>Query</name> <name>query</name> <operator>=</operator> <call><name><name>em</name><operator>.</operator><name>createNamedQuery</name></name><argument_list>(<argument><expr><call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <switch>switch <condition>(<expr><name>namedQuery</name></expr>)</condition> <block>{<block_content>
             <case>case <expr><name>GET_WORKFLOW</name></expr>:</case>
            <case>case <expr><name>GET_WORKFLOW_STARTTIME</name></expr>:</case>
            <case>case <expr><name>GET_WORKFLOW_USER_GROUP</name></expr>:</case>
            <case>case <expr><name>GET_WORKFLOW_SUSPEND</name></expr>:</case>
            <case>case <expr><name>GET_WORKFLOW_ACTION_OP</name></expr>:</case>
            <case>case <expr><name>GET_WORKFLOW_RERUN</name></expr>:</case>
            <case>case <expr><name>GET_WORKFLOW_DEFINITION</name></expr>:</case>
            <case>case <expr><name>GET_WORKFLOW_KILL</name></expr>:</case>
            <case>case <expr><name>GET_WORKFLOW_RESUME</name></expr>:</case>
                 <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setParameter</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>parameters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <break>break;</break>
             <default>default:</default>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">193</literal></expr><operator>,</operator><expr><literal type="number">123</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowJobQueryExecutor</name> extends <name>QueryExecutor</name><operator>&lt;</operator><name>WorkflowJobBean</name></expr><operator>,</operator> <expr><name>Wor</name></expr></expr_stmt>
         <return>return <expr><name>ret</name></expr>;</return>
     </block_content>}</block></switch>
 
    <function><type><specifier>private</specifier> <name>WorkflowJobBean</name></type> <name>constructBean</name><parameter_list>(<parameter><decl><type><name>WorkflowJobQuery</name></type> <name>namedQuery</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>ret</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JPAExecutorException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>arr</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>namedQuery</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>GET_WORKFLOW</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>(</operator><name>WorkflowJobBean</name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_WORKFLOW_STARTTIME</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowJobBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_WORKFLOW_USER_GROUP</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowJobBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_WORKFLOW_SUSPEND</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowJobBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setParentId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setEndTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setWfInstanceBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>BinaryBlob</name><operator>)</operator> <operator>(</operator><name><name>arr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_WORKFLOW_ACTION_OP</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowJobBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppPath</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setParentId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setWfInstanceBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>BinaryBlob</name><operator>)</operator> <operator>(</operator><name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setProtoActionConfBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_WORKFLOW_RERUN</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowJobBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setRun</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setWfInstanceBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>BinaryBlob</name><operator>)</operator> <operator>(</operator><name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_WORKFLOW_DEFINITION</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowJobBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setWfInstanceBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>BinaryBlob</name><operator>)</operator> <operator>(</operator><name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_WORKFLOW_KILL</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowJobBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppPath</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setParentId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setEndTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setWfInstanceBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>BinaryBlob</name><operator>)</operator> <operator>(</operator><name><name>arr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setSlaXmlBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_WORKFLOW_RESUME</name></expr>:</case>
                <expr_stmt><expr><name>bean</name> <operator>=</operator> <operator>new</operator> <call><name>WorkflowJobBean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppPath</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setParentId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setEndTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setLogToken</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setWfInstanceBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>BinaryBlob</name><operator>)</operator> <operator>(</operator><name><name>arr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setProtoActionConfBlob</name></name><argument_list>(<argument><expr><operator>(</operator><name>StringBlob</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <throw>throw <expr><operator>new</operator> <call><name>JPAExecutorException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E0603</name></name></expr></argument>, <argument><expr><literal type="string">"QueryExecutor cannot construct job bean for "</literal>
                        <operator>+</operator> <call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><name>bean</name></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>WorkflowJobBean</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>WorkflowJobQuery</name></type> <name>namedQuery</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>parameters</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JPAExecutorException</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>EntityManager</name></type> <name>em</name> <init>= <expr><call><name><name>jpaService</name><operator>.</operator><name>getEntityManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>getSelectQuery</name><argument_list>(<argument><expr><name>namedQuery</name></expr></argument>, <argument><expr><name>em</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean</name> <init>= <expr><operator>(</operator><name>WorkflowJobBean</name><operator>)</operator> <call><name><name>jpaService</name><operator>.</operator><name>executeGet</name></name><argument_list>(<argument><expr><call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bean</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>ret</name> <init>= <expr><call><name><name>jpaService</name><operator>.</operator><name>executeGet</name></name><argument_list>(<argument><expr><call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <throw>throw <expr><operator>new</operator> <call><name>JPAExecutorException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E0604</name></name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean</name> <init>= <expr><call><name>constructBean</name><argument_list>(<argument><expr><name>namedQuery</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <return>return <expr><name>bean</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">186</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">317</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowJobQueryExecutor</name> extends <name>QueryExecutor</name><operator>&lt;</operator><name>WorkflowJobBean</name></expr><operator>,</operator> <expr><name>Wor</name>
     <specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowJobBean</name></argument>&gt;</argument_list></name> <call><name>getList</name><argument_list>(<argument><expr><name>WorkflowJobQuery</name> <name>namedQuery</name></expr></argument>, <argument><expr><name>Object</name><operator>...</operator> <name>parameters</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>JPAExecutorException</name> <block>{
         <expr><name>EntityManager</name> <name>em</name> <operator>=</operator> <call><name><name>jpaService</name><operator>.</operator><name>getEntityManager</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>getSelectQuery</name><argument_list>(<argument><expr><name>namedQuery</name></expr></argument>, <argument><expr><name>em</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowJobBean</name></argument>&gt;</argument_list></name></type> <name>beanList</name> <init>= <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowJobBean</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>jpaService</name>
                <operator>.</operator><name>executeGetList</name></name><argument_list>(<argument><expr><call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>beanList</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>beanList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JPAExecutorException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E0604</name></name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>retList</name> <init>= <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>jpaService</name><operator>.</operator><name>executeGetList</name></name><argument_list>(<argument><expr><call><name><name>namedQuery</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowJobBean</name></argument>&gt;</argument_list></name></type> <name>beanList</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>retList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>beanList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>WorkflowJobBean</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>ret</name> <range>: <expr><name>retList</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>beanList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>constructBean</name><argument_list>(<argument><expr><name>namedQuery</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
         </block_content>}</block></if></if_stmt>
         <return>return <expr><name>beanList</name></expr>;</return>
     </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>ActionCheckerService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>ActionCheckerService</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cf11a36c6</name><operator>..</operator><literal type="number">9cbc22305</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>ActionCheckerService</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>ActionCheckerService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>WorkflowActionBean</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordActionCheckXCommand</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>wf</name><operator>.</operator><name>ActionCheckXCommand</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionsRunningGetJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>JPAExecutorException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowActionsRunningGetJPAExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowActionQueryExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>WorkflowActionQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XCallable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XLog</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">111</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ActionCheckerService</name> implements <name>Service</name> <block>{
 
             <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowActionBean</name></argument>&gt;</argument_list></name> <name>actions</name></expr>;
             <try>try <block>{<block_content>
                <expr_stmt><expr><name>actions</name> <operator>=</operator> <call><name><name>jpaService</name>
                        <operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>WorkflowActionsRunningGetJPAExecutor</name><argument_list>(<argument><expr><name>actionCheckDelay</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>actions</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getList</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_RUNNING_ACTIONS</name></name></expr></argument>,
                        <argument><expr><name>actionCheckDelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></try>}</block></expr></expr_stmt>
             <catch>catch <parameter_list>(<parameter><decl><type><name>JPAExecutorException</name></type> <name>je</name></decl></parameter>)</parameter_list> <block>{<block_content>
                 <throw>throw <expr><operator>new</operator> <call><name>CommandException</name><argument_list>(<argument><expr><name>je</name></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AuthorizationService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AuthorizationService</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e132dbca1</name><operator>..</operator><literal type="number">9e6b76f26</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AuthorizationService</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>AuthorizationService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>XOozieClient</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>BundleJobGetJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordJobGetJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>JPAExecutorException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowJobGetJPAExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowJobQueryExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>WorkflowJobQuery</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>ConfigUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>Instrumentation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XLog</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">433</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">434</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AuthorizationService</name> implements <name>Service</name> <block>{
                     <expr><name>JPAService</name> <name>jpaService</name> <operator>=</operator> <call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>JPAService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
                     <if_stmt><if>if <condition>(<expr><name>jpaService</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                         <try>try <block>{<block_content>
                            <expr_stmt><expr><name>jobBean</name> <operator>=</operator> <call><name><name>jpaService</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>WorkflowJobGetJPAExecutor</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>jobBean</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW_USER_GROUP</name></name></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <expr_stmt/></block_content></block></try></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
                         <catch>catch <parameter_list>(<parameter><decl><type><name>JPAExecutorException</name></type> <name>je</name></decl></parameter>)</parameter_list> <block>{<block_content>
                             <throw>throw <expr><operator>new</operator> <call><name>AuthorizationException</name><argument_list>(<argument><expr><name>je</name></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>JPAService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>JPAService</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9f3f14828</literal><operator>..</operator><literal type="number">0e944a692</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>JPAService</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>JPAService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">439</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">439</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>JPAService</name> implements <name>Service</name></expr><operator>,</operator> <expr><name>Instrumentable</name> <block>{
      <expr><operator>*</operator> @</expr><return>return <expr><name>list</name> <name>containing</name> <name>results</name> <name>that</name> <name>match</name> <name>the</name> <name>query</name>
      <operator>*</operator> @<throws>throws <argument><expr><name>JPAExecutorException</name>
      <operator>*</operator><operator>/</operator>
    <specifier>public</specifier> <name>List</name> <call><name>executeGetList</name><argument_list>(<argument><expr><name>String</name> <name>namedQueryName</name></expr></argument>, <argument><expr><name>Query</name> <name>query</name></expr></argument>, <argument><expr><name>EntityManager</name> <name>em</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>JPAExecutorException</name> <block>{
    <expr><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <call><name>executeGetList</name><argument_list>(<argument><expr><name>String</name> <name>namedQueryName</name></expr></argument>, <argument><expr><name>Query</name> <name>query</name></expr></argument>, <argument><expr><name>EntityManager</name> <name>em</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>JPAExecutorException</name> <block>{
         <expr><name><name>Instrumentation</name><operator>.</operator><name>Cron</name></name> <name>cron</name> <operator>=</operator> <operator>new</operator> <call><name><name>Instrumentation</name><operator>.</operator><name>Cron</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</return></block></expr></expr_stmt>
         <try>try <block>{<block_content>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">450</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">450</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>JPAService</name> implements <name>Service</name></expr><operator>,</operator> <expr><name>Instrumentable</name> <block>{
 
             <expr><call><name><name>cron</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;
             <expr><call><name><name>em</name><operator>.</operator><name>getTransaction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;
            <expr><name>List</name> <name>resultList</name> <operator>=</operator> <literal type="null">null</literal></expr>;
            <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name> <name>resultList</name> <operator>=</operator> <literal type="null">null</literal></expr>;
             <try>try <block>{<block_content>
                 <expr_stmt><expr><name>resultList</name> <operator>=</operator> <call><name><name>query</name><operator>.</operator><name>getResultList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></try>}</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bc819f10e</name><operator>..</operator><name>fa64b3257</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>EntityManager</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Query</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>WorkflowActionBean</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestWorkflowActionQueryExecutor</name> extends <name>XDataTestCase</name> <block>{
 
     @<expr><name>Override</name>
     <specifier>protected</specifier> <name>void</name> <call><name>tearDown</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
        <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Debug: In teardown"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
        <expr><operator>new</operator> <call><name>Throwable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>printStackTrace</name><argument_list>()</argument_list></call></expr>;
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>services</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></try>}</block></expr></expr_stmt>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Debug: exception In teardown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <expr_stmt><expr><call><name><name>services</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></try>
 
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetQuery</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetUpdateQuery</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>EntityManager</name></type> <name>em</name> <init>= <expr><call><name><name>jpaService</name><operator>.</operator><name>getEntityManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>job</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>addRecordToWfJobTable</name></name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>, <argument><expr><name><name>WorkflowInstance</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>WorkflowActionBean</name></type> <name>bean</name> <init>= <expr><call><name>addRecordToWfActionTable</name><argument_list>(<argument><expr><call><name><name>job</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">102</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">95</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestWorkflowActionQueryExecutor</name> extends <name>XDataTestCase</name> <block>{
         <expr><name>query</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUpdateQuery</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>UPDATE_ACTION_PENDING</name></name></expr></argument>,
                 <argument><expr><name>bean</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"pending"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"pendingAge"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getPendingAgeTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
         <comment type="line">// UPDATE_ACTION_STATUS_PENDING</comment>
         <expr><name>query</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUpdateQuery</name><argument_list>(
                 <argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>UPDATE_ACTION_STATUS_PENDING</name></name></expr></argument>, <argument><expr><name>bean</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"pending"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"pendingAge"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getPendingAgeTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <comment type="line">// UPDATE_ACTION_PENDING_TRANS</comment>
         <expr><name>query</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUpdateQuery</name><argument_list>(
                 <argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>UPDATE_ACTION_PENDING_TRANS</name></name></expr></argument>, <argument><expr><name>bean</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"pending"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"pendingAge"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getPendingAgeTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"transition"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <comment type="line">// UPDATE_ACTION_PENDING_TRANS_ERROR</comment>
         <expr><name>query</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUpdateQuery</name><argument_list>(
                 <argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>UPDATE_ACTION_PENDING_TRANS_ERROR</name></name></expr></argument>, <argument><expr><name>bean</name></expr></argument>, <argument><expr><name>em</name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"pending"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"pendingAge"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getPendingAgeTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"transition"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"errorCode"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"errorMessage"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">169</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">166</literal></expr>,<expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestWorkflowActionQueryExecutor</name> extends <name>XDataTestCase</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"retries"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getRetries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"endTime"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getEndTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"retries"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getRetries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"pending"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"pendingAge"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getPendingAgeTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"signalValue"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getSignalValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">184</literal></expr>,<expr><literal type="number">18</literal> <operator>+</operator><literal type="number">182</literal></expr>,<expr><literal type="number">186</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestWorkflowActionQueryExecutor</name> extends <name>XDataTestCase</name> <block>{
         <expr><name>WorkflowJobBean</name> <name>job</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>addRecordToWfJobTable</name></name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>, <argument><expr><name><name>WorkflowInstance</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr>;
         <expr><name>WorkflowActionBean</name> <name>bean</name> <operator>=</operator> <call><name>addRecordToWfActionTable</name><argument_list>(<argument><expr><call><name><name>job</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name><name>bean</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>bean</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"test-name"</literal></expr></argument>)</argument_list></call></expr>;
         <expr><call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeUpdate</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>UPDATE_ACTION</name></name></expr></argument>, <argument><expr><name>bean</name></expr></argument>)</argument_list></call></expr>;
         <expr><name>WorkflowActionBean</name> <name>retBean</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_ACTION</name></name></expr></argument>,
                 <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"test-name"</literal></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr>;
     }</block>
 
     <specifier>public</specifier> <name>void</name> <call><name>testGet</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
        <comment type="line">// TODO</comment>
        <expr><name>WorkflowActionBean</name> <name>bean</name> <operator>=</operator> <call><name>addRecordToWfActionTable</name><argument_list>(<argument><expr><literal type="string">"workflowId"</literal></expr></argument>,<argument><expr><literal type="string">"testAction"</literal></expr></argument>, <argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
        <expr><name>WorkflowActionBean</name> <name>retBean</name></expr>;

        <comment type="line">//GET_WORKFFLOW_ID_TYPE</comment>
        <expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_ACTION_ID_TYPE</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <comment type="line">//GET_WORKFFLOW_FAIL</comment>
        <expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_ACTION_FAIL</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStats</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalChildIDs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <comment type="line">//GET_WORKFFLOW_SIGNAL</comment>
        <expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_ACTION_SIGNAL</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getExecutionPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExecutionPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getSignalValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSignalValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStats</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalChildIDs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// GET_WORKFLOW_START</comment>
        <expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_ACTION_START</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUserRetryCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUserRetryCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUserRetryMax</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUserRetryMax</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUserRetryInterval</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUserRetryInterval</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getCred</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getCred</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStats</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalChildIDs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// GET_WORKFLOW_CHECK</comment>
        <expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_ACTION_CHECK</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getRetries</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getRetries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getTrackerUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getTrackerUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLastCheckTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLastCheckTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getExternalId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getExternalStatus</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getExternalChildIDs</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalChildIDs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStats</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// GET_WORKFLOW_END</comment>
        <expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_ACTION_END</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getRetries</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getRetries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getTrackerUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getTrackerUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUserRetryCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUserRetryCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUserRetryMax</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUserRetryMax</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUserRetryInterval</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUserRetryInterval</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getExternalId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getExternalStatus</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getExternalChildIDs</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalChildIDs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStats</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStats</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// GET_WORKFLOW_KILL</comment>
        <expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_ACTION_KILL</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getPending</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getTransition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getRetries</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getRetries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getTrackerUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getTrackerUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getExternalId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalChildIDs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStats</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <comment type="line">//GET_WORKFLOW_COMPLETED</comment>
        <expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_ACTION_COMPLETED</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStats</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getExternalChildIDs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
 
     <specifier>public</specifier> <name>void</name> <call><name>testGetList</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
        <comment type="line">// TODO</comment>
      <comment type="line">//GET_RUNNING_ACTIONS</comment>
        <expr><call><name>addRecordToWfActionTable</name><argument_list>(<argument><expr><literal type="string">"wrkflow"</literal></expr></argument>,<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
        <expr><call><name>addRecordToWfActionTable</name><argument_list>(<argument><expr><literal type="string">"wrkflow"</literal></expr></argument>,<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>addRecordToWfActionTable</name><argument_list>(<argument><expr><literal type="string">"wrkflow"</literal></expr></argument>,<argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowActionBean</name></argument>&gt;</argument_list></name> <name>retList</name> <operator>=</operator> <call><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getList</name><argument_list>(
                <argument><expr><name><name>WorkflowActionQuery</name><operator>.</operator><name>GET_RUNNING_ACTIONS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>retList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <for>for<control>(<init><decl><type><name>WorkflowActionBean</name></type> <name>bean</name> <range>: <expr><name>retList</name></expr></range></decl></init>)</control><block>{<block_content>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"wrkflow@1"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"wrkflow@2"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"wrkflow@3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>

     </block_content>}</block></function>
 
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testInsert</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowActionsRunningGetJPAExecutor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowActionsRunningGetJPAExecutor</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c7ec84f26</name><operator>..</operator><name>e69de29bb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowActionsRunningGetJPAExecutor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowActionsRunningGetJPAExecutor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">83</literal> <operator>+</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>WorkflowActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>WorkflowJobBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>WorkflowAction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>WorkflowJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>JPAService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>test</name><operator>.</operator><name>XDataTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>workflow</name><operator>.</operator><name>WorkflowInstance</name></name>;</import>

<class><specifier>public</specifier> class <name>TestWorkflowActionsRunningGetJPAExecutor</name> <super_list><extends>extends <super><name>XDataTestCase</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><name>Services</name></type> <name>services</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>services</name> <operator>=</operator> <operator>new</operator> <call><name>Services</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>services</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanUpDBTables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>services</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWfActionsRunningGet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>job</name> <init>= <expr><call><name>addRecordToWfJobTable</name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>, <argument><expr><name><name>WorkflowInstance</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addRecordToWfActionTable</name><argument_list>(<argument><expr><call><name><name>job</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>OK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRecordToWfActionTableWithRunningStatus</name><argument_list>(<argument><expr><call><name><name>job</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_testGetRunningActions</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>_testGetRunningActions</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>checkAgeSecs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JPAService</name></type> <name>jpaService</name> <init>= <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>JPAService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>jpaService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WorkflowActionsRunningGetJPAExecutor</name></type> <name>runningActionsGetExe</name> <init>= <expr><operator>new</operator> <call><name>WorkflowActionsRunningGetJPAExecutor</name><argument_list>(<argument><expr><name>checkAgeSecs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowActionBean</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>jpaService</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>runningActionsGetExe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>WorkflowActionBean</name></type> <name>addRecordToWfActionTableWithRunningStatus</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>wfId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>actionName</name></decl></parameter>, <parameter><decl><type><name><name>WorkflowAction</name><operator>.</operator><name>Status</name></name></type> <name>status</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>WorkflowActionBean</name></type> <name>action</name> <init>= <expr><call><name>createWorkflowAction</name><argument_list>(<argument><expr><name>wfId</name></expr></argument>, <argument><expr><name>actionName</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>action</name><operator>.</operator><name>setPending</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>JPAService</name></type> <name>jpaService</name> <init>= <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>JPAService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>jpaService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>WorkflowActionInsertJPAExecutor</name></type> <name>actionInsertCmd</name> <init>= <expr><operator>new</operator> <call><name>WorkflowActionInsertJPAExecutor</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>jpaService</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>actionInsertCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>JPAExecutorException</name></type> <name>je</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>je</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Unable to insert the test wf action record to table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>je</name></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name>action</name></expr>;</return>
    </block_content>}</block></function>


}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowJobQueryExecutor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowJobQueryExecutor</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a26de28a5</name><operator>..</operator><literal type="number">6e7231987</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowJobQueryExecutor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>TestWorkflowJobQueryExecutor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>EntityManager</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Query</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestWorkflowJobQueryExecutor</name> extends <name>XDataTestCase</name> <block>{
         <expr><call><name><name>super</name><operator>.</operator><name>tearDown</name></name><argument_list>()</argument_list></call></expr>;
     }</block>
 
    <specifier>public</specifier> <name>void</name> <call><name>testGetQuery</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><specifier>public</specifier> <name>void</name> <call><name>testGetUpdateQuery</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>Exception</name> <block>{
         <expr><name>EntityManager</name> <name>em</name> <operator>=</operator> <call><name><name>jpaService</name><operator>.</operator><name>getEntityManager</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean</name> <init>= <expr><call><name>addRecordToWfJobTable</name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>, <argument><expr><name><name>WorkflowInstance</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">143</literal></expr><operator>,</operator><expr><literal type="number">53</literal> <operator>+</operator><literal type="number">146</literal></expr><operator>,</operator><expr><literal type="number">162</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestWorkflowJobQueryExecutor</name> extends <name>XDataTestCase</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"wfInstance"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"lastModTime"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getLastModifiedTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    <specifier>public</specifier> <name>void</name> <call><name>testExecuteUpdate</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{

        <expr><name>WorkflowJobBean</name> <name>bean</name> <operator>=</operator> <call><name>addRecordToWfJobTable</name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>, <argument><expr><name><name>WorkflowInstance</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeUpdate</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>UPDATE_WORKFLOW</name></name></expr></argument>, <argument><expr><name>bean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean2</name> <init>= <expr><call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean2</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetSelectQuery</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>EntityManager</name></type> <name>em</name> <init>= <expr><call><name><name>jpaService</name><operator>.</operator><name>getEntityManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean</name> <init>= <expr><call><name>addRecordToWfJobTable</name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>, <argument><expr><name><name>WorkflowInstance</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
         <comment type="line">// GET_WORKFLOW</comment>
        <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectQuery</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW</name></name></expr></argument>, <argument><expr><name>em</name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectQuery</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW</name></name></expr></argument>, <argument><expr><name>em</name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
 
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExecuteUpdate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean</name> <init>= <expr><call><name>addRecordToWfJobTable</name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>, <argument><expr><name><name>WorkflowInstance</name><operator>.</operator><name>Status</name><operator>.</operator><name>PREP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeUpdate</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>UPDATE_WORKFLOW</name></name></expr></argument>, <argument><expr><name>bean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean2</name> <init>= <expr><call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW</name></name></expr></argument>,
                    <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean2</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// TODO Auto-generated catch block</comment>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Debug: encountered exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
        <comment type="line">// GET_WORKFLOW_SUSPEND</comment>
        <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectQuery</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW_SUSPEND</name></name></expr></argument>, <argument><expr><name>em</name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getParameterValue</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInsert</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean</name> <init>= <expr><operator>new</operator> <call><name>WorkflowJobBean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><literal type="string">"test-oozie-wrk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><literal type="string">"oozie"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>bean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>retBean</name> <init>= <expr><call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW</name></name></expr></argument>,
                    <argument><expr><literal type="string">"test-oozie-wrk"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>retBean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"oozie"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Debug: encountered exception testinsert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// TODO Auto-generated catch block</comment>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInsert</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean</name> <init>= <expr><operator>new</operator> <call><name>WorkflowJobBean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><literal type="string">"test-oozie-wrk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><literal type="string">"oozie"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>bean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>retBean</name> <init>= <expr><call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW</name></name></expr></argument>,
                <argument><expr><literal type="string">"test-oozie-wrk"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>retBean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"oozie"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testGet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// TODO</comment>
        <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>bean</name> <init>= <expr><call><name>addRecordToWfJobTable</name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>, <argument><expr><name><name>WorkflowInstance</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setEndTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeUpdate</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>UPDATE_WORKFLOW</name></name></expr></argument>, <argument><expr><name>bean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WorkflowJobBean</name></type> <name>retBean</name></decl>;</decl_stmt>
        <comment type="line">// GET_WORKFLOW_STARTTIME</comment>
        <expr_stmt><expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW_STARTTIME</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getWorkflowInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getProtoActionConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// GET_WORKFLOW_USER_GROUP</comment>
        <expr_stmt><expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW_USER_GROUP</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getWorkflowInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getProtoActionConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// GET_WORKFLOW_SUSPEND</comment>
        <expr_stmt><expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW_SUSPEND</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getProtoActionConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// GET_WORKFLOW_ACTION_OP</comment>
        <expr_stmt><expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW_ACTION_OP</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getAppPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getProtoActionConf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getProtoActionConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//GET_WORKFLOW_RERUN</comment>
        <expr_stmt><expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW_RERUN</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getRun</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getRun</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getProtoActionConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//GET_WORKFLOW_DEFINITION</comment>
        <expr_stmt><expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW_DEFINITION</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getProtoActionConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// GET_WORKFLOW_KILL</comment>
        <expr_stmt><expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW_KILL</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getAppPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getProtoActionConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// GET_WORKFLOW_RESUME</comment>
        <expr_stmt><expr><name>retBean</name> <operator>=</operator> <call><name><name>WorkflowJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>WorkflowJobQuery</name><operator>.</operator><name>GET_WORKFLOW_RESUME</name></name></expr></argument>, <argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getAppPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getAppPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStatusStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getParentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getStartTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getLogToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getWfInstanceBlob</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>bean</name><operator>.</operator><name>getProtoActionConf</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retBean</name><operator>.</operator><name>getProtoActionConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>retBean</name><operator>.</operator><name>getSlaXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
 
     <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetList</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>sla</name><operator>/</operator><name><name>TestSLAEventGeneration</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>sla</name><operator>/</operator><name><name>TestSLAEventGeneration</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9cdde7d58</literal><operator>..</operator><literal type="number">01e7e835a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>sla</name><operator>/</operator><name><name>TestSLAEventGeneration</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>sla</name><operator>/</operator><name><name>TestSLAEventGeneration</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>sla</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>AppType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorJobBean</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>WorkflowActionBean</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>WorkflowJobBean</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorAction</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorJob</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>OozieClient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>WorkflowAction</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>WorkflowJob</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>event</name><operator>.</operator><name>Event</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>event</name><operator>.</operator><name>JobEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>event</name><operator>.</operator><name>SLAEvent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>event</name><operator>.</operator><name>SLAEvent</name><operator>.</operator><name>SLAStatus</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>event</name><operator>.</operator><name>SLAEvent</name><operator>.</operator><name>EventStatus</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>rest</name><operator>.</operator><name>RestConstants</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>wf</name><operator>.</operator><name>StartXCommand</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>wf</name><operator>.</operator><name>SubmitXCommand</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>event</name><operator>.</operator><name>CoordinatorActionEvent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>event</name><operator>.</operator><name>listener</name><operator>.</operator><name>JobEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>BatchQueryExecutor</name><operator>.</operator><name>UpdateEntry</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionGetJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionQueryExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionQueryExecutor</name><operator>.</operator><name>CoordActionQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>BatchQueryExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>WorkflowActionQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowActionsGetForJobJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowJobGetJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowJobInsertJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>WorkflowJobQueryExecutor</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>sla</name><operator>.</operator><name>SLASummaryGetJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>EventHandlerService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>JPAService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>EventHandlerService</name><operator>.</operator><name>EventWorker</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>sla</name><operator>.</operator><name>listener</name><operator>.</operator><name>SLAJobEventListener</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>sla</name><operator>.</operator><name>service</name><operator>.</operator><name>SLAService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>test</name><operator>.</operator><name>XDataTestCase</name></name>;</import>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>test</name><operator>/</operator><name><name>XDataTestCase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>test</name><operator>/</operator><name><name>XDataTestCase</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8a796f3b2</literal><operator>..</operator><name>b0eaee279</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>test</name><operator>/</operator><name><name>XDataTestCase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>test</name><operator>/</operator><name><name>XDataTestCase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStreamWriter</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1170</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1171</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>XDataTestCase</name> extends <name>XHCatTestCase</name> <block>{
         <expr><call><name><name>workflow</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name><name>workflow</name><operator>.</operator><name>setGroup</name></name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>GROUP_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name><name>workflow</name><operator>.</operator><name>setWorkflowInstance</name></name><argument_list>(<argument><expr><name>wfInstance</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>workflow</name><operator>.</operator><name>setSlaXml</name></name><argument_list>(<argument><expr><literal type="string">"&lt;sla&gt;&lt;/sla&gt;"</literal></expr></argument>)</argument_list></call></expr>;
         <return>return <expr><name>workflow</name></expr>;</return>
     }</block></expr></expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1221</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1223</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>XDataTestCase</name> extends <name>XHCatTestCase</name> <block>{
                 <expr><operator>+</operator> <literal type="string">"&lt;property&gt;&lt;name&gt;mapred.output.dir&lt;/name&gt;&lt;value&gt;"</literal> <operator>+</operator> <call><name><name>outputDir</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"&lt;/value&gt;&lt;/property&gt;"</literal>
                 <operator>+</operator> <literal type="string">"&lt;/configuration&gt;"</literal> <operator>+</operator> <literal type="string">"&lt;/map-reduce&gt;"</literal></expr>;
         <expr><call><name><name>action</name><operator>.</operator><name>setConf</name></name><argument_list>(<argument><expr><name>actionXml</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setSlaXml</name></name><argument_list>(<argument><expr><literal type="string">"&lt;sla&gt;&lt;/sla&gt;"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><literal type="string">"dummy data"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setStats</name></name><argument_list>(<argument><expr><literal type="string">"dummy stats"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setExternalChildIDs</name></name><argument_list>(<argument><expr><literal type="string">"00000001-dummy-oozie-wrkf-W"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setRetries</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setUserRetryCount</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setUserRetryMax</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setUserRetryInterval</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setErrorInfo</name></name><argument_list>(<argument><expr><literal type="string">"dummyErrorCode"</literal></expr></argument>, <argument><expr><literal type="string">"dummyErrorMessage"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setExternalId</name></name><argument_list>(<argument><expr><literal type="string">"dummy external id"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>action</name><operator>.</operator><name>setExternalStatus</name></name><argument_list>(<argument><expr><literal type="string">"RUNNING"</literal></expr></argument>)</argument_list></call></expr>;
 
         <return>return <expr><name>action</name></expr>;</return>
     }</block></expr></expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">9e614d6d3</literal><operator>..</operator><literal type="number">7a363d477</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
 <operator>--</operator> <name>Oozie</name> <literal type="number">4.1.0</literal> <call><name>release</name> <argument_list>(<argument><expr><name>trunk</name> <operator>-</operator> <name>unreleased</name></expr></argument>)</argument_list></call>
 
<name>OOZIE</name><operator>-</operator><literal type="number">1524</literal> <name>Change</name> <name>Workflow</name> <name>SELECT</name> <name>query</name> <name>to</name> <name>fetch</name> <name>only</name> <name>necessary</name> <name>columns</name> <name>and</name> <name>consolidate</name> <name>JPA</name> <call><name>Executors</name> <argument_list>(<argument><expr><name>ryota</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">1515</literal> <name>Passing</name> <name>superset</name> <name>of</name> <name>action</name> <name>id</name> <name>range</name> <name>should</name> <name>be</name> <call><name>allowed</name> <argument_list>(<argument><expr><name>mona</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">1530</literal> <name>Fork</name><operator>-</operator><name>join</name> <name>mismatch</name> <name>makes</name> <name>workflow</name> <name>Failed</name> <name>but</name> <name>some</name> <name>actions</name> <name>stay</name> <call><name>Running</name> <argument_list>(<argument><expr><name>mona</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">1539</literal> <name>Load</name> <name>more</name> <name>coordinator</name> <name>jobs</name> <name>eligible</name> <name>to</name> <name>be</name> <name>materialized</name> <name>in</name> <call><name>MaterializeTriggerService</name> <argument_list>(<argument><expr><name>mona</name></expr></argument>)</argument_list></call>
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></catch></block_content></block></catch></block_content></block></function>

</unit>
