<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/oozie/3d1fe287.java"><expr_stmt><expr><name>From</name> <literal type="number">3d1fe2877b654f0a9a80df16ce7ed04314426e2a</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Andras</name> <name><name>Piros</name> <argument_list type="generic">&lt;<argument><name><name>andras</name><operator>.</operator><name>piros</name></name><annotation>@<name><name>cloudera</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">6</literal> <name>Aug</name> <literal type="number">2018</literal> <literal type="number">18</literal><operator>:</operator><literal type="number">17</literal><operator>:</operator><literal type="number">55</literal> <operator>+</operator><literal type="number">0200</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>OOZIE</name><operator>-</operator><literal type="number">3315</literal> <name>DateList</name> <name>example</name> <call><name>fails</name> <argument_list>(<argument><expr><name><name>daniel</name><operator>.</operator><name>becker</name></name> <name>via</name>
 <name><name>andras</name><operator>.</operator><name>piros</name></name></expr></argument>)</argument_list></call>

<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>example</name><operator>/</operator><name><name>DateList</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">70</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>example</name><operator>/</operator><name><name>TestDateList</name><operator>.</operator><name>java</name></name>    <operator>|</operator> <literal type="number">88</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>                               <operator>|</operator>  <literal type="number">1</literal> <operator>+</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">142</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">17</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>examples</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>example</name><operator>/</operator><name><name>TestDateList</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>examples</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>example</name><operator>/</operator><name><name>DateList</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>examples</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>example</name><operator>/</operator><name><name>DateList</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">731fe4130</literal><operator>..</operator><name>bed809391</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>examples</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>example</name><operator>/</operator><name><name>DateList</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>examples</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>example</name><operator>/</operator><name><name>DateList</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>example</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>ParseException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">74</literal> @@ <specifier>public</specifier> <name>class</name> <name>DateList</name> <block>{
     <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>TimeZone</name> <name>UTC</name> <operator>=</operator> <call><name>getTimeZone</name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><specifier>private</specifier> <specifier>static</specifier> <name>String</name> <name>DATE_LIST_SEPARATOR</name> <operator>=</operator> <literal type="string">","</literal></expr>;
 
    <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>main</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>main</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ParseException</name> <block>{</block></expr></argument></throws></expr>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkArgsOk</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt>}</block>

        <name>String</name> <name>dateList</name> <operator>=</operator> <call><name>createDateListFromArgs</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"datelist :"</literal> <operator>+</operator> <name>dateList</name><operator>+</operator> <literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeWorkflowOutput</name><argument_list>(<argument><expr><name>dateList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }

    private <function><type><specifier>static</specifier> <name>boolean</name></type> <name>checkArgsOk</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
                     <operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Usage: java DateList &lt;start_time&gt;  &lt;end_time&gt; &lt;frequency&gt; &lt;timeunit&gt; &lt;timezone&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
                     <operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Example: java DateList 2009-02-01T01:00Z 2009-02-01T02:00Z 15 MINUTES UTC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
         </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>startTime</name> <init>= <expr><call><name>parseDateUTC</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>endTime</name> <init>= <expr><call><name>parseDateUTC</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>createDateListFromArgs</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Date</name></type> <name>startTime</name> <init>= <expr><call><name>parseDateUTC</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Date</name></type> <name>endTime</name> <init>= <expr><call><name>parseDateUTC</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>frequency</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TimeUnit</name></type> <name>timeUnit</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TimeZone</name></type> <name>timeZone</name> <init>= <expr><call><name>getTimeZone</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Repeatable</name></type> <name>rep</name> <init>= <expr><call><name>createRepeatable</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>, <argument><expr><name>frequency</name></expr></argument>, <argument><expr><name>timeUnit</name></expr></argument>, <argument><expr><name>timeZone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>getDateList</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>, <argument><expr><name>endTime</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Repeatable</name></type> <name>createRepeatable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>startTime</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>frequency</name></decl></parameter>,
                                               <parameter><decl><type><specifier>final</specifier> <name>TimeUnit</name></type> <name>timeUnit</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>TimeZone</name></type> <name>timeZone</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>Repeatable</name></type> <name>rep</name> <init>= <expr><operator>new</operator> <call><name>Repeatable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>setBaseline</name></name><argument_list>(<argument><expr><name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>setFrequency</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>setTimeUnit</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><call><name>getTimeZone</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>setFrequency</name></name><argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>setTimeUnit</name></name><argument_list>(<argument><expr><name>timeUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>rep</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDateList</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>startTime</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>endTime</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Repeatable</name></type> <name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>int</name></type> <name>occurrence</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dates</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>Date</name></type> <name>date</name> <init>= <expr><call><name><name>rep</name><operator>.</operator><name>getOccurrenceTime</name></name><argument_list>(<argument><expr><name>startTime</name></expr></argument>, <argument><expr><name>occurrence</name><operator>++</operator></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>dateList</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

         <while>while <condition>(<expr><name>date</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>date</name><operator>.</operator><name>before</name></name><argument_list>(<argument><expr><name>endTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>dates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>formatDateUTC</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>date</name> <operator>=</operator> <call><name><name>rep</name><operator>.</operator><name>getOccurrenceTime</name></name><argument_list>(<argument><expr><name>startTime</name></expr></argument>, <argument><expr><name>occurrence</name><operator>++</operator></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>occurrence</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>dateList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>DATE_LIST_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>dateList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>formatDateUTC</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></while>
 
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"datelist :"</literal> <operator>+</operator> <name>dateList</name><operator>+</operator> <literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>DATE_LIST_SEPARATOR</name></expr></argument>, <argument><expr><name>dates</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeWorkflowOutput</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>dateList</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
         <comment type="line">//Passing the variable to WF that could be referred by subsequent actions</comment>
         <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"oozie.action.output.properties"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"datelist"</literal></expr></argument>, <argument><expr><call><name><name>dateList</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"datelist"</literal></expr></argument>, <argument><expr><name>dateList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <try>try <init>(<decl><type><name>OutputStream</name></type> <name>os</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
             <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></try>
     </block_content>}</block></function>

     <comment type="line">//Utility methods</comment>
     <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DateFormat</name></type> <name>getISO8601DateFormat</name><parameter_list>()</parameter_list> <block>{<block_content>
         <decl_stmt><decl><type><name>DateFormat</name></type> <name>dateFormat</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyy-MM-dd'T'HH:mm'Z'"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>DateList</name> <block>{
         <return>return <expr><name>tz</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Date</name></type> <name>parseDateUTC</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Date</name></type> <name>parseDateUTC</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
         <return>return <expr><call><name>getISO8601DateFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
 
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>formatDateUTC</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>d</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>formatDateUTC</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <return>return <expr><ternary><condition><expr><operator>(</operator><name>d</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>getISO8601DateFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr>;</return>
     </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>examples</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>example</name><operator>/</operator><name><name>TestDateList</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>examples</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>example</name><operator>/</operator><name><name>TestDateList</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..55ff98353</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>examples</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>example</name><operator>/</operator><name><name>TestDateList</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">88</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>example</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>action</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>LauncherSecurityManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>rules</name><operator>.</operator><name>ExpectedException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>rules</name><operator>.</operator><name>TemporaryFolder</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>ParseException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<class><specifier>public</specifier> class <name>TestDateList</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>START</name> <init>= <expr><literal type="string">"2009-02-01T01:00Z"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>END</name> <init>= <expr><literal type="string">"2009-02-01T02:00Z"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FREQUENCY</name> <init>= <expr><literal type="string">"15"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TIMEUNIT</name> <init>= <expr><literal type="string">"MINUTES"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TIMEZONE</name> <init>= <expr><literal type="string">"UTC"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EXPECTED_DATE_RANGE</name>
            <init>= <expr><literal type="string">"2009-02-01T01:00Z,2009-02-01T01:15Z,2009-02-01T01:30Z,2009-02-01T01:45Z"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>ExpectedException</name></type> <name>expectedException</name> <init>= <expr><call><name><name>ExpectedException</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
    <type><specifier>public</specifier> <name>TemporaryFolder</name></type> <name>folder</name> <init>= <expr><operator>new</operator> <call><name>TemporaryFolder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testExitStatusIs_1_IfTooFewCLIArgs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>too_few_args</name> <init>= <expr><block>{<expr><name>START</name></expr>, <expr><name>END</name></expr>, <expr><name>FREQUENCY</name></expr>, <expr><name>TIMEUNIT</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>LauncherSecurityManager</name></type> <name>securityManager</name> <init>= <expr><operator>new</operator> <call><name>LauncherSecurityManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>securityManager</name><operator>.</operator><name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>expectedException</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><name><name>SecurityException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>DateList</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><name>too_few_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <finally>finally <block>{<block_content>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>securityManager</name><operator>.</operator><name>getExitInvoked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Unexpected exit code."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>securityManager</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>securityManager</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testCorrectOutput</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>args</name> <init>= <expr><block>{<expr><name>START</name></expr>, <expr><name>END</name></expr>, <expr><name>FREQUENCY</name></expr>, <expr><name>TIMEUNIT</name></expr>, <expr><name>TIMEZONE</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>output_file</name> <init>= <expr><call><name><name>folder</name><operator>.</operator><name>newFile</name></name><argument_list>(<argument><expr><literal type="string">"action_output.properties"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>output_filename</name> <init>= <expr><call><name><name>output_file</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"oozie.action.output.properties"</literal></expr></argument>, <argument><expr><name>output_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>DateList</name><operator>.</operator><name>main</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>output_file</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></try>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Incorrect date list."</literal></expr></argument>, <argument><expr><name>EXPECTED_DATE_RANGE</name></expr></argument>, <argument><expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"datelist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">5100d97de</literal><operator>..</operator><literal type="number">1979e6dd3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
 <operator>--</operator> <name>Oozie</name> <literal type="number">5.1.0</literal> <call><name>release</name> <argument_list>(<argument><expr><name>trunk</name> <operator>-</operator> <name>unreleased</name></expr></argument>)</argument_list></call>
 
<name>OOZIE</name><operator>-</operator><literal type="number">3315</literal> <name>DateList</name> <name>example</name> <call><name>fails</name> <argument_list>(<argument><expr><name><name>daniel</name><operator>.</operator><name>becker</name></name> <name>via</name> <name><name>andras</name><operator>.</operator><name>piros</name></name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">3313</literal> <name>Hive</name> <name>example</name> <name>action</name> <call><name>fails</name> <argument_list>(<argument><expr><name><name>daniel</name><operator>.</operator><name>becker</name></name> <name>via</name> <name>gezapeti</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">3193</literal> <name>Applications</name> <name>are</name> <name>not</name> <name>killed</name> <name>when</name> <name>submitted</name> <name>via</name> <call><name>subworkflow</name> <argument_list>(<argument><expr><name>kmarton</name> <name>via</name> <name>gezapeti</name></expr></argument>, <argument><expr><name><name>andras</name><operator>.</operator><name>piros</name></name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">3310</literal> <name>SQL</name> <name>error</name> <name>during</name> <operator>/</operator><name>v2</name><operator>/</operator><name>sla</name> <call><name>filtering</name> <argument_list>(<argument><expr><name>asalamon74</name> <name>via</name> <name><name>andras</name><operator>.</operator><name>piros</name></name></expr></argument>)</argument_list></call>
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block_content></block></function>

</unit>
