<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/oozie/81ce22b6.java"><expr_stmt><expr><name>From</name> <literal type="number">81ce22b6f23b2bba49df4733961ee82b58c38d0d</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Purshotam</name> <name>Shah</name> <operator>&lt;</operator><name>purushah</name>@<name>yahoo</name><operator>-</operator><name><name>inc</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">26</literal> <name>Jan</name> <literal type="number">2016</literal> <literal type="number">12</literal><operator>:</operator><literal type="number">46</literal><operator>:</operator><literal type="number">16</literal> <operator>-</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>OOZIE</name><operator>-</operator><literal type="number">1976</literal> <name>Specifying</name> <name>coordinator</name> <name>input</name> <name>datasets</name> <name>in</name> <name>more</name>
 <name>logical</name> <name>ways</name>

<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>oozie</name><operator>-</operator><name>coordinator</name><operator>-</operator><literal type="number">0.5.xsd</literal>  <operator>|</operator>  <literal type="number">194</literal> <operator>++</operator><operator>+</operator>
 <name>core</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>                                  <operator>|</operator>    <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>CoordinatorActionBean</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">46</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>ErrorCode</name><operator>.</operator><name>java</name></name> <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordActionInputCheckXCommand</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">318</literal> <operator>++</operator><operator>--</operator><operator>-</operator>
 <operator>...</operator><name><name>oordActionUpdatePushMissingDependency</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">30</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>command</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordCommandUtils</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">180</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>CoordMaterializeTransitionXCommand</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    <literal type="number">6</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>CoordPushDependencyCheckXCommand</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">73</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>command</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordSubmitXCommand</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">27</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordELConstants</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    <literal type="number">3</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordELEvaluator</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">23</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordELFunctions</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">49</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordUtils</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">22</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>SyncCoordAction</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">22</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>AbstractCoordInputDependency</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  <literal type="number">315</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputDependency</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">172</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>CoordInputDependencyFactory</name><operator>.</operator><name>java</name></name>          <operator>|</operator>  <literal type="number">170</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputInstance</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">83</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordOldInputDependency</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">309</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordPullInputDependency</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">151</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordPushInputDependency</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">49</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>CoordUnResolvedInputDependency</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   <literal type="number">92</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicBuilder</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">167</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluator</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">44</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseOne</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">324</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseThree</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">130</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseTwo</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">144</literal> <operator>++</operator><operator>+</operator>
 <operator>...</operator><name><name>CoordInputLogicEvaluatorPhaseValidate</name><operator>.</operator><name>java</name></name> <operator>|</operator>   <literal type="number">89</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>java</name></name> <operator>|</operator>  <literal type="number">104</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorUtil</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">229</literal> <operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>InputLogicParser</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">309</literal> <operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>OozieJexlEngine</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">47</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>OozieJexlInterpreter</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   <literal type="number">73</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>ActionDependency</name><operator>.</operator><name>java</name></name>    <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>DependencyChecker</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">15</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>FSURIHandler</name><operator>.</operator><name>java</name></name> <operator>|</operator>    <literal type="number">9</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>HCatURIHandler</name><operator>.</operator><name>java</name></name>      <operator>|</operator>    <literal type="number">5</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>URIHandler</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">14</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>util</name><operator>/</operator><name><name>WritableUtils</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">148</literal> <operator>++</operator><operator>-</operator>
 <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>oozie</name><operator>-</operator>default<operator>.</operator><name>xml</name>     <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>TestCoordActionInputCheckXCommand</name><operator>.</operator><name>java</name></name>    <operator>|</operator>    <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestCoordInputLogicPush</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">645</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestCoordinatorInputLogic</name><operator>.</operator><name>java</name></name>      <operator>|</operator> <literal type="number">1054</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestInputLogicParser</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  <literal type="number">367</literal> <operator>++</operator><operator>++</operator><operator>++</operator>
 <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>action</name><operator>-</operator><name><name>sla</name><operator>.</operator><name>xml</name></name>  <operator>|</operator>    <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>combine</name><operator>.</operator><name>xml</name></name>    <operator>|</operator>  <literal type="number">119</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>hcat</name><operator>.</operator><name>xml</name></name>  <operator>|</operator>  <literal type="number">119</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>latest</name><operator>.</operator><name>xml</name></name>     <operator>|</operator>  <literal type="number">124</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name>range</name><operator>-</operator><name><name>latest</name><operator>.</operator><name>xml</name></name>         <operator>|</operator>  <literal type="number">130</literal> <operator>++</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>range</name><operator>.</operator><name>xml</name></name> <operator>|</operator>  <literal type="number">107</literal> <operator>++</operator>
 <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name><name>inputlogic</name><operator>.</operator><name>xml</name></name>  <operator>|</operator>  <literal type="number">126</literal> <operator>++</operator>
 <name><name>pom</name><operator>.</operator><name>xml</name></name>                                       <operator>|</operator>    <literal type="number">7</literal> <operator>+</operator>
 <name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>                               <operator>|</operator>    <literal type="number">1</literal> <operator>+</operator>
 <literal type="number">54</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">6625</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">381</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>client</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>oozie</name><operator>-</operator><name>coordinator</name><operator>-</operator><literal type="number">0.5.xsd</literal>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>AbstractCoordInputDependency</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputDependency</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputDependencyFactory</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputInstance</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordOldInputDependency</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordPullInputDependency</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordPushInputDependency</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordUnResolvedInputDependency</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicBuilder</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluator</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseOne</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseThree</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseTwo</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseValidate</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorUtil</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>InputLogicParser</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>OozieJexlEngine</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>OozieJexlInterpreter</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestCoordInputLogicPush</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestCoordinatorInputLogic</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestInputLogicParser</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>combine</name><operator>.</operator><name>xml</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>hcat</name><operator>.</operator><name>xml</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>latest</name><operator>.</operator><name>xml</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name>range</name><operator>-</operator><name><name>latest</name><operator>.</operator><name>xml</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>range</name><operator>.</operator><name>xml</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name><name>inputlogic</name><operator>.</operator><name>xml</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>client</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>oozie</name><operator>-</operator><name>coordinator</name><operator>-</operator><literal type="number">0.5.xsd</literal> <name>b</name><operator>/</operator><name>client</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>oozie</name><operator>-</operator><name>coordinator</name><operator>-</operator><literal type="number">0.5.xsd</literal>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..2b636290f</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>client</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>oozie</name><operator>-</operator><name>coordinator</name><operator>-</operator><literal type="number">0.5.xsd</literal>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><ternary><condition><expr><literal type="number">194</literal> @@
<operator>&lt;</operator></expr>?</condition><then><expr><name>xml</name> <name>version</name><operator>=</operator><literal type="string">"1.0"</literal> <name>encoding</name><operator>=</operator><ternary><condition><expr><literal type="string">"UTF-8"</literal></expr>?</condition><then><expr><operator>&gt;</operator>
<operator>&lt;</operator><operator>!</operator><operator>--</operator>
  <name>Licensed</name> <name>to</name> <name>the</name> <name>Apache</name> <name>Software</name> <call><name>Foundation</name> <argument_list>(<argument><expr><name>ASF</name></expr></argument>)</argument_list></call> <name>under</name> <name>one</name>
  <name>or</name> <name>more</name> <name>contributor</name> <name>license</name> <name><name>agreements</name><operator>.</operator>  <name>See</name></name> <name>the</name> <name>NOTICE</name> <name>file</name>
  <name>distributed</name> <name>with</name> <name>this</name> <name>work</name></expr></then></ternary></expr></then></ternary></expr></expr_stmt> <for>for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License<operator>,</operator> <expr_stmt><expr><name>Version</name> <literal type="number">2.0</literal> <operator>(</operator><name>the</name>
  <literal type="string">"License"</literal><operator>)</operator></expr>;</expr_stmt></for> <expr_stmt><expr><name>you</name> <name>may</name> <name>not</name> <name>use</name> <name>this</name> <name>file</name> <name>except</name> <name>in</name> <name>compliance</name>
  <name>with</name> <name>the</name> <name><name>License</name><operator>.</operator>  <name>You</name></name> <name>may</name> <name>obtain</name> <name>a</name> <name>copy</name> <name>of</name> <name>the</name> <name>License</name> <name>at</name>

       <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>

  <name>Unless</name> <name>required</name> <name>by</name> <name>applicable</name> <name>law</name> <name>or</name> <name>agreed</name> <name>to</name> <name>in</name> <name>writing</name></expr><operator>,</operator> <expr><name>software</name>
  <name>distributed</name> <name>under</name> <name>the</name> <name>License</name> <name>is</name> <name>distributed</name> <name>on</name> <name>an</name> <literal type="string">"AS IS"</literal> <name>BASIS</name></expr><operator>,</operator>
  <expr><name>WITHOUT</name> <name>WARRANTIES</name> <name>OR</name> <name>CONDITIONS</name> <name>OF</name> <name>ANY</name> <name>KIND</name></expr><operator>,</operator> <expr><name>either</name> <name>express</name> <name>or</name> <name><name>implied</name><operator>.</operator>
  <name>See</name></name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
  limitations under the License.
--&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:coordinator="uri:oozie:coordinator:0.5"
           elementFormDefault="qualified" targetNamespace="uri:oozie:coordinator:0.5"&gt;

    &lt;xs:element name="coordinator-app" type="coordinator:COORDINATOR-APP"/&gt;
    &lt;xs:element name="datasets" type="coordinator:DATASETS"/&gt;
    &lt;xs:simpleType name="IDENTIFIER"&gt;
        &lt;xs:restriction base="xs:string"&gt;
            &lt;xs:pattern value="([a-zA-Z]([\-_a-zA-Z0-9])*){1,39}"/&gt;
        &lt;/xs:restriction&gt;
    &lt;/xs:simpleType&gt;
    &lt;xs:complexType name="COORDINATOR-APP"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element name="parameters" type="coordinator:PARAMETERS" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="controls" type="coordinator:CONTROLS" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="datasets" type="coordinator:DATASETS" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="input-events" type="coordinator:INPUTEVENTS" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="input-logic" type="coordinator:INPUTLOGIC" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="output-events" type="coordinator:OUTPUTEVENTS" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="action" type="coordinator:ACTION" minOccurs="1" maxOccurs="1"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute name="name" type="xs:string" use="required"/&gt;
        &lt;xs:attribute name="frequency" type="xs:string" use="required"/&gt;
        &lt;xs:attribute name="start" type="xs:string" use="required"/&gt;
        &lt;xs:attribute name="end" type="xs:string" use="required"/&gt;
        &lt;xs:attribute name="timezone" type="xs:string" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="PARAMETERS"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element name="property" minOccurs="1" maxOccurs="unbounded"&gt;
                &lt;xs:complexType&gt;
                    &lt;xs:sequence&gt;
                        &lt;xs:element name="name" minOccurs="1" maxOccurs="1" type="xs:string"/&gt;
                        &lt;xs:element name="value" minOccurs="0" maxOccurs="1" type="xs:string"/&gt;
                        &lt;xs:element name="description" minOccurs="0" maxOccurs="1" type="xs:string"/&gt;
                    &lt;/xs:sequence&gt;
                &lt;/xs:complexType&gt;
            &lt;/xs:element&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="CONTROLS"&gt;
        &lt;xs:sequence minOccurs="0" maxOccurs="1"&gt;
            &lt;xs:element name="timeout" type="xs:string" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="concurrency" type="xs:string" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="execution" type="xs:string" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="throttle" type="xs:string" minOccurs="0" maxOccurs="1"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="DATASETS"&gt;
        &lt;xs:sequence minOccurs="0" maxOccurs="1"&gt;
            &lt;xs:element name="include" type="xs:string" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;xs:element name="dataset" type="coordinator:SYNCDATASET" minOccurs="0" maxOccurs="1"/&gt;
                &lt;xs:element name="async-dataset" type="coordinator:ASYNCDATASET" minOccurs="0" maxOccurs="1"/&gt;
            &lt;/xs:choice&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="SYNCDATASET"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element name="uri-template" type="xs:string" minOccurs="1" maxOccurs="1"/&gt;
            &lt;xs:element name="done-flag" type="xs:string" minOccurs="0" maxOccurs="1"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute name="name" type="coordinator:IDENTIFIER" use="required"/&gt;
        &lt;xs:attribute name="frequency" type="xs:string" use="required"/&gt;
        &lt;xs:attribute name="initial-instance" type="xs:string" use="required"/&gt;
        &lt;xs:attribute name="timezone" type="xs:string" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="ASYNCDATASET"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element name="uri-template" type="xs:string" minOccurs="1" maxOccurs="1"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute name="name" type="coordinator:IDENTIFIER" use="required"/&gt;
        &lt;xs:attribute name="sequence-type" type="xs:string" use="required"/&gt;
        &lt;xs:attribute name="initial-version" type="xs:string" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="INPUTEVENTS"&gt;
        &lt;xs:choice minOccurs="1" maxOccurs="1"&gt;
            &lt;xs:element name="and" type="coordinator:LOGICALAND" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="or" type="coordinator:LOGICALOR" minOccurs="0" maxOccurs="1"/&gt;
            &lt;xs:element name="data-in" type="coordinator:DATAIN" minOccurs="1" maxOccurs="unbounded"/&gt;
        &lt;/xs:choice&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="INPUTLOGIC"&gt;
        &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;xs:element name="and" type="coordinator:LOGICALAND" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="or" type="coordinator:LOGICALOR" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="combine" type="coordinator:COMBINE" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="data-in" type="coordinator:LOGICALDATAIN" minOccurs="1" maxOccurs="unbounded"/&gt;
        &lt;/xs:choice&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="LOGICALAND"&gt;
        &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;xs:element name="and" type="coordinator:LOGICALAND" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="or" type="coordinator:LOGICALOR" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="data-in" type="coordinator:LOGICALDATAIN" minOccurs="1" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="combine" type="coordinator:COMBINE" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;/xs:choice&gt;
        &lt;xs:attribute name="name" type="xs:string" use="optional"/&gt;
        &lt;xs:attribute name="min" type="xs:string" use="optional"/&gt;
        &lt;xs:attribute name="wait" type="xs:string" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="LOGICALOR"&gt;
        &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;xs:element name="and" type="coordinator:LOGICALAND" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="or" type="coordinator:LOGICALOR" minOccurs="0" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="data-in" type="coordinator:LOGICALDATAIN" minOccurs="1" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="combine" type="coordinator:COMBINE" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;/xs:choice&gt;
        &lt;xs:attribute name="name" type="xs:string" use="optional"/&gt;
        &lt;xs:attribute name="min" type="xs:string" use="optional"/&gt;
        &lt;xs:attribute name="wait" type="xs:string" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="COMBINE"&gt;
        &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
            &lt;xs:element name="data-in" type="coordinator:LOGICALDATAIN" minOccurs="2" maxOccurs="unbounded"/&gt;
        &lt;/xs:choice&gt;
        &lt;xs:attribute name="name" type="xs:string" use="optional"/&gt;
        &lt;xs:attribute name="min" type="xs:string" use="optional"/&gt;
        &lt;xs:attribute name="wait" type="xs:string" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="LOGICALDATAIN"&gt;
        &lt;xs:attribute name="name" type="xs:string" use="optional"/&gt;
        &lt;xs:attribute name="min" type="xs:string" use="optional"/&gt;
        &lt;xs:attribute name="wait" type="xs:string" use="optional"/&gt;
        &lt;xs:attribute name="dataset" type="xs:string" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="DATAIN"&gt;
        &lt;xs:choice minOccurs="1" maxOccurs="1"&gt;
            &lt;xs:element name="instance" type="xs:string" minOccurs="1" maxOccurs="unbounded"/&gt;
            &lt;xs:sequence minOccurs="1" maxOccurs="1"&gt;
                &lt;xs:element name="start-instance" type="xs:string" minOccurs="1" maxOccurs="1"/&gt;
                &lt;xs:element name="end-instance" type="xs:string" minOccurs="1" maxOccurs="1"/&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:choice&gt;
        &lt;xs:attribute name="name" type="coordinator:IDENTIFIER" use="required"/&gt;
        &lt;xs:attribute name="dataset" type="xs:string" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="OUTPUTEVENTS"&gt;
        &lt;xs:sequence minOccurs="1" maxOccurs="1"&gt;
            &lt;xs:element name="data-out" type="coordinator:DATAOUT" minOccurs="1" maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="DATAOUT"&gt;
        &lt;xs:sequence minOccurs="1" maxOccurs="1"&gt;
            &lt;xs:element name="instance" type="xs:string" minOccurs="1" maxOccurs="1"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute name="name" type="coordinator:IDENTIFIER" use="required"/&gt;
        &lt;xs:attribute name="dataset" type="xs:string" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="ACTION"&gt;
        &lt;xs:sequence minOccurs="1" maxOccurs="1"&gt;
            &lt;xs:element name="workflow" type="coordinator:WORKFLOW" minOccurs="1" maxOccurs="1"/&gt;
            &lt;xs:any namespace="uri:oozie:sla:0.1 uri:oozie:sla:0.2" minOccurs="0" maxOccurs="1"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="WORKFLOW"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element name="app-path" type="xs:string" minOccurs="1" maxOccurs="1"/&gt;
            &lt;xs:element name="configuration" type="coordinator:CONFIGURATION" minOccurs="0" maxOccurs="1"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;

    &lt;xs:complexType name="FLAG"/&gt;
    &lt;xs:complexType name="CONFIGURATION"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element name="property" minOccurs="1" maxOccurs="unbounded"&gt;
                &lt;xs:complexType&gt;
                    &lt;xs:sequence&gt;
                        &lt;xs:element name="name" minOccurs="1" maxOccurs="1" type="xs:string"/&gt;
                        &lt;xs:element name="value" minOccurs="1" maxOccurs="1" type="xs:string"/&gt;
                        &lt;xs:element name="description" minOccurs="0" maxOccurs="1" type="xs:string"/&gt;
                    &lt;/xs:sequence&gt;
                &lt;/xs:complexType&gt;
            &lt;/xs:element&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
diff --git a/core/pom.xml b/core/pom.xml
index b063dab79..b72ea7d19 100644
-- a/core/pom.xml
++ b/core/pom.xml
@@ -282<operator>,</operator><expr_stmt><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">282</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@
             <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">3.4</literal><operator>&lt;</operator><operator>/</operator><name>version</name><operator>&gt;</operator>
             <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>provided</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
         <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name><name>commons</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
            <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>commons</name><operator>-</operator><name><name>jexl</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
            <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>compile</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
 
         <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
             <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name><name>oozie</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>CoordinatorActionBean</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>CoordinatorActionBean</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">91bff4dca</literal><operator>..</operator><name>b1be7c939</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>CoordinatorActionBean</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>CoordinatorActionBean</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt></for> <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Lob</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>NamedQueries</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>NamedQuery</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>Transient</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Writable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorAction</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>rest</name><operator>.</operator><name>JsonBean</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>rest</name><operator>.</operator><name>JsonTags</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>rest</name><operator>.</operator><name>JsonUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordInputDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordInputDependencyFactory</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>WritableUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>openjpa</name><operator>.</operator><name>persistence</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>Index</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">285</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">288</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordinatorActionBean</name> implements</expr></expr_stmt>
         <return>return <expr><call><name>toJSONObject</name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr>;</return>
     }
 
    @<decl_stmt><decl><type><name>Transient</name>
    <specifier>private</specifier> <name>CoordInputDependency</name></type> <name>coordPushInputDependency</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Transient</name></annotation>
    <type><specifier>private</specifier> <name>CoordInputDependency</name></type> <name>coordPullInputDependency</name></decl>;</decl_stmt>


     <constructor><specifier>public</specifier> <name>CoordinatorActionBean</name><parameter_list>()</parameter_list> <block>{<block_content>
     </block_content>}</block></constructor>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">745</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">755</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordinatorActionBean</name> implements
         <call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_TYPE</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_NUMBER</name></name></expr></argument>, <argument><expr><name>actionNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_CREATED_CONF</name></name></expr></argument>, <argument><expr><call><name>getCreatedConf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_CREATED_TIME</name></name></expr></argument>, <argument><expr><call><name><name>JsonUtils</name>
                <operator>.</operator><name>formatDateRfc822</name></name><argument_list>(<argument><expr><call><name>getCreatedTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeZoneId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_NOMINAL_TIME</name></name></expr></argument>, <argument><expr><call><name><name>JsonUtils</name>
                <operator>.</operator><name>formatDateRfc822</name></name><argument_list>(<argument><expr><call><name>getNominalTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeZoneId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_CREATED_TIME</name></name></expr></argument>, <argument><expr><call><name><name>JsonUtils</name><operator>.</operator><name>formatDateRfc822</name></name><argument_list>(<argument><expr><call><name>getCreatedTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeZoneId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_NOMINAL_TIME</name></name></expr></argument>, <argument><expr><call><name><name>JsonUtils</name><operator>.</operator><name>formatDateRfc822</name></name><argument_list>(<argument><expr><call><name>getNominalTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeZoneId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_EXTERNALID</name></name></expr></argument>, <argument><expr><name>externalId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <comment type="line">// json.put(JsonTags.COORDINATOR_ACTION_START_TIME, JsonUtils</comment>
         <comment type="line">// .formatDateRfc822(startTime), timeZoneId);</comment>
         <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_STATUS</name></name></expr></argument>, <argument><expr><name>statusStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_RUNTIME_CONF</name></name></expr></argument>, <argument><expr><call><name>getRunConf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_LAST_MODIFIED_TIME</name></name></expr></argument>, <argument><expr><call><name><name>JsonUtils</name>
                <operator>.</operator><name>formatDateRfc822</name></name><argument_list>(<argument><expr><call><name>getLastModifiedTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeZoneId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_LAST_MODIFIED_TIME</name></name></expr></argument>,
                <argument><expr><call><name><name>JsonUtils</name><operator>.</operator><name>formatDateRfc822</name></name><argument_list>(<argument><expr><call><name>getLastModifiedTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeZoneId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <comment type="line">// json.put(JsonTags.COORDINATOR_ACTION_START_TIME, JsonUtils</comment>
         <comment type="line">// .formatDateRfc822(startTime), timeZoneId);</comment>
         <comment type="line">// json.put(JsonTags.COORDINATOR_ACTION_END_TIME, JsonUtils</comment>
         <comment type="line">// .formatDateRfc822(endTime), timeZoneId);</comment>
        <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_MISSING_DEPS</name></name></expr></argument>, <argument><expr><call><name>getMissingDependencies</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_PUSH_MISSING_DEPS</name></name></expr></argument>, <argument><expr><call><name>getPushMissingDependencies</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_MISSING_DEPS</name></name></expr></argument>, <argument><expr><call><name>getPullInputDependencies</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMissingDependencies</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_PUSH_MISSING_DEPS</name></name></expr></argument>, <argument><expr><call><name>getPushInputDependencies</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMissingDependencies</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_EXTERNAL_STATUS</name></name></expr></argument>, <argument><expr><name>externalStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_TRACKER_URI</name></name></expr></argument>, <argument><expr><name>trackerUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>json</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JsonTags</name><operator>.</operator><name>COORDINATOR_ACTION_CONSOLE_URL</name></name></expr></argument>, <argument><expr><name>consoleUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">818</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">826</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordinatorActionBean</name> implements</expr></expr_stmt>
         <return>return <expr><literal type="boolean">true</literal></expr>;</return>
     }
 
    public <function><type><name>CoordInputDependency</name></type> <name>getPullInputDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>coordPullInputDependency</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>coordPullInputDependency</name> <operator>=</operator> <call><name><name>CoordInputDependencyFactory</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>coordPullInputDependency</name></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CoordInputDependency</name></type> <name>getPushInputDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>coordPushInputDependency</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>coordPushInputDependency</name> <operator>=</operator> <call><name><name>CoordInputDependencyFactory</name><operator>.</operator><name>getPushInputDependencies</name></name><argument_list>(<argument><expr><name>pushMissingDependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>coordPushInputDependency</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPullInputDependencies</name><parameter_list>(<parameter><decl><type><name>CoordInputDependency</name></type> <name>coordPullInputDependency</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coordPullInputDependency</name></name> <operator>=</operator> <name>coordPullInputDependency</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPushInputDependencies</name><parameter_list>(<parameter><decl><type><name>CoordInputDependency</name></type> <name>coordPushInputDependency</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coordPushInputDependency</name></name> <operator>=</operator> <name>coordPushInputDependency</name></expr>;</expr_stmt>
    </block_content>}</block></function>
 
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>ErrorCode</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>ErrorCode</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6c1e3997c</literal><operator>..</operator><literal type="number">2907ca2b1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>ErrorCode</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>ErrorCode</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">214</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">214</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> enum <name>ErrorCode</name> <block>{
     <expr><call><name>E1025</name><argument_list>(<argument><expr><name><name>XLog</name><operator>.</operator><name>STD</name></name></expr></argument>, <argument><expr><literal type="string">"Coord status transit error: [{0}]"</literal></expr></argument>)</argument_list></call></expr>,
     <expr><call><name>E1026</name><argument_list>(<argument><expr><name><name>XLog</name><operator>.</operator><name>STD</name></name></expr></argument>, <argument><expr><literal type="string">"SLA alert update command failed: {0}"</literal></expr></argument>)</argument_list></call></expr>,
     <expr><call><name>E1027</name><argument_list>(<argument><expr><name><name>XLog</name><operator>.</operator><name>STD</name></name></expr></argument>, <argument><expr><literal type="string">"SLA change command failed. {0}"</literal></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>E1028</name><argument_list>(<argument><expr><name><name>XLog</name><operator>.</operator><name>STD</name></name></expr></argument>, <argument><expr><literal type="string">"Coord input logic error. {0}"</literal></expr></argument>)</argument_list></call></expr>,

 
 
     <expr><call><name>E1100</name><argument_list>(<argument><expr><name><name>XLog</name><operator>.</operator><name>STD</name></name></expr></argument>, <argument><expr><literal type="string">"Command precondition does not hold before execution, [{0}]"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordActionInputCheckXCommand</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordActionInputCheckXCommand</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">11184d1b9</literal><operator>..</operator><literal type="number">640d3cbf1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordActionInputCheckXCommand</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordActionInputCheckXCommand</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr>,<expr><literal type="number">13</literal> <operator>+</operator><literal type="number">20</literal></expr>,<expr><literal type="number">9</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name></name>;</package></block></expr></expr_stmt>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URISyntaxException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>ParseException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessControlException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorJobBean</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorAction</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>Job</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>OozieClient</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>PreconditionException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELEvaluator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELFunctions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>URIHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>URIHandlerException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordInputDependency</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionGetForInputCheckJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionQueryExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionQueryExecutor</name><operator>.</operator><name>CoordActionQuery</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>EventHandlerService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>JPAService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Service</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>URIHandlerService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>ELEvaluator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>LogUtils</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">159</literal></expr><operator>,</operator><expr><literal type="number">40</literal> <operator>+</operator><literal type="number">151</literal></expr><operator>,</operator><expr><literal type="number">38</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordActionInputCheckXCommand</name> extends <name><name>CoordinatorXCommand</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name> <block>{
 
             <expr><name>StringBuilder</name> <name>existList</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr>;
             <expr><name>StringBuilder</name> <name>nonExistList</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr>;
            <expr><name>CoordInputDependency</name> <name>coordPullInputDependency</name> <operator>=</operator> <call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call></expr>;
            <expr><name>CoordInputDependency</name> <name>coordPushInputDependency</name> <operator>=</operator> <call><name><name>coordAction</name><operator>.</operator><name>getPushInputDependencies</name></name><argument_list>()</argument_list></call></expr>;


            <expr><name>String</name> <name>missingDependencies</name> <operator>=</operator> <call><name><name>coordPullInputDependency</name><operator>.</operator><name>getMissingDependencies</name></name><argument_list>()</argument_list></call></expr>;
             <expr><name>StringBuilder</name> <name>nonResolvedList</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr>;
            <expr><name>String</name> <name>firstMissingDependency</name> <operator>=</operator> <literal type="string">""</literal></expr>;
            <expr><name>String</name> <name>missingDeps</name> <operator>=</operator> <call><name><name>coordAction</name><operator>.</operator><name>getMissingDependencies</name></name><argument_list>()</argument_list></call></expr>;
            <expr><call><name><name>CoordCommandUtils</name><operator>.</operator><name>getResolvedList</name></name><argument_list>(<argument><expr><name>missingDeps</name></expr></argument>, <argument><expr><name>nonExistList</name></expr></argument>, <argument><expr><name>nonResolvedList</name></expr></argument>)</argument_list></call></expr>;
 
            <expr><call><name><name>CoordCommandUtils</name><operator>.</operator><name>getResolvedList</name></name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>, <argument><expr><name>nonExistList</name></expr></argument>, <argument><expr><name>nonResolvedList</name></expr></argument>)</argument_list></call></expr>;
            <expr><name>String</name> <name>firstMissingDependency</name> <operator>=</operator> <literal type="string">""</literal></expr>;
             <comment type="line">// For clarity regarding which is the missing dependency in synchronous order</comment>
             <comment type="line">// instead of printing entire list, some of which, may be available</comment>
            <if_stmt><if>if<condition>(<expr><call><name><name>nonExistList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>nonExistList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name>firstMissingDependency</name> <operator>=</operator> <call><name><name>nonExistList</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
             <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block>
             <call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"["</literal> <operator>+</operator> <name>actionId</name> <operator>+</operator> <literal type="string">"]::CoordActionInputCheck:: Missing deps:"</literal> <operator>+</operator> <name>firstMissingDependency</name> <operator>+</operator> <literal type="string">" "</literal>
                     <operator>+</operator> <call><name><name>nonResolvedList</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Updating the list of data dependencies that are available and those that are yet not</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>status</name> <init>= <expr><call><name>checkInput</name><argument_list>(<argument><expr><name>actionXml</name></expr></argument>, <argument><expr><name>existList</name></expr></argument>, <argument><expr><name>nonExistList</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>pushDeps</name> <init>= <expr><call><name><name>coordAction</name><operator>.</operator><name>getPushMissingDependencies</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Resolve latest/future only when all current missingDependencies and</comment>
            <comment type="line">// pushMissingDependencies are met</comment>


            <decl_stmt><decl><type><name>boolean</name></type> <name>status</name> <init>= <expr><call><name>checkResolvedInput</name><argument_list>(<argument><expr><name>actionXml</name></expr></argument>, <argument><expr><name>existList</name></expr></argument>, <argument><expr><name>nonExistList</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>nonExistListStr</name> <init>= <expr><call><name><name>nonExistList</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isPushDependenciesMet</name> <init>= <expr><call><name><name>coordPushInputDependency</name><operator>.</operator><name>isDependencyMet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;&amp;</operator> <call><name><name>nonResolvedList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pushDeps</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>pushDeps</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>checkUnResolvedInput</name><argument_list>(<argument><expr><name>actionXml</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>)</argument_list></call></expr>
                        </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</expr_stmt>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>isPushDependenciesMet</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>checkUnResolvedInput</name><argument_list>(<argument><expr><name>actionXml</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
             <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setLastModifiedTime</name></name><argument_list>(<argument><expr><name>currentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setActionXml</name></name><argument_list>(<argument><expr><call><name><name>actionXml</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>nonResolvedList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>status</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>nonExistList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>RESOLVED_UNRESOLVED_SEPARATOR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>nonResolvedList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>nonExistListStr</name> <init>= <expr><call><name><name>nonExistList</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nonExistListStr</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>missingDeps</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>missingDeps</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// missingDeps null or empty means action should become READY</comment>
                <expr_stmt><expr><name>isChangeInDependency</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setMissingDependencies</name></name><argument_list>(<argument><expr><name>nonExistListStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pushDeps</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>pushDeps</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>newActionXml</name> <init>= <expr><call><name>resolveCoordConfiguration</name><argument_list>(<argument><expr><name>actionXml</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>, <argument><expr><name>actionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>isChangeInDependency</name> <operator>=</operator> <call><name>isChangeInDependency</name><argument_list>(<argument><expr><name>nonExistList</name></expr></argument>, <argument><expr><name>missingDependencies</name></expr></argument>, <argument><expr><name>nonResolvedList</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;&amp;</operator> <name>isPushDependenciesMet</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>newActionXml</name> <init>= <expr><call><name>resolveCoordConfiguration</name><argument_list>(<argument><expr><name>actionXml</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>, <argument><expr><name>actionId</name></expr></argument>,
                        <argument><expr><name>coordPullInputDependency</name></expr></argument>, <argument><expr><name>coordPushInputDependency</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <expr_stmt><expr><call><name><name>actionXml</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>actionXml</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newActionXml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setActionXml</name></name><argument_list>(<argument><expr><call><name><name>actionXml</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>READY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">207</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">197</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordActionInputCheckXCommand</name> extends <name><name>CoordinatorXCommand</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name> <block>{
                 <expr><call><name>updateCoordAction</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>isChangeInDependency</name></expr></argument>)</argument_list></call></expr>;
             }</block></expr></expr_stmt>
             <if_stmt><else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nonExistListStr</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>pushDeps</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>pushDeps</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nonExistListStr</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>isPushDependenciesMet</name></expr>)</condition> <block>{<block_content>
                     <expr_stmt><expr><call><name>queue</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CoordActionTimeOutXCommand</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><call><name><name>coordJob</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>coordJob</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if>
                 <else>else <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">246</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">236</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordActionInputCheckXCommand</name> extends <name><name>CoordinatorXCommand</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name> <block>{
         <return>return <expr><literal type="null">null</literal></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isChangeInDependency</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>nonExistList</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>missingDependencies</name></decl></parameter>,
            <parameter><decl><type><name>StringBuilder</name></type> <name>nonResolvedList</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>status</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>nonResolvedList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>status</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>nonExistList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>RESOLVED_UNRESOLVED_SEPARATOR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>nonResolvedList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isChangeInDependency</name><argument_list>(<argument><expr><name>nonExistList</name></expr></argument>, <argument><expr><name>missingDependencies</name></expr></argument>,
                <argument><expr><name>nonResolvedList</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
 
    <function><type><specifier>static</specifier> <name>String</name></type> <name>resolveCoordConfiguration</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>actionXml</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>actionConf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>actionId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>static</specifier> <name>String</name></type> <name>resolveCoordConfiguration</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>actionXml</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>actionConf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>actionId</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>resolveCoordConfiguration</name><argument_list>(<argument><expr><name>actionXml</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>, <argument><expr><name>actionId</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>String</name></type> <name>resolveCoordConfiguration</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>actionXml</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>actionConf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>actionId</name></decl></parameter>,
            <parameter><decl><type><name>CoordInputDependency</name></type> <name>pullDependencies</name></decl></parameter>, <parameter><decl><type><name>CoordInputDependency</name></type> <name>pushDependencies</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>Element</name></type> <name>eAction</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><call><name><name>actionXml</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ELEvaluator</name></type> <name>eval</name> <init>= <expr><call><name><name>CoordELEvaluator</name><operator>.</operator><name>createDataEvaluator</name></name><argument_list>(<argument><expr><name>eAction</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>, <argument><expr><name>actionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ELEvaluator</name></type> <name>eval</name> <init>= <expr><call><name><name>CoordELEvaluator</name><operator>.</operator><name>createDataEvaluator</name></name><argument_list>(<argument><expr><name>eAction</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>, <argument><expr><name>actionId</name></expr></argument>, <argument><expr><name>pullDependencies</name></expr></argument>,
                <argument><expr><name>pushDependencies</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>materializeDataProperties</name><argument_list>(<argument><expr><name>eAction</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>, <argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><call><name><name>XmlUtils</name><operator>.</operator><name>prettyPrint</name></name><argument_list>(<argument><expr><name>eAction</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">268</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">273</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordActionInputCheckXCommand</name> extends <name><name>CoordinatorXCommand</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name> <block>{
         <if_stmt><if>if <condition>(<expr><name>jpaService</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <try>try <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><name>isChangeInDependency</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setMissingDependencies</name></name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>executeUpdate</name><argument_list>(
                             <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>UPDATE_COORD_ACTION_FOR_INPUTCHECK</name></name></expr></argument>, <argument><expr><name>coordAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <if_stmt><if>if <condition>(<expr><call><name><name>EventHandlerService</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>coordAction</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>READY</name></name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">281</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">287</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordActionInputCheckXCommand</name> extends <name><name>CoordinatorXCommand</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name> <block>{
                             <expr><name><name>CoordActionQuery</name><operator>.</operator><name>UPDATE_COORD_ACTION_FOR_MODIFIED_DATE</name></name></expr>, <expr><name>coordAction</name></expr>)</block></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></if></if_stmt>
            <catch>catch <parameter_list>(<parameter><decl><type><name>JPAExecutorException</name></type> <name>jex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>jex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                 <throw>throw <expr><operator>new</operator> <call><name>CommandException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E1021</name></name></expr></argument>, <argument><expr><call><name><name>jex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>jex</name></expr></argument>)</argument_list></call></expr>;</throw>
             </block_content>}</block></catch>
         </block_content>}</block></catch>
     </block_content>}</block></try>

     <comment type="block" format="javadoc">/**
      * This function reads the value of re-queue interval for coordinator input
      * check command from the Oozie configuration provided by Configuration
@@ -310,22 +315,44 @@ public class CoordActionInputCheckXCommand extends CoordinatorXCommand&lt;Void&gt; {
      * @return true if all input paths are existed
      * @throws Exception thrown of unable to check input path
      */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>checkInput</name><argument_list>(<argument><expr><name>StringBuilder</name> <name>actionXml</name></expr></argument>, <argument><expr><name>StringBuilder</name> <name>existList</name></expr></argument>, <argument><expr><name>StringBuilder</name> <name>nonExistList</name></expr></argument>,
    <argument><expr><specifier>protected</specifier> <name>boolean</name> <call><name>checkResolvedInput</name><argument_list>(<argument><expr><name>StringBuilder</name> <name>actionXml</name></expr></argument>, <argument><expr><name>StringBuilder</name> <name>existList</name></expr></argument>, <argument><expr><name>StringBuilder</name> <name>nonExistList</name></expr></argument>,
             <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
        <expr><name>Element</name> <name>eAction</name> <operator>=</operator> <call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><call><name><name>actionXml</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument>;</argument_list></decl></decl_stmt>
        <return>return <expr><call><name>checkResolvedUris</name><argument_list>(<argument><expr><name>eAction</name></expr></argument>, <argument><expr><name>existList</name></expr></argument>, <argument><expr><name>nonExistList</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
        <return>return <expr><call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>checkPullMissingDependencies</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>existList</name></expr></argument>,
                <argument><expr><name>nonExistList</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
    <specifier>protected</specifier> <name>boolean</name> <call><name>checkUnResolvedInput</name><argument_list>(<argument><expr><name>StringBuilder</name> <name>actionXml</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <comment type="block" format="javadoc">/**
     * Check un resolved input.
     *
     * @param coordAction the coord action
     * @param actionXml the action xml
     * @param conf the conf
     * @return true, if successful
     * @throws Exception the exception
     */</comment>
    <expr><specifier>protected</specifier> <name>boolean</name> <call><name>checkUnResolvedInput</name><argument_list>(<argument><expr><name>CoordinatorActionBean</name> <name>coordAction</name></expr></argument>, <argument><expr><name>StringBuilder</name> <name>actionXml</name></expr></argument>,
            <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>Exception</name> <block>{
         <expr><name>Element</name> <name>eAction</name> <operator>=</operator> <call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><call><name><name>actionXml</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></block></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"["</literal> <operator>+</operator> <name>actionId</name> <operator>+</operator> <literal type="string">"]::ActionInputCheck:: Checking Latest/future"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allExist</name> <init>= <expr><call><name>checkUnresolvedInstances</name><argument_list>(<argument><expr><name>eAction</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allExist</name> <init>= <expr><call><name>checkUnresolvedInstances</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>eAction</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>allExist</name></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name><name>actionXml</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>actionXml</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>XmlUtils</name><operator>.</operator><name>prettyPrint</name></name><argument_list>(<argument><expr><name>eAction</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <return>return <expr><name>allExist</name></expr>;</return>
     </block_content>}</block></function>
 
    <comment type="block" format="javadoc">/**
     * Check un resolved input.
     *
     * @param actionXml the action xml
     * @param conf the conf
     * @return true, if successful
     * @throws Exception the exception
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>checkUnResolvedInput</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>actionXml</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>checkUnResolvedInput</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>actionXml</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

     <comment type="block" format="javadoc">/**
      * Materialize data properties defined in &lt;action&gt; tag. it includes dataIn(&lt;DS&gt;) and dataOut(&lt;DS&gt;) it creates a list
      * of files that will be needed.
@@ -378,222 +405,23 @@ public class CoordActionInputCheckXCommand extends CoordinatorXCommand&lt;Void&gt; {
      * @throws Exception thrown if failed to resolve data input and output paths
      */</comment>
     <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>boolean</name></type> <name>checkUnresolvedInstances</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>eAction</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>actionConf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>strAction</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>prettyPrint</name></name><argument_list>(<argument><expr><name>eAction</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>nominalTime</name> <init>= <expr><call><name><name>DateUtils</name><operator>.</operator><name>parseDateOozieTZ</name></name><argument_list>(<argument><expr><call><name><name>eAction</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"action-nominal-time"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>actualTimeStr</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"action-actual-time"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>actualTime</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>actualTimeStr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Unable to get action-actual-time from action xml, this job is submitted "</literal> <operator>+</operator>
            <literal type="string">"from previous version. Assign current date to actual time, action = "</literal> <operator>+</operator> <name>actionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>actualTime</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>actualTime</name> <operator>=</operator> <call><name><name>DateUtils</name><operator>.</operator><name>parseDateOozieTZ</name></name><argument_list>(<argument><expr><name>actualTimeStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkUnresolvedInstances</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>, <parameter><decl><type><name>Element</name></type> <name>eAction</name></decl></parameter>,
            <parameter><decl><type><name>Configuration</name></type> <name>actionConf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
 
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>resultedXml</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>inputList</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"input-events"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>inputList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>materializeUnresolvedEvent</name><argument_list>(<argument><expr><call><name><name>inputList</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><literal type="string">"data-in"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nominalTime</name></expr></argument>,
                    <argument><expr><name>actualTime</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>resultedXml</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>strAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ret</name> <init>= <expr><call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>checkUnresolved</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>eAction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
         <comment type="line">// Using latest() or future() in output-event is not intuitive.</comment>
         <comment type="line">// We need to make sure, this assumption is correct.</comment>
         <decl_stmt><decl><type><name>Element</name></type> <name>outputList</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"output-events"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>outputList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <for>for <control>(<init><decl><type><name>Element</name></type> <name>dEvent</name> <range>: <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>outputList</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><literal type="string">"data-out"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INST_TAG</name></name></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INSTANCES_TAG</name></name></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                     <throw>throw <expr><operator>new</operator> <call><name>CommandException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E1006</name></name></expr></argument>, <argument><expr><literal type="string">"coord:latest()/future()"</literal></expr></argument>,
                             <argument><expr><literal type="string">" not permitted in output-event "</literal></expr></argument>)</argument_list></call></expr>;</throw>
                 </block_content>}</block></if></if_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" format="javadoc">/**
     * Resolve the list of data input paths
     *
     * @param eDataEvents the list of data input elements
     * @param nominalTime action nominal time
     * @param actualTime current time
     * @param conf action configuration
     * @return true if all unresolved URIs can be resolved
     * @throws Exception thrown if failed to resolve data input paths
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>boolean</name></type> <name>materializeUnresolvedEvent</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>eDataEvents</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>nominalTime</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>actualTime</name></decl></parameter>,
            <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Element</name></type> <name>dEvent</name> <range>: <expr><name>eDataEvents</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INST_TAG</name></name></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>ELEvaluator</name></type> <name>eval</name> <init>= <expr><call><name><name>CoordELEvaluator</name><operator>.</operator><name>createLazyEvaluator</name></name><argument_list>(<argument><expr><name>actualTime</name></expr></argument>, <argument><expr><name>nominalTime</name></expr></argument>, <argument><expr><name>dEvent</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>uresolvedInstance</name> <init>= <expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INST_TAG</name></name></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTextTrim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name><name>unresolvedList</name><index>[]</index></name> <init>= <expr><call><name><name>uresolvedInstance</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>resolvedTmp</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>unresolvedList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>ret</name> <init>= <expr><call><name><name>CoordELFunctions</name><operator>.</operator><name>evalAndWrap</name></name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>unresolvedList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Boolean</name></type> <name>isResolved</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>eval</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><literal type="string">"is_resolved"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>isResolved</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"["</literal> <operator>+</operator> <name>actionId</name> <operator>+</operator> <literal type="string">"]::Cannot resolve: "</literal> <operator>+</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>resolvedTmp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>resolvedTmp</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>resolvedTmp</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>eval</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><literal type="string">"resolved_path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><call><name><name>resolvedTmp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"uris"</literal></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>resolvedTmp</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(
                            <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"uris"</literal></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTextTrim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dEvent</name><operator>.</operator><name>removeChild</name></name><argument_list>(<argument><expr><literal type="string">"uris"</literal></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Element</name></type> <name>uriInstance</name> <init>= <expr><operator>new</operator> <call><name>Element</name><argument_list>(<argument><expr><literal type="string">"uris"</literal></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>uriInstance</name><operator>.</operator><name>addContent</name></name><argument_list>(<argument><expr><call><name><name>resolvedTmp</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dEvent</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>uriInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>dEvent</name><operator>.</operator><name>removeChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INST_TAG</name></name></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check all resolved URIs existence
     *
     * @param eAction action element
     * @param existList the list of existed paths
     * @param nonExistList the list of paths to check existence
     * @param conf action configuration
     * @return true if all nonExistList paths exist
     * @throws IOException thrown if unable to access the path
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkResolvedUris</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>eAction</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>existList</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>nonExistList</name></decl></parameter>,
            <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Element</name></type> <name>inputList</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"input-events"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>inputList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>nonExistList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>checkListOfPaths</name><argument_list>(<argument><expr><name>existList</name></expr></argument>, <argument><expr><name>nonExistList</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>nonExistList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check a list of non existed paths and add to exist list if it exists
     *
     * @param existList the list of existed paths
     * @param nonExistList the list of paths to check existence
     * @param conf action configuration
     * @return true if all nonExistList paths exist
     * @throws IOException thrown if unable to access the path
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkListOfPaths</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>existList</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>nonExistList</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>uriList</name> <init>= <expr><call><name><name>nonExistList</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>uriList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"["</literal> <operator>+</operator> <name>actionId</name> <operator>+</operator> <literal type="string">"]::ActionInputCheck:: In checkListOfPaths: "</literal> <operator>+</operator> <name><name>uriList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" is Missing."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>nonExistList</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>nonExistList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allExists</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>existSeparator</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>nonExistSeparator</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>user</name> <init>= <expr><call><name><name>ParamChecker</name><operator>.</operator><name>notEmpty</name></name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>uriList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>allExists</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>allExists</name> <operator>=</operator> <call><name>pathExists</name><argument_list>(<argument><expr><name><name>uriList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"["</literal> <operator>+</operator> <name>actionId</name> <operator>+</operator> <literal type="string">"]::ActionInputCheck:: File:"</literal> <operator>+</operator> <name><name>uriList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">", Exists? :"</literal> <operator>+</operator> <name>allExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>allExists</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>existList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>existSeparator</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>uriList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>existSeparator</name> <operator>=</operator> <name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>nonExistList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>nonExistSeparator</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>uriList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nonExistSeparator</name> <operator>=</operator> <name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>allExists</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if given path exists
     *
     * @param sPath uri path
     * @param actionConf action configuration
     * @return true if path exists
     * @throws IOException thrown if unable to access the path
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>pathExists</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sPath</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>actionConf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"checking for the file "</literal> <operator>+</operator> <name>sPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>URI</name></type> <name>uri</name> <init>= <expr><operator>new</operator> <call><name>URI</name><argument_list>(<argument><expr><name>sPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>URIHandlerService</name></type> <name>service</name> <init>= <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>URIHandlerService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>URIHandler</name></type> <name>handler</name> <init>= <expr><call><name><name>service</name><operator>.</operator><name>getURIHandler</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>handler</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>URIHandlerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setErrorCode</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setErrorMessage</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>AccessControlException</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>(</operator><name>AccessControlException</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>URISyntaxException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setErrorCode</name></name><argument_list>(<argument><expr><call><name><name>ErrorCode</name><operator>.</operator><name>E0906</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setErrorMessage</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The function create a list of URIs separated by "," using the instances time stamp and URI-template
     *
     * @param event : &lt;data-in&gt; event
     * @param instances : List of time stamp seprated by ","
     * @param unresolvedInstances : list of instance with latest/future function
     * @return : list of URIs separated by ",".
     * @throws Exception thrown if failed to create URIs from unresolvedInstances
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>String</name></type> <name>createURIs</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>instances</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>unresolvedInstances</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>instances</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>instances</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>instanceList</name> <init>= <expr><call><name><name>instances</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>uris</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>instanceList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>funcType</name> <init>= <expr><call><name><name>CoordCommandUtils</name><operator>.</operator><name>getFuncType</name></name><argument_list>(<argument><expr><name><name>instanceList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>funcType</name> <operator>==</operator> <name><name>CoordCommandUtils</name><operator>.</operator><name>LATEST</name></name> <operator>||</operator> <name>funcType</name> <operator>==</operator> <name><name>CoordCommandUtils</name><operator>.</operator><name>FUTURE</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>unresolvedInstances</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>unresolvedInstances</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>unresolvedInstances</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>instanceList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>ELEvaluator</name></type> <name>eval</name> <init>= <expr><call><name><name>CoordELEvaluator</name><operator>.</operator><name>createURIELEvaluator</name></name><argument_list>(<argument><expr><name><name>instanceList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>uris</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>uris</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>uris</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>CoordELFunctions</name><operator>.</operator><name>evalAndWrap</name></name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"dataset"</literal></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getChild</name><argument_list>(
                    <argument><expr><literal type="string">"uri-template"</literal></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTextTrim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>uris</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        <return>return <expr><name>ret</name></expr>;</return>
     </block_content>}</block></function>
 
     <comment type="block" format="javadoc">/**
diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordActionUpdatePushMissingDependency.java b/core/src/main/java/org/apache/oozie/command/coord/CoordActionUpdatePushMissingDependency.java
index 4e1c5b339..cb866e2e7 100644
-- a/core/src/main/java/org/apache/oozie/command/coord/CoordActionUpdatePushMissingDependency.java
++ b/core/src/main/java/org/apache/oozie/command/coord/CoordActionUpdatePushMissingDependency.java
@@ -18,11 +18,9 @@
 
 package org.apache.oozie.command.coord;
 
import java.util.ArrayList;
import java.util.Arrays;
 import java.util.Collection;
import java.util.List;
 import org.apache.oozie.command.CommandException;
import org.apache.oozie.coord.input.dependency.CoordInputDependency;
 import org.apache.oozie.dependency.DependencyChecker;
 import org.apache.oozie.service.PartitionDependencyManagerService;
 import org.apache.oozie.service.Services;
@@ -35,9 +33,11 @@ public class CoordActionUpdatePushMissingDependency extends CoordPushDependencyC
 
     @Override
     protected Void execute() throws CommandException {
        CoordInputDependency coordPushInputDependency = coordAction.getPushInputDependencies();
        CoordInputDependency coordPullInputDependency = coordAction.getPullInputDependencies();

         LOG.info("STARTED for Action id [{0}]", actionId);
        String pushMissingDeps = coordAction.getPushMissingDependencies();
        if (pushMissingDeps == null || pushMissingDeps.length() == 0) {
        if (coordPushInputDependency.isDependencyMet()) {
             LOG.info("Nothing to check. Empty push missing dependency");
         }
         else {
@@ -50,25 +50,19 @@ public class CoordActionUpdatePushMissingDependency extends CoordPushDependencyC
                 }
             }
             else {
                LOG.debug("Updating with available uris=[{0}] where missing uris=[{1}]", availDepList.toString(),
                        pushMissingDeps);

                String[] missingDepsArray = DependencyChecker.dependenciesAsArray(pushMissingDeps);
                List&lt;String&gt; stillMissingDepsList = new ArrayList&lt;String&gt;(Arrays.asList(missingDepsArray));
                stillMissingDepsList.removeAll(availDepList);
                String pushMissingDependencies = coordPushInputDependency.getMissingDependencies().toString();
                LOG.debug("Updating with available uris = [{0}] where missing uris = [{1}]", pushMissingDependencies);
                String[] missingDependenciesArray = DependencyChecker.dependenciesAsArray(pushMissingDependencies);
                coordPushInputDependency.addToAvailableDependencies(availDepList);
                 boolean isChangeInDependency = true;
                if (stillMissingDepsList.size() == 0) {
                if (coordPushInputDependency.isDependencyMet()) {
                     // All push-based dependencies are available
                    onAllPushDependenciesAvailable();
                    onAllPushDependenciesAvailable(coordPullInputDependency.isDependencyMet());
                 }
                 else {
                    if (stillMissingDepsList.size() == missingDepsArray.length) {
                    if (coordPushInputDependency.getMissingDependenciesAsList().size() == missingDependenciesArray.length) {
                         isChangeInDependency = false;
                     }
                    else {
                        String stillMissingDeps = DependencyChecker.dependenciesAsString(stillMissingDepsList);
                        coordAction.setPushMissingDependencies(stillMissingDeps);
                    }
                     if (isTimeout()) { // Poll and check as one last try
                         queue(new CoordPushDependencyCheckXCommand(coordAction.getId()), 100);
                     }
diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordCommandUtils.java b/core/src/main/java/org/apache/oozie/command/coord/CoordCommandUtils.java
index 58ef48327..0af7edc90 100644
-- a/core/src/main/java/org/apache/oozie/command/coord/CoordCommandUtils.java
++ b/core/src/main/java/org/apache/oozie/command/coord/CoordCommandUtils.java
@@ -18,9 +18,12 @@
 
 package org.apache.oozie.command.coord;
 
import java.io.IOException;
 import java.io.StringReader;
 import java.net.URI;
import java.net.URISyntaxException;
 import java.text.ParseException;
import java.util.ArrayList;
 import java.util.TimeZone;
 import java.util.Map;
 import java.util.HashMap;
@@ -32,6 +35,7 @@ import org.apache.hadoop.conf.Configuration;
 import org.apache.oozie.CoordinatorActionBean;
 import org.apache.oozie.ErrorCode;
 import org.apache.oozie.client.CoordinatorAction;
import org.apache.oozie.client.OozieClient;
 import org.apache.oozie.command.CommandException;
 import org.apache.oozie.coord.CoordELEvaluator;
 import org.apache.oozie.coord.CoordELFunctions;
@@ -39,17 +43,25 @@ import org.apache.oozie.coord.CoordUtils;
 import org.apache.oozie.coord.CoordinatorJobException;
 import org.apache.oozie.coord.SyncCoordAction;
 import org.apache.oozie.coord.TimeUnit;
import org.apache.oozie.coord.input.logic.CoordInputLogicEvaluatorUtil;
import org.apache.oozie.coord.input.dependency.CoordInputDependency;
import org.apache.oozie.coord.input.logic.CoordInputLogicEvaluator;
import org.apache.oozie.coord.input.dependency.CoordInputDependencyFactory;
import org.apache.oozie.coord.input.dependency.CoordInputInstance;
 import org.apache.oozie.dependency.ActionDependency;
 import org.apache.oozie.dependency.DependencyChecker;
 import org.apache.oozie.dependency.URIHandler;
 import org.apache.oozie.dependency.URIHandler.DependencyType;
import org.apache.oozie.dependency.URIHandlerException;
 import org.apache.oozie.service.Services;
 import org.apache.oozie.service.URIHandlerService;
 import org.apache.oozie.service.UUIDService;
 import org.apache.oozie.util.DateUtils;
 import org.apache.oozie.util.ELEvaluator;
import org.apache.oozie.util.ParamChecker;
 import org.apache.oozie.util.XConfiguration;
 import org.apache.oozie.util.XmlUtils;
import org.jdom.Attribute;
 import org.jdom.Element;
 import org.jdom.JDOMException;
 import org.quartz.CronExpression;
@@ -63,8 +75,9 @@ public class CoordCommandUtils {
     public static int OFFSET = 3;
     public static int ABSOLUTE = 4;
     public static int UNEXPECTED = -1;

     public static final String RESOLVED_UNRESOLVED_SEPARATOR = "!!";
    public static final String UNRESOLVED_INST_TAG = "unresolved-instances";
    public static final String UNRESOLVED_INSTANCES_TAG = "unresolved-instances";
 
     /**
      * parse a function like coord:latest(n)/future() and return the 'n'.
@@ -357,7 +370,7 @@ public class CoordCommandUtils {
             depList.append(urisWithDoneFlag);
         }
         if (unresolvedInstances.length() &gt; 0) {
            Element elemInstance = new Element(UNRESOLVED_INST_TAG, event.getNamespace());
            Element elemInstance = new Element(UNRESOLVED_INSTANCES_TAG, event.getNamespace());
             elemInstance.addContent(unresolvedInstances.toString());
             event.getContent().add(1, elemInstance);
         }
@@ -482,20 +495,24 @@ public class CoordCommandUtils {
         appInst.setTimeZone(DateUtils.getTimeZone(eAction.getAttributeValue("timezone")));
         appInst.setEndOfDuration(TimeUnit.valueOf(eAction.getAttributeValue("end_of_duration")));
 
        Map&lt;String, StringBuilder&gt; dependencyMap = null;
        boolean isInputLogicSpecified = CoordUtils.isInputLogicSpecified(eAction);
 
         Element inputList = eAction.getChild("input-events", eAction.getNamespace());
         List&lt;Element&gt; dataInList = null;
         if (inputList != null) {
             dataInList = inputList.getChildren("data-in", eAction.getNamespace());
            dependencyMap = materializeDataEvents(dataInList, appInst, conf);
            materializeInputDataEvents(dataInList, appInst, conf, actionBean, isInputLogicSpecified);
         }
 
        if(isInputLogicSpecified){
            evaluateInputCheck(eAction.getChild(CoordInputLogicEvaluator.INPUT_LOGIC, eAction.getNamespace()),
                    CoordELEvaluator.createDataEvaluator(eAction, conf, actionId));
        }
         Element outputList = eAction.getChild("output-events", eAction.getNamespace());
         List&lt;Element&gt; dataOutList = null;
         if (outputList != null) {
             dataOutList = outputList.getChildren("data-out", eAction.getNamespace());
            materializeDataEvents(dataOutList, appInst, conf);
            materializeOutputDataEvents(dataOutList, appInst, conf);
         }
 
         eAction.removeAttribute("start");
@@ -513,16 +530,6 @@ public class CoordCommandUtils {
         actionBean.setLastModifiedTime(new Date());
         actionBean.setStatus(CoordinatorAction.Status.WAITING);
         actionBean.setActionNumber(instanceCount);
        if (dependencyMap != null) {
            StringBuilder sbPull = dependencyMap.get(DependencyType.PULL.name());
            if (sbPull != null) {
                actionBean.setMissingDependencies(sbPull.toString());
            }
            StringBuilder sbPush = dependencyMap.get(DependencyType.PUSH.name());
            if (sbPush != null) {
                actionBean.setPushMissingDependencies(sbPush.toString());
            }
        }
         actionBean.setNominalTime(nominalTime);
         boolean isSla = CoordCommandUtils.materializeSLA(eAction, actionBean, conf);
         if (isSla == true) {
@@ -544,6 +551,7 @@ public class CoordCommandUtils {
         }
     }
 

     /**
      * @param eAction the actionXml related element
      * @param actionBean the coordinator action bean
@@ -554,12 +562,18 @@ public class CoordCommandUtils {
         String action = XmlUtils.prettyPrint(eAction).toString();
         StringBuilder actionXml = new StringBuilder(action);
         Configuration actionConf = new XConfiguration(new StringReader(actionBean.getRunConf()));
        actionBean.setActionXml(action);

        if (CoordUtils.isInputLogicSpecified(eAction)) {
            new CoordInputLogicEvaluatorUtil(actionBean).validateInputLogic();
        }
 
         boolean isPushDepAvailable = true;
        if (actionBean.getPushMissingDependencies() != null) {
            ActionDependency actionDep = DependencyChecker.checkForAvailability(
                    actionBean.getPushMissingDependencies(), actionConf, true);
            if (actionDep.getMissingDependencies().size() != 0) {
        String pushMissingDependencies = actionBean.getPushInputDependencies().getMissingDependencies();
        if (pushMissingDependencies != null) {
            ActionDependency actionDependencies = DependencyChecker.checkForAvailability(pushMissingDependencies,
                    actionConf, true);
            if (actionDependencies.getMissingDependencies().size() != 0) {
                 isPushDepAvailable = false;
             }
 
@@ -571,13 +585,16 @@ public class CoordCommandUtils {
             StringBuilder existList = new StringBuilder();
             StringBuilder nonExistList = new StringBuilder();
             StringBuilder nonResolvedList = new StringBuilder();
            getResolvedList(actionBean.getMissingDependencies(), nonExistList, nonResolvedList);
            isPullDepAvailable = coordActionInput.checkInput(actionXml, existList, nonExistList, actionConf);
            getResolvedList(actionBean.getPullInputDependencies().getMissingDependencies(), nonExistList, nonResolvedList);
            isPullDepAvailable = actionBean.getPullInputDependencies().checkPullMissingDependencies(actionBean,
                    existList, nonExistList);

         }
 
         if (isPullDepAvailable &amp;&amp; isPushDepAvailable) {
             // Check for latest/future
            boolean isLatestFutureDepAvailable = coordActionInput.checkUnResolvedInput(actionXml, actionConf);
            boolean isLatestFutureDepAvailable = coordActionInput.checkUnResolvedInput(actionBean, actionXml,
                    actionConf);
             if (isLatestFutureDepAvailable) {
                 String newActionXml = CoordActionInputCheckXCommand.resolveCoordConfiguration(actionXml, actionConf,
                         actionBean.getId());
@@ -598,17 +615,68 @@ public class CoordCommandUtils {
      * @param conf
      * @throws Exception
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>StringBuilder</name></argument>&gt;</argument_list></name></type> <name>materializeDataEvents</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>SyncCoordAction</name></type> <name>appInst</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>
            )</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>materializeOutputDataEvents</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>SyncCoordAction</name></type> <name>appInst</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
 
         <if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>Element</name></type> <name>event</name> <range>: <expr><name>events</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>instances</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ELEvaluator</name></type> <name>eval</name> <init>= <expr><call><name><name>CoordELEvaluator</name><operator>.</operator><name>createInstancesELEvaluator</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>appInst</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Handle list of instance tag</comment>
            <expr_stmt><expr><call><name>resolveInstances</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>instances</name></expr></argument>, <argument><expr><name>appInst</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Handle start-instance and end-instance</comment>
            <expr_stmt><expr><call><name>resolveInstanceRange</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>instances</name></expr></argument>, <argument><expr><name>appInst</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Separate out the unresolved instances</comment>
            <expr_stmt><expr><call><name>separateResolvedAndUnresolved</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>evaluateInputCheck</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>ELEvaluator</name></type> <name>evalInputLogic</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Object</name></type> <name>event</name> <range>: <expr><call><name><name>root</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Element</name></type> <name>inputElement</name> <init>= <expr><operator>(</operator><name>Element</name><operator>)</operator> <name>event</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>resolveAttribute</name><argument_list>(<argument><expr><literal type="string">"dataset"</literal></expr></argument>, <argument><expr><name>inputElement</name></expr></argument>, <argument><expr><name>evalInputLogic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>resolveAttribute</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>inputElement</name></expr></argument>, <argument><expr><name>evalInputLogic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>resolveAttribute</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><name>inputElement</name></expr></argument>, <argument><expr><name>evalInputLogic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>resolveAttribute</name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>, <argument><expr><name>inputElement</name></expr></argument>, <argument><expr><name>evalInputLogic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>inputElement</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>evaluateInputCheck</name><argument_list>(<argument><expr><name>inputElement</name></expr></argument>, <argument><expr><name>evalInputLogic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>unresolvedList</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>StringBuilder</name></argument>&gt;</argument_list></name></type> <name>dependencyMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>StringBuilder</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>resolveAttribute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attrName</name></decl></parameter>, <parameter><decl><type><name>Element</name></type> <name>elem</name></decl></parameter>, <parameter><decl><type><name>ELEvaluator</name></type> <name>eval</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CoordinatorJobException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Attribute</name></type> <name>attr</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name>attrName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>val</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>CoordELFunctions</name><operator>.</operator><name>evalAndWrap</name></name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><call><name><name>attr</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>CoordinatorJobException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E1004</name></name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><call><name><name>attr</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>val</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>materializeInputDataEvents</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>SyncCoordAction</name></type> <name>appInst</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>,
            <parameter><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isInputLogicSpecified</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CoordInputDependency</name></type> <name>coordPullInputDependency</name> <init>= <expr><call><name><name>CoordInputDependencyFactory</name>
                <operator>.</operator><name>createPullInputDependencies</name></name><argument_list>(<argument><expr><name>isInputLogicSpecified</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoordInputDependency</name></type> <name>coordPushInputDependency</name> <init>= <expr><call><name><name>CoordInputDependencyFactory</name>
                <operator>.</operator><name>createPushInputDependencies</name></name><argument_list>(<argument><expr><name>isInputLogicSpecified</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>unresolvedList</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

         <decl_stmt><decl><type><name>URIHandlerService</name></type> <name>uriService</name> <init>= <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>URIHandlerService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>pullMissingDep</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>pushMissingDep</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
         <for>for <control>(<init><decl><type><name>Element</name></type> <name>event</name> <range>: <expr><name>events</name></expr></range></decl></init>)</control> <block>{<block_content>
             <decl_stmt><decl><type><name>StringBuilder</name></type> <name>instances</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">619</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">687</literal></expr><operator>,</operator><expr><literal type="number">44</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordCommandUtils</name> <block>{
             <expr><call><name>resolveInstanceRange</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>instances</name></expr></argument>, <argument><expr><name>appInst</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;
             <comment type="line">// Separate out the unresolved instances</comment>
             <name>String</name> <name>resolvedList</name> <operator>=</operator> <call><name>separateResolvedAndUnresolved</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>instances</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

             <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>resolvedList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                 <decl_stmt><decl><type><name>Element</name></type> <name>uri</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"dataset"</literal></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getChild</name><argument_list>(<argument><expr><literal type="string">"uri-template"</literal></expr></argument>,
                         <argument><expr><call><name><name>event</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                 <decl_stmt><decl><type><name>String</name></type> <name>uriTemplate</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <decl_stmt><decl><type><name>URI</name></type> <name>baseURI</name> <init>= <expr><call><name><name>uriService</name><operator>.</operator><name>getAuthorityWithScheme</name></name><argument_list>(<argument><expr><name>uriTemplate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <decl_stmt><decl><type><name>URIHandler</name></type> <name>handler</name> <init>= <expr><call><name><name>uriService</name><operator>.</operator><name>getURIHandler</name></name><argument_list>(<argument><expr><name>baseURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></type> <name>inputInstanceList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>String</name></type> <name>inputInstance</name> <range>: <expr><call><name><name>resolvedList</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>inputInstanceList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CoordInputInstance</name><argument_list>(<argument><expr><name>inputInstance</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                 <if_stmt><if>if <condition>(<expr><call><name><name>handler</name><operator>.</operator><name>getDependencyType</name></name><argument_list>(<argument><expr><name>baseURI</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>DependencyType</name><operator>.</operator><name>PULL</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>pullMissingDep</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pullMissingDep</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>resolvedList</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>pullMissingDep</name><operator>.</operator><name>append</name></name><argument_list>(
                            <argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>resolvedList</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>addInputInstanceList</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>inputInstanceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if>
                 <else>else <block>{<block_content>
                    <expr_stmt><expr><name>pushMissingDep</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pushMissingDep</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>resolvedList</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>pushMissingDep</name><operator>.</operator><name>append</name></name><argument_list>(
                            <argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>resolvedList</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>coordPushInputDependency</name><operator>.</operator><name>addInputInstanceList</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>inputInstanceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                 </block_content>}</block></else></if_stmt>
             </block_content>}</block></if></if_stmt>
 
            <decl_stmt><decl><type><name>String</name></type> <name>tmpUnresolved</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getChildTextTrim</name></name><argument_list>(<argument><expr><name>UNRESOLVED_INST_TAG</name></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tmpUnresolved</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getChildTextTrim</name></name><argument_list>(<argument><expr><name>UNRESOLVED_INSTANCES_TAG</name></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><name>tmpUnresolved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>unresolvedList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>unresolvedList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>unresolvedList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>tmpUnresolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>unresolvedList</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tmpUnresolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><call><name><name>unresolvedList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>pullMissingDep</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>pullMissingDep</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>pullMissingDep</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>RESOLVED_UNRESOLVED_SEPARATOR</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>unresolvedList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>String</name></type> <name>unresolvedDatasetName</name><range>:<expr><call><name><name>unresolvedList</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{<block_content>
            <expr_stmt><expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>addUnResolvedList</name></name><argument_list>(<argument><expr><name>unresolvedDatasetName</name></expr></argument>, <argument><expr><call><name><name>unresolvedList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>unresolvedDatasetName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>dependencyMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>DependencyType</name><operator>.</operator><name>PULL</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pullMissingDep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dependencyMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>DependencyType</name><operator>.</operator><name>PUSH</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pushMissingDep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>dependencyMap</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>actionBean</name><operator>.</operator><name>setPullInputDependencies</name></name><argument_list>(<argument><expr><name>coordPullInputDependency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>actionBean</name><operator>.</operator><name>setPushInputDependencies</name></name><argument_list>(<argument><expr><name>coordPushInputDependency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>actionBean</name><operator>.</operator><name>setMissingDependencies</name></name><argument_list>(<argument><expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>actionBean</name><operator>.</operator><name>setPushMissingDependencies</name></name><argument_list>(<argument><expr><call><name><name>coordPushInputDependency</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    </block_content>}</block></function>
     <comment type="block" format="javadoc">/**
      * Get resolved string from missDepList
      *
@@ -797,4 +868,19 @@ public class CoordCommandUtils {
         }
         return nextNominalTime;
     }

    public static boolean pathExists(String sPath, Configuration actionConf, String user) throws IOException,
            URISyntaxException, URIHandlerException {
        URI uri = new URI(sPath);
        URIHandlerService service = Services.get().get(URIHandlerService.class);
        URIHandler handler = service.getURIHandler(uri);
        return handler.exists(uri, actionConf, user);
    }

    public static boolean pathExists(String sPath, Configuration actionConf) throws IOException, URISyntaxException,
            URIHandlerException {
        String user = ParamChecker.notEmpty(actionConf.get(OozieClient.USER_NAME), OozieClient.USER_NAME);
        return pathExists(sPath, actionConf, user);
    }

 }
diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java b/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java
index 39e6ac15c..f6c178217 100644
-- a/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java
@@ -18,6 +18,7 @@
 
 package org.apache.oozie.command.coord;
 
import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.oozie.AppType;
 import org.apache.oozie.CoordinatorActionBean;
@@ -34,6 +35,7 @@ import org.apache.oozie.command.PreconditionException;
 import org.apache.oozie.command.bundle.BundleStatusUpdateXCommand;
 import org.apache.oozie.coord.CoordUtils;
 import org.apache.oozie.coord.TimeUnit;
import org.apache.oozie.coord.input.logic.CoordInputLogicEvaluatorUtil;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor;
 import org.apache.oozie.executor.jpa.BatchQueryExecutor.UpdateEntry;
 import org.apache.oozie.executor.jpa.CoordActionsActiveCountJPAExecutor;
@@ -148,7 +150,7 @@ public class CoordMaterializeTransitionXCommand extends MaterializeTransitionXCo
                     queue(new CoordActionInputCheckXCommand(coordAction.getId(), coordAction.getJobId()),
                         Math.max(checkDelay, 0));
 
                    if (coordAction.getPushMissingDependencies() != null) {
                    if (!StringUtils.isEmpty(coordAction.getPushMissingDependencies())) {
                         // TODO: Delay in catchup mode?
                         queue(new CoordPushDependencyCheckXCommand(coordAction.getId(), true), 100);
                     }
@@ -485,7 +487,6 @@ public class CoordMaterializeTransitionXCommand extends MaterializeTransitionXCo
                 action = CoordCommandUtils.materializeOneInstance(jobId, dryrun, (Element) eJob.clone(),
                         nextTime, actualTime, lastActionNumber, jobConf, actionBean);
                 actionBean.setTimeOut(timeout);

                 if (!dryrun) {
                     storeToDB(actionBean, action, jobConf); // Storing to table
 
@@ -529,7 +530,6 @@ public class CoordMaterializeTransitionXCommand extends MaterializeTransitionXCo
         LOG.debug("In storeToDB() coord action id = " + actionBean.getId() + ", size of actionXml = "
                 + actionXml.length());
         actionBean.setActionXml(actionXml);

         insertList.add(actionBean);
         writeActionSlaRegistration(actionXml, actionBean, jobConf);
     }
diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordPushDependencyCheckXCommand.java b/core/src/main/java/org/apache/oozie/command/coord/CoordPushDependencyCheckXCommand.java
index b05344d89..2600a2bde 100644
-- a/core/src/main/java/org/apache/oozie/command/coord/CoordPushDependencyCheckXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/coord/CoordPushDependencyCheckXCommand.java
@@ -21,10 +21,10 @@ package org.apache.oozie.command.coord;
 import java.io.IOException;
 import java.io.StringReader;
 import java.net.URI;
import java.util.Arrays;
 import java.util.Date;
 import java.util.List;
 
import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.oozie.CoordinatorActionBean;
 import org.apache.oozie.CoordinatorJobBean;
@@ -34,7 +34,7 @@ import org.apache.oozie.client.Job;
 import org.apache.oozie.client.OozieClient;
 import org.apache.oozie.command.CommandException;
 import org.apache.oozie.command.PreconditionException;
import org.apache.oozie.dependency.DependencyChecker;
import org.apache.oozie.coord.input.dependency.CoordInputDependency;
 import org.apache.oozie.dependency.ActionDependency;
 import org.apache.oozie.dependency.URIHandler;
 import org.apache.oozie.executor.jpa.CoordActionGetForInputCheckJPAExecutor;
@@ -113,14 +113,15 @@ public class CoordPushDependencyCheckXCommand extends CoordinatorXCommand&lt;Void&gt;
             return null;
         }
 
        String pushMissingDeps = coordAction.getPushMissingDependencies();
        if (pushMissingDeps == null || pushMissingDeps.length() == 0) {
        CoordInputDependency coordPushInputDependency = coordAction.getPushInputDependencies();
        CoordInputDependency coordPullInputDependency = coordAction.getPullInputDependencies();
        if (coordPushInputDependency.getMissingDependenciesAsList().size() == 0) {
             LOG.info("Nothing to check. Empty push missing dependency");
         }
         else {
            String[] missingDepsArray = DependencyChecker.dependenciesAsArray(pushMissingDeps);
            LOG.info("First Push missing dependency is [{0}] ", missingDepsArray[0]);
            LOG.trace("Push missing dependencies are [{0}] ", pushMissingDeps);
            List&lt;String&gt; missingDependenciesArray = coordPushInputDependency.getMissingDependenciesAsList();
            LOG.info("First Push missing dependency is [{0}] ", missingDependenciesArray.get(0));
            LOG.trace("Push missing dependencies are [{0}] ", missingDependenciesArray);
             if (registerForNotification) {
                 LOG.debug("Register for notifications is true");
             }
@@ -134,27 +135,27 @@ public class CoordPushDependencyCheckXCommand extends CoordinatorXCommand&lt;Void&gt;
                     throw new CommandException(ErrorCode.E1307, e.getMessage(), e);
                 }
 

                boolean isChangeInDependency = true;
                boolean timeout = false;
                ActionDependency actionDependency = coordPushInputDependency.checkPushMissingDependencies(coordAction,
                        registerForNotification);
                 // Check all dependencies during materialization to avoid registering in the cache.
                 // But check only first missing one afterwards similar to
                 // CoordActionInputCheckXCommand for efficiency. listPartitions is costly.
                ActionDependency actionDep = DependencyChecker.checkForAvailability(missingDepsArray, actionConf,
                        !registerForNotification);
                if (actionDependency.getMissingDependencies().size() == missingDependenciesArray.size()) {
                    isChangeInDependency = false;
                }
                else {
                    coordPushInputDependency.setMissingDependencies(StringUtils.join(
                            actionDependency.getMissingDependencies(), CoordCommandUtils.RESOLVED_UNRESOLVED_SEPARATOR));
                }
 
                boolean isChangeInDependency = true;
                boolean timeout = false;
                if (actionDep.getMissingDependencies().size() == 0) {
                if (coordPushInputDependency.isDependencyMet()) {
                     // All push-based dependencies are available
                    onAllPushDependenciesAvailable();
                    onAllPushDependenciesAvailable(coordPullInputDependency.isDependencyMet());
                 }
                 else {
                    if (actionDep.getMissingDependencies().size() == missingDepsArray.length) {
                        isChangeInDependency = false;
                    }
                    else {
                        String stillMissingDeps = DependencyChecker.dependenciesAsString(actionDep
                                .getMissingDependencies());
                        coordAction.setPushMissingDependencies(stillMissingDeps);
                    }
                     // Checking for timeout
                     timeout = isTimeout();
                     if (timeout) {
@@ -166,15 +167,15 @@ public class CoordPushDependencyCheckXCommand extends CoordinatorXCommand&lt;Void&gt;
                     }
                 }
 
                updateCoordAction(coordAction, isChangeInDependency);
                updateCoordAction(coordAction, isChangeInDependency || coordPushInputDependency.isDependencyMet());
                 if (registerForNotification) {
                    registerForNotification(actionDep.getMissingDependencies(), actionConf);
                    registerForNotification(coordPushInputDependency.getMissingDependenciesAsList(), actionConf);
                 }
                 if (removeAvailDependencies) {
                    unregisterAvailableDependencies(actionDep.getAvailableDependencies());
                    unregisterAvailableDependencies(actionDependency.getAvailableDependencies());
                 }
                 if (timeout) {
                    unregisterMissingDependencies(actionDep.getMissingDependencies(), actionId);
                    unregisterMissingDependencies(coordPushInputDependency.getMissingDependenciesAsList(), actionId);
                 }
             }
             catch (Exception e) {
@@ -183,10 +184,9 @@ public class CoordPushDependencyCheckXCommand extends CoordinatorXCommand&lt;Void&gt;
                     LOG.debug("Queueing timeout command");
                     // XCommand.queue() will not work when there is a Exception
                     callableQueueService.queue(new CoordActionTimeOutXCommand(coordAction, coordJob.getUser(), coordJob.getAppName()));
                    unregisterMissingDependencies(Arrays.asList(missingDepsArray), actionId);
                    unregisterMissingDependencies(missingDependenciesArray, actionId);
                 }
                else if (coordAction.getMissingDependencies() != null
                        &amp;&amp; coordAction.getMissingDependencies().length() &gt; 0) {
                else if (coordPullInputDependency.getMissingDependenciesAsList().size() &gt; 0) {
                     // Queue again on exception as RecoveryService will not queue this again with
                     // the action being updated regularly by CoordActionInputCheckXCommand
                     callableQueueService.queue(new CoordPushDependencyCheckXCommand(coordAction.getId(),
@@ -221,18 +221,18 @@ public class CoordPushDependencyCheckXCommand extends CoordinatorXCommand&lt;Void&gt;
         return (timeOut &gt;= 0) &amp;&amp; (waitingTime &gt; timeOut);
     }
 
    protected void onAllPushDependenciesAvailable() throws CommandException {
        coordAction.setPushMissingDependencies("");
    protected void onAllPushDependenciesAvailable(boolean isPullDependencyMeet) throws CommandException {
         Services.get().get(PartitionDependencyManagerService.class)
                 .removeCoordActionWithDependenciesAvailable(coordAction.getId());
        if (coordAction.getMissingDependencies() == null || coordAction.getMissingDependencies().length() == 0) {
        if (isPullDependencyMeet) {
             Date nominalTime = coordAction.getNominalTime();
             Date currentTime = new Date();
             // The action should become READY only if current time &gt; nominal time;
             // CoordActionInputCheckXCommand will take care of moving it to READY when it is nominal time.
             if (nominalTime.compareTo(currentTime) &gt; 0) {
                 LOG.info("[" + actionId + "]::ActionInputCheck:: nominal Time is newer than current time. Current="
                        + DateUtils.formatDateOozieTZ(currentTime) + ", nominal=" + DateUtils.formatDateOozieTZ(nominalTime));
                        + DateUtils.formatDateOozieTZ(currentTime) + ", nominal="
                        + DateUtils.formatDateOozieTZ(nominalTime));
             }
             else {
                 String actionXml = resolveCoordConfiguration();
@@ -248,6 +248,8 @@ public class CoordPushDependencyCheckXCommand extends CoordinatorXCommand&lt;Void&gt;
             // wait till RecoveryService kicks in
             queue(new CoordActionInputCheckXCommand(coordAction.getId(), coordAction.getJobId()));
         }
        coordAction.getPushInputDependencies().setDependencyMet(true);

     }
 
     private String resolveCoordConfiguration() throws CommandException {
@@ -255,7 +257,8 @@ public class CoordPushDependencyCheckXCommand extends CoordinatorXCommand&lt;Void&gt;
             Configuration actionConf = new XConfiguration(new StringReader(coordAction.getRunConf()));
             StringBuilder actionXml = new StringBuilder(coordAction.getActionXml());
             String newActionXml = CoordActionInputCheckXCommand.resolveCoordConfiguration(actionXml, actionConf,
                    actionId);
                    actionId, coordAction.getPullInputDependencies(), coordAction
                            .getPushInputDependencies());
             actionXml.replace(0, actionXml.length(), newActionXml);
             return actionXml.toString();
         }
@@ -270,6 +273,7 @@ public class CoordPushDependencyCheckXCommand extends CoordinatorXCommand&lt;Void&gt;
         if (jpaService != null) {
             try {
                 if (isChangeInDependency) {
                    coordAction.setPushMissingDependencies(coordAction.getPushInputDependencies().serialize());
                     CoordActionQueryExecutor.getInstance().executeUpdate(
                             CoordActionQuery.UPDATE_COORD_ACTION_FOR_PUSH_INPUTCHECK, coordAction);
                     if (EventHandlerService.isEnabled() &amp;&amp; coordAction.getStatus() != CoordinatorAction.Status.READY) {
@@ -286,6 +290,9 @@ public class CoordPushDependencyCheckXCommand extends CoordinatorXCommand&lt;Void&gt;
             catch (JPAExecutorException jex) {
                 throw new CommandException(ErrorCode.E1021, jex.getMessage(), jex);
             }
            catch (IOException ioe) {
                throw new CommandException(ErrorCode.E1021, ioe.getMessage(), ioe);
            }
         }
     }
 
diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordSubmitXCommand.java b/core/src/main/java/org/apache/oozie/command/coord/CoordSubmitXCommand.java
index d4d1c0814..f1f9ab2d5 100644
-- a/core/src/main/java/org/apache/oozie/command/coord/CoordSubmitXCommand.java
++ b/core/src/main/java/org/apache/oozie/command/coord/CoordSubmitXCommand.java
@@ -53,8 +53,10 @@ import org.apache.oozie.command.SubmitTransitionXCommand;
 import org.apache.oozie.command.bundle.BundleStatusUpdateXCommand;
 import org.apache.oozie.coord.CoordELEvaluator;
 import org.apache.oozie.coord.CoordELFunctions;
import org.apache.oozie.coord.CoordUtils;
 import org.apache.oozie.coord.CoordinatorJobException;
 import org.apache.oozie.coord.TimeUnit;
import org.apache.oozie.coord.input.logic.CoordInputLogicEvaluator;
 import org.apache.oozie.executor.jpa.CoordJobQueryExecutor;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
 import org.apache.oozie.service.CoordMaterializeTriggerService;
@@ -799,6 +801,11 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {
         resolveIODataset(eAppXml);
         resolveIOEvents(eAppXml, dataNameList);
 
        if (CoordUtils.isInputLogicSpecified(eAppXml)) {
            resolveInputLogic(eAppXml.getChild(CoordInputLogicEvaluator.INPUT_LOGIC, eAppXml.getNamespace()), evalInst,
                    dataNameList);
        }

         resolveTagContents("app-path", eAppXml.getChild("action", eAppXml.getNamespace()).getChild("workflow",
                 eAppXml.getNamespace()), evalNofuncs);
         // TODO: If action or workflow tag is missing, NullPointerException will
@@ -896,6 +903,26 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {
 
     }
 
    private void resolveInputLogic(Element root, ELEvaluator evalInputLogic, HashMap&lt;String, String&gt; dataNameList)
            throws Exception {
        for (Object event : root.getChildren()) {
            Element inputElement = (Element) event;
            resolveAttribute("dataset", inputElement, evalInputLogic);
            String name=resolveAttribute("name", inputElement, evalInputLogic);
            resolveAttribute("or", inputElement, evalInputLogic);
            resolveAttribute("and", inputElement, evalInputLogic);
            resolveAttribute("combine", inputElement, evalInputLogic);

            if (name != null) {
                dataNameList.put(name, "data-in");
            }

            if (!inputElement.getChildren().isEmpty()) {
                resolveInputLogic(inputElement, evalInputLogic, dataNameList);
            }
        }
    }

     /**
      * Resolve input-events/dataset and output-events/dataset tags.
      *
diff --git a/core/src/main/java/org/apache/oozie/coord/CoordELConstants.java b/core/src/main/java/org/apache/oozie/coord/CoordELConstants.java
index f010a817f..eabf473ee 100644
-- a/core/src/main/java/org/apache/oozie/coord/CoordELConstants.java
++ b/core/src/main/java/org/apache/oozie/coord/CoordELConstants.java
@@ -33,4 +33,7 @@ public class CoordELConstants {
     public static final int SUBMIT_DAYS = 24 * 60;
 
     public static final String DEFAULT_DONE_FLAG = "_SUCCESS";
    final public static String RESOLVED_PATH = "resolved_path";

    final public static String IS_RESOLVED = "is_resolved";
 }
diff --git a/core/src/main/java/org/apache/oozie/coord/CoordELEvaluator.java b/core/src/main/java/org/apache/oozie/coord/CoordELEvaluator.java
index 8b2f4560a..fba8ac1b5 100644
-- a/core/src/main/java/org/apache/oozie/coord/CoordELEvaluator.java
++ b/core/src/main/java/org/apache/oozie/coord/CoordELEvaluator.java
@@ -28,6 +28,8 @@ import java.util.Map;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.oozie.CoordinatorActionBean;
 import org.apache.oozie.command.coord.CoordCommandUtils;
import org.apache.oozie.coord.input.dependency.CoordInputDependency;
import org.apache.oozie.coord.input.logic.CoordInputLogicEvaluator;
 import org.apache.oozie.service.ELService;
 import org.apache.oozie.service.Services;
 import org.apache.oozie.util.DateUtils;
@@ -141,7 +143,7 @@ public class CoordELEvaluator {
                     uris = uris.replaceAll(CoordELFunctions.INSTANCE_SEPARATOR, CoordELFunctions.DIR_SEPARATOR);
                     eval.setVariable(".dataout." + data.getAttributeValue("name"), uris);
                 }
                if (data.getChild(CoordCommandUtils.UNRESOLVED_INST_TAG, data.getNamespace()) != null) {
                if (data.getChild(CoordCommandUtils.UNRESOLVED_INSTANCES_TAG, data.getNamespace()) != null) {
                     eval.setVariable(".dataout." + data.getAttributeValue("name") + ".unresolved", "true");
                 }
             }
@@ -172,7 +174,13 @@ public class CoordELEvaluator {
      * @return configured ELEvaluator
      * @throws Exception : If there is any date-time string in wrong format, the exception is thrown
      */</comment>

     <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ELEvaluator</name></type> <name>createDataEvaluator</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>eJob</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>actionId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>createDataEvaluator</name><argument_list>(<argument><expr><name>eJob</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>actionId</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ELEvaluator</name></type> <name>createDataEvaluator</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>eJob</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>actionId</name></decl></parameter>,
            <parameter><decl><type><name>CoordInputDependency</name></type> <name>pullDependencies</name></decl></parameter>, <parameter><decl><type><name>CoordInputDependency</name></type> <name>pushDependencies</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>ELEvaluator</name></type> <name>e</name> <init>= <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>ELService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>createEvaluator</name><argument_list>(<argument><expr><literal type="string">"coord-action-start"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>setConfigToEval</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>SyncCoordAction</name></type> <name>appInst</name> <init>= <expr><operator>new</operator> <call><name>SyncCoordAction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">184</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">192</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordELEvaluator</name> <block>{
             <expr><call><name><name>appInst</name><operator>.</operator><name>setTimeUnit</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>eJob</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"freq_timeunit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
             <call><name><name>appInst</name><operator>.</operator><name>setActionId</name></name><argument_list>(<argument><expr><name>actionId</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>appInst</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>eJob</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>appInst</name><operator>.</operator><name>setPullDependencies</name></name><argument_list>(<argument><expr><name>pullDependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>appInst</name><operator>.</operator><name>setPushDependencies</name></name><argument_list>(<argument><expr><name>pushDependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>CoordUtils</name><operator>.</operator><name>isInputLogicSpecified</name></name><argument_list>(<argument><expr><name>eJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>setVariable</name></name><argument_list>(<argument><expr><literal type="string">".actionInputLogic"</literal></expr></argument>,
                        <argument><expr><call><name><name>XmlUtils</name><operator>.</operator><name>prettyPrint</name></name><argument_list>(<argument><expr><call><name><name>eJob</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluator</name><operator>.</operator><name>INPUT_LOGIC</name></name></expr></argument>, <argument><expr><call><name><name>eJob</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
         </block_content>}</block></function>
         <decl_stmt><decl><type><name>String</name></type> <name>strActualTime</name> <init>= <expr><call><name><name>eJob</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"action-actual-time"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>strActualTime</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">200</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">214</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordELEvaluator</name> <block>{
                 }</block></expr></expr_stmt>
                 <if_stmt><else>else <block>{<block_content>
                 </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INST_TAG</name></name></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INSTANCES_TAG</name></name></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                     <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>setVariable</name></name><argument_list>(<argument><expr><literal type="string">".datain."</literal> <operator>+</operator> <call><name><name>data</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".unresolved"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO:</comment>
                     <comment type="line">// check</comment>
                     <comment type="line">// null</comment>
                 </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Element</name></type> <name>doneFlagElement</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"done-flag"</literal></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>doneFlag</name> <init>= <expr><call><name><name>CoordUtils</name><operator>.</operator><name>getDoneFlag</name></name><argument_list>(<argument><expr><name>doneFlagElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>setVariable</name></name><argument_list>(<argument><expr><literal type="string">".datain."</literal> <operator>+</operator> <call><name><name>data</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".doneFlag"</literal></expr></argument>, <argument><expr><name>doneFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><name>events</name> <operator>=</operator> <call><name><name>eJob</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"output-events"</literal></expr></argument>, <argument><expr><call><name><name>eJob</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">217</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">234</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordELEvaluator</name> <block>{
                 }</block></expr></expr_stmt>
                 <if_stmt><else>else <block>{<block_content>
                 </block_content>}</block></else></if_stmt><comment type="line">// TODO</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INST_TAG</name></name></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INSTANCES_TAG</name></name></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                     <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>setVariable</name></name><argument_list>(<argument><expr><literal type="string">".dataout."</literal> <operator>+</operator> <call><name><name>data</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".unresolved"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO:</comment>
                     <comment type="line">// check</comment>
                     <comment type="line">// null</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordELFunctions</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordELFunctions</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5d238663a</literal><operator>..</operator><name>ffa0943d2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordELFunctions</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>CoordELFunctions</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name></name>;</package>
 
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>OozieClient</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name><operator>.</operator><name>CoordInputLogicEvaluatorUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>URIHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>URIHandler</name><operator>.</operator><name>Context</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>ELEvaluator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>ParamChecker</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XLog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>JDOMException</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">61</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>CoordELFunctions</name> <block>{
     <expr><specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>long</name> <name>DAY_MSEC</name> <operator>=</operator> <literal type="number">24</literal> <operator>*</operator> <name>HOUR_MSEC</name></expr>;
     <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name>long</name> <name>MONTH_MSEC</name> <operator>=</operator> <literal type="number">30</literal> <operator>*</operator> <name>DAY_MSEC</name></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>YEAR_MSEC</name> <init>= <expr><literal type="number">365</literal> <operator>*</operator> <name>DAY_MSEC</name></expr></init></decl>;</decl_stmt>

     <comment type="block" format="javadoc">/**
      * Used in defining the frequency in 'day' unit. &lt;p&gt; domain: &lt;code&gt; val &amp;gt; 0&lt;/code&gt; and should be integer.
      *
@@ -348,7 +350,7 @@ public class CoordELFunctions {
                             resolvedInstances.append(DateUtils.formatDateOozieTZ(nominalInstanceCal));
                             resolvedURIPaths.append(uriPath);
                             retVal = resolvedInstances.toString();
                            eval.setVariable("resolved_path", resolvedURIPaths.toString());
                            eval.setVariable(CoordELConstants.RESOLVED_PATH, resolvedURIPaths.toString());
                             break;
                         }
                         else if (available &gt;= startOffset) {
@@ -356,6 +358,7 @@ public class CoordELFunctions {
                             resolvedInstances.append(DateUtils.formatDateOozieTZ(nominalInstanceCal)).append(
                                     INSTANCE_SEPARATOR);
                             resolvedURIPaths.append(uriPath).append(INSTANCE_SEPARATOR);

                         }
                         available++;
                     }
@@ -366,6 +369,10 @@ public class CoordELFunctions {
                     checkedInstance++;
                     // DateUtils.moveToEnd(nominalInstanceCal, getDSEndOfFlag());
                 }
                if (!StringUtils.isEmpty(resolvedURIPaths.toString()) &amp;&amp; eval.getVariable(CoordELConstants.RESOLVED_PATH) == null) {
                    eval.setVariable(CoordELConstants.RESOLVED_PATH, resolvedURIPaths.toString());
                }

             }
             finally {
                 if (uriContext != null) {
@@ -375,7 +382,7 @@ public class CoordELFunctions {
             if (!resolved) {
                 // return unchanged future function with variable 'is_resolved'
                 // to 'false'
                eval.setVariable("is_resolved", Boolean.FALSE);
                eval.setVariable(CoordELConstants.IS_RESOLVED, Boolean.FALSE);
                 if (startOffset == endOffset) {
                     retVal = "${coord:future(" + startOffset + ", " + instance + ")}";
                 }
@@ -384,11 +391,11 @@ public class CoordELFunctions {
                 }
             }
             else {
                eval.setVariable("is_resolved", Boolean.TRUE);
                eval.setVariable(CoordELConstants.IS_RESOLVED, Boolean.TRUE);
             }
         }
         else {// No feasible nominal time
            eval.setVariable("is_resolved", Boolean.TRUE);
            eval.setVariable(CoordELConstants.IS_RESOLVED, Boolean.TRUE);
             retVal = "";
         }
         return retVal;
@@ -495,8 +502,24 @@ public class CoordELFunctions {
     public static String ph3_coord_dataIn(String dataInName) {
         String uris = "";
         ELEvaluator eval = ELEvaluator.getCurrent();
        if (eval.getVariable(".datain." + dataInName) == null
                &amp;&amp; !StringUtils.isEmpty(eval.getVariable(".actionInputLogic").toString())) {
            try {
                return new CoordInputLogicEvaluatorUtil().getInputDependencies(dataInName,
                        (SyncCoordAction) eval.getVariable(COORD_ACTION));
            }
            catch (JDOMException e) {
                XLog.getLog(CoordELFunctions.class).error(e);
                throw new RuntimeException(e.getMessage());
            }
        }

         uris = (String) eval.getVariable(".datain." + dataInName);
        Boolean unresolved = (Boolean) eval.getVariable(".datain." + dataInName + ".unresolved");
        Object unResolvedObj = eval.getVariable(".datain." + dataInName + ".unresolved");
        if (unResolvedObj == null) {
            return uris;
        }
        Boolean unresolved = Boolean.parseBoolean(unResolvedObj.toString());
         if (unresolved != null &amp;&amp; unresolved.booleanValue() == true) {
             return "${coord:dataIn('" + dataInName + "')}";
         }
@@ -835,7 +858,7 @@ public class CoordELFunctions {
     public static String ph1_coord_dataIn_echo(String n) {
         ELEvaluator eval = ELEvaluator.getCurrent();
         String val = (String) eval.getVariable("oozie.dataname." + n);
        if (val == null || val.equals("data-in") == false) {
        if ((val == null || val.equals("data-in") == false)) {
             XLog.getLog(CoordELFunctions.class).error("data_in_name " + n + " is not valid");
             throw new RuntimeException("data_in_name " + n + " is not valid");
         }
@@ -1112,7 +1135,8 @@ public class CoordELFunctions {
                             resolvedInstances.append(DateUtils.formatDateOozieTZ(nominalInstanceCal));
                             resolvedURIPaths.append(uriPath);
                             retVal = resolvedInstances.toString();
                            eval.setVariable("resolved_path", resolvedURIPaths.toString());
                            eval.setVariable(CoordELConstants.RESOLVED_PATH, resolvedURIPaths.toString());

                             break;
                         }
                         else if (available &lt;= endOffset) {
@@ -1130,6 +1154,9 @@ public class CoordELFunctions {
                     nominalInstanceCal.add(dsTimeUnit.getCalendarUnit(), instCount[0] * datasetFrequency);
                     // DateUtils.moveToEnd(nominalInstanceCal, getDSEndOfFlag());
                 }
                if (!StringUtils.isEmpty(resolvedURIPaths.toString()) &amp;&amp; eval.getVariable(CoordELConstants.RESOLVED_PATH) == null) {
                    eval.setVariable(CoordELConstants.RESOLVED_PATH, resolvedURIPaths.toString());
                }
             }
             finally {
                 if (uriContext != null) {
@@ -1139,7 +1166,7 @@ public class CoordELFunctions {
             if (!resolved) {
                 // return unchanged latest function with variable 'is_resolved'
                 // to 'false'
                eval.setVariable("is_resolved", Boolean.FALSE);
                eval.setVariable(CoordELConstants.IS_RESOLVED, Boolean.FALSE);
                 if (startOffset == endOffset) {
                     retVal = "${coord:latest(" + startOffset + ")}";
                 }
@@ -1148,11 +1175,11 @@ public class CoordELFunctions {
                 }
             }
             else {
                eval.setVariable("is_resolved", Boolean.TRUE);
                eval.setVariable(CoordELConstants.IS_RESOLVED, Boolean.TRUE);
             }
         }
         else {// No feasible nominal time
            eval.setVariable("is_resolved", Boolean.FALSE);
            eval.setVariable(CoordELConstants.IS_RESOLVED, Boolean.FALSE);
         }
         return retVal;
     }
diff --git a/core/src/main/java/org/apache/oozie/coord/CoordUtils.java b/core/src/main/java/org/apache/oozie/coord/CoordUtils.java
index 94c697406..82f9bede0 100644
-- a/core/src/main/java/org/apache/oozie/coord/CoordUtils.java
++ b/core/src/main/java/org/apache/oozie/coord/CoordUtils.java
@@ -38,6 +38,8 @@ import org.apache.oozie.XException;
 import org.apache.oozie.client.OozieClient;
 import org.apache.oozie.client.rest.RestConstants;
 import org.apache.oozie.command.CommandException;
import org.apache.oozie.coord.input.logic.CoordInputLogicEvaluator;
import org.apache.oozie.coord.input.logic.InputLogicParser;
 import org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor;
 import org.apache.oozie.executor.jpa.CoordJobGetActionForNominalTimeJPAExecutor;
 import org.apache.oozie.executor.jpa.JPAExecutorException;
@@ -51,7 +53,9 @@ import org.apache.oozie.util.DateUtils;
 import org.apache.oozie.util.Pair;
 import org.apache.oozie.util.ParamChecker;
 import org.apache.oozie.util.XLog;
import org.apache.oozie.util.XmlUtils;
 import org.jdom.Element;
import org.jdom.JDOMException;
 
 import com.google.common.annotations.VisibleForTesting;
 
@@ -414,4 +418,22 @@ public class CoordUtils {
         }
         return params;
     }

    public static boolean isInputLogicSpecified(String actionXml) throws JDOMException {
        return isInputLogicSpecified(XmlUtils.parseXml(actionXml));
    }

    public static boolean isInputLogicSpecified(Element eAction) throws JDOMException {
        return eAction.getChild(CoordInputLogicEvaluator.INPUT_LOGIC, eAction.getNamespace()) != null;
    }

    public static String getInputLogic(String actionXml) throws JDOMException {
        return getInputLogic(XmlUtils.parseXml(actionXml));
    }

    public static String getInputLogic(Element actionXml) throws JDOMException {
        return new InputLogicParser().parse(actionXml.getChild(CoordInputLogicEvaluator.INPUT_LOGIC,
                actionXml.getNamespace()));
    }

 }
diff --git a/core/src/main/java/org/apache/oozie/coord/SyncCoordAction.java b/core/src/main/java/org/apache/oozie/coord/SyncCoordAction.java
index 44258eb5b..5f6d7a843 100644
-- a/core/src/main/java/org/apache/oozie/coord/SyncCoordAction.java
++ b/core/src/main/java/org/apache/oozie/coord/SyncCoordAction.java
@@ -20,6 +20,7 @@ package org.apache.oozie.coord;
 
 import java.util.Date;
 import java.util.TimeZone;
import org.apache.oozie.coord.input.dependency.CoordInputDependency;
 
 /**
  * This class represents a Coordinator action.
@@ -34,6 +35,10 @@ public class SyncCoordAction {
     private TimeUnit timeUnit;
     private TimeUnit endOfDuration; // End of Month or End of Days
 
    private CoordInputDependency pullDependencies;
    private CoordInputDependency pushDependencies;


     public String getActionId() {
         return this.actionId;
     }
@@ -110,4 +115,21 @@ public class SyncCoordAction {
         this.endOfDuration = endOfDuration;
     }
 
    public CoordInputDependency getPullDependencies() {
        return pullDependencies;
    }

    public void setPullDependencies(CoordInputDependency pullDependencies) {
        this.pullDependencies = pullDependencies;
    }

    public CoordInputDependency getPushDependencies() {
        return pushDependencies;
    }

    public void setPushDependencies(CoordInputDependency pushDependencies) {
        this.pushDependencies = pushDependencies;
    }


 }
diff --git a/core/src/main/java/org/apache/oozie/coord/input/dependency/AbstractCoordInputDependency.java b/core/src/main/java/org/apache/oozie/coord/input/dependency/AbstractCoordInputDependency.java
new file mode 100644
index 000000000..0da60ec70
-- /dev/null
++ b/core/src/main/java/org/apache/oozie/coord/input/dependency/AbstractCoordInputDependency.java
@@ -0,0 +1,315 @@
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Writable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordCommandUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELFunctions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name><operator>.</operator><name>CoordInputLogicEvaluatorUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>ActionDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>WritableUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>JDOMException</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractCoordInputDependency</name> <super_list><implements>implements <super><name>Writable</name></super>, <super><name>CoordInputDependency</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>isDependencyMet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/*
     * Transient variables only used for processing, not stored in DB.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>missingDependenciesSet</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>availableDependenciesSet</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dependencyMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AbstractCoordInputDependency</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>


    <constructor><specifier>public</specifier> <name>AbstractCoordInputDependency</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dependencyMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dependencyMap</name></name> <operator>=</operator> <name>dependencyMap</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>generateDependencies</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addInputInstanceList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>inputEventName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></type> <name>inputInstanceList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dependencyMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>inputEventName</name></expr></argument>, <argument><expr><name>inputInstanceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getDependencyMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>dependencyMap</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDependencyMap</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dependencyMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dependencyMap</name></name> <operator>=</operator> <name>dependencyMap</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addToAvailableDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>CoordInputInstance</name></type> <name>coordInputInstance</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>setAvailability</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>availableSet</name> <init>= <expr><call><name><name>availableDependenciesSet</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>availableSet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>availableSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>availableDependenciesSet</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>availableSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>availableSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeFromMissingDependencies</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>coordInputInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeFromMissingDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>CoordInputInstance</name></type> <name>coordInputInstance</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>setAvailability</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>missingSet</name> <init>= <expr><call><name><name>missingDependenciesSet</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>missingSet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>missingSet</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>missingSet</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>missingDependenciesSet</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addToMissingDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>CoordInputInstance</name></type> <name>coordInputInstance</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>availableSet</name> <init>= <expr><call><name><name>missingDependenciesSet</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>availableSet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>availableSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>availableSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>missingDependenciesSet</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>availableSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>generateDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>missingDependenciesSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>availableDependenciesSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keySets</name> <init>= <expr><call><name><name>dependencyMap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>key</name> <range>: <expr><name>keySets</name></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>CoordInputInstance</name></type> <name>coordInputInstance</name> <range>: <expr><call><name><name>dependencyMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>coordInputInstance</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>addToAvailableDependencies</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>coordInputInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>addToMissingDependencies</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>coordInputInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt></block_content></block></for>
            </block_content>}</block></for>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAvailableDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>availableDependenciesSet</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>availableDependenciesSet</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMissingDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>dependencies</name> <range>: <expr><call><name><name>missingDependenciesSet</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addToAvailableDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>availableSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>dependencyMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dependencyMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>available</name> <range>: <expr><call><name><name>availableSet</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>CoordInputInstance</name></type> <name>coordInstance</name> <init>= <expr><operator>new</operator> <call><name>CoordInputInstance</name><argument_list>(<argument><expr><name>available</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>coordInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addToAvailableDependencies</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>coordInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMissingDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>missingDependenciesSet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dependenciesList</name> <range>: <expr><call><name><name>missingDependenciesSet</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>dependencies</name> <range>: <expr><name>dependenciesList</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMissingDependenciesAsList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>missingDependencies</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dependenciesList</name> <range>: <expr><call><name><name>missingDependenciesSet</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>missingDependencies</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>dependenciesList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>missingDependencies</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAvailableDependenciesAsList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>availableDependencies</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dependenciesList</name> <range>: <expr><call><name><name>availableDependenciesSet</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>availableDependencies</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>dependenciesList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>
        <return>return <expr><name>availableDependencies</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>serialize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>CoordInputDependencyFactory</name><operator>.</operator><name>getMagicNumber</name></name><argument_list>()</argument_list></call>
                <operator>+</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>WritableUtils</name><operator>.</operator><name>toByteArray</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>CoordInputDependencyFactory</name><operator>.</operator><name>CHAR_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getListAsString</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dataSets</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>dependencies</name> <range>: <expr><name>dataSets</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDependencyMet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isDependencyMeet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDependencyMet</name></name> <operator>=</operator> <name>isDependencyMeet</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDependencyMet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>missingDependenciesSet</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>isDependencyMet</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isUnResolvedDependencyMet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addToAvailableDependencies</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>availableList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dependenciesList</name> <range>: <expr><call><name><name>dependencyMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>CoordInputInstance</name></type> <name>coordInputInstance</name> <range>: <expr><call><name><name>dependenciesList</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>availableList</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>addToAvailableDependencies</name><argument_list>(<argument><expr><call><name><name>dependenciesList</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>coordInputInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ActionDependency</name></type> <name>checkPushMissingDependencies</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>registerForNotification</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CommandException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument>,
            <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>status</name> <init>= <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorUtil</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>checkPushDependencies</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>getPushInputDependencies</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDependencyMet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>ActionDependency</name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getPushInputDependencies</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMissingDependenciesAsList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>coordAction</name>
                <operator>.</operator><name>getPushInputDependencies</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAvailableDependenciesAsList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkPullMissingDependencies</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>,
            <parameter><decl><type><name>StringBuilder</name></type> <name>existList</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>nonExistList</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>status</name> <init>= <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorUtil</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>checkPullMissingDependencies</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDependencyMet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>status</name></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isChangeInDependency</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>nonExistList</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>missingDependencies</name></decl></parameter>,
            <parameter><decl><type><name>StringBuilder</name></type> <name>nonResolvedList</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>!</operator><call><name><name>missingDependencies</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getMissingDependencies</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>checkUnresolved</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>, <parameter><decl><type><name>Element</name></type> <name>eAction</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>actualTimeStr</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"action-actual-time"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>inputList</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"input-events"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>actualTime</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>actualTimeStr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>actualTime</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>actualTime</name> <operator>=</operator> <call><name><name>DateUtils</name><operator>.</operator><name>parseDateOozieTZ</name></name><argument_list>(<argument><expr><name>actualTimeStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>inputList</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>eDataEvents</name> <init>= <expr><call><name><name>inputList</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><literal type="string">"data-in"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Element</name></type> <name>dEvent</name> <range>: <expr><name>eDataEvents</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INSTANCES_TAG</name></name></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>unResolvedInstance</name> <init>= <expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INSTANCES_TAG</name></name></expr></argument>,
                    <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTextTrim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>dEvent</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>addUnResolvedList</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>unResolvedInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorUtil</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>checkUnResolved</name><argument_list>(<argument><expr><name>actualTime</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>WritableUtils</name><operator>.</operator><name>writeStringAsBytes</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><name>INTERNAL_VERSION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><name>isDependencyMet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WritableUtils</name><operator>.</operator><name>writeMapWithList</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>dependencyMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>WritableUtils</name><operator>.</operator><name>readBytesAsString</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDependencyMet</name></name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dependencyMap</name> <operator>=</operator> <call><name><name>WritableUtils</name><operator>.</operator><name>readMapWithList</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>CoordInputInstance</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>generateDependencies</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDataSetResolved</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>getAvailableDependencies</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call> <operator>==</operator><literal type="null">null</literal><operator>||</operator> <call><name>getDependencyMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getAvailableDependencies</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>getDependencyMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputDependency</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputDependency</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..cf0edd0cb</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputDependency</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">172</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>ActionDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>JDOMException</name></name>;</import>

<interface><specifier>public</specifier> interface <name>CoordInputDependency</name> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INTERNAL_VERSION_ID</name> <init>= <expr><literal type="string">"V=1"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Adds the input instance list.
     *
     * @param inputEventName the input event name
     * @param inputInstanceList the input instance list
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>addInputInstanceList</name><argument_list>(<argument><expr><name>String</name> <name>inputEventName</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name> <name>inputInstanceList</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Gets the missing dependencies.
     *
     * @return the missing dependencies
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getMissingDependencies</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Checks if dependencies are meet.
     *
     * @return true, if dependencies are meet
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isDependencyMet</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Checks if is unresolved dependencies met.
     *
     * @return true, if unresolved dependencies are met
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isUnResolvedDependencyMet</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Sets the dependency meet.
     *
     * @param isMissingDependenciesMet the new dependency met
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>setDependencyMet</name><argument_list>(<argument><expr><name>boolean</name> <name>isMissingDependenciesMet</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Serialize.
     *
     * @return the string
     * @throws IOException Signals that an I/O exception has occurred.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>serialize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Gets the missing dependencies as list.
     *
     * @return the missing dependencies as list
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMissingDependenciesAsList</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Gets the available dependencies as list.
     *
     * @return the available dependencies as list
     */</comment>
    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAvailableDependenciesAsList</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Sets the missing dependencies.
     *
     * @param missingDependencies the new missing dependencies
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>setMissingDependencies</name><argument_list>(<argument><expr><name>String</name> <name>missingDependencies</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Adds the un resolved list.
     *
     * @param name the name
     * @param tmpUnresolved the tmp unresolved
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>addUnResolvedList</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name>String</name> <name>tmpUnresolved</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Gets the available dependencies.
     *
     * @param dataSet the data set
     * @return the available dependencies
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAvailableDependencies</name><argument_list>(<argument><expr><name>String</name> <name>dataSet</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Adds the to available dependencies.
     *
     * @param availDepList the avail dep list
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>addToAvailableDependencies</name><argument_list>(<argument><expr><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>availDepList</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Check push missing dependencies.
     *
     * @param coordAction the coord action
     * @param registerForNotification the register for notification
     * @return the action dependency
     * @throws CommandException the command exception
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws JDOMException the JDOM exception
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ActionDependency</name></type> <name>checkPushMissingDependencies</name><argument_list>(<argument><expr><name>CoordinatorActionBean</name> <name>coordAction</name></expr></argument>,
            <argument><expr><name>boolean</name> <name>registerForNotification</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>CommandException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JDOMException</name></expr></argument></throws></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Check pull missing dependencies.
     *
     * @param coordAction the coord action
     * @param existList the exist list
     * @param nonExistList the non exist list
     * @return true, if successful
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws JDOMException the JDOM exception
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>checkPullMissingDependencies</name><argument_list>(<argument><expr><name>CoordinatorActionBean</name> <name>coordAction</name></expr></argument>, <argument><expr><name>StringBuilder</name> <name>existList</name></expr></argument>,
            <argument><expr><name>StringBuilder</name> <name>nonExistList</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JDOMException</name></expr></argument></throws></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Checks if is change in dependency.
     *
     * @param nonExistList the non exist list
     * @param missingDependencies the missing dependencies
     * @param nonResolvedList the non resolved list
     * @param status the status
     * @return true, if is change in dependency
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isChangeInDependency</name><argument_list>(<argument><expr><name>StringBuilder</name> <name>nonExistList</name></expr></argument>, <argument><expr><name>String</name> <name>missingDependencies</name></expr></argument>,
            <argument><expr><name>StringBuilder</name> <name>nonResolvedList</name></expr></argument>, <argument><expr><name>boolean</name> <name>status</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Check unresolved.
     *
     * @param coordAction the coord action
     * @param eAction
     * @return true, if successful
     * @throws Exception the exception
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>checkUnresolved</name><argument_list>(<argument><expr><name>CoordinatorActionBean</name> <name>coordAction</name></expr></argument>, <argument><expr><name>Element</name> <name>eAction</name></expr></argument>)</argument_list>
            <throws>throws <argument><expr><name>Exception</name></expr></argument></throws></decl>;</decl_stmt>

}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputDependencyFactory</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputDependencyFactory</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..ad50890c0</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputDependencyFactory</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">170</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>StringBlob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>WritableUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XLog</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordInputDependencyFactory</name> <block>{

    <comment type="line">// We need to choose magic number which is not allowed for file/dir.</comment>
    <comment type="line">// Magic number is ::$</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>MAGIC_NUMBER</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><literal type="number">58</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">36</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHAR_ENCODING</name> <init>= <expr><literal type="string">"ISO-8859-1"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>XLog</name></type> <name>LOG</name> <init>= <expr><call><name><name>XLog</name><operator>.</operator><name>getLog</name></name><argument_list>(<argument><expr><name><name>CoordInputDependencyFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create the pull dependencies.
     *
     * @param isInputLogicSpecified to check if input logic is enable
     * @return the pull dependencies
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CoordInputDependency</name></type> <name>createPullInputDependencies</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isInputLogicSpecified</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInputLogicSpecified</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordOldInputDependency</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordPullInputDependency</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create the push dependencies.
     *
     * @param isInputLogicSpecified to check if input logic is enable
     * @return the push dependencies
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CoordInputDependency</name></type> <name>createPushInputDependencies</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isInputLogicSpecified</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInputLogicSpecified</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordOldInputDependency</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordPushInputDependency</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the pull input dependencies.
     *
     * @param missingDependencies the missing dependencies
     * @return the pull input dependencies
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CoordInputDependency</name></type> <name>getPullInputDependencies</name><parameter_list>(<parameter><decl><type><name>StringBlob</name></type> <name>missingDependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>missingDependencies</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordPullInputDependency</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getPullInputDependencies</name><argument_list>(<argument><expr><call><name><name>missingDependencies</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CoordInputDependency</name></type> <name>getPullInputDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordPullInputDependency</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasInputLogic</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordOldInputDependency</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <try>try <block>{<block_content>
                <return>return <expr><call><name><name>WritableUtils</name><operator>.</operator><name>fromByteArray</name></name><argument_list>(<argument><expr><call><name>getDependenciesWithoutMagicNumber</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name>CHAR_ENCODING</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>CoordPullInputDependency</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the push input dependencies.
     *
     * @param pushMissingDependencies the push missing dependencies
     * @return the push input dependencies
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CoordInputDependency</name></type> <name>getPushInputDependencies</name><parameter_list>(<parameter><decl><type><name>StringBlob</name></type> <name>pushMissingDependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>pushMissingDependencies</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordPushInputDependency</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getPushInputDependencies</name><argument_list>(<argument><expr><call><name><name>pushMissingDependencies</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CoordInputDependency</name></type> <name>getPushInputDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>


        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordPushInputDependency</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasInputLogic</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordOldInputDependency</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>

        <else>else <block>{<block_content>
            <try>try <block>{<block_content>
                <return>return <expr><call><name><name>WritableUtils</name><operator>.</operator><name>fromByteArray</name></name><argument_list>(<argument><expr><call><name>getDependenciesWithoutMagicNumber</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name>CHAR_ENCODING</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>CoordPushInputDependency</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if input logic is enable.
     *
     * @param dependencies the dependencies
     * @return true, if is input logic enable
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasInputLogic</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>dependencies</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name>getMagicNumber</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the magic number.
     *
     * @return the magic number
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getMagicNumber</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>MAGIC_NUMBER</name></expr></argument>, <argument><expr><name>CHAR_ENCODING</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the dependencies without magic number.
     *
     * @param dependencies the dependencies
     * @return the dependencies without magic number
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDependenciesWithoutMagicNumber</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>dependencies</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name>getMagicNumber</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputInstance</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputInstance</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..945fe4445</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordInputInstance</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">83</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Writable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>WritableUtils</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordInputInstance</name> <super_list><implements>implements <super><name>Writable</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>inputDataInstance</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>availability</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CoordInputInstance</name><parameter_list>()</parameter_list> <block>{<block_content>

    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CoordInputInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>inputDataInstance</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>availability</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inputDataInstance</name></name> <operator>=</operator> <name>inputDataInstance</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>availability</name></name> <operator>=</operator> <name>availability</name></expr>;</expr_stmt>

    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Gets the input data instance.
     *
     * @return the input data instance
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getInputDataInstance</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>inputDataInstance</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if is available.
     *
     * @return true, if is available
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAvailable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>availability</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAvailability</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>availability</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>availability</name></name> <operator>=</operator> <name>availability</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getInputDataInstance</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" : "</literal> <operator>+</operator> <call><name>isAvailable</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>WritableUtils</name><operator>.</operator><name>writeStr</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>inputDataInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><name>availability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>inputDataInstance</name> <operator>=</operator> <call><name><name>WritableUtils</name><operator>.</operator><name>readStr</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>availability</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordOldInputDependency</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordOldInputDependency</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..9fc348ff5</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordOldInputDependency</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">309</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URISyntaxException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessControlException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>OozieClient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordCommandUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELEvaluator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELFunctions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>ActionDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>DependencyChecker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>URIHandlerException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>ELEvaluator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>ParamChecker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XLog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XmlUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>JDOMException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Old approach where dependencies are stored as String.
 *
 */</comment>
<class><specifier>public</specifier> class <name>CoordOldInputDependency</name> <super_list><implements>implements <super><name>CoordInputDependency</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>XLog</name></type> <name>log</name> <init>= <expr><call><name><name>XLog</name><operator>.</operator><name>getLog</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>String</name></type> <name>missingDependencies</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CoordOldInputDependency</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>missingDependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>missingDependencies</name></name> <operator>=</operator> <name>missingDependencies</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CoordOldInputDependency</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addInputInstanceList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>inputEventName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></type> <name>inputInstanceList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>appendToDependencies</name><argument_list>(<argument><expr><name>inputInstanceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getMissingDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>missingDependencies</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isDependencyMet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isUnResolvedDependencyMet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setDependencyMet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isDependencyMeet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isDependencyMeet</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>missingDependencies</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>serialize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><name>missingDependencies</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMissingDependenciesAsList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>DependencyChecker</name><operator>.</operator><name>dependenciesAsArray</name></name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAvailableDependenciesAsList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setMissingDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>missingDependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>missingDependencies</name></name> <operator>=</operator> <name>missingDependencies</name></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>appendToDependencies</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></type> <name>inputInstanceList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isFirst</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>CoordInputInstance</name></type> <name>coordInputInstance</name> <range>: <expr><name>inputInstanceList</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isFirst</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isFirst</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>missingDependencies</name> <operator>=</operator> <call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addUnResolvedList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>unresolvedDependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>RESOLVED_UNRESOLVED_SEPARATOR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>unresolvedDependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>missingDependencies</name> <operator>=</operator> <call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAvailableDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addToAvailableDependencies</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>availableList</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>missingDependenciesList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>DependencyChecker</name>
                <operator>.</operator><name>dependenciesAsArray</name></name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>missingDependenciesList</name><operator>.</operator><name>removeAll</name></name><argument_list>(<argument><expr><name>availableList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>missingDependencies</name> <operator>=</operator> <call><name><name>DependencyChecker</name><operator>.</operator><name>dependenciesAsString</name></name><argument_list>(<argument><expr><name>missingDependenciesList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>checkPullMissingDependencies</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>existList</name></decl></parameter>,
            <parameter><decl><type><name>StringBuilder</name></type> <name>nonExistList</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>actionConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>eAction</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getActionXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Element</name></type> <name>inputList</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"input-events"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>inputList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>nonExistList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>checkListOfPaths</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>existList</name></expr></argument>, <argument><expr><name>nonExistList</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>nonExistList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ActionDependency</name></type> <name>checkPushMissingDependencies</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>registerForNotification</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CommandException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>DependencyChecker</name><operator>.</operator><name>checkForAvailability</name></name><argument_list>(<argument><expr><call><name>getMissingDependenciesAsList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(
                <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><name>registerForNotification</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkListOfPaths</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>existList</name></decl></parameter>,
            <parameter><decl><type><name>StringBuilder</name></type> <name>nonExistList</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>uriList</name> <init>= <expr><call><name><name>nonExistList</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>uriList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"["</literal> <operator>+</operator> <call><name><name>coordAction</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"]::ActionInputCheck:: In checkListOfPaths: "</literal> <operator>+</operator> <name><name>uriList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
                    <operator>+</operator> <literal type="string">" is Missing."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>nonExistList</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>nonExistList</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allExists</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>existSeparator</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>nonExistSeparator</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>user</name> <init>= <expr><call><name><name>ParamChecker</name><operator>.</operator><name>notEmpty</name></name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>uriList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>allExists</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>allExists</name> <operator>=</operator> <call><name>pathExists</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name><name>uriList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"["</literal> <operator>+</operator> <call><name><name>coordAction</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"]::ActionInputCheck:: File:"</literal> <operator>+</operator> <name><name>uriList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">", Exists? :"</literal>
                        <operator>+</operator> <name>allExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>allExists</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>existList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>existSeparator</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>uriList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>existSeparator</name> <operator>=</operator> <name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>nonExistList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>nonExistSeparator</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>uriList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nonExistSeparator</name> <operator>=</operator> <name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>allExists</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>pathExists</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sPath</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>actionConf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>user</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"checking for the file "</literal> <operator>+</operator> <name>sPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>CoordCommandUtils</name><operator>.</operator><name>pathExists</name></name><argument_list>(<argument><expr><name>sPath</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>URIHandlerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>coordAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setErrorCode</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setErrorMessage</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>AccessControlException</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>(</operator><name>AccessControlException</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>URISyntaxException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>coordAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setErrorCode</name></name><argument_list>(<argument><expr><call><name><name>ErrorCode</name><operator>.</operator><name>E0906</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setErrorMessage</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isChangeInDependency</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>nonExistList</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>missingDependencies</name></decl></parameter>,
            <parameter><decl><type><name>StringBuilder</name></type> <name>nonResolvedList</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name><name>nonExistList</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>missingDependencies</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setMissingDependencies</name><argument_list>(<argument><expr><call><name><name>nonExistList</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>checkUnresolved</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>, <parameter><decl><type><name>Element</name></type> <name>eAction</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Date</name></type> <name>nominalTime</name> <init>= <expr><call><name><name>DateUtils</name><operator>.</operator><name>parseDateOozieTZ</name></name><argument_list>(<argument><expr><call><name><name>eAction</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"action-nominal-time"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>actualTimeStr</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"action-actual-time"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>inputList</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"input-events"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>eDataEvents</name> <init>= <expr><call><name><name>inputList</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><literal type="string">"data-in"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>actionConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>actualTime</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>actualTimeStr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>actualTime</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>actualTime</name> <operator>=</operator> <call><name><name>DateUtils</name><operator>.</operator><name>parseDateOozieTZ</name></name><argument_list>(<argument><expr><name>actualTimeStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <for>for <control>(<init><decl><type><name>Element</name></type> <name>dEvent</name> <range>: <expr><name>eDataEvents</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INSTANCES_TAG</name></name></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>ELEvaluator</name></type> <name>eval</name> <init>= <expr><call><name><name>CoordELEvaluator</name><operator>.</operator><name>createLazyEvaluator</name></name><argument_list>(<argument><expr><name>actualTime</name></expr></argument>, <argument><expr><name>nominalTime</name></expr></argument>, <argument><expr><name>dEvent</name></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>unResolvedInstance</name> <init>= <expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INSTANCES_TAG</name></name></expr></argument>,
                    <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTextTrim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name><name>unresolvedList</name><index>[]</index></name> <init>= <expr><call><name><name>unResolvedInstance</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>resolvedTmp</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>unresolvedList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>returnData</name> <init>= <expr><call><name><name>CoordELFunctions</name><operator>.</operator><name>evalAndWrap</name></name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>unresolvedList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Boolean</name></type> <name>isResolved</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>eval</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><name><name>CoordELConstants</name><operator>.</operator><name>IS_RESOLVED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>isResolved</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"["</literal> <operator>+</operator> <call><name><name>coordAction</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"] :: Cannot resolve : "</literal> <operator>+</operator> <name>returnData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>resolvedTmp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>resolvedTmp</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>resolvedTmp</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>eval</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><name><name>CoordELConstants</name><operator>.</operator><name>RESOLVED_PATH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><call><name><name>resolvedTmp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"uris"</literal></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>resolvedTmp</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(
                            <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"uris"</literal></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTextTrim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dEvent</name><operator>.</operator><name>removeChild</name></name><argument_list>(<argument><expr><literal type="string">"uris"</literal></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Element</name></type> <name>uriInstance</name> <init>= <expr><operator>new</operator> <call><name>Element</name><argument_list>(<argument><expr><literal type="string">"uris"</literal></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>uriInstance</name><operator>.</operator><name>addContent</name></name><argument_list>(<argument><expr><call><name><name>resolvedTmp</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dEvent</name><operator>.</operator><name>getContent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>uriInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>dEvent</name><operator>.</operator><name>removeChild</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>UNRESOLVED_INSTANCES_TAG</name></name></expr></argument>, <argument><expr><call><name><name>dEvent</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordPullInputDependency</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordPullInputDependency</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..f20dcae0f</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordPullInputDependency</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">151</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordCommandUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELFunctions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>WritableUtils</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordPullInputDependency</name> <super_list><extends>extends <super><name>AbstractCoordInputDependency</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoordUnResolvedInputDependency</name></argument>&gt;</argument_list></name></type> <name>unResolvedList</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoordUnResolvedInputDependency</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CoordPullInputDependency</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addResolvedList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>unResolvedList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addResolvedList</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CoordUnResolvedInputDependency</name></type> <name>getUnResolvedDependency</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>unResolvedList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isUnResolvedDependencyMet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>CoordUnResolvedInputDependency</name></type> <name>coordUnResolvedDependency</name> <range>: <expr><call><name><name>unResolvedList</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>coordUnResolvedDependency</name><operator>.</operator><name>isResolved</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addUnResolvedList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dependency</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>unResolvedList</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CoordUnResolvedInputDependency</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>dependency</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMissingDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>bf</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>super</name><operator>.</operator><name>getMissingDependencies</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>unresolvedMissingDependencies</name> <init>= <expr><call><name>getUnresolvedMissingDependencies</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>unresolvedMissingDependencies</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>bf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordCommandUtils</name><operator>.</operator><name>RESOLVED_UNRESOLVED_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>unresolvedMissingDependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>bf</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUnresolvedMissingDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>bf</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>unResolvedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>CoordUnResolvedInputDependency</name></type> <name>coordUnResolvedDependency</name> <range>: <expr><call><name><name>unResolvedList</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>coordUnResolvedDependency</name><operator>.</operator><name>isResolved</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>unresolvedList</name> <init>= <expr><call><name><name>coordUnResolvedDependency</name><operator>.</operator><name>getUnResolvedList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>bf</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>unresolvedList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>bf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>bf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>unresolvedList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>bf</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>generateDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>generateDependencies</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>ObjectOutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeObject</name></name><argument_list>(<argument><expr><name>unResolvedList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name>ObjectInputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>unResolvedList</name> <operator>=</operator> <operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CoordUnResolvedInputDependency</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>readObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>generateDependencies</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDependencyMet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>isResolvedDependencyMeet</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isUnResolvedDependencyMet</name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isResolvedDependencyMeet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>isDependencyMet</name></name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WritableUtils</name><operator>.</operator><name>writeMap</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>unResolvedList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unResolvedList</name> <operator>=</operator> <call><name><name>WritableUtils</name><operator>.</operator><name>readMap</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>CoordUnResolvedInputDependency</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setMissingDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>join</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// We don't have to set this for input logic. Dependency map will have computed missing dependencies</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAvailableDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>availableList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>availableList</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>super</name><operator>.</operator><name>getAvailableDependencies</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getUnResolvedDependency</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>availableList</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getUnResolvedDependency</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getResolvedList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>availableList</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDataSetResolved</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name><name>unResolvedList</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <return>return <expr><call><name><name>unResolvedList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isResolved</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>isDataSetResolved</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordPushInputDependency</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordPushInputDependency</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..e19e799c8</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordPushInputDependency</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">49</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordPushInputDependency</name> <super_list><extends>extends <super><name>AbstractCoordInputDependency</name></super></extends></super_list> <block>{

    <constructor><specifier>public</specifier> <name>CoordPushInputDependency</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setMissingDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>join</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addUnResolvedList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tmpUnresolved</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordUnResolvedInputDependency</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordUnResolvedInputDependency</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..096b58882</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>CoordUnResolvedInputDependency</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">92</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Writable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELFunctions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>WritableUtils</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordUnResolvedInputDependency</name> <super_list><implements>implements <super><name>Writable</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isResolved</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dependency</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>resolvedList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CoordUnResolvedInputDependency</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dependency</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dependency</name></name> <operator>=</operator> <name>dependency</name></expr>;</expr_stmt>

    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CoordUnResolvedInputDependency</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isResolved</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>isResolved</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setResolved</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isResolved</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isResolved</name></name> <operator>=</operator> <name>isResolved</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>dependency</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getResolvedList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>resolvedList</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setResolvedList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>resolvedList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resolvedList</name></name> <operator>=</operator> <name>resolvedList</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addResolvedList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>resolvedList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>resolvedList</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>resolvedList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUnResolvedList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isResolved</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>dependency</name></expr></argument>, <argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><name>isResolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WritableUtils</name><operator>.</operator><name>writeStringList</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WritableUtils</name><operator>.</operator><name>writeStringList</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>resolvedList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

        <expr_stmt><expr><name>isResolved</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dependency</name> <operator>=</operator> <call><name><name>WritableUtils</name><operator>.</operator><name>readStringList</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resolvedList</name> <operator>=</operator> <call><name><name>WritableUtils</name><operator>.</operator><name>readStringList</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicBuilder</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicBuilder</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..2326cd7c7</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicBuilder</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">167</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordInputLogicBuilder</name> <block>{

    <decl_stmt><decl><type><name>StringBuffer</name></type> <name>bf</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CoordInputLogicEvaluator</name></type> <name>coordInputlogicEvaluator</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The Dependency builder. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CoordInputDependencyBuilder</name></type> <name>dependencyBuilder</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CoordInputLogicBuilder</name><parameter_list>(<parameter><decl><type><name>CoordInputLogicEvaluator</name></type> <name>coordInputlogicEvaluator</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coordInputlogicEvaluator</name></name> <operator>=</operator> <name>coordInputlogicEvaluator</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dependencyBuilder</name> <operator>=</operator> <operator>new</operator> <call><name>CoordInputDependencyBuilder</name><argument_list>(<argument><expr><name>coordInputlogicEvaluator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Input function of input-logic
     *
     * @param inputDataset the dataset
     * @return the string
     */</comment>
    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>input</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>inputDataset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>coordInputlogicEvaluator</name><operator>.</operator><name>evalInput</name></name><argument_list>(<argument><expr><name>inputDataset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Combine function of dataset
     *
     * @param combineDatasets the combine
     * @return the string
     */</comment>
    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>combine</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>combineDatasets</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>coordInputlogicEvaluator</name><operator>.</operator><name>evalCombineInput</name></name><argument_list>(<argument><expr><name>combineDatasets</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The Class CoordInputDependencyBuilder.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>CoordInputDependencyBuilder</name> <block>{

        <decl_stmt><decl><type><name>CoordInputLogicEvaluator</name></type> <name>coordInputLogicEvaluator</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>CoordInputDependencyBuilder</name><parameter_list>(<parameter><decl><type><name>CoordInputLogicEvaluator</name></type> <name>coordInputLogicEvaluator</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coordInputLogicEvaluator</name></name> <operator>=</operator> <name>coordInputLogicEvaluator</name></expr>;</expr_stmt>

        </block_content>}</block></constructor>

        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minValue</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>wait</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>inputDataset</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>combineDatasets</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Construct min function
         *
         * @param minValue the min value
         * @return the coord input dependency builder
         */</comment>
        <function><type><specifier>public</specifier> <name>CoordInputDependencyBuilder</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>minValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>minValue</name></name> <operator>=</operator> <name>minValue</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Construct  wait function
         *
         * @param wait the wait
         * @return the coord input dependency builder
         */</comment>
        <function><type><specifier>public</specifier> <name>CoordInputDependencyBuilder</name></type> <name>inputWait</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wait</name></name> <operator>=</operator> <name>wait</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Construct wait function
         *
         * @param wait the wait
         * @return the coord input dependency builder
         */</comment>
        <function><type><specifier>public</specifier> <name>CoordInputDependencyBuilder</name></type> <name>inputWait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wait</name></name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Construct input function
         *
         * @param dataset the input
         * @return the coord input dependency builder
         */</comment>
        <function><type><specifier>public</specifier> <name>CoordInputDependencyBuilder</name></type> <name>input</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataset</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inputDataset</name></name> <operator>=</operator> <name>dataset</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Construct complie function
         *
         * @param combineDatasets the combine
         * @return the coord input dependency builder
         */</comment>
        <function><type><specifier>public</specifier> <name>CoordInputDependencyBuilder</name></type> <name>combine</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>combineDatasets</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>combineDatasets</name></name> <operator>=</operator> <name>combineDatasets</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Build inputlogic expression
         *
         * @return the string
         * @throws IOException Signals that an I/O exception has occurred.
         */</comment>
        <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>build</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>combineDatasets</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>coordInputLogicEvaluator</name><operator>.</operator><name>evalCombineInput</name></name><argument_list>(<argument><expr><name>combineDatasets</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>, <argument><expr><call><name>getTime</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <return>return <expr><call><name><name>coordInputLogicEvaluator</name><operator>.</operator><name>evalInput</name></name><argument_list>(<argument><expr><name>inputDataset</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>, <argument><expr><call><name>getTime</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Gets the time in min.
         *
         * @param value the value
         * @return the time in min
         * @throws IOException Signals that an I/O exception has occurred.
         */</comment>
        <function><type><specifier>private</specifier> <name>int</name></type> <name>getTime</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNumeric</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unsupported time : "</literal> <operator>+</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluator</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..c49557001</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">44</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<interface><specifier>public</specifier> interface <name>CoordInputLogicEvaluator</name> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INPUT_LOGIC</name> <init>= <expr><literal type="string">"input-logic"</literal></expr></init></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Eval input.
     *
     * @param inputDataSet the input data set
     * @param min the min
     * @param wait the wait
     * @return the coord input logic evaluator result
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>evalInput</name><argument_list>(<argument><expr><name>String</name> <name>inputDataSet</name></expr></argument>, <argument><expr><name>int</name> <name>min</name></expr></argument>, <argument><expr><name>int</name> <name>wait</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Eval combine input.
     *
     * @param combineDatasets the combine datasets
     * @param min the min
     * @param wait the wait
     * @return the coord input logic evaluator result
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>evalCombineInput</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>combineDatasets</name></expr></argument>, <argument><expr><name>int</name> <name>min</name></expr></argument>, <argument><expr><name>int</name> <name>wait</name></expr></argument>)</argument_list></decl>;</decl_stmt>
}</block></interface>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseOne</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseOne</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..f54d30543</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseOne</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">324</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URISyntaxException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>MessageFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordCommandUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>AbstractCoordInputDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordInputDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordInputInstance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name><operator>.</operator><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>URIHandlerException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>LogUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XLog</name></name>;</import>

<comment type="block" format="javadoc">/**
 * PhaseOne is for all dependencies check, except unresolved. Unresolved will be checked as part of phaseTwo.
 * Phasethree is only to get dependencies from dataset, no hdfs/hcat check.
 */</comment>
<class><specifier>public</specifier> class <name>CoordInputLogicEvaluatorPhaseOne</name> <super_list><implements>implements <super><name>CoordInputLogicEvaluator</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>protected</specifier> <name>AbstractCoordInputDependency</name></type> <name>coordInputDependency</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dependencyMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>CoordinatorActionBean</name></type> <name>coordAction</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>XLog</name></type> <name>log</name> <init>= <expr><call><name><name>XLog</name><operator>.</operator><name>getLog</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorPhaseOne</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorPhaseOne</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>, <parameter><decl><type><name>CoordInputDependency</name></type> <name>coordInputDependency</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coordAction</name></name> <operator>=</operator> <name>coordAction</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coordInputDependency</name></name> <operator>=</operator> <operator>(</operator><name>AbstractCoordInputDependency</name><operator>)</operator> <name>coordInputDependency</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dependencyMap</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AbstractCoordInputDependency</name><operator>)</operator> <name>coordInputDependency</name><operator>)</operator><operator>.</operator><call><name>getDependencyMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>LogUtils</name><operator>.</operator><name>setLogInfo</name></name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>evalInput</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>input</name><argument_list>(<argument><expr><name>coordInputDependency</name></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Evaluate input function with min and wait
     *
     * @param coordInputDependency
     * @param dataSet
     * @param min
     * @param wait
     * @return the coord input logic evaluator result
     */</comment>
    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>input</name><parameter_list>(<parameter><decl><type><name>AbstractCoordInputDependency</name></type> <name>coordInputDependency</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>availableList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>retData</name> <init>= <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getAvailableDependencies</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal>
                    <operator>||</operator> <call><name><name>coordInputDependency</name><operator>.</operator><name>getAvailableDependencies</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Data set [{0}] is unresolved set, will get resolved in phasetwo"</literal></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>retData</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>PHASE_TWO_EVALUATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <return>return <expr><call><name>getResultFromPullPush</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>retData</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allFound</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Configuration</name></type> <name>actionConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></type> <name>firstInputSetList</name> <init>= <expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>firstInputSetList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>CoordInputInstance</name></type> <name>coordInputInstance</name> <init>= <expr><call><name><name>firstInputSetList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>coordInputInstance</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>pathExists</name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>availableList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>coordInputDependency</name><operator>.</operator><name>addToAvailableDependencies</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>coordInputInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"[{0} is not found "</literal></expr></argument>, <argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>allFound</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        <comment type="line">// Stop looking for dependencies, if min is not specified.</comment>
                        <if_stmt><if>if <condition>(<expr><name>min</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>availableList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>ErrorCode</name><operator>.</operator><name>E1028</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Error executing input function "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>retData</name> <init>= <expr><call><name>getEvalResult</name><argument_list>(<argument><expr><name>allFound</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>availableList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Resolved status of Data set [{0}] with min [{1}] and wait [{2}]  =  [{3}]"</literal></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>,
                <argument><expr><call><name><name>retData</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>retData</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInputWaitElapsed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeInMin</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>timeInMin</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>waitingTime</name> <init>= <expr><operator>(</operator><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getNominalTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>coordAction</name>
                <operator>.</operator><name>getCreatedTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>timeInMin</name> <operator>&lt;=</operator> <name>waitingTime</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>evalCombineInput</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>inputSets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>combine</name><argument_list>(<argument><expr><name>coordInputDependency</name></expr></argument>, <argument><expr><name>inputSets</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>combine</name><parameter_list>(<parameter><decl><type><name>AbstractCoordInputDependency</name></type> <name>coordInputDependency</name></decl></parameter>,
            <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>inputSets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>availableList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>TIMED_WAITING</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>

            <decl_stmt><decl><type><name>Configuration</name></type> <name>jobConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>firstInputSet</name> <init>= <expr><name><name>inputSets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></type> <name>firstInputSetList</name> <init>= <expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>firstInputSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>firstInputSetList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>CoordInputInstance</name></type> <name>coordInputInstance</name> <init>= <expr><call><name><name>firstInputSetList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>coordInputInstance</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pathExists</name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>jobConf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"{0} is not found. Looking from other datasets."</literal></expr></argument>,
                                <argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>inputSets</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><call><name>pathExists</name><argument_list>(<argument><expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>getInputDataInstance</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>jobConf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>coordInputDependency</name><operator>.</operator><name>addToAvailableDependencies</name></name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>coordInputDependency</name>
                                            <operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>availableList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>getInputDataInstance</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"{0} is found."</literal></expr></argument>,
                                            <argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></if>
                            <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name><name>coordInputDependency</name><operator>.</operator><name>addToAvailableDependencies</name></name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>coordInputDependency</name>
                                        <operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>availableList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>getInputDataInstance</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>coordInputDependency</name><operator>.</operator><name>addToAvailableDependencies</name></name><argument_list>(<argument><expr><name>firstInputSet</name></expr></argument>, <argument><expr><name>coordInputInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>availableList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>availableList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>min</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Stop looking for dependencies, if min is not specified.</comment>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>ErrorCode</name><operator>.</operator><name>E1028</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Error executing combine function "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allFound</name> <init>= <expr><call><name><name>availableList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>retData</name> <init>= <expr><call><name>getEvalResult</name><argument_list>(<argument><expr><name>allFound</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>availableList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Resolved status of Data set [{0}] with min [{1}] and wait [{2}]  =  [{3}]"</literal></expr></argument>,
                <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>inputSets</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><call><name><name>retData</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>retData</name></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Configuration</name></type> <name>getConf</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getListAsString</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dataset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>list</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>getEvalResult</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>found</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>availableList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>retData</name> <init>= <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <name>wait</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isInputWaitElapsed</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>(<argument><expr><name><name>STATUS</name><operator>.</operator><name>TIMED_WAITING</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>found</name> <operator>||</operator> <operator>(</operator><name>min</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>availableList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>min</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>retData</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>retData</name><operator>.</operator><name>setDataSets</name></name><argument_list>(<argument><expr><call><name>getListAsString</name><argument_list>(<argument><expr><name>availableList</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>min</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>retData</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>retData</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>pathExists</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sPath</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>jobConf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>URISyntaxException</name></expr></argument>,
            <argument><expr><name>URIHandlerException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>CoordCommandUtils</name><operator>.</operator><name>pathExists</name></name><argument_list>(<argument><expr><name>sPath</name></expr></argument>, <argument><expr><name>jobConf</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>getResultFromPullPush</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>pullResult</name> <init>= <expr><call><name>getEvalResult</name><argument_list>(
                <argument><expr><operator>(</operator><name>AbstractCoordInputDependency</name><operator>)</operator> <call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>pushResult</name> <init>= <expr><call><name>getEvalResult</name><argument_list>(
                <argument><expr><operator>(</operator><name>AbstractCoordInputDependency</name><operator>)</operator> <call><name><name>coordAction</name><operator>.</operator><name>getPushInputDependencies</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>appendDataSets</name></name><argument_list>(<argument><expr><call><name><name>pullResult</name><operator>.</operator><name>getDataSets</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>appendDataSets</name></name><argument_list>(<argument><expr><call><name><name>pushResult</name><operator>.</operator><name>getDataSets</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>pullResult</name><operator>.</operator><name>isWaiting</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>pushResult</name><operator>.</operator><name>isWaiting</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>STATUS</name><operator>.</operator><name>TIMED_WAITING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name><name>pullResult</name><operator>.</operator><name>isPhaseTwoEvaluation</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>pushResult</name><operator>.</operator><name>isPhaseTwoEvaluation</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>STATUS</name><operator>.</operator><name>PHASE_TWO_EVALUATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name><name>pullResult</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>pushResult</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>STATUS</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>STATUS</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets evaluator Result
     *
     * @param coordInputDependencies the coord dependencies
     * @param dataSet the data set
     * @param min the min
     * @return the coord input logic evaluator result
     */</comment>
    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>getEvalResult</name><parameter_list>(<parameter><decl><type><name>AbstractCoordInputDependency</name></type> <name>coordInputDependencies</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>coordInputDependencies</name><operator>.</operator><name>getAvailableDependencies</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>coordInputDependencies</name>
                <operator>.</operator><name>getAvailableDependencies</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>min</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>coordInputDependencies</name><operator>.</operator><name>getAvailableDependencies</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>min</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>appendDataSets</name></name><argument_list>(<argument><expr><call><name>getListAsString</name><argument_list>(<argument><expr><call><name><name>coordInputDependencies</name><operator>.</operator><name>getAvailableDependencies</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name><name>coordInputDependencies</name><operator>.</operator><name>isDataSetResolved</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>appendDataSets</name></name><argument_list>(<argument><expr><call><name>getListAsString</name><argument_list>(<argument><expr><call><name><name>coordInputDependencies</name><operator>.</operator><name>getAvailableDependencies</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseThree</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseThree</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..31cf0817c</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseThree</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">130</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URISyntaxException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>AbstractCoordInputDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordInputInstance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>URIHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>URIHandlerException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>URIHandlerService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>ELEvaluator</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordInputLogicEvaluatorPhaseThree</name> <super_list><extends>extends <super><name>CoordInputLogicEvaluatorPhaseOne</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><name>ELEvaluator</name></type> <name>eval</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorPhaseThree</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>, <parameter><decl><type><name>ELEvaluator</name></type> <name>eval</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><operator>(</operator><name>AbstractCoordInputDependency</name><operator>)</operator> <call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>eval</name></name> <operator>=</operator> <name>eval</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>evalInput</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getResultFromPullPush</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>evalCombineInput</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>inputSets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>combine</name><argument_list>(<argument><expr><name>coordInputDependency</name></expr></argument>, <argument><expr><name>inputSets</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>combine</name><parameter_list>(<parameter><decl><type><name>AbstractCoordInputDependency</name></type> <name>coordInputDependency</name></decl></parameter>,
            <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>inputSets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>availableList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>firstInputSet</name> <init>= <expr><name><name>inputSets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></type> <name>firstInputSetList</name> <init>= <expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>firstInputSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>firstInputSetList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>CoordInputInstance</name></type> <name>coordInputInstance</name> <init>= <expr><call><name><name>firstInputSetList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>coordInputInstance</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>inputSets</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>availableList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getPathWithoutDoneFlag</name><argument_list>(
                                    <argument><expr><call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>getInputDataInstance</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>inputSets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if>

                <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>availableList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getPathWithoutDoneFlag</name><argument_list>(<argument><expr><call><name><name>coordInputInstance</name><operator>.</operator><name>getInputDataInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>firstInputSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>ErrorCode</name><operator>.</operator><name>E1028</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Error executing combine function "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allFound</name> <init>= <expr><call><name><name>availableList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>coordInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getEvalResult</name><argument_list>(<argument><expr><name>allFound</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>availableList</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>pathExists</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sPath</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>actionConf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>URISyntaxException</name></expr></argument>,
            <argument><expr><name>URIHandlerException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInputWaitElapsed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeInMin</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getListAsString</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>input</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getPathWithoutDoneFlag</name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getPathWithoutDoneFlag</name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>URIHandlerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>ErrorCode</name><operator>.</operator><name>E1028</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Error finding path without done flag "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getPathWithoutDoneFlag</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sPath</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>URIHandlerException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dataSet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>sPath</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>URIHandlerService</name></type> <name>service</name> <init>= <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>URIHandlerService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>URIHandler</name></type> <name>handler</name> <init>= <expr><call><name><name>service</name><operator>.</operator><name>getURIHandler</name></name><argument_list>(<argument><expr><name>sPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>handler</name><operator>.</operator><name>getURIWithoutDoneFlag</name></name><argument_list>(<argument><expr><name>sPath</name></expr></argument>, <argument><expr><call><name><name>eval</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><literal type="string">".datain."</literal> <operator>+</operator> <name>dataSet</name> <operator>+</operator> <literal type="string">".doneFlag"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseTwo</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseTwo</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..16fc40044</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseTwo</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">144</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>MessageFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELEvaluator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELFunctions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>AbstractCoordInputDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordPullInputDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name><operator>.</operator><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name><operator>.</operator><name>DependencyChecker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>ELEvaluator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XmlUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>JDOMException</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordInputLogicEvaluatorPhaseTwo</name> <super_list><extends>extends <super><name>CoordInputLogicEvaluatorPhaseOne</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><name>Date</name></type> <name>actualTime</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorPhaseTwo</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>actualTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>actualTime</name></name> <operator>=</operator> <name>actualTime</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorPhaseTwo</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>,
            <parameter><decl><type><name>AbstractCoordInputDependency</name></type> <name>coordInputDependency</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>coordInputDependency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>evalInput</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>CoordPullInputDependency</name></type> <name>coordPullInputDependency</name> <init>= <expr><operator>(</operator><name>CoordPullInputDependency</name><operator>)</operator> <name>coordInputDependency</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ELEvaluator</name></type> <name>eval</name> <init>= <expr><call><name><name>CoordELEvaluator</name><operator>.</operator><name>createLazyEvaluator</name></name><argument_list>(<argument><expr><name>actualTime</name></expr></argument>, <argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getNominalTime</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name>getInputSetEvent</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>getUnResolvedDependency</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>super</name><operator>.</operator><name>evalInput</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>cleanPreviousCheckData</name><argument_list>(<argument><expr><name>coordPullInputDependency</name></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>unresolvedList</name> <init>= <expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>getUnResolvedDependency</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>getDependencies</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>unresolved</name> <range>: <expr><name>unresolvedList</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>resolvedPath</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>CoordELFunctions</name><operator>.</operator><name>evalAndWrap</name></name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>unresolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>isResolved</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>eval</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><name><name>CoordELConstants</name><operator>.</operator><name>IS_RESOLVED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>setDependencyMap</name></name><argument_list>(<argument><expr><name>dependencyMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>eval</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><name><name>CoordELConstants</name><operator>.</operator><name>RESOLVED_PATH</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>resolvedPath</name> <operator>=</operator> <call><name><name>eval</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><name><name>CoordELConstants</name><operator>.</operator><name>RESOLVED_PATH</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>resolvedPath</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>resolvedPath</name> <operator>=</operator> <call><name>getEvalResult</name><argument_list>(<argument><expr><name>isResolved</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>,
                                <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>DependencyChecker</name><operator>.</operator><name>dependenciesAsArray</name></name><argument_list>(<argument><expr><call><name><name>resolvedPath</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>getDataSets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Return data is {0}"</literal></expr></argument>, <argument><expr><name>resolvedPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Resolved status of Data set {0} with min {1} and wait {2}  =  {3}"</literal></expr></argument>,
                            <argument><expr><name>dataSet</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>resolvedPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>isInputWaitElapsed</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>isResolved</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>resolvedPath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>addResolvedList</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>, <argument><expr><call><name><name>resolvedPath</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>cleanPreviousCheckData</name><argument_list>(<argument><expr><name>coordPullInputDependency</name></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isInputWaitElapsed</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <return>return <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>(
                                    <argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>TIMED_WAITING</name></name></expr></argument>)</argument_list></call></expr>;</return>
                        </block_content>}</block></if>
                        <else>else <block>{<block_content>
                            <return>return <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</return>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>getUnResolvedDependency</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setResolved</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>(<argument><expr><name><name>STATUS</name><operator>.</operator><name>TRUE</name></name></expr></argument>, <argument><expr><call><name>getListAsString</name><argument_list>(<argument><expr><call><name><name>coordPullInputDependency</name>
                        <operator>.</operator><name>getUnResolvedDependency</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getResolvedList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">" event not found"</literal> <operator>+</operator> <name>e</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>

        </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>cleanPreviousCheckData</name><parameter_list>(<parameter><decl><type><name>CoordPullInputDependency</name></type> <name>coordPullInputDependency</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Previous check might have resolved and added resolved list. Cleanup any resolved list stored by previous</comment>
        <comment type="line">// check.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>getUnResolvedDependency</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>getUnResolvedDependency</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setResolvedList</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>evalCombineInput</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>inputSets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Combine is not supported for latest/future"</literal></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>Element</name></type> <name>getInputSetEvent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Element</name></type> <name>eAction</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getActionXml</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>inputList</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"input-events"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>eDataEvents</name> <init>= <expr><call><name><name>inputList</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><literal type="string">"data-in"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Element</name></type> <name>dEvent</name> <range>: <expr><name>eDataEvents</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>dEvent</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>dEvent</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Event not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseValidate</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseValidate</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..f485296e9</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorPhaseValidate</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">89</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordInputInstance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordPullInputDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordPushInputDependency</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordInputLogicEvaluatorPhaseValidate</name> <super_list><implements>implements <super><name>CoordInputLogicEvaluator</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><name>CoordPullInputDependency</name></type> <name>coordPullInputDependency</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CoordPushInputDependency</name></type> <name>coordPushInputDependency</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CoordInputInstance</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dependencyMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>CoordinatorActionBean</name></type> <name>coordAction</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>CoordinatorJob</name></type> <name>coordJob</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorPhaseValidate</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coordAction</name></name> <operator>=</operator> <name>coordAction</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>coordPullInputDependency</name> <operator>=</operator> <operator>(</operator><name>CoordPullInputDependency</name><operator>)</operator> <call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>coordPushInputDependency</name> <operator>=</operator> <operator>(</operator><name>CoordPushInputDependency</name><operator>)</operator> <call><name><name>coordAction</name><operator>.</operator><name>getPushInputDependencies</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>evalInput</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>getDataSetLen</name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name></type> <name>evalCombineInput</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>inputSets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>inputSets</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Combine should have at least two input sets. DataSets : "</literal>
                    <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>inputSets</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>firstInputSetLen</name> <init>= <expr><call><name>getDataSetLen</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inputSets</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>getDataSetLen</name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>firstInputSetLen</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Combine should have same range. DataSets : "</literal> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>inputSets</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>getUnResolvedDependency</name></name><argument_list>(<argument><expr><name><name>inputSets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Combine is not supported for latest/future"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorResult</name><argument_list>(<argument><expr><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>STATUS</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>getDataSetLen</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>coordPullInputDependency</name><operator>.</operator><name>getUnResolvedDependency</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>coordAction</name><operator>.</operator><name>getPushInputDependencies</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>coordPushInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>coordPushInputDependency</name><operator>.</operator><name>getDependencyMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">" Data set not found : "</literal> <operator>+</operator> <name>dataset</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..2f3f03436</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorResult</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">104</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELFunctions</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordInputLogicEvaluatorResult</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>STATUS</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>dataSets</name></decl>;</decl_stmt>

    <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>STATUS</name> <block>{
        <decl><name>TRUE</name></decl>, <decl><name>FALSE</name></decl>, <decl><name>PHASE_TWO_EVALUATION</name></decl>, <decl><name>TIMED_WAITING</name></decl>
    }</block></enum>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name><parameter_list>(<parameter><decl><type><name>STATUS</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dataSets</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataSets</name></name> <operator>=</operator> <name>dataSets</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorResult</name><parameter_list>(<parameter><decl><type><name>STATUS</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDataSets</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>dataSets</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataSets</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSets</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataSets</name></name> <operator>=</operator> <name>dataSets</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>appendDataSets</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>inputDataSets</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>inputDataSets</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>dataSets</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataSets</name></name> <operator>=</operator> <name>inputDataSets</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataSets</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>dataSets</name></name> <operator>+</operator> <name><name>CoordELFunctions</name><operator>.</operator><name>DIR_SEPARATOR</name></name> <operator>+</operator> <name>inputDataSets</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStatus</name><parameter_list>(<parameter><decl><type><name>STATUS</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>STATUS</name></type> <name>getStatus</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>status</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTrue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>TIMED_WAITING</name></expr>:</case>
            <case>case <expr><name>PHASE_TWO_EVALUATION</name></expr>:</case>
            <case>case <expr><name>TRUE</name></expr>:</case>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <default>default:</default>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></switch>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isWaiting</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>status</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>STATUS</name><operator>.</operator><name>TIMED_WAITING</name></name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPhaseTwoEvaluation</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>status</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>STATUS</name><operator>.</operator><name>PHASE_TWO_EVALUATION</name></name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorUtil</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..63c07609a</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>CoordInputLogicEvaluatorUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">229</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>JexlContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>JexlEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>NamespaceResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>SyncCoordAction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordPullInputDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordPushInputDependency</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>ELEvaluator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>LogUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XLog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XmlUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>JDOMException</name></name>;</import>

<class><specifier>public</specifier> class <name>CoordInputLogicEvaluatorUtil</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>CoordinatorActionBean</name></type> <name>coordAction</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>XLog</name></type> <name>log</name> <init>= <expr><call><name><name>XLog</name><operator>.</operator><name>getLog</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorUtil</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>coordAction</name></name> <operator>=</operator> <name>coordAction</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>LogUtils</name><operator>.</operator><name>setLogInfo</name></name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CoordInputLogicEvaluatorUtil</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Check pull missing dependencies.
     *
     * @return true, if successful
     * @throws JDOMException the JDOM exception
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkPullMissingDependencies</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JexlEngine</name></type> <name>jexl</name> <init>= <expr><operator>new</operator> <call><name>OozieJexlEngine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>expression</name> <init>= <expr><call><name><name>CoordUtils</name><operator>.</operator><name>getInputLogic</name></name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getActionXml</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name><name>jexl</name><operator>.</operator><name>createExpression</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JexlContext</name></type> <name>jc</name> <init>= <expr><operator>new</operator> <call><name>OozieJexlParser</name><argument_list>(<argument><expr><name>jexl</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CoordInputLogicBuilder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorPhaseOne</name><argument_list>(
                <argument><expr><name>coordAction</name></expr></argument>, <argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getPullInputDependencies</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>CoordInputLogicEvaluatorResult</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>jc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Input logic expression for [{0}] and evaluate result is [{1}]"</literal></expr></argument>, <argument><expr><name>expression</name></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isWaiting</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>result</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Validate input logic.
     *
     * @throws JDOMException the JDOM exception
     * @throws CommandException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateInputLogic</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument>, <argument><expr><name>CommandException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JexlEngine</name></type> <name>jexl</name> <init>= <expr><operator>new</operator> <call><name>OozieJexlEngine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expression</name> <init>= <expr><call><name><name>CoordUtils</name><operator>.</operator><name>getInputLogic</name></name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getActionXml</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name><name>jexl</name><operator>.</operator><name>createExpression</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JexlContext</name></type> <name>jc</name> <init>= <expr><operator>new</operator> <call><name>OozieJexlParser</name><argument_list>(<argument><expr><name>jexl</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CoordInputLogicBuilder</name><argument_list>(
                <argument><expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorPhaseValidate</name><argument_list>(<argument><expr><name>coordAction</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>result</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>jc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Input logic expression is [{0}] and evaluate result is [{1}]"</literal></expr></argument>, <argument><expr><name>expression</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>re</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>CommandException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E1028</name></name></expr></argument>, <argument><expr><call><name><name>re</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get input dependencies.
     *
     * @param name the name
     * @param syncCoordAction the sync coord action
     * @return the string
     * @throws JDOMException the JDOM exception
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getInputDependencies</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SyncCoordAction</name></type> <name>syncCoordAction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JexlEngine</name></type> <name>jexl</name> <init>= <expr><operator>new</operator> <call><name>OozieJexlEngine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>coordAction</name> <init>= <expr><operator>new</operator> <call><name>CoordinatorActionBean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ELEvaluator</name></type> <name>eval</name> <init>= <expr><call><name><name>ELEvaluator</name><operator>.</operator><name>getCurrent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><call><name><name>syncCoordAction</name><operator>.</operator><name>getActionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>eJob</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><call><name><name>eval</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><literal type="string">".actionInputLogic"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expression</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call><operator>.</operator><call><name>parseWithName</name><argument_list>(<argument><expr><name>eJob</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name><name>jexl</name><operator>.</operator><name>createExpression</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CoordPullInputDependency</name></type> <name>pull</name> <init>= <expr><operator>(</operator><name>CoordPullInputDependency</name><operator>)</operator> <call><name><name>syncCoordAction</name><operator>.</operator><name>getPullDependencies</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoordPushInputDependency</name></type> <name>push</name> <init>= <expr><operator>(</operator><name>CoordPushInputDependency</name><operator>)</operator> <call><name><name>syncCoordAction</name><operator>.</operator><name>getPushDependencies</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setPushInputDependencies</name></name><argument_list>(<argument><expr><name>push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>coordAction</name><operator>.</operator><name>setPullInputDependencies</name></name><argument_list>(<argument><expr><name>pull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JexlContext</name></type> <name>jc</name> <init>= <expr><operator>new</operator> <call><name>OozieJexlParser</name><argument_list>(<argument><expr><name>jexl</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CoordInputLogicBuilder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorPhaseThree</name><argument_list>(
                <argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>CoordInputLogicEvaluatorResult</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>jc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Input logic expression for [{0}] is [{1}] and evaluate result is [{2}]"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>expression</name></expr></argument>,
                <argument><expr><call><name><name>result</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>name</name> <operator>+</operator> <literal type="string">" is not resolved"</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>result</name><operator>.</operator><name>getDataSets</name></name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check push dependencies.
     *
     * @return true, if successful
     * @throws JDOMException the JDOM exception
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkPushDependencies</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JexlEngine</name></type> <name>jexl</name> <init>= <expr><operator>new</operator> <call><name>OozieJexlEngine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>expression</name> <init>= <expr><call><name><name>CoordUtils</name><operator>.</operator><name>getInputLogic</name></name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getActionXml</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name><name>jexl</name><operator>.</operator><name>createExpression</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JexlContext</name></type> <name>jc</name> <init>= <expr><operator>new</operator> <call><name>OozieJexlParser</name><argument_list>(<argument><expr><name>jexl</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CoordInputLogicBuilder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorPhaseOne</name><argument_list>(
                <argument><expr><name>coordAction</name></expr></argument>, <argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getPushInputDependencies</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>CoordInputLogicEvaluatorResult</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>jc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Input logic expression for [{0}] and evaluate result is [{1}]"</literal></expr></argument>, <argument><expr><name>expression</name></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isWaiting</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>result</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check unresolved.
     *
     * @param actualTime the actual time
     * @return true, if successful
     * @throws JDOMException the JDOM exception
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkUnResolved</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>actualTime</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>JexlEngine</name></type> <name>jexl</name> <init>= <expr><operator>new</operator> <call><name>OozieJexlEngine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>expression</name> <init>= <expr><call><name><name>CoordUtils</name><operator>.</operator><name>getInputLogic</name></name><argument_list>(<argument><expr><call><name><name>coordAction</name><operator>.</operator><name>getActionXml</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name><name>jexl</name><operator>.</operator><name>createExpression</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JexlContext</name></type> <name>jc</name> <init>= <expr><operator>new</operator> <call><name>OozieJexlParser</name><argument_list>(<argument><expr><name>jexl</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CoordInputLogicBuilder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CoordInputLogicEvaluatorPhaseTwo</name><argument_list>(
                <argument><expr><name>coordAction</name></expr></argument>, <argument><expr><name>actualTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>CoordInputLogicEvaluatorResult</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>jc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Input logic expression for [{0}] and evaluate result is [{1}]"</literal></expr></argument>, <argument><expr><name>expression</name></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isWaiting</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>result</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <class><specifier>public</specifier> class <name>OozieJexlParser</name> <super_list><implements>implements <super><name>JexlContext</name></super>, <super><name>NamespaceResolver</name></super></implements></super_list> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JexlEngine</name></type> <name>jexl</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CoordInputLogicBuilder</name></type> <name>object</name></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Object</name></type> <name>resolveNamespace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>object</name></expr>;</return>
        </block_content>}</block></function>

        <constructor><specifier>public</specifier> <name>OozieJexlParser</name><parameter_list>(<parameter><decl><type><name>JexlEngine</name></type> <name>engine</name></decl></parameter>, <parameter><decl><type><name>CoordInputLogicBuilder</name></type> <name>wrapped</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>jexl</name></name> <operator>=</operator> <name>engine</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>object</name></name> <operator>=</operator> <name>wrapped</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>jexl</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>jexl</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>has</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>jexl</name><operator>.</operator><name>getUberspect</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPropertyGet</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

    }</block></class>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>InputLogicParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>InputLogicParser</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..f1f6b419f</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>InputLogicParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">309</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>Namespace</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Parses xml into jexl expression
 */</comment>
<class><specifier>public</specifier> class <name>InputLogicParser</name> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>COORD_INPUT_EVENTS_DATA_IN</name> <init>= <expr><literal type="string">"data-in"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>AND</name> <init>= <expr><literal type="string">"and"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>OR</name> <init>= <expr><literal type="string">"or"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>COMBINE</name> <init>= <expr><literal type="string">"combine"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Parses the xml.
     *
     * @param root the root
     * @return the string
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseWithName</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses the xml with name.
     *
     * @param root the root
     * @param name the name
     * @return the string
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>parseWithName</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>parsedString</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>childrens</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childrens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>childName</name> <init>= <expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttributeValue</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>min</name> <init>= <expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttributeValue</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>wait</name> <init>= <expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttributeValue</name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>childName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>parse</name><argument_list>(<argument><expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getOpt</name><argument_list>(<argument><expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>parseWithName</name><argument_list>(<argument><expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>parsedString</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>parsedString</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Namespace</name></type> <name>ns</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>root</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>COMBINE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>processCombinedNode</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name>getOpt</name><argument_list>(<argument><expr><call><name><name>root</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getMin</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>getWait</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>root</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>root</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>parseAllChildren</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><call><name>getOpt</name><argument_list>(<argument><expr><call><name><name>root</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getMin</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>getWait</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>root</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><name>COORD_INPUT_EVENTS_DATA_IN</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>processChildNode</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name>getOpt</name><argument_list>(<argument><expr><call><name><name>root</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getMin</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getWait</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>root</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>COORD_INPUT_EVENTS_DATA_IN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>parseDataInNode</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>parsedString</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses the all children.
     *
     * @param root the root
     * @param parentOpt the parent opt
     * @param opt the opt
     * @param min the min
     * @param wait the wait
     * @return the string
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>String</name></type> <name>parseAllChildren</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>parentOpt</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>parsedString</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>childrens</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childrens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>currentMin</name> <init>= <expr><name>min</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>currentWait</name> <init>= <expr><name>wait</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>childMin</name> <init>= <expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttributeValue</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>childWait</name> <init>= <expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttributeValue</name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>childMin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>currentMin</name> <operator>=</operator> <name>childMin</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>childWait</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>currentWait</name> <operator>=</operator> <name>childWait</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>parse</name><argument_list>(<argument><expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>currentMin</name></expr></argument>, <argument><expr><name>currentWait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>childrens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" "</literal> <operator>+</operator> <name>opt</name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>parsedString</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses the data in node.
     *
     * @param root the root
     * @param min the min
     * @param wait the wait
     * @return the string
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>parseDataInNode</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>parsedString</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>nestedChildDataName</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"dataset"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"dependencyBuilder.input(\""</literal> <operator>+</operator> <name>nestedChildDataName</name> <operator>+</operator> <literal type="string">"\")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendMin</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>parsedString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendWait</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>parsedString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">".build()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>parsedString</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Process child node.
     *
     * @param root the root
     * @param opt the opt
     * @param min the min
     * @param wait the wait
     * @return the string
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>String</name></type> <name>processChildNode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>parsedString</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Namespace</name></type> <name>ns</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>childrens</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>COORD_INPUT_EVENTS_DATA_IN</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childrens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>parseDataInNode</name><argument_list>(<argument><expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>childrens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" "</literal> <operator>+</operator> <name>opt</name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>parsedString</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Process combined node.
     *
     * @param root the root
     * @param opt the opt
     * @param min the min
     * @param wait the wait
     * @return the string
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>String</name></type> <name>processCombinedNode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>parsedString</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Namespace</name></type> <name>ns</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>childrens</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>COORD_INPUT_EVENTS_DATA_IN</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"dependencyBuilder.combine("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childrens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>nestedChildDataName</name> <init>= <expr><call><name><name>childrens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttributeValue</name><argument_list>(<argument><expr><literal type="string">"dataset"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal> <operator>+</operator> <name>nestedChildDataName</name> <operator>+</operator> <literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>childrens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>appendMin</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>parsedString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendWait</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>parsedString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">".build()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>parsedString</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the opt.
     *
     * @param opt the opt
     * @return the opt
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getOpt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>opt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>opt</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"or"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"||"</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>opt</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"and"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"&amp;&amp;"</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><literal type="string">""</literal></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the min.
     *
     * @param root the root
     * @param parentMin the parent min
     * @return the min
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getMin</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>parentMin</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>min</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>parentMin</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>min</name></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the wait.
     *
     * @param root the root
     * @param parentWait the parent wait
     * @return the wait
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getWait</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>parentWait</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>wait</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>parentWait</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>parentWait</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>wait</name></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>appendWait</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>StringBuffer</name></type> <name>parsedString</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>childWait</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>childWait</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">".inputWait("</literal> <operator>+</operator> <name>childWait</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">".inputWait("</literal> <operator>+</operator> <name>wait</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>appendMin</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Element</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>StringBuffer</name></type> <name>parsedString</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>childMin</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>childMin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">".min("</literal> <operator>+</operator> <name>childMin</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>parsedString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">".min("</literal> <operator>+</operator> <name>min</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>OozieJexlEngine</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>OozieJexlEngine</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..66c4f2b5a</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>OozieJexlEngine</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">47</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>Interpreter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>JexlContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>JexlEngine</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Oozie implementation of Jexl Engine
 *
 */</comment>
<class><specifier>public</specifier> class <name>OozieJexlEngine</name> <super_list><extends>extends <super><name>JexlEngine</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><name>OozieJexlInterpreter</name></type> <name>oozieInterpreter</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>OozieJexlEngine</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>Interpreter</name></type> <name>createInterpreter</name><parameter_list>(<parameter><decl><type><name>JexlContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>strictFlag</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>silentFlag</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>oozieInterpreter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>oozieInterpreter</name> <operator>=</operator> <operator>new</operator> <call><name>OozieJexlInterpreter</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><ternary><condition><expr><name>context</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>EMPTY_CONTEXT</name></expr> </then><else>: <expr><name>context</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
                    <argument><expr><name>silentFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>oozieInterpreter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>OozieJexlInterpreter</name></type> <name>getOozieInterpreter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>oozieInterpreter</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>OozieJexlInterpreter</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>OozieJexlInterpreter</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..2044723db</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>OozieJexlInterpreter</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">73</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>Interpreter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>JexlContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>JexlEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>parser</name><operator>.</operator><name>ASTAndNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>parser</name><operator>.</operator><name>ASTOrNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>jexl2</name><operator>.</operator><name>parser</name><operator>.</operator><name>JexlNode</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Oozie implementation of jexl Interpreter
 */</comment>
<class><specifier>public</specifier> class <name>OozieJexlInterpreter</name> <super_list><extends>extends <super><name>Interpreter</name></super></extends></super_list> <block>{

    <constructor><specifier>protected</specifier> <name>OozieJexlInterpreter</name><parameter_list>(<parameter><decl><type><name>Interpreter</name></type> <name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>interpret</name><parameter_list>(<parameter><decl><type><name>JexlNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>node</name><operator>.</operator><name>jjtAccept</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>OozieJexlInterpreter</name><parameter_list>(<parameter><decl><type><name>JexlEngine</name></type> <name>jexlEngine</name></decl></parameter>, <parameter><decl><type><name>JexlContext</name></type> <name>jexlContext</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>strictFlag</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>silentFlag</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>jexlEngine</name></expr></argument>, <argument><expr><name>jexlContext</name></expr></argument>, <argument><expr><name>strictFlag</name></expr></argument>, <argument><expr><name>silentFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>visit</name><parameter_list>(<parameter><decl><type><name>ASTOrNode</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>CoordInputLogicEvaluatorResult</name><operator>)</operator> <call><name><name>node</name><operator>.</operator><name>jjtGetChild</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>jjtAccept</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>left</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>left</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>node</name><operator>.</operator><name>jjtGetChild</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>jjtAccept</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>visit</name><parameter_list>(<parameter><decl><type><name>ASTAndNode</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>CoordInputLogicEvaluatorResult</name><operator>)</operator> <call><name><name>node</name><operator>.</operator><name>jjtGetChild</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>jjtAccept</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>left</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>left</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CoordInputLogicEvaluatorResult</name></type> <name>right</name> <init>= <expr><operator>(</operator><name>CoordInputLogicEvaluatorResult</name><operator>)</operator> <call><name><name>node</name><operator>.</operator><name>jjtGetChild</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>jjtAccept</name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>right</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>appendDataSets</name></name><argument_list>(<argument><expr><call><name><name>left</name><operator>.</operator><name>getDataSets</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>right</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>ActionDependency</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>ActionDependency</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>c280d1dc2</name><operator>..</operator><name>fe7a32721</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>ActionDependency</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>ActionDependency</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ActionDependency</name> <block>{
     <expr><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>missingDependencies</name></expr>;
     <specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>availableDependencies</name></block></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name>ActionDependency</name><argument_list>(<argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>missingDependencies</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>availableDependencies</name></expr></argument>)</argument_list></call> <block>{
    <expr><specifier>public</specifier> <call><name>ActionDependency</name><argument_list>(<argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>missingDependencies</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>availableDependencies</name></expr></argument>)</argument_list></call> <block>{
         <expr><name><name>this</name><operator>.</operator><name>missingDependencies</name></name> <operator>=</operator> <name>missingDependencies</name></expr>;
         <name><name>this</name><operator>.</operator><name>availableDependencies</name></name> <operator>=</operator> <name>availableDependencies</name></block></expr>;
     }</block></expr></expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>DependencyChecker</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>DependencyChecker</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a5507575a</name><operator>..</operator><name>bdd854ffb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>DependencyChecker</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>DependencyChecker</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>dependency</name></name>;</package>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URISyntaxException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>StringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>DependencyChecker</name> <block>{
      <expr><operator>*</operator> @</expr><return>return <expr><name>missing</name> <name>dependencies</name> <name>as</name> <name>a</name> <name>array</name>
      <operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name> <call><name>dependenciesAsArray</name><argument_list>(<argument><expr><name>String</name> <name>missingDependencies</name></expr></argument>)</argument_list></call> <block>{
        <if_stmt><if>if<condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <return>return <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt></block></expr></return>
         <return>return <expr><call><name><name>missingDependencies</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>CoordELFunctions</name><operator>.</operator><name>INSTANCE_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DependencyChecker</name> <block>{
      <expr><operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <specifier>static</specifier> <name>ActionDependency</name> <call><name>checkForAvailability</name><argument_list>(<argument><expr><name>String</name> <name>missingDependencies</name></expr></argument>, <argument><expr><name>Configuration</name> <name>actionConf</name></expr></argument>,
             <argument><expr><name>boolean</name> <name>stopOnFirstMissing</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>CommandException</name> <block>{</block></expr></argument></throws></expr>
        <return>return <expr><call><name>checkForAvailability</name><argument_list>(<argument><expr><call><name>dependenciesAsArray</name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>, <argument><expr><name>stopOnFirstMissing</name></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>
        <return>return <expr><call><name>checkForAvailability</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name>dependenciesAsArray</name><argument_list>(<argument><expr><name>missingDependencies</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>actionConf</name></expr></argument>, <argument><expr><name>stopOnFirstMissing</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></if></if_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -83,7 +88,7 @@ public class DependencyChecker {
      * @return ActionDependency which has the list of missing and available dependencies
      * @throws CommandException
      */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>ActionDependency</name></type> <name>checkForAvailability</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>missingDependencies</name></expr></argument>, <argument><expr><name>Configuration</name> <name>actionConf</name></expr></argument>,
    <argument><expr><specifier>public</specifier> <specifier>static</specifier> <name>ActionDependency</name> <call><name>checkForAvailability</name><argument_list>(<argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>missingDependencies</name></expr></argument>, <argument><expr><name>Configuration</name> <name>actionConf</name></expr></argument>,
             <argument><expr><name>boolean</name> <name>stopOnFirstMissing</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>CommandException</name> <block>{
         <expr><name>final</name> <name>XLog</name> <name>LOG</name> <operator>=</operator> <call><name><name>XLog</name><operator>.</operator><name>getLog</name></name><argument_list>(<argument><expr><name><name>DependencyChecker</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument>;</argument_list></decl></decl_stmt> <comment type="line">//OOZIE-1251. Don't initialize as static variable.</comment>
         <decl_stmt><decl><type><name>String</name></type> <name>user</name> <init>= <expr><call><name><name>ParamChecker</name><operator>.</operator><name>notEmpty</name></name><argument_list>(<argument><expr><call><name><name>actionConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">92</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>DependencyChecker</name> <block>{
         <expr><name>URIHandlerService</name> <name>uriService</name> <operator>=</operator> <call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>URIHandlerService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
         <name>boolean</name> <name>continueChecking</name> <operator>=</operator> <literal type="boolean">true</literal></block></expr>;</expr_stmt>
         <try>try <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>missingDependencies</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name><name>missingDependencies</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><name>continueChecking</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>dependency</name> <init>= <expr><name><name>missingDependencies</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>dependency</name> <init>= <expr><call><name><name>missingDependencies</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
                     <decl_stmt><decl><type><name>URI</name></type> <name>uri</name> <init>= <expr><operator>new</operator> <call><name>URI</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                     <decl_stmt><decl><type><name>URIHandler</name></type> <name>uriHandler</name> <init>= <expr><call><name><name>uriService</name><operator>.</operator><name>getURIHandler</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">113</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>DependencyChecker</name> <block>{
 
                 }</block></expr></expr_stmt>
                 <if_stmt><else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>missingDeps</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>missingDependencies</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>missingDeps</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>missingDependencies</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></else></if_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>FSURIHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>FSURIHandler</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7c1aadf27</literal><operator>..</operator><literal type="number">65d85b8e6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>FSURIHandler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>FSURIHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">113</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">113</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>FSURIHandler</name> implements <name>URIHandler</name> <block>{
         <return>return <expr><name>uri</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getURIWithoutDoneFlag</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>doneFlag</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>URIHandlerException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>doneFlag</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>uri</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name>doneFlag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>uri</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>uri</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal> <operator>+</operator> <name>doneFlag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>uri</name></expr>;</return>
    </block_content>}</block></function>


     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>URIHandlerException</name></expr></argument></throws> <block>{<block_content>
     </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>HCatURIHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>HCatURIHandler</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1bbf37d8d</literal><operator>..</operator><literal type="number">67b37ec4d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>HCatURIHandler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>HCatURIHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">210</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">210</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>HCatURIHandler</name> implements <name>URIHandler</name> <block>{
         <return>return <expr><name>uri</name></expr>;</return>
     }</block></expr></expr_stmt>
 
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getURIWithoutDoneFlag</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>doneFlag</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>URIHandlerException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><name>uri</name></expr>;</return>
    </block_content>}</block></function>

     <function><annotation>@<name>Override</name></annotation>
     <type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>URIHandlerException</name></expr></argument></throws> <block>{<block_content>
         <try>try <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>URIHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>URIHandler</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bc9471685</name><operator>..</operator><literal type="number">45e23fb47</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>URIHandler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>dependency</name><operator>/</operator><name><name>URIHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">168</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> interface <name>URIHandler</name> <block>{
      <expr><operator>*</operator><operator>/</operator>
     <specifier>public</specifier> <name>String</name> <call><name>getURIWithDoneFlag</name><argument_list>(<argument><expr><name>String</name> <name>uri</name></expr></argument>, <argument><expr><name>String</name> <name>doneFlag</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>URIHandlerException</name></expr></argument></throws></expr>;
 
    <comment type="block" format="javadoc">/**
     * Get the URI path from path which has done flag
     *
     * @param uri URI of the dependency
     * @param doneFlag flag that determines URI availability
     *
     * @return the final URI without the doneFlag incorporated
     *
     * @throws URIHandlerException
     */</comment>
    <specifier>public</specifier> <name>String</name> <call><name>getURIWithoutDoneFlag</name><argument_list>(<argument><expr><name>String</name> <name>uri</name></expr></argument>, <argument><expr><name>String</name> <name>doneFlag</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>URIHandlerException</name></expr></argument></throws></block></expr>;</expr_stmt>


     <comment type="block" format="javadoc">/**
      * Check whether the URI is valid or not
      * @param uri
@@ -220,4 +233,5 @@ public interface URIHandler {
 
     }
 

 }
diff --git a/core/src/main/java/org/apache/oozie/util/WritableUtils.java b/core/src/main/java/org/apache/oozie/util/WritableUtils.java
index 76a689535..aa027e37b 100644
-- a/core/src/main/java/org/apache/oozie/util/WritableUtils.java
++ b/core/src/main/java/org/apache/oozie/util/WritableUtils.java
@@ -20,6 +20,7 @@ package org.apache.oozie.util;
 
 import org.apache.hadoop.io.Writable;
 import org.apache.hadoop.util.ReflectionUtils;
import org.apache.oozie.compression.CodecFactory;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -28,12 +29,19 @@ import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.DataOutput;
 import java.io.DataInput;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
 
 /**
  * Utility class to write/read Hadoop writables to/from a byte array.
  */</comment>
 <class><specifier>public</specifier> class <name>WritableUtils</name> <block>{
 
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>XLog</name></type> <name>LOG</name> <init>= <expr><call><name><name>XLog</name><operator>.</operator><name>getLog</name></name><argument_list>(<argument><expr><name><name>WritableUtils</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

     <comment type="block" format="javadoc">/**
      * Write a writable to a byte array.
      *
@@ -60,7 +68,6 @@ public class WritableUtils {
      * @param clazz writable class.
      * @return writable deserialized from the byte array.
      */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
     <type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Writable</name></extends></parameter>&gt;</parameter_list> <name>T</name></type> <name>fromByteArray</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <try>try <block>{<block_content>
             <decl_stmt><decl><type><name>T</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>ReflectionUtils</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">106</literal></expr><operator>,</operator><expr><literal type="number">143</literal> @@ <specifier>public</specifier> <name>class</name> <name>WritableUtils</name> <block>{
         <expr><name>String</name> <name>str</name> <operator>=</operator> <call><name><name>dataInput</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
         <return>return <expr><ternary><condition><expr><operator>(</operator><call><name><name>str</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>str</name></expr></else></ternary></expr>;</return>
     </block_content>}</block></try>

    <comment type="block" format="javadoc">/**
     * Read list.
     *
     * @param &lt;T&gt; the generic type
     * @param dataInput the data input
     * @param clazz the clazz
     * @return the list
     * @throws IOException Signals that an I/O exception has occurred.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Writable</name></extends></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>readList</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>dataInput</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>dataInput</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>T</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>ReflectionUtils</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>dataInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>readStringList</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>dataInput</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>dataInput</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readBytesAsString</name><argument_list>(<argument><expr><name>dataInput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Write list.
     *
     * @param &lt;T&gt; the generic type
     * @param dataOutput the data output
     * @param list the list
     * @throws IOException Signals that an I/O exception has occurred.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Writable</name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>writeList</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>dataOutput</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dataOutput</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>T</name></type> <name>t</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>dataOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeStringList</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>dataOutput</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dataOutput</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>str</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>writeStringAsBytes</name><argument_list>(<argument><expr><name>dataOutput</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Write map.
     *
     * @param &lt;T&gt; the generic type
     * @param dataOutput the data output
     * @param map the map
     * @throws IOException Signals that an I/O exception has occurred.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Writable</name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>writeMap</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>dataOutput</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dataOutput</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name></type> <name>t</name> <range>: <expr><call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>writeStringAsBytes</name><argument_list>(<argument><expr><name>dataOutput</name></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>dataOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Write map with list.
     *
     * @param &lt;T&gt; the generic type
     * @param dataOutput the data output
     * @param map the map
     * @throws IOException Signals that an I/O exception has occurred.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Writable</name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>writeMapWithList</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>dataOutput</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dataOutput</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>t</name> <range>: <expr><call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>writeStringAsBytes</name><argument_list>(<argument><expr><name>dataOutput</name></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeList</name><argument_list>(<argument><expr><name>dataOutput</name></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read map.
     *
     * @param &lt;T&gt; the generic type
     * @param dataInput the data input
     * @param clazz the clazz
     * @return the map
     * @throws IOException Signals that an I/O exception has occurred.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Writable</name></extends></parameter>&gt;</parameter_list> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name></type> <name>readMap</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>dataInput</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>dataInput</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name>readBytesAsString</name><argument_list>(<argument><expr><name>dataInput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>T</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>ReflectionUtils</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>value</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>dataInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read map with list.
     *
     * @param &lt;T&gt; the generic type
     * @param dataInput the data input
     * @param clazz the clazz
     * @return the map
     * @throws IOException Signals that an I/O exception has occurred.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Writable</name></extends></parameter>&gt;</parameter_list> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>readMapWithList</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>dataInput</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>dataInput</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name>readBytesAsString</name><argument_list>(<argument><expr><name>dataInput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>readList</name><argument_list>(<argument><expr><name>dataInput</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeStringAsBytes</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>dOut</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name><name>CodecFactory</name><operator>.</operator><name>UTF_8_ENCODING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dOut</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dOut</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>readBytesAsString</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>dIn</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>dIn</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dIn</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>CodecFactory</name><operator>.</operator><name>UTF_8_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>oozie</name><operator>-</operator>default<operator>.</operator><name>xml</name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>oozie</name><operator>-</operator>default<operator>.</operator><name>xml</name>
<name>index</name> <name>ca49fa66c</name><operator>..</operator><literal type="number">3ff7320df</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>oozie</name><operator>-</operator>default<operator>.</operator><name>xml</name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>resources</name><operator>/</operator><name>oozie</name><operator>-</operator>default<operator>.</operator><name>xml</name>
@@ <operator>-</operator><literal type="number">1516</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1516</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
         <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>SchemaService</name><operator>.</operator><name>coord</name><operator>.</operator><name><name>schemas</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name></name>
         <operator>&lt;</operator><name>value</name><operator>&gt;</operator>
             <name>oozie</name><operator>-</operator><name>coordinator</name><operator>-</operator><literal type="number">0.1.xsd</literal></expr><operator>,</operator><expr><name>oozie</name><operator>-</operator><name>coordinator</name><operator>-</operator><literal type="number">0.2.xsd</literal></expr><operator>,</operator><expr><name>oozie</name><operator>-</operator><name>coordinator</name><operator>-</operator><literal type="number">0.3.xsd</literal></expr><operator>,</operator><expr><name>oozie</name><operator>-</operator><name>coordinator</name><operator>-</operator><literal type="number">0.4.xsd</literal></expr><operator>,</operator>
            <expr><name>oozie</name><operator>-</operator><name>sla</name><operator>-</operator><literal type="number">0.1.xsd</literal></expr><operator>,</operator><expr><name>oozie</name><operator>-</operator><name>sla</name><operator>-</operator><literal type="number">0.2.xsd</literal>
            <name>oozie</name><operator>-</operator><name>coordinator</name><operator>-</operator><literal type="number">0.5.xsd</literal></expr><operator>,</operator><expr><name>oozie</name><operator>-</operator><name>sla</name><operator>-</operator><literal type="number">0.1.xsd</literal></expr><operator>,</operator><expr><name>oozie</name><operator>-</operator><name>sla</name><operator>-</operator><literal type="number">0.2.xsd</literal>
         <operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
         <operator>&lt;</operator><name>description</name><operator>&gt;</operator>
             <name>List</name> <name>of</name> <name>schemas</name></expr></expr_stmt> <for>for coordinators <control>(<init><expr><name>separated</name> <name>by</name> <name>commas</name></expr></init>)</control><block type="pseudo"><block_content><expr_stmt><expr><operator>.</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>TestCoordActionInputCheckXCommand</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>TestCoordActionInputCheckXCommand</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1fe1b3adb</literal><operator>..</operator><name>c27a40aba</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>TestCoordActionInputCheckXCommand</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>coord</name><operator>/</operator><name><name>TestCoordActionInputCheckXCommand</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt></block_content></block></for>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorJob</name><operator>.</operator><name>Execution</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorJob</name><operator>.</operator><name>Timeunit</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordELFunctions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>dependency</name><operator>.</operator><name>CoordOldInputDependency</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionGetForInputCheckJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionGetJPAExecutor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionInsertJPAExecutor</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">553</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">553</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestCoordActionInputCheckXCommand</name> extends <name>XDataTestCase</name> <block>{
         <expr><name>Path</name> <name>appPath</name> <operator>=</operator> <operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name>getFsTestCaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"coord"</literal></expr></argument>)</argument_list></call></expr>;
         <name>String</name> <name>inputDir</name> <operator>=</operator> <call><name><name>appPath</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/coord-input/2010/07/09/01/00"</literal></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>String</name></type> <name>nonExistDir</name> <init>= <expr><call><name><name>inputDir</name><operator>.</operator><name>replaceFirst</name></name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="string">"nonExist"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><operator>new</operator> <call><name>CoordinatorActionBean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>caicc</name><operator>.</operator><name>pathExists</name></name><argument_list>(<argument><expr><name>nonExistDir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getTestUser</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>new</operator> <call><name>CoordOldInputDependency</name><argument_list>()</argument_list></call><operator>.</operator><call><name>pathExists</name><argument_list>(<argument><expr><name>actionBean</name></expr></argument>, <argument><expr><name>nonExistDir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getTestUser</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Should throw exception due to non-existent NN path. Therefore fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block>
         <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>caicc</name><operator>.</operator><name>getCoordActionErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"E0901"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>caicc</name><operator>.</operator><name>getCoordActionErrorMsg</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"not in Oozie's whitelist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"E0901"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"not in Oozie's whitelist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></catch></try>
     }</block></class>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestCoordInputLogicPush</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestCoordInputLogicPush</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..c58b18b73</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestCoordInputLogicPush</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">645</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorAction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>OozieClient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordActionInputCheckXCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordActionStartXCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordMaterializeTransitionXCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordPushDependencyCheckXCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordSubmitXCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionQueryExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordJobQueryExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>JPAExecutorException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionQueryExecutor</name><operator>.</operator><name>CoordActionQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordJobQueryExecutor</name><operator>.</operator><name>CoordJobQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>test</name><operator>.</operator><name>XHCatTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XmlUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>JDOMException</name></name>;</import>

<class><specifier>public</specifier> class <name>TestCoordInputLogicPush</name> <super_list><extends>extends <super><name>XHCatTestCase</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Services</name></type> <name>services</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>server</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>table</name> <init>= <expr><literal type="string">"table1"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>TIME_DAYS</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>

    <enum>enum <name>TEST_TYPE</name> <block>{
        <decl><name>CURRENT_SINGLE</name></decl>, <decl><name>CURRENT_RANGE</name></decl>, <decl><name>LATEST_SINGLE</name></decl>, <decl><name>LATEST_RANGE</name></decl>;
    }</block></enum><empty_stmt>;</empty_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>services</name> <operator>=</operator> <call><name><name>super</name><operator>.</operator><name>setupServicesForHCatalog</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>services</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createTestTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>getMetastoreAuthority</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>services</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dropTestTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>createSingleTestTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>db</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>dropTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dropDatabase</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createDatabase</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"dt,country"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>createTestTable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <expr_stmt><expr><call><name>createSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>dropSingleTestTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>db</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>dropTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dropDatabase</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>dropTestTable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <expr_stmt><expr><call><name>dropSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dropSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dropSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dropSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dropSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dropSingleTestTable</name><argument_list>(<argument><expr><literal type="string">"db_f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExists</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;or name=\"test\"&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/or&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-hcat.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name><name>TEST_TYPE</name><operator>.</operator><name>CURRENT_SINGLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input</name> <init>= <expr><call><name>addPartition</name><argument_list>(<argument><expr><literal type="string">"db_b"</literal></expr></argument>, <argument><expr><literal type="string">"table1"</literal></expr></argument>, <argument><expr><literal type="string">"dt=20141008;country=usa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>runConf</name> <init>= <expr><call><name>getActionConf</name><argument_list>(<argument><expr><name>actionBean</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNestedCondition3</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                   <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                       <literal type="string">"&lt;data-in dataset=\"E\" /&gt;"</literal><operator>+</operator>
                       <literal type="string">"&lt;data-in dataset=\"F\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-hcat.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name><name>TEST_TYPE</name><operator>.</operator><name>CURRENT_SINGLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>addPartition</name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>, <argument><expr><literal type="string">"table1"</literal></expr></argument>, <argument><expr><literal type="string">"dt=20141008;country=usa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>addPartition</name><argument_list>(<argument><expr><literal type="string">"db_b"</literal></expr></argument>, <argument><expr><literal type="string">"table1"</literal></expr></argument>, <argument><expr><literal type="string">"dt=20141008;country=usa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input3</name> <init>= <expr><call><name>addPartition</name><argument_list>(<argument><expr><literal type="string">"db_c"</literal></expr></argument>, <argument><expr><literal type="string">"table1"</literal></expr></argument>, <argument><expr><literal type="string">"dt=20141008;country=usa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input4</name> <init>= <expr><call><name>addPartition</name><argument_list>(<argument><expr><literal type="string">"db_d"</literal></expr></argument>, <argument><expr><literal type="string">"table1"</literal></expr></argument>, <argument><expr><literal type="string">"dt=20141008;country=usa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input5</name> <init>= <expr><call><name>addPartition</name><argument_list>(<argument><expr><literal type="string">"db_e"</literal></expr></argument>, <argument><expr><literal type="string">"table1"</literal></expr></argument>, <argument><expr><literal type="string">"dt=20141008;country=usa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input6</name> <init>= <expr><call><name>addPartition</name><argument_list>(<argument><expr><literal type="string">"db_f"</literal></expr></argument>, <argument><expr><literal type="string">"table1"</literal></expr></argument>, <argument><expr><literal type="string">"dt=20141008;country=usa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>runConf</name> <init>= <expr><call><name>getActionConf</name><argument_list>(<argument><expr><name>actionBean</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>input3</name></expr></argument>, <argument><expr><name>input4</name></expr></argument>, <argument><expr><name>input5</name></expr></argument>, <argument><expr><name>input6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNestedConditionWithRange</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConfForCombine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;and name=\"test\" min=\"2\" &gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;or min=\"2\"&gt;"</literal> <operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                   <literal type="string">"&lt;or min=\"2\"&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/or&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;and min=\"2\"&gt;"</literal><operator>+</operator>
                       <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                       <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-hcat.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name><name>TEST_TYPE</name><operator>.</operator><name>CURRENT_RANGE</name></name></expr></argument>,
                <argument><expr><name><name>TEST_TYPE</name><operator>.</operator><name>LATEST_RANGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputPartition</name> <init>= <expr><call><name>createPartitionWithTime</name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inputPartition</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>createPartitionWithTime</name><argument_list>(<argument><expr><literal type="string">"db_c"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>runConf</name> <init>= <expr><call><name>getActionConf</name><argument_list>(<argument><expr><name>actionBean</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><call><name><name>inputPartition</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>inputPartition</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLatestRange</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConfForCombine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <comment type="line">//@formatter:off</comment>
        <expr><literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
              <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal> <operator>+</operator>
              <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal> <operator>+</operator>
         <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-combine.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name><name>TEST_TYPE</name><operator>.</operator><name>LATEST_RANGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputDir</name> <init>= <expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/b/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inputDir</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>createPartitionWithTime</name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><call><name><name>inputDir</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>inputDir</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCurrentLatest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConfForCombine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
<comment type="line">//@formatter:off</comment>
        <expr><literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
              <literal type="string">"&lt;data-in dataset=\"A\"/&gt;"</literal> <operator>+</operator>
              <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal> <operator>+</operator>
         <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-combine.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name><name>TEST_TYPE</name><operator>.</operator><name>LATEST_RANGE</name></name></expr></argument>,
                <argument><expr><name><name>TEST_TYPE</name><operator>.</operator><name>CURRENT_RANGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputDir</name> <init>= <expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/b/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inputDir</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>createPartitionWithTime</name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><call><name><name>inputDir</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>inputDir</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLatestRangeComplex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConfForCombine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <comment type="line">//@formatter:off</comment>
        <expr><literal type="string">"&lt;or name=\"test\"&gt;"</literal> <operator>+</operator>
            <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in name=\"testA\" dataset=\"A\" /&gt;"</literal> <operator>+</operator>
                   <literal type="string">"&lt;data-in name=\"testB\" dataset=\"B\" /&gt;"</literal> <operator>+</operator>
             <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
             <literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
                 <literal type="string">"&lt;data-in name=\"testC\" dataset=\"C\" /&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;data-in name=\"testD\" dataset=\"D\" /&gt;"</literal> <operator>+</operator>
             <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
        <literal type="string">"&lt;/or&gt;"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-combine.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name><name>TEST_TYPE</name><operator>.</operator><name>LATEST_RANGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputDir</name> <init>= <expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/b/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inputDir</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>createPartitionWithTime</name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><call><name><name>inputDir</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>inputDir</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHcatHdfs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConfForCombine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <comment type="line">//@formatter:off</comment>
            <expr><literal type="string">"&lt;and name=\"test\"&gt;"</literal> <operator>+</operator>
                       <literal type="string">"&lt;data-in name=\"testA\" dataset=\"A\" /&gt;"</literal> <operator>+</operator>
                       <literal type="string">"&lt;data-in name=\"testB\" dataset=\"B\" /&gt;"</literal> <operator>+</operator>
            <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-combine.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name><name>TEST_TYPE</name><operator>.</operator><name>CURRENT_SINGLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/08/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>addPartition</name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>, <argument><expr><literal type="string">"table1"</literal></expr></argument>, <argument><expr><literal type="string">"dt=20141008;country=usa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHcatHdfsLatest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConfForCombine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sd</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyy/MM/dd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>tzUTC</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sd</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><name>tzUTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <comment type="line">// @formatter:off</comment>
            <expr><literal type="string">"&lt;and name=\"test\" min = \"1\" &gt;"</literal> <operator>+</operator>
                       <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal> <operator>+</operator>
                       <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal> <operator>+</operator>
            <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-combine.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name><name>TEST_TYPE</name><operator>.</operator><name>LATEST_RANGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"input-data/d/"</literal> <operator>+</operator> <call><name><name>sd</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/_SUCCESS"</literal><operator>)</operator><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>sd</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyyMMdd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>addPartition</name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>, <argument><expr><literal type="string">"table1"</literal></expr></argument>, <argument><expr><literal type="string">"dt="</literal> <operator>+</operator> <call><name><name>sd</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">";country=usa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Configuration</name></type> <name>getConf</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><literal type="string">"2015-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>dataset1</name> <init>= <expr><literal type="string">"hcat://"</literal> <operator>+</operator> <call><name>getMetastoreAuthority</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set"</literal></expr></argument>, <argument><expr><call><name><name>dataset1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>, <argument><expr><literal type="string">"db_a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_b"</literal></expr></argument>, <argument><expr><literal type="string">"db_b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_c"</literal></expr></argument>, <argument><expr><literal type="string">"db_c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_d"</literal></expr></argument>, <argument><expr><literal type="string">"db_d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_e"</literal></expr></argument>, <argument><expr><literal type="string">"db_e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_f"</literal></expr></argument>, <argument><expr><literal type="string">"db_f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"wfPath"</literal></expr></argument>, <argument><expr><call><name>getWFPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>conf</name></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Configuration</name></type> <name>getConfForCombine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><literal type="string">"2015-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set_b"</literal></expr></argument>, <argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/input-data/b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set_d"</literal></expr></argument>, <argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/input-data/d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set_f"</literal></expr></argument>, <argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/input-data/f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><literal type="string">"2015-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>dataset1</name> <init>= <expr><literal type="string">"hcat://"</literal> <operator>+</operator> <call><name>getMetastoreAuthority</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set"</literal></expr></argument>, <argument><expr><call><name><name>dataset1</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_a"</literal></expr></argument>, <argument><expr><literal type="string">"db_a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_b"</literal></expr></argument>, <argument><expr><literal type="string">"db_b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_c"</literal></expr></argument>, <argument><expr><literal type="string">"db_c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_d"</literal></expr></argument>, <argument><expr><literal type="string">"db_d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_e"</literal></expr></argument>, <argument><expr><literal type="string">"db_e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"db_f"</literal></expr></argument>, <argument><expr><literal type="string">"db_f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"wfPath"</literal></expr></argument>, <argument><expr><call><name>getWFPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>conf</name></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>_testCoordSubmit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coordinatorXml</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>inputLogic</name></decl></parameter>, <parameter><decl><type><name>TEST_TYPE</name><modifier>...</modifier></type> <name>testType</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>appPath</name> <init>= <expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"coordinator.xml"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>content</name> <init>= <expr><call><name><name>IOUtils</name><operator>.</operator><name>getResourceAsString</name></name><argument_list>(<argument><expr><name>coordinatorXml</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>content</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"=input-logic="</literal></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>testType</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>content</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"=data-in-param-"</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">"="</literal></expr></argument>, <argument><expr><call><name>getEnumText</name><argument_list>(<argument><expr><name><name>testType</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>content</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"=data-in-param-"</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">"="</literal></expr></argument>, <argument><expr><call><name>getEnumText</name><argument_list>(<argument><expr><name><name>testType</name><index>[<expr><name><name>testType</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>Writer</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URI</name><argument_list>(<argument><expr><name>appPath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copyCharStream</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>COORDINATOR_APP_PATH</name></name></expr></argument>, <argument><expr><name>appPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>, <argument><expr><call><name>getTestUser</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"nameNode"</literal></expr></argument>, <argument><expr><literal type="string">"hdfs://localhost:9000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"queueName"</literal></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"jobTracker"</literal></expr></argument>, <argument><expr><literal type="string">"localhost:9001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"examplesRoot"</literal></expr></argument>, <argument><expr><literal type="string">"examples"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>coordId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><name>coordId</name> <operator>=</operator> <operator>new</operator> <call><name>CoordSubmitXCommand</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CommandException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"should not throw exception "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><name>coordId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getWFPath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>workflowUri</name> <init>= <expr><call><name>getTestCaseFileUri</name><argument_list>(<argument><expr><literal type="string">"workflow.xml"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>appXml</name> <init>= <expr><literal type="string">"&lt;workflow-app xmlns='uri:oozie:workflow:0.1' name='map-reduce-wf'&gt; "</literal> <operator>+</operator> <literal type="string">"&lt;start to='end' /&gt; "</literal>
                <operator>+</operator> <literal type="string">"&lt;end name='end' /&gt; "</literal> <operator>+</operator> <literal type="string">"&lt;/workflow-app&gt;"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>writeToFile</name><argument_list>(<argument><expr><name>appXml</name></expr></argument>, <argument><expr><name>workflowUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>workflowUri</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeToFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>appXml</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>appPath</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>wf</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>URI</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>appPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>out</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>wf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>appXml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>iOException</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><name>iOException</name></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkDataSets</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSets</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputDataSets</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>dataSet</name> <range>: <expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>dataSet</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><call><name>getTestCaseDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>inputDataSets</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>dataSet</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>dataSet</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><call><name>getTestCaseDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>inputDataSets</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dataSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>value</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>inputDataSets</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"/_SUCCESS"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>startCoordAction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CommandException</name></expr></argument>, <argument><expr><name>JPAExecutorException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordMaterializeTransitionXCommand</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordPushDependencyCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>waitFor</name><argument_list>(<argument><expr><literal type="number">50</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
                <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                        <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>!</operator><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorAction</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>,
                <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"Action status should not be waiting"</literal></expr></argument>,
                <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>waitFor</name><argument_list>(<argument><expr><literal type="number">50</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
                <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                        <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>!</operator><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>READY</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CoordinatorJob</name></type> <name>coordJob</name> <init>= <expr><call><name><name>CoordJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>CoordJobQuery</name><operator>.</operator><name>GET_COORD_JOB</name></name></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionStartXCommand</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>coordJob</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>coordJob</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>Configuration</name></type> <name>getActionConf</name><parameter_list>(<parameter><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>eAction</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getActionXml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>configElem</name> <init>= <expr><call><name><name>eAction</name><operator>.</operator><name>getChild</name></name><argument_list>(<argument><expr><literal type="string">"action"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getChild</name><argument_list>(<argument><expr><literal type="string">"workflow"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getChild</name><argument_list>(<argument><expr><literal type="string">"configuration"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>elementList</name> <init>= <expr><call><name><name>configElem</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><literal type="string">"property"</literal></expr></argument>, <argument><expr><call><name><name>eAction</name><operator>.</operator><name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Element</name></type> <name>element</name> <range>: <expr><name>elementList</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Element</name><operator>)</operator> <call><name><name>element</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><operator>(</operator><operator>(</operator><name>Element</name><operator>)</operator> <call><name><name>element</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>conf</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getEnumText</name><parameter_list>(<parameter><decl><type><name>TEST_TYPE</name></type> <name>testType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>testType</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>LATEST_SINGLE</name></expr>:</case>
                <return>return <expr><literal type="string">"&lt;instance&gt;\\${coord:latest(0)}&lt;/instance&gt;"</literal></expr>;</return>
            <case>case <expr><name>LATEST_RANGE</name></expr>:</case>
                <return>return <expr><literal type="string">"&lt;start-instance&gt;\\${coord:latest(-5)}&lt;/start-instance&gt;"</literal>
                        <operator>+</operator> <literal type="string">"&lt;end-instance&gt;\\${coord:latest(0)}&lt;/end-instance&gt;"</literal></expr>;</return>
            <case>case <expr><name>CURRENT_SINGLE</name></expr>:</case>
                <return>return <expr><literal type="string">"&lt;instance&gt;\\${coord:current(0)}&lt;/instance&gt;"</literal></expr>;</return>
            <case>case <expr><name>CURRENT_RANGE</name></expr>:</case>
                <return>return <expr><literal type="string">"&lt;start-instance&gt;\\${coord:current(-5)}&lt;/start-instance&gt;"</literal>
                        <operator>+</operator> <literal type="string">"&lt;end-instance&gt;\\${coord:current(0)}&lt;/end-instance&gt;"</literal></expr>;</return>
        </block_content>}</block></switch>
        <return>return <expr><literal type="string">""</literal></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>createDirWithTime</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dirPrefix</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>...</modifier></type> <name>hours</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sd</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyy/MM/dd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TimeZone</name></type> <name>tzUTC</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sd</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><name>tzUTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>createdDirPath</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>hour</name> <range>: <expr><name>hours</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>createdDirPath</name>
                    <operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><operator>(</operator><name>dirPrefix</name> <operator>+</operator> <call><name><name>sd</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>date</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>hour</name> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/_SUCCESS"</literal><operator>)</operator>
                            <operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>createdDirPath</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>createPartitionWithTime</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>...</modifier></type> <name>hours</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>createdPartition</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sd</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyyMMdd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>tzUTC</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sd</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><name>tzUTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>hour</name> <range>: <expr><name>hours</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>createdPartition</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>addPartition</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="string">"table1"</literal></expr></argument>,
                    <argument><expr><literal type="string">"dt="</literal> <operator>+</operator> <call><name><name>sd</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>date</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>hour</name> <operator>*</operator> <name>TIME_DAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">";country=usa"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>
        <return>return <expr><name>createdPartition</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>String</name></type> <name>addPartition</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>partitionSpec</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addPartition</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>partitionSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="string">"hcat://"</literal> <operator>+</operator> <name>server</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>db</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>partitionSpec</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestCoordinatorInputLogic</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestCoordinatorInputLogic</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..0679c8cbf</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestCoordinatorInputLogic</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">1054</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>CoordinatorActionBean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorAction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>CoordinatorJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>client</name><operator>.</operator><name>OozieClient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordActionInputCheckXCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordActionStartXCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordMaterializeTransitionXCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>command</name><operator>.</operator><name>coord</name><operator>.</operator><name>CoordSubmitXCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionQueryExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordJobQueryExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>JPAExecutorException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordJobQueryExecutor</name><operator>.</operator><name>CoordJobQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>executor</name><operator>.</operator><name>jpa</name><operator>.</operator><name>CoordActionQueryExecutor</name><operator>.</operator><name>CoordActionQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>test</name><operator>.</operator><name>XDataTestCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>JDOMException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>TestCoordinatorInputLogic</name> <super_list><extends>extends <super><name>XDataTestCase</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Services</name></type> <name>services</name></decl>;</decl_stmt>

    <function><annotation>@<name>Before</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>services</name> <operator>=</operator> <operator>new</operator> <call><name>Services</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>services</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>After</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>services</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>CommandException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testValidateRange</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;combine name=\"test\"&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;data-in dataset=\"b\" /&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/combine&gt;"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>inputEvent</name> <init>=
        <expr><literal type="string">"&lt;data-in name=\"A\" dataset=\"a\"&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;start-instance&gt;${coord:current(-5)}&lt;/start-instance&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;end-instance&gt;${coord:current(0)}&lt;/end-instance&gt;"</literal> <operator>+</operator>
        <literal type="string">"&lt;/data-in&gt;"</literal> <operator>+</operator>
        <literal type="string">"&lt;data-in name=\"B\" dataset=\"b\"&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;start-instance&gt;${coord:current(-4)}&lt;/start-instance&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;end-instance&gt;${coord:current(0)}&lt;/end-instance&gt;"</literal> <operator>+</operator>
       <literal type="string">"&lt;/data-in&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name>inputEvent</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CommandException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E0803</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDryRun</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;or name=\"test\"&gt;"</literal><operator>+</operator>
                <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                    <literal type="string">"&lt;or&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                    <literal type="string">"&lt;/or&gt;"</literal><operator>+</operator>
                    <literal type="string">"&lt;or&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal><operator>+</operator>
                    <literal type="string">"&lt;/or&gt;"</literal><operator>+</operator>
                <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
                <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                    <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                    <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/or&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNestedCondition</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
                <expr><literal type="string">"&lt;or name=\"test\"&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                            <literal type="string">"&lt;or&gt;"</literal><operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                            <literal type="string">"&lt;/or&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;or&gt;"</literal><operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal><operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;/or&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
                            <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                             <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;/or&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordMaterializeTransitionXCommand</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNestedCondition1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
              <literal type="string">"&lt;or&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"A\"/&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                   <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"C\"/&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"D\"/&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
             <literal type="string">"&lt;/or&gt;"</literal><operator>+</operator>
             <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                 <literal type="string">"&lt;data-in dataset=\"E\"/&gt;"</literal><operator>+</operator>
                 <literal type="string">"&lt;data-in dataset=\"F\"/&gt;"</literal><operator>+</operator>
             <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input3</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/e/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input4</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/f/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>input3</name></expr></argument>, <argument><expr><name>input4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNestedCondition2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;or name=\"${partitionName}\"&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                   <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"E\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"F\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/or&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input3</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/c/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input4</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/e/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input5</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/f/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input4</name></expr></argument>, <argument><expr><name>input5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSetsForFalse</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>input3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNestedCondition3</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                   <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                       <literal type="string">"&lt;data-in dataset=\"E\" /&gt;"</literal><operator>+</operator>
                       <literal type="string">"&lt;data-in dataset=\"F\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input3</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/c/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input4</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/d/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input5</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/e/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input6</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/f/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>input3</name></expr></argument>, <argument><expr><name>input4</name></expr></argument>, <argument><expr><name>input5</name></expr></argument>, <argument><expr><name>input6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimpleOr</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;or name=\"test\"&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/or&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimpleOr1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;or name=\"test\"&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                   <literal type="string">"&lt;or&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;/or&gt;"</literal><operator>+</operator>
          <literal type="string">"&lt;/or&gt;"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordMaterializeTransitionXCommand</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input1</name><init>=<expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>actionBean</name> <operator>=</operator> <call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrWithMin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;or name=\"test\"&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"A\" min=\"3\"/&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"B\" min=\"3\"/&gt;"</literal><operator>+</operator>
        <literal type="string">"&lt;/or&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><call><name>getInputEventForRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/07/23/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input3</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/21/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input4</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/20/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input5</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/19/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input3</name></expr></argument>, <argument><expr><name>input4</name></expr></argument>, <argument><expr><name>input5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAndWithMin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"A\" min=\"2\"/&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"B\" min=\"3\"/&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"C\" min=\"0\"/&gt;"</literal><operator>+</operator>

        <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><call><name>getInputEventForRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/07/23/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input3</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/21/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input4</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/20/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input5</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/19/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>input3</name></expr></argument>, <argument><expr><name>input4</name></expr></argument>, <argument><expr><name>input5</name></expr></argument>, <argument><expr><name>input5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultipleInstance</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"A\" min=\"2\"/&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal><operator>+</operator>

        <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>event</name> <init>=
                <expr><literal type="string">"&lt;data-in name=\"A\" dataset=\"a\"&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;instance&gt;${coord:current(-5)}&lt;/instance&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;instance&gt;${coord:latest(-1)}&lt;/instance&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;instance&gt;${coord:futureRange(0,2,10)}&lt;/instance&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;/data-in&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;data-in name=\"B\" dataset=\"b\"&gt;"</literal> <operator>+</operator>
                     <literal type="string">"&lt;instance&gt;${coord:latest(0)}&lt;/instance&gt;"</literal> <operator>+</operator>
                     <literal type="string">"&lt;instance&gt;${coord:latestRange(-3,0)}&lt;/instance&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;/data-in&gt;"</literal></expr></init></decl> ;</decl_stmt>

        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// 5 hour before</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// 5 hour before</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputDir</name> <init>= <expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/a/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inputDir</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/b/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startCoordActionForWaiting</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>inputDir</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/b/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>actionBean</name> <operator>=</operator> <call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><call><name><name>inputDir</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>inputDir</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAnd</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;data-in dataset=\"A\"/&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/and&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCombine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;combine name=\"test\"&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
        <literal type="string">"&lt;/combine&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><call><name>getInputEventForRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/07/23/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input3</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/07/22/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input4</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/21/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input5</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/20/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input6</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/19/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>input3</name></expr></argument>, <argument><expr><name>input4</name></expr></argument>, <argument><expr><name>input5</name></expr></argument>, <argument><expr><name>input6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCombineNegative</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:off</comment>
         <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
         <expr><literal type="string">"&lt;combine name=\"test\"&gt;"</literal><operator>+</operator>
                    <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                    <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
         <literal type="string">"&lt;/combine&gt;"</literal></expr></init></decl>;</decl_stmt>
         <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><call><name>getInputEventForRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/07/23/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/21/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/20/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordMaterializeTransitionXCommand</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>waitFor</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
                <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                        <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>!</operator><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorAction</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>,
                <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSingeSetWithMin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <expr><literal type="string">"&lt;or name=\"test\"&gt;"</literal><operator>+</operator>
                     <literal type="string">"&lt;data-in dataset=\"A\" min=\"3\" /&gt;"</literal><operator>+</operator>
        <literal type="string">"&lt;/or&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>

        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><call><name>getInputEventForRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/07/23/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// dataset with gap</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>input3</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/07/19/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>input3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCombineWithMin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <comment type="line">//@formatter:off</comment>
        <expr><literal type="string">"&lt;combine name=\"test\" min=\"4\"&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
        <literal type="string">"&lt;/combine&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><call><name>getInputEventForRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordMaterializeTransitionXCommand</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input2</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/07/23/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input3</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/07/22/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input4</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/21/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input5</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/b/2014/10/07/20/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>input3</name></expr></argument>, <argument><expr><name>input4</name></expr></argument>, <argument><expr><name>input5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMinWait</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <comment type="line">//@formatter:off</comment>
        <expr><literal type="string">"&lt;combine name=\"test\" min= \"4\" wait=\"1\"&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
        <literal type="string">"&lt;/combine&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// 5 hour before</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// 5 hour before</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><call><name>getInputEventForRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordMaterializeTransitionXCommand</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputDir</name> <init>= <expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/b/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordActionForWaiting</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// wait for 1 min</comment>
        <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><call><name><name>inputDir</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>inputDir</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWait</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <comment type="line">//@formatter:off</comment>
        <expr><literal type="string">"&lt;combine name=\"test\" wait=\"1\"&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                   <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
        <literal type="string">"&lt;/combine&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><call><name>getInputEventForRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordMaterializeTransitionXCommand</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputDir</name> <init>= <expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/b/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordActionForWaiting</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// wait for 1 min</comment>
        <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>inputDir</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/b/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><call><name><name>inputDir</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>inputDir</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWaitFail</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <comment type="line">//@formatter:off</comment>
                <expr><literal type="string">"&lt;or name=\"test\" min=\"${min}\" wait=\"${wait}\"&gt;"</literal><operator>+</operator>
                           <literal type="string">"&lt;data-in dataset=\"${dataA}\" /&gt;"</literal><operator>+</operator>
                           <literal type="string">"&lt;data-in dataset=\"${dataB}\" /&gt;"</literal><operator>+</operator>
                <literal type="string">"&lt;/or&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>, <argument><expr><literal type="string">"180"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"dataA"</literal></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"dataB"</literal></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><call><name>getInputEventForRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/b/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startCoordActionForWaiting</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLatest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-07T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>= <expr><literal type="string">"&lt;data-in name=\"test\" dataset=\"A\"/&gt;"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-latest.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>input1</name> <init>= <expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><literal type="string">"input-data/a/2014/10/08/00/_SUCCESS"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkDataSets</name><argument_list>(<argument><expr><name>dataSets</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLatestRange</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatDateOozieTZ</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>now</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>inputLogic</name> <init>=
        <comment type="line">//@formatter:off</comment>
              <expr><literal type="string">"&lt;data-in name=\"test\" dataset=\"A\" min =\"2\" /&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><literal type="string">"coord-inputlogic-range-latest.xml"</literal></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>createDirWithTime</name><argument_list>(<argument><expr><literal type="string">"input-data/a/"</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XConfiguration</name></type> <name>runConf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getRunConf</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dataSets</name> <init>= <expr><call><name><name>runConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputLogicData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

     <comment type="line">//TODO combine support for unresolved</comment>
     <comment type="line">// public void testLatestWithCombine() throws Exception {</comment>
     <comment type="line">// Configuration conf = getConf();</comment>
     <comment type="line">// conf.set("input_check", "combine(\"A\", \"B\")");</comment>
     <comment type="line">// conf.set("initial_instance_a", "2014-10-07T00:00Z");</comment>
     <comment type="line">// conf.set("initial_instance_b", "2014-10-07T00:00Z");</comment>
     <comment type="line">//</comment>
     <comment type="line">// String jobId = _testCoordSubmit("coord-inputlogic-range-latest.xml", conf);</comment>
     <comment type="line">//</comment>
     <comment type="line">// new CoordMaterializeTransitionXCommand(jobId, 3600).call();</comment>
     <comment type="line">// CoordinatorActionBean actionBean = CoordActionQueryExecutor.getInstance().get(</comment>
     <comment type="line">// CoordActionQuery.GET_COORD_ACTION, jobId + "@1");</comment>
     <comment type="line">// sleep(2000);</comment>
     <comment type="line">//</comment>
     <comment type="line">// new CoordActionInputCheckXCommand(jobId + "@1", jobId).call();</comment>
     <comment type="line">// assertEquals(actionBean.getStatus(), CoordinatorAction.Status.WAITING);</comment>
     <comment type="line">// createTestCaseSubDir("input-data/a/2014/10/08/00/_SUCCESS".split("/"));</comment>
     <comment type="line">// createTestCaseSubDir("input-data/a/2014/10/07/23/_SUCCESS".split("/"));</comment>
     <comment type="line">// createTestCaseSubDir("input-data/a/2014/10/07/22/_SUCCESS".split("/"));</comment>
     <comment type="line">// createTestCaseSubDir("input-data/b/2014/10/07/21/_SUCCESS".split("/"));</comment>
     <comment type="line">//</comment>
     <comment type="line">// new CoordActionInputCheckXCommand(jobId + "@1", jobId).call();</comment>
     <comment type="line">//</comment>
     <comment type="line">// actionBean = CoordActionQueryExecutor.getInstance().get(CoordActionQuery.GET_COORD_ACTION, jobId + "@1");</comment>
     <comment type="line">// assertEquals(actionBean.getStatus(), CoordinatorAction.Status.WAITING);</comment>
     <comment type="line">//</comment>
     <comment type="line">// createTestCaseSubDir("input-data/b/2014/10/07/20/_SUCCESS".split("/"));</comment>
     <comment type="line">// new CoordActionInputCheckXCommand(jobId + "@1", jobId).call();</comment>
     <comment type="line">//</comment>
     <comment type="line">// actionBean = CoordActionQueryExecutor.getInstance().get(CoordActionQuery.GET_COORD_ACTION, jobId + "@1");</comment>
     <comment type="line">// assertFalse(CoordinatorAction.Status.WAITING.equals(actionBean.getStatus()));</comment>
     <comment type="line">//</comment>
     <comment type="line">// }</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCoordWithoutInputCheck</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>jobId</name> <init>= <expr><call><name>setupCoord</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"coord-multiple-input-instance3.xml"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordMaterializeTransitionXCommand</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorAction</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>,
                <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getMissingDependencies</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"!!${coord:latest(0)}#${coord:latest(-1)}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>_testCoordSubmit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coordinatorXml</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>inputLogic</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><name>coordinatorXml</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>_testCoordSubmit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coordinatorXml</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>inputLogic</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>inputEvent</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>_testCoordSubmit</name><argument_list>(<argument><expr><name>coordinatorXml</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>, <argument><expr><name>inputEvent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>_testCoordSubmit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>coordinatorXml</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>inputLogic</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>inputEvent</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>dryRun</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>appPath</name> <init>= <expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"coordinator.xml"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>content</name> <init>= <expr><call><name><name>IOUtils</name><operator>.</operator><name>getResourceAsString</name></name><argument_list>(<argument><expr><name>coordinatorXml</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>content</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"=input-logic="</literal></expr></argument>, <argument><expr><name>inputLogic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>content</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"=input-events="</literal></expr></argument>, <argument><expr><name>inputEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Writer</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URI</name><argument_list>(<argument><expr><name>appPath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copyCharStream</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>COORDINATOR_APP_PATH</name></name></expr></argument>, <argument><expr><name>appPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>, <argument><expr><call><name>getTestUser</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"nameNode"</literal></expr></argument>, <argument><expr><literal type="string">"hdfs://localhost:9000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"queueName"</literal></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"jobTracker"</literal></expr></argument>, <argument><expr><literal type="string">"localhost:9001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"examplesRoot"</literal></expr></argument>, <argument><expr><literal type="string">"examples"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>CoordSubmitXCommand</name><argument_list>(<argument><expr><name>dryRun</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Configuration</name></type> <name>getConf</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>XConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set_a"</literal></expr></argument>, <argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/input-data/a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set_b"</literal></expr></argument>, <argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/input-data/b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set_c"</literal></expr></argument>, <argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/input-data/c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set_d"</literal></expr></argument>, <argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/input-data/d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set_e"</literal></expr></argument>, <argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/input-data/e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"data_set_f"</literal></expr></argument>, <argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name>getTestCaseDir</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"/input-data/f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"partitionName"</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><literal type="string">"2015-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_a"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"initial_instance_b"</literal></expr></argument>, <argument><expr><literal type="string">"2014-10-08T00:00Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"wfPath"</literal></expr></argument>, <argument><expr><call><name>getWFPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>conf</name></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getWFPath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>workflowUri</name> <init>= <expr><call><name>getTestCaseFileUri</name><argument_list>(<argument><expr><literal type="string">"workflow.xml"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>appXml</name> <init>= <expr><literal type="string">"&lt;workflow-app xmlns='uri:oozie:workflow:0.1' name='map-reduce-wf'&gt; "</literal> <operator>+</operator> <literal type="string">"&lt;start to='end' /&gt; "</literal>
                <operator>+</operator> <literal type="string">"&lt;end name='end' /&gt; "</literal> <operator>+</operator> <literal type="string">"&lt;/workflow-app&gt;"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>writeToFile</name><argument_list>(<argument><expr><name>appXml</name></expr></argument>, <argument><expr><name>workflowUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>workflowUri</name></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeToFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>appXml</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>appPath</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>wf</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>URI</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>appPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>out</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>wf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>appXml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>iex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><name>iex</name></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkDataSets</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSets</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputDataSets</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>dataSet</name> <range>: <expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>inputDataSets</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>dataSet</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>dataSet</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><call><name>getTestCaseDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>value</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>inputDataSets</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"/_SUCCESS"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkDataSetsForFalse</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataSets</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputDataSets</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>dataSet</name> <range>: <expr><call><name><name>dataSets</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>inputDataSets</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>dataSet</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>dataSet</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><call><name>getTestCaseDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>value</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>inputDataSets</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>startCoordAction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CommandException</name></expr></argument>, <argument><expr><name>JPAExecutorException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>startCoordAction</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>startCoordAction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>CoordinatorAction</name><operator>.</operator><name>Status</name></name></type> <name>coordActionStatus</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>CommandException</name></expr></argument>, <argument><expr><name>JPAExecutorException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordMaterializeTransitionXCommand</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>waitFor</name><argument_list>(<argument><expr><literal type="number">50</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
                <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                        <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>!</operator><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorAction</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>,
                <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>coordActionStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorJob</name></type> <name>coordJob</name> <init>= <expr><call><name><name>CoordJobQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>CoordJobQuery</name><operator>.</operator><name>GET_COORD_JOB</name></name></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionStartXCommand</name><argument_list>(<argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>coordJob</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>coordJob</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getJobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>startCoordActionForWaiting</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>jobId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CommandException</name></expr></argument>, <argument><expr><name>JPAExecutorException</name></expr></argument>,
            <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>CoordMaterializeTransitionXCommand</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>CoordActionInputCheckXCommand</name><argument_list>(<argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>call</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>waitFor</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
                <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                        <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>!</operator><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CoordinatorActionBean</name></type> <name>actionBean</name> <init>= <expr><call><name><name>CoordActionQueryExecutor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(
                <argument><expr><name><name>CoordActionQuery</name><operator>.</operator><name>GET_COORD_ACTION</name></name></expr></argument>, <argument><expr><name>jobId</name> <operator>+</operator> <literal type="string">"@1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"should be waiting"</literal></expr></argument>, <argument><expr><call><name><name>actionBean</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>CoordinatorAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>WAITING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>setupCoord</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>coordFile</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CommandException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>appPathFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getTestCaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"coordinator.xml"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Reader</name></type> <name>reader</name> <init>= <expr><call><name><name>IOUtils</name><operator>.</operator><name>getResourceAsReader</name></name><argument_list>(<argument><expr><name>coordFile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Writer</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>appPathFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>COORDINATOR_APP_PATH</name></name></expr></argument>, <argument><expr><call><name><name>appPathFile</name><operator>.</operator><name>toURI</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>, <argument><expr><call><name>getTestUser</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CoordSubmitXCommand</name></type> <name>sc</name> <init>= <expr><operator>new</operator> <call><name>CoordSubmitXCommand</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copyCharStream</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sc</name> <operator>=</operator> <operator>new</operator> <call><name>CoordSubmitXCommand</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sc</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getInputEventForRange</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <return>return
                <expr><literal type="string">"&lt;data-in name=\"A\" dataset=\"a\"&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;start-instance&gt;${coord:current(-5)}&lt;/start-instance&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;end-instance&gt;${coord:current(0)}&lt;/end-instance&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;/data-in&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;data-in name=\"B\" dataset=\"b\"&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;start-instance&gt;${coord:current(-5)}&lt;/start-instance&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;end-instance&gt;${coord:current(0)}&lt;/end-instance&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;/data-in&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;data-in name=\"C\" dataset=\"c\"&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;start-instance&gt;${coord:current(-5)}&lt;/start-instance&gt; "</literal> <operator>+</operator>
                    <literal type="string">"&lt;end-instance&gt;${coord:current(0)}&lt;/end-instance&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;/data-in&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;data-in name=\"D\" dataset=\"d\"&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;start-instance&gt;${coord:current(-5)}&lt;/start-instance&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;end-instance&gt;${coord:current(0)}&lt;/end-instance&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;/data-in&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;data-in name=\"E\" dataset=\"e\"&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;start-instance&gt;${coord:current(-5)}&lt;/start-instance&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;end-instance&gt;${coord:current(0)}&lt;/end-instance&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;/data-in&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;data-in name=\"F\" dataset=\"f\"&gt;"</literal> <operator>+</operator>
                    <literal type="string">"&lt;start-instance&gt;${coord:current(-5)}&lt;/start-instance&gt; "</literal> <operator>+</operator>
                    <literal type="string">"&lt;end-instance&gt;${coord:current(0)}&lt;/end-instance&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;/data-in&gt;"</literal></expr>;</return>
        <comment type="line">//@formatter:on</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>createDirWithTime</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dirPrefix</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>...</modifier></type> <name>hours</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sd</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyy/MM/dd/HH"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TimeZone</name></type> <name>tzUTC</name> <init>= <expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sd</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><name>tzUTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>createdDirPath</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>hour</name> <range>: <expr><name>hours</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>createdDirPath</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createTestCaseSubDir</name><argument_list>(<argument><expr><operator>(</operator><name>dirPrefix</name>
                    <operator>+</operator> <call><name><name>sd</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>date</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>hour</name> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/_SUCCESS"</literal><operator>)</operator><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>createdDirPath</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestInputLogicParser</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestInputLogicParser</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..622e57ffd</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>coord</name><operator>/</operator><name>input</name><operator>/</operator><name>logic</name><operator>/</operator><name><name>TestInputLogicParser</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">367</literal> @@</expr></expr_stmt>
<comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name></name>;</package>


<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>coord</name><operator>.</operator><name>input</name><operator>.</operator><name>logic</name><operator>.</operator><name>InputLogicParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XmlUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jdom</name><operator>.</operator><name>JDOMException</name></name>;</import>

<class><specifier>public</specifier> class <name>TestInputLogicParser</name> <super_list><extends>extends <super><name>TestCase</name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAndOr</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
                <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;or&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"A\"/&gt; "</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"B\"/&gt; "</literal> <operator>+</operator>
                            <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;or&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"C\"/&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"D\"/&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"((dependencyBuilder.input(\"A\").build() || dependencyBuilder.input(\"B\").build()) &amp;&amp; "</literal>
                <operator>+</operator> <literal type="string">"(dependencyBuilder.input(\"C\").build() || dependencyBuilder.input(\"D\").build()))"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAnd</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
                <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"A\"/&gt; "</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(dependencyBuilder.input(\"A\").build() &amp;&amp; dependencyBuilder.input(\"B\").build())"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOr</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
                <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;or&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"A\"/&gt; "</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(dependencyBuilder.input(\"A\").build() || dependencyBuilder.input(\"B\").build())"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrWithMin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>= <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator> <literal type="string">"&lt;or&gt;"</literal> <operator>+</operator> <literal type="string">"&lt;data-in dataset=\"A\" min=\"3\"/&gt; "</literal> <operator>+</operator> <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal> <operator>+</operator> <literal type="string">"&lt;/or&gt;"</literal>
                <operator>+</operator> <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(dependencyBuilder.input(\"A\").min(3).build() || dependencyBuilder.input(\"B\").build())"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrWithMinAtOr</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
                <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;or min=\"10\"&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"A\"/&gt; "</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr><literal type="string">"(dependencyBuilder.input(\"A\").min(10).build() || dependencyBuilder.input(\"B\").min(10).build())"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithName</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
                <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;or name =\"test\" min=\"10\"&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"A\"/&gt; "</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr><literal type="string">"(dependencyBuilder.input(\"A\").min(10).build() || dependencyBuilder.input(\"B\").min(10).build())"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parseWithName</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCombine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
                <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                      <literal type="string">"&lt;combine name =\"test\" min=\"10\"&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"A\"/&gt; "</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal> <operator>+</operator>
                      <literal type="string">"&lt;/combine&gt;"</literal> <operator>+</operator>
                <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(dependencyBuilder.combine(\"A\",\"B\").min(10).build())"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parseWithName</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithNameNested</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
                <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;or&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"A\"/&gt; "</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"B\"/&gt; "</literal> <operator>+</operator>
                            <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;or name=\"test\"&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"C\"/&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"D\"/&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">//@formatter:on</comment>

        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(dependencyBuilder.input(\"C\").build() || dependencyBuilder.input(\"D\").build())"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parseWithName</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDepth2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
     <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
             <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                     <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                         <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                             <literal type="string">"&lt;or&gt;"</literal> <operator>+</operator>
                                 <literal type="string">"&lt;data-in dataset=\"A\"/&gt;"</literal> <operator>+</operator>
                                 <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal> <operator>+</operator>
                             <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                             <literal type="string">"&lt;or&gt;"</literal> <operator>+</operator>
                                 <literal type="string">"&lt;data-in dataset=\"C\"/&gt;"</literal> <operator>+</operator>
                                 <literal type="string">"&lt;data-in dataset=\"D\"/&gt;"</literal> <operator>+</operator>
                             <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                      <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                      <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"E\"/&gt;"</literal> <operator>+</operator>
                          <literal type="string">"&lt;data-in dataset=\"F\"/&gt;"</literal> <operator>+</operator>
                      <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                   <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
         <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
     <comment type="line">//@formatter:on</comment>

        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(((dependencyBuilder.input(\"A\").build() || dependencyBuilder.input(\"B\").build())"</literal>
                <operator>+</operator> <literal type="string">" &amp;&amp; (dependencyBuilder.input(\"C\").build() || dependencyBuilder.input(\"D\").build()))"</literal>
                <operator>+</operator> <literal type="string">" &amp;&amp; (dependencyBuilder.input(\"E\").build() &amp;&amp; dependencyBuilder.input(\"F\").build()))"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDepth2WithCombine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
                <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;combine&gt;"</literal> <operator>+</operator>
                                    <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal> <operator>+</operator>
                                    <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;/combine&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;or&gt;"</literal> <operator>+</operator>
                                    <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal> <operator>+</operator>
                                    <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;/or&gt;"</literal> <operator>+</operator>
                           <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                           <literal type="string">"&lt;combine&gt;"</literal> <operator>+</operator>
                               <literal type="string">"&lt;data-in dataset=\"E\" /&gt;"</literal> <operator>+</operator>
                               <literal type="string">"&lt;data-in dataset=\"F\" /&gt;"</literal> <operator>+</operator>
                           <literal type="string">"&lt;/combine&gt;"</literal> <operator>+</operator>
                       <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(((dependencyBuilder.combine(\"A\",\"B\").build()) &amp;&amp; (dependencyBuilder.input(\"C\").build()"</literal>
                <operator>+</operator> <literal type="string">" || dependencyBuilder.input(\"D\").build())) &amp;&amp; (dependencyBuilder.combine(\"E\",\"F\").build()))"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAndCombine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
                <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;combine&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                            <literal type="string">"&lt;/combine&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;combine&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal> <operator>+</operator>
                                <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;/combine&gt;"</literal> <operator>+</operator>
                         <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                 <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr><literal type="string">"((dependencyBuilder.combine(\"A\",\"B\").build()) &amp;&amp; (dependencyBuilder.combine(\"C\",\"D\").build()))"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testComplex1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name><init>=
            <expr><literal type="string">"&lt;input-logic&gt;"</literal><operator>+</operator>
                <literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
                    <literal type="string">"&lt;or&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal><operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal><operator>+</operator>
                        <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
                    <literal type="string">"&lt;/or&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;and&gt;"</literal><operator>+</operator>
                     <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                     <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                 <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
            <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
        <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(((dependencyBuilder.input(\"A\").build() &amp;&amp; dependencyBuilder.input(\"B\").build())"</literal>
                <operator>+</operator> <literal type="string">" || (dependencyBuilder.input(\"C\").build() &amp;&amp; dependencyBuilder.input(\"D\").build()))"</literal>
                <operator>+</operator> <literal type="string">" &amp;&amp; (dependencyBuilder.input(\"A\").build() &amp;&amp; dependencyBuilder.input(\"B\").build()))"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAllAnd</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name><init>=
            <expr><literal type="string">"&lt;input-logic&gt;"</literal><operator>+</operator>
                <literal type="string">"&lt;and name=\"test\"&gt;"</literal><operator>+</operator>
                     <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
                     <literal type="string">"&lt;data-in dataset=\"B\" /&gt;"</literal><operator>+</operator>
                     <literal type="string">"&lt;data-in dataset=\"C\" /&gt;"</literal><operator>+</operator>
                     <literal type="string">"&lt;data-in dataset=\"D\" /&gt;"</literal><operator>+</operator>
                     <literal type="string">"&lt;data-in dataset=\"E\" /&gt;"</literal><operator>+</operator>
                     <literal type="string">"&lt;data-in dataset=\"F\" /&gt;"</literal><operator>+</operator>
            <literal type="string">"&lt;/and&gt;"</literal><operator>+</operator>
        <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(dependencyBuilder.input(\"A\").build() &amp;&amp; dependencyBuilder.input(\"B\").build() &amp;&amp; "</literal>
                <operator>+</operator> <literal type="string">"dependencyBuilder.input(\"C\").build() &amp;&amp; dependencyBuilder.input(\"D\").build() &amp;&amp; "</literal>
                <operator>+</operator> <literal type="string">"dependencyBuilder.input(\"E\").build() &amp;&amp; dependencyBuilder.input(\"F\").build())"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDataIn</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name><init>=
            <expr><literal type="string">"&lt;input-logic&gt;"</literal><operator>+</operator>
                  <literal type="string">"&lt;data-in dataset=\"A\" /&gt;"</literal><operator>+</operator>
            <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"dependencyBuilder.input(\"A\").build()"</literal></expr></argument>, <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMinWait</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
        <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
             <literal type="string">"&lt;and name=\"test\" min=\"3\" wait=\"10\"&gt;"</literal> <operator>+</operator>
                  <literal type="string">"&lt;data-in dataset=\"A\"/&gt; "</literal> <operator>+</operator>
                  <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal> <operator>+</operator>
             <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
        <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
       <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(dependencyBuilder.input(\"A\").min(3).inputWait(10).build() "</literal>
                <operator>+</operator> <literal type="string">"&amp;&amp; dependencyBuilder.input(\"B\").min(3).inputWait(10).build())"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parseWithName</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"(dependencyBuilder.input(\"A\").min(3).inputWait(10).build() "</literal>
                <operator>+</operator> <literal type="string">"&amp;&amp; dependencyBuilder.input(\"B\").min(3).inputWait(10).build())"</literal></expr></argument>, <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrAndDataIn</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JDOMException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//@formatter:off</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xml</name> <init>=
                <expr><literal type="string">"&lt;input-logic&gt;"</literal> <operator>+</operator>
                       <literal type="string">"&lt;or&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;and&gt;"</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"A\"/&gt; "</literal> <operator>+</operator>
                            <literal type="string">"&lt;data-in dataset=\"B\"/&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;/and&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;data-in dataset=\"C\"/&gt;"</literal> <operator>+</operator>
                        <literal type="string">"&lt;/or&gt;"</literal><operator>+</operator>
                <literal type="string">"&lt;/input-logic&gt;"</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">//@formatter:on</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>XmlUtils</name><operator>.</operator><name>parseXml</name></name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputLogicParser</name></type> <name>inputLogicParser</name> <init>= <expr><operator>new</operator> <call><name>InputLogicParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr><literal type="string">"((dependencyBuilder.input(\"A\").build() &amp;&amp; dependencyBuilder.input(\"B\").build()) || "</literal>
                <operator>+</operator> <literal type="string">"dependencyBuilder.input(\"C\").build())"</literal></expr></argument>,
                <argument><expr><call><name><name>inputLogicParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>



}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>action</name><operator>-</operator><name><name>sla</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>action</name><operator>-</operator><name><name>sla</name><operator>.</operator><name>xml</name></name>
<name>index</name> <name>f3f1bc09c</name><operator>..</operator><literal type="number">7df8c803a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>action</name><operator>-</operator><name><name>sla</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>action</name><operator>-</operator><name><name>sla</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@
 
     <operator>&lt;</operator><name>datasets</name><operator>&gt;</operator>
      <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"a"</literal> <name>frequency</name><operator>=</operator><literal type="string">"7"</literal> <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"2009-01-01T01:00Z"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
        <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>file</name><operator>:</operator><comment type="line">//#testDir/${YEAR}/${DAY}&lt;/uri-template&gt;</comment>
        <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>file</name><operator>:</operator><comment type="line" format="doxygen">///testDir/${YEAR}/${DAY}&lt;/uri-template&gt;</comment>
      <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
     <operator>&lt;</operator><operator>/</operator><name>datasets</name><operator>&gt;</operator>
     <operator>&lt;</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>combine</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>combine</name><operator>.</operator><name>xml</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..2cd4bd5b3</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>combine</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">119</literal> @@
<operator>&lt;</operator><operator>!</operator><operator>--</operator> <comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment> <operator>--</operator><operator>&gt;</operator>

<operator>&lt;</operator><name>coordinator</name><operator>-</operator><name>app</name> <name>name</name><operator>=</operator><literal type="string">"aggregator-coord"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
    <name>start</name><operator>=</operator><literal type="string">"${start_time}"</literal> <name>end</name><operator>=</operator><literal type="string">"${end_time}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal>
    <name>xmlns</name><operator>=</operator><literal type="string">"uri:oozie:coordinator:0.5"</literal><operator>&gt;</operator>
    <operator>&lt;</operator><name>controls</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>concurrency</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>concurrency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>throttle</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>throttle</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>controls</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>datasets</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"a"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>db_a</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>table</name></expr>}</block><operator>/</operator><name>dt</name><operator>=</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><name>$</name><block>{<expr><name>DAY</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>country</name><operator>=</operator><name>usa</name>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"b"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_b</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"c"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>db_c</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>table</name></expr>}</block><operator>/</operator><name>dt</name><operator>=</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><name>$</name><block>{<expr><name>DAY</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>country</name><operator>=</operator><name>usa</name>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"d"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_d</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"e"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>db_e</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>table</name></expr>}</block><operator>/</operator><name>dt</name><operator>=</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><name>$</name><block>{<expr><name>DAY</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>country</name><operator>=</operator><name>usa</name>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"f"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_f</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"aggregated-logs"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(10)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"2014-10-08T00:00Z"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>file</name><operator>:</operator><comment type="line" format="doxygen">///output-data/aggregator/aggregatedLogs/${YEAR}/${MONTH}/${DAY}</comment>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>datasets</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"A"</literal> <name>dataset</name><operator>=</operator><literal type="string">"a"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">1</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"B"</literal> <name>dataset</name><operator>=</operator><literal type="string">"b"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">2</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"C"</literal> <name>dataset</name><operator>=</operator><literal type="string">"c"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">3</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"D"</literal> <name>dataset</name><operator>=</operator><literal type="string">"d"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">4</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"E"</literal> <name>dataset</name><operator>=</operator><literal type="string">"e"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">5</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"F"</literal> <name>dataset</name><operator>=</operator><literal type="string">"f"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">6</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>
        <operator>=</operator><name>input</name><operator>-</operator><name>logic</name><operator>=</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>out</name> <name>name</name><operator>=</operator><literal type="string">"output"</literal> <name>dataset</name><operator>=</operator><literal type="string">"aggregated-logs"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>out</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>action</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>workflow</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>app</name><operator>-</operator><name>path</name><operator>&gt;</operator><name>hdfs</name><operator>:</operator><comment type="line" format="doxygen">///tmp/workflows&lt;/app-path&gt;</comment>
            <operator>&lt;</operator><name>configuration</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>jobTracker</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>jobTracker</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>nameNode</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>nameNode</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>queueName</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>queueName</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>inputLogicData</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>dataIn</name><argument_list>(<argument><expr><name>partitionName</name></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
            <operator>&lt;</operator><operator>/</operator><name>configuration</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>workflow</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>action</name><operator>&gt;</operator>
<operator>&lt;</operator><operator>/</operator><name>coordinator</name><operator>-</operator><name>app</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>hcat</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>hcat</name><operator>.</operator><name>xml</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..ff260d3d7</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>hcat</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">119</literal> @@
<operator>&lt;</operator><operator>!</operator><operator>--</operator> <comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment> <operator>--</operator><operator>&gt;</operator>
 <operator>&lt;</operator><name>coordinator</name><operator>-</operator><name>app</name> <name>name</name><operator>=</operator><literal type="string">"aggregator-coord"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
    <name>start</name><operator>=</operator><literal type="string">"${start_time}"</literal> <name>end</name><operator>=</operator><literal type="string">"${end_time}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal>
    <name>xmlns</name><operator>=</operator><literal type="string">"uri:oozie:coordinator:0.5"</literal><operator>&gt;</operator>
    <operator>&lt;</operator><name>controls</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>concurrency</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>concurrency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>throttle</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>throttle</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>controls</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>datasets</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"a"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>db_a</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>table</name></expr>}</block><operator>/</operator><name>dt</name><operator>=</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><name>$</name><block>{<expr><name>DAY</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>country</name><operator>=</operator><name>usa</name>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"b"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>db_b</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>table</name></expr>}</block><operator>/</operator><name>dt</name><operator>=</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><name>$</name><block>{<expr><name>DAY</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>country</name><operator>=</operator><name>usa</name>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"c"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>db_c</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>table</name></expr>}</block><operator>/</operator><name>dt</name><operator>=</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><name>$</name><block>{<expr><name>DAY</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>country</name><operator>=</operator><name>usa</name>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"d"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>db_d</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>table</name></expr>}</block><operator>/</operator><name>dt</name><operator>=</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><name>$</name><block>{<expr><name>DAY</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>country</name><operator>=</operator><name>usa</name>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"e"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>db_e</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>table</name></expr>}</block><operator>/</operator><name>dt</name><operator>=</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><name>$</name><block>{<expr><name>DAY</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>country</name><operator>=</operator><name>usa</name>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"f"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>db_f</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>table</name></expr>}</block><operator>/</operator><name>dt</name><operator>=</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><name>$</name><block>{<expr><name>DAY</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name>country</name><operator>=</operator><name>usa</name>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"aggregated-logs"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:days(10)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"2014-10-08T00:00Z"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>file</name><operator>:</operator><comment type="line" format="doxygen">///output-data/aggregator/aggregatedLogs/${YEAR}/${MONTH}/${DAY}</comment>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>datasets</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"A"</literal> <name>dataset</name><operator>=</operator><literal type="string">"a"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">1</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"B"</literal> <name>dataset</name><operator>=</operator><literal type="string">"b"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">2</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"C"</literal> <name>dataset</name><operator>=</operator><literal type="string">"c"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">3</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"D"</literal> <name>dataset</name><operator>=</operator><literal type="string">"d"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">4</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"E"</literal> <name>dataset</name><operator>=</operator><literal type="string">"e"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">5</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"F"</literal> <name>dataset</name><operator>=</operator><literal type="string">"f"</literal><operator>&gt;</operator>
            <operator>=</operator><name>data</name><operator>-</operator><name>in</name><operator>-</operator><name>param</name><operator>-</operator><literal type="number">6</literal><operator>=</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>
        <operator>=</operator><name>input</name><operator>-</operator><name>logic</name><operator>=</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>out</name> <name>name</name><operator>=</operator><literal type="string">"output"</literal> <name>dataset</name><operator>=</operator><literal type="string">"aggregated-logs"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>out</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>
    <operator>&lt;</operator><name>action</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>workflow</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>app</name><operator>-</operator><name>path</name><operator>&gt;</operator><name>hdfs</name><operator>:</operator><comment type="line" format="doxygen">///tmp/workflows&lt;/app-path&gt;</comment>
            <operator>&lt;</operator><name>configuration</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>jobTracker</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>jobTracker</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>nameNode</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>nameNode</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>queueName</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>queueName</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>inputLogicData</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>dataIn</name><argument_list>(<argument><expr><name>partitionName</name></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>

            <operator>&lt;</operator><operator>/</operator><name>configuration</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>workflow</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>action</name><operator>&gt;</operator>
<operator>&lt;</operator><operator>/</operator><name>coordinator</name><operator>-</operator><name>app</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>latest</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>latest</name><operator>.</operator><name>xml</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..576f00dfc</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>latest</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">124</literal> @@
<operator>&lt;</operator><operator>!</operator><operator>--</operator> <comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment> <operator>--</operator><operator>&gt;</operator>

<operator>&lt;</operator><name>coordinator</name><operator>-</operator><name>app</name> <name>name</name><operator>=</operator><literal type="string">"aggregator-coord"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
    <name>start</name><operator>=</operator><literal type="string">"${start_time}"</literal> <name>end</name><operator>=</operator><literal type="string">"${end_time}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal>
    <name>xmlns</name><operator>=</operator><literal type="string">"uri:oozie:coordinator:0.5"</literal><operator>&gt;</operator>
    <operator>&lt;</operator><name>controls</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>concurrency</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>concurrency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>throttle</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>throttle</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>controls</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>datasets</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"a"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_a</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"b"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_b}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_b</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"c"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_c</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"d"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_d</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"e"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_e</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"f"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_f</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>


        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"aggregated-logs"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(10)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"2014-10-08T00:00Z"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>file</name><operator>:</operator><comment type="line" format="doxygen">///output-data/aggregator/aggregatedLogs/${YEAR}/${MONTH}/${DAY}/${HOUR}</comment>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>datasets</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"A"</literal> <name>dataset</name><operator>=</operator><literal type="string">"a"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"B"</literal> <name>dataset</name><operator>=</operator><literal type="string">"b"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"C"</literal> <name>dataset</name><operator>=</operator><literal type="string">"c"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"D"</literal> <name>dataset</name><operator>=</operator><literal type="string">"d"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"E"</literal> <name>dataset</name><operator>=</operator><literal type="string">"e"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"F"</literal> <name>dataset</name><operator>=</operator><literal type="string">"f"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>
        <operator>=</operator><name>input</name><operator>-</operator><name>logic</name><operator>=</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>out</name> <name>name</name><operator>=</operator><literal type="string">"output"</literal> <name>dataset</name><operator>=</operator><literal type="string">"aggregated-logs"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>out</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>action</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>workflow</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>app</name><operator>-</operator><name>path</name><operator>&gt;</operator><name>$</name><block>{<expr><name>wfPath</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>app</name><operator>-</operator><name>path</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>configuration</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>jobTracker</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>jobTracker</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>nameNode</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>nameNode</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>queueName</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>queueName</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>inputLogicData</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>dataIn</name><argument_list>(<argument><expr><name>partitionName</name></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
            <operator>&lt;</operator><operator>/</operator><name>configuration</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>workflow</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>action</name><operator>&gt;</operator>
<operator>&lt;</operator><operator>/</operator><name>coordinator</name><operator>-</operator><name>app</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name>range</name><operator>-</operator><name><name>latest</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name>range</name><operator>-</operator><name><name>latest</name><operator>.</operator><name>xml</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..f9d79c27d</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name>range</name><operator>-</operator><name><name>latest</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">130</literal> @@
<operator>&lt;</operator><operator>!</operator><operator>--</operator> <comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment> <operator>--</operator><operator>&gt;</operator>

<operator>&lt;</operator><name>coordinator</name><operator>-</operator><name>app</name> <name>name</name><operator>=</operator><literal type="string">"aggregator-coord"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
    <name>start</name><operator>=</operator><literal type="string">"${start_time}"</literal> <name>end</name><operator>=</operator><literal type="string">"${end_time}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal>
    <name>xmlns</name><operator>=</operator><literal type="string">"uri:oozie:coordinator:0.5"</literal><operator>&gt;</operator>
    <operator>&lt;</operator><name>controls</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>concurrency</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>concurrency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>throttle</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>throttle</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>controls</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>datasets</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"a"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_a</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"b"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_b}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_b</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"c"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_c</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"d"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_d</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"e"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_e</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"f"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_f</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>


        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"aggregated-logs"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(10)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"2014-10-08T00:00Z"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>file</name><operator>:</operator><comment type="line" format="doxygen">///output-data/aggregator/aggregatedLogs/${YEAR}/${MONTH}/${DAY}/${HOUR}</comment>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>datasets</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"A"</literal> <name>dataset</name><operator>=</operator><literal type="string">"a"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"B"</literal> <name>dataset</name><operator>=</operator><literal type="string">"b"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"C"</literal> <name>dataset</name><operator>=</operator><literal type="string">"c"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"D"</literal> <name>dataset</name><operator>=</operator><literal type="string">"d"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"E"</literal> <name>dataset</name><operator>=</operator><literal type="string">"e"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"F"</literal> <name>dataset</name><operator>=</operator><literal type="string">"f"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>start</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>latest</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>end</name><operator>-</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>
        <operator>=</operator><name>input</name><operator>-</operator><name>logic</name><operator>=</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>out</name> <name>name</name><operator>=</operator><literal type="string">"output"</literal> <name>dataset</name><operator>=</operator><literal type="string">"aggregated-logs"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>out</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>action</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>workflow</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>app</name><operator>-</operator><name>path</name><operator>&gt;</operator><name>$</name><block>{<expr><name>wfPath</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>app</name><operator>-</operator><name>path</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>configuration</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>jobTracker</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>jobTracker</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>nameNode</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>nameNode</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>queueName</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>queueName</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>inputLogicData</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>dataIn</name><argument_list>(<argument><expr><name>partitionName</name></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
            <operator>&lt;</operator><operator>/</operator><name>configuration</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>workflow</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>action</name><operator>&gt;</operator>
<operator>&lt;</operator><operator>/</operator><name>coordinator</name><operator>-</operator><name>app</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>range</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>range</name><operator>.</operator><name>xml</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..d6581e7dc</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name>inputlogic</name><operator>-</operator><name><name>range</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">107</literal> @@
<operator>&lt;</operator><operator>!</operator><operator>--</operator> <comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment> <operator>--</operator><operator>&gt;</operator>

<operator>&lt;</operator><name>coordinator</name><operator>-</operator><name>app</name> <name>name</name><operator>=</operator><literal type="string">"aggregator-coord"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
    <name>start</name><operator>=</operator><literal type="string">"${start_time}"</literal> <name>end</name><operator>=</operator><literal type="string">"${end_time}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal>
    <name>xmlns</name><operator>=</operator><literal type="string">"uri:oozie:coordinator:0.5"</literal><operator>&gt;</operator>
    <operator>&lt;</operator><name>controls</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>concurrency</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>concurrency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>throttle</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>throttle</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>controls</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>datasets</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"a"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_a</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"b"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_b}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_b</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"c"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_c</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"d"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_d</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"e"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_e</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"f"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_f</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>


        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"aggregated-logs"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(10)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"2014-10-08T00:00Z"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>file</name><operator>:</operator><comment type="line" format="doxygen">///output-data/aggregator/aggregatedLogs/${YEAR}/${MONTH}/${DAY}/${HOUR}</comment>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>datasets</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>=</operator><name>input</name><operator>-</operator><name>events</name><operator>=</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>
        <operator>=</operator><name>input</name><operator>-</operator><name>logic</name><operator>=</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>out</name> <name>name</name><operator>=</operator><literal type="string">"output"</literal> <name>dataset</name><operator>=</operator><literal type="string">"aggregated-logs"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>out</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>action</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>workflow</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>app</name><operator>-</operator><name>path</name><operator>&gt;</operator><name>$</name><block>{<expr><name>wfPath</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>app</name><operator>-</operator><name>path</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>configuration</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>jobTracker</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>jobTracker</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>nameNode</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>nameNode</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>queueName</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>queueName</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>inputLogicData</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>dataIn</name><argument_list>(<argument><expr><name>partitionName</name></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
            <operator>&lt;</operator><operator>/</operator><name>configuration</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>workflow</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>action</name><operator>&gt;</operator>
<operator>&lt;</operator><operator>/</operator><name>coordinator</name><operator>-</operator><name>app</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name><name>inputlogic</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name><name>inputlogic</name><operator>.</operator><name>xml</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..51b67ac55</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>coord</name><operator>-</operator><name><name>inputlogic</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">126</literal> @@
<operator>&lt;</operator><operator>!</operator><operator>--</operator> <comment type="block" format="javadoc">/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment> <operator>--</operator><operator>&gt;</operator>

<operator>&lt;</operator><name>coordinator</name><operator>-</operator><name>app</name> <name>name</name><operator>=</operator><literal type="string">"aggregator-coord"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
    <name>start</name><operator>=</operator><literal type="string">"${start_time}"</literal> <name>end</name><operator>=</operator><literal type="string">"${end_time}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal>
    <name>xmlns</name><operator>=</operator><literal type="string">"uri:oozie:coordinator:0.5"</literal><operator>&gt;</operator>
    <operator>&lt;</operator><name>controls</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>concurrency</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>concurrency</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>throttle</name><operator>&gt;</operator><literal type="number">1</literal><operator>&lt;</operator><operator>/</operator><name>throttle</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>controls</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>datasets</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"a"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_a</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"b"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_b}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_b</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"c"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_c</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"d"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_d</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"e"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_e</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>

        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"f"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(1)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"${initial_instance_a}"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>$</name><block>{<expr><name>data_set_f</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>YEAR</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>MONTH</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>DAY</name></expr>}</block><operator>/</operator><name>$</name><block>{<expr><name>HOUR</name></expr>}</block>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>


        <operator>&lt;</operator><name>dataset</name> <name>name</name><operator>=</operator><literal type="string">"aggregated-logs"</literal> <name>frequency</name><operator>=</operator><literal type="string">"${coord:hours(10)}"</literal>
            <name>initial</name><operator>-</operator><name>instance</name><operator>=</operator><literal type="string">"2014-10-08T00:00Z"</literal> <name>timezone</name><operator>=</operator><literal type="string">"UTC"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator><name>file</name><operator>:</operator><comment type="line" format="doxygen">///output-data/aggregator/aggregatedLogs/${YEAR}/${MONTH}/${DAY}/${HOUR}</comment>
            <operator>&lt;</operator><operator>/</operator><name>uri</name><operator>-</operator><name>template</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>dataset</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>datasets</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"A"</literal> <name>dataset</name><operator>=</operator><literal type="string">"a"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"B"</literal> <name>dataset</name><operator>=</operator><literal type="string">"b"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"C"</literal> <name>dataset</name><operator>=</operator><literal type="string">"c"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"D"</literal> <name>dataset</name><operator>=</operator><literal type="string">"d"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"E"</literal> <name>dataset</name><operator>=</operator><literal type="string">"e"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>in</name> <name>name</name><operator>=</operator><literal type="string">"F"</literal> <name>dataset</name><operator>=</operator><literal type="string">"f"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>in</name><operator>&gt;</operator>


    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>events</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>
        <operator>=</operator><name>input</name><operator>-</operator><name>logic</name><operator>=</operator>
    <operator>&lt;</operator><operator>/</operator><name>input</name><operator>-</operator><name>logic</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>data</name><operator>-</operator><name>out</name> <name>name</name><operator>=</operator><literal type="string">"output"</literal> <name>dataset</name><operator>=</operator><literal type="string">"aggregated-logs"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>instance</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>instance</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>data</name><operator>-</operator><name>out</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>output</name><operator>-</operator><name>events</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>action</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>workflow</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>app</name><operator>-</operator><name>path</name><operator>&gt;</operator><name>$</name><block>{<expr><name>wfPath</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>app</name><operator>-</operator><name>path</name><operator>&gt;</operator>
            <operator>&lt;</operator><name>configuration</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>jobTracker</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>jobTracker</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>nameNode</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>nameNode</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>queueName</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>queueName</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>property</name><operator>&gt;</operator>
                    <operator>&lt;</operator><name>name</name><operator>&gt;</operator><name><name>inputLogicData</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>name</name></argument>&gt;</argument_list></name>
                    <operator>&lt;</operator><name>value</name><operator>&gt;</operator><name>$</name><block>{<expr><name>coord</name><operator>:</operator><call><name>dataIn</name><argument_list>(<argument><expr><name>partitionName</name></expr></argument>)</argument_list></call></expr>}</block><operator>&lt;</operator><operator>/</operator><name>value</name><operator>&gt;</operator>
                <operator>&lt;</operator><operator>/</operator><name>property</name><operator>&gt;</operator>
            <operator>&lt;</operator><operator>/</operator><name>configuration</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>workflow</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>action</name><operator>&gt;</operator>
<operator>&lt;</operator><operator>/</operator><name>coordinator</name><operator>-</operator><name>app</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<name>index</name> <name>dc519cb97</name><operator>..</operator><literal type="number">26f10a3ef</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name><name>pom</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">1266</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1266</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@
                 <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>compile</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
             <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>
 
            <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name><name>commons</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
                <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name>commons</name><operator>-</operator><name><name>jexl</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
                <operator>&lt;</operator><name>version</name><operator>&gt;</operator><literal type="number">2.1.1</literal><operator>&lt;</operator><operator>/</operator><name>version</name><operator>&gt;</operator>
                <operator>&lt;</operator><name>scope</name><operator>&gt;</operator><name><name>compile</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>scope</name></argument>&gt;</argument_list></name>
            <operator>&lt;</operator><operator>/</operator><name>dependency</name><operator>&gt;</operator>

             <operator>&lt;</operator><name>dependency</name><operator>&gt;</operator>
                 <operator>&lt;</operator><name>groupId</name><operator>&gt;</operator><name><name>javax</name><operator>.</operator><name><name>mail</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>groupId</name></argument>&gt;</argument_list></name></name>
                 <operator>&lt;</operator><name>artifactId</name><operator>&gt;</operator><name><name>mail</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>artifactId</name></argument>&gt;</argument_list></name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">5c2ee5b6b</literal><operator>..</operator><literal type="number">9639b0c3d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
 <operator>--</operator> <name>Oozie</name> <literal type="number">4.3.0</literal> <call><name>release</name> <argument_list>(<argument><expr><name>trunk</name> <operator>-</operator> <name>unreleased</name></expr></argument>)</argument_list></call>
 
<name>OOZIE</name><operator>-</operator><literal type="number">1976</literal> <name>Specifying</name> <name>coordinator</name> <name>input</name> <name>datasets</name> <name>in</name> <name>more</name> <name>logical</name> <call><name>ways</name> <argument_list>(<argument><expr><name>puru</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">2444</literal> <name>Need</name> <name>conditional</name> <name>logic</name> <name>in</name> <call><name>bundles</name> <argument_list>(<argument><expr><name>satishsaley</name> <name>via</name> <name>puru</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">2394</literal> <name>Oozie</name> <name>can</name> <name>execute</name> <name>command</name> <name>without</name> <name>holding</name> <call><name>lock</name> <argument_list>(<argument><expr><name>puru</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">1922</literal> <name>MemoryLocksService</name> <name>fails</name></expr></expr_stmt> <if_stmt><if>if lock is acquired multiple times in same thread and released <condition>(<expr><name>puru</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></try></block_content></block></function></block_content></block></for></block_content></block></try></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</unit>
