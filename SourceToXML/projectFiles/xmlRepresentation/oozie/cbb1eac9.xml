<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/oozie/cbb1eac9.java"><expr_stmt><expr><name>From</name> <name>cbb1eac9db427db0047847e3ed5564979be5571c</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Robert</name> <name><name>Kanter</name> <argument_list type="generic">&lt;<argument><name>rkanter</name><annotation>@<name><name>cloudera</name><operator>.</operator><name>com</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Mon</name></expr><operator>,</operator> <expr><literal type="number">16</literal> <name>Jun</name> <literal type="number">2014</literal> <literal type="number">17</literal><operator>:</operator><literal type="number">30</literal><operator>:</operator><literal type="number">12</literal> <operator>-</operator><literal type="number">0700</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>OOZIE</name><operator>-</operator><literal type="number">1879</literal> <name>Workflow</name> <name>Rerun</name> <name>causes</name> <name>error</name> <name>depending</name> <name>on</name> <name>the</name> <name>order</name>
 <name>of</name> <name>forked</name> <call><name>nodes</name> <argument_list>(<argument><expr><name>rkanter</name></expr></argument>)</argument_list></call>

<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowActionBean</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ReRunXCommand</name><operator>.</operator><name>java</name></name>       <operator>|</operator> <literal type="number">10</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  <literal type="number">1</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>workflow</name><operator>/</operator><name><name>WorkflowLib</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  <literal type="number">8</literal> <operator>++</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>workflow</name><operator>/</operator><name>lite</name><operator>/</operator><name><name>LiteWorkflowInstance</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">72</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>workflow</name><operator>/</operator><name>lite</name><operator>/</operator><name><name>LiteWorkflowLib</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  <literal type="number">7</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>TestReRunXCommand</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">68</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>rerun</name><operator>-</operator><name>wf</name><operator>-</operator><name><name>fork</name><operator>.</operator><name>xml</name></name>     <operator>|</operator> <literal type="number">63</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator>
 <name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>                               <operator>|</operator>  <literal type="number">1</literal> <operator>+</operator>
 <literal type="number">9</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">226</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">6</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>rerun</name><operator>-</operator><name>wf</name><operator>-</operator><name><name>fork</name><operator>.</operator><name>xml</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowActionBean</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowActionBean</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">686199518..e64e9bf6a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowActionBean</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name><name>WorkflowActionBean</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">109</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">109</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>simple</name><operator>.</operator><name>JSONObject</name></name>;</import>
 
     <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_RETRY_MANUAL_ACTIONS"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select OBJECT(a) from WorkflowActionBean a where a.wfId = :wfId AND (a.statusStr = 'START_RETRY' OR a.statusStr = 'START_MANUAL' OR a.statusStr = 'END_RETRY' OR a.statusStr = 'END_MANUAL')"</literal></expr></argument>)</argument_list></annotation><operator>,</operator>
 
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTIONS_FOR_WORKFLOW_RERUN"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.name, a.statusStr from WorkflowActionBean a where a.wfId = :wfId order by a.startTimestamp"</literal></expr></argument>)</argument_list></annotation> })
    <annotation>@<name>NamedQuery</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"GET_ACTIONS_FOR_WORKFLOW_RERUN"</literal></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <literal type="string">"select a.id, a.name, a.statusStr, a.endTimestamp from WorkflowActionBean a where a.wfId = :wfId order by a.startTimestamp"</literal></expr></argument>)</argument_list></annotation> })
 <class><annotation>@<name>Table</name><argument_list>(<argument><expr><name>name</name> <operator>=</operator> <literal type="string">"WF_ACTIONS"</literal></expr></argument>)</argument_list></annotation>
 <specifier>public</specifier> class <name>WorkflowActionBean</name> <super_list><implements>implements <super><name>Writable</name></super>, <super><name>WorkflowAction</name></super>, <super><name>JsonBean</name></super></implements></super_list> <block>{
     <annotation>@<name>Id</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ReRunXCommand</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ReRunXCommand</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fe588d4da</name><operator>..</operator><literal type="number">5dd06ca0c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ReRunXCommand</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>command</name><operator>/</operator><name>wf</name><operator>/</operator><name><name>ReRunXCommand</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">158</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>ReRunXCommand</name> extends <name><name>WorkflowXCommand</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name> <block>{
             <comment type="line">// Resetting the conf to contain all the resolved values is necessary to ensure propagation of Oozie properties to Hadoop calls downstream</comment>
             <expr><name>conf</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>XConfiguration</name><operator>)</operator> <name>conf</name><operator>)</operator><operator>.</operator><call><name>resolve</name><argument_list>()</argument_list></call></expr>;
 
            <comment type="line">// Prepare the action endtimes map</comment>
            <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Date</name></argument>&gt;</argument_list></name> <name>actionEndTimes</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Date</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
            <for>for <control>(<init><decl><type><name>WorkflowActionBean</name></type> <name>action</name> <range>: <expr><name>actions</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>action</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>actionEndTimes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>action</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>action</name><operator>.</operator><name>getEndTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt/></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt>
            }</block></class>

             <try>try <block>{<block_content>
                <expr_stmt><expr><name>newWfInstance</name> <operator>=</operator> <call><name><name>workflowLib</name><operator>.</operator><name>createInstance</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>newWfInstance</name> <operator>=</operator> <call><name><name>workflowLib</name><operator>.</operator><name>createInstance</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>jobId</name></expr></argument>, <argument><expr><name>actionEndTimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block>
             <catch>catch <parameter_list>(<parameter><decl><type><name>WorkflowException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                 <throw>throw <expr><operator>new</operator> <call><name>CommandException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9156a27c0</literal><operator>..</operator><literal type="number">0c323a379</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>executor</name><operator>/</operator><name>jpa</name><operator>/</operator><name><name>WorkflowActionQueryExecutor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">364</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">364</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>WorkflowActionQueryExecutor</name> extends
                 <call><name><name>bean</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setStatusStr</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bean</name><operator>.</operator><name>setEndTime</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <break>break;</break>
             <default>default:</default>
                 <throw>throw <expr><operator>new</operator> <call><name>JPAExecutorException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>E0603</name></name></expr></argument>, <argument><expr><literal type="string">"QueryExecutor cannot construct action bean for "</literal>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>workflow</name><operator>/</operator><name><name>WorkflowLib</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>workflow</name><operator>/</operator><name><name>WorkflowLib</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7e4c90a66</literal><operator>..</operator><name>e79e59d87</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>workflow</name><operator>/</operator><name><name>WorkflowLib</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>workflow</name><operator>/</operator><name><name>WorkflowLib</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">17</literal></expr></argument>,<argument><expr><literal type="number">8</literal> @@
  <operator>*</operator><operator>/</operator></expr></argument>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>workflow</name></name>;</package></argument_list></call></expr></throw>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">50</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> interface <name>WorkflowLib</name> <block>{
     <expr><specifier>public</specifier> <name>WorkflowInstance</name> <call><name>createInstance</name><argument_list>(<argument><expr><name>WorkflowApp</name> <name>app</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>WorkflowException</name></expr></argument></throws></expr>;
 
     <comment type="block" format="javadoc">/**
     * Create a workflow instance with the given wfId. This will be used for re-running workflows.
     * Create a workflow instance with the given wfId and actions endtime map. This will be used for re-running workflows.
      *
      * @param app application to create a workflow instance of.
      * @param conf job configuration.
      * @param wfId Workflow ID.
     * @param actionEndTimes A map of the actions to their endtimes; actions with no endtime should be omitted
      * @return the newly created workflow instance.
      * @throws WorkflowException thrown if the instance could not be created.
      */</comment>
    <expr><specifier>public</specifier> <name>WorkflowInstance</name> <call><name>createInstance</name><argument_list>(<argument><expr><name>WorkflowApp</name> <name>app</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>, <argument><expr><name>String</name> <name>wfId</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>WorkflowException</name></expr></argument></throws></expr>;
    <expr><specifier>public</specifier> <name>WorkflowInstance</name> <call><name>createInstance</name><argument_list>(<argument><expr><name>WorkflowApp</name> <name>app</name></expr></argument>, <argument><expr><name>Configuration</name> <name>conf</name></expr></argument>, <argument><expr><name>String</name> <name>wfId</name></expr></argument>, <argument><expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Date</name></argument>&gt;</argument_list></name> <name>actionEndTimes</name></expr></argument>)</argument_list></call>
            <throws>throws <argument><expr><name>WorkflowException</name></expr></argument></throws></expr>;
 
     <comment type="block" format="javadoc">/**
      * Insert a workflow instance in storage.
diff --git a/core/src/main/java/org/apache/oozie/workflow/lite/LiteWorkflowInstance.java b/core/src/main/java/org/apache/oozie/workflow/lite/LiteWorkflowInstance.java
index bf8dc05d5..a5db84a2d 100644
-- a/core/src/main/java/org/apache/oozie/workflow/lite/LiteWorkflowInstance.java
++ b/core/src/main/java/org/apache/oozie/workflow/lite/LiteWorkflowInstance.java
@@ -37,6 +37,10 @@ import java.io.IOException;
 import java.io.ByteArrayOutputStream;
 import java.io.ByteArrayInputStream;
 import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -45,6 +49,8 @@ import java.util.Map;
 public class LiteWorkflowInstance implements Writable, WorkflowInstance {
     private static final String TRANSITION_TO = "transition.to";
 
    private final Date FAR_INTO_THE_FUTURE = new Date(Long.MAX_VALUE);

     private XLog log;
 
     private static String PATH_SEPARATOR = "/";
@@ -154,6 +160,7 @@ public class LiteWorkflowInstance implements Writable, WorkflowInstance {
     private Map&lt;String, NodeInstance&gt; executionPaths = new HashMap&lt;String, NodeInstance&gt;();
     private Map&lt;String, String&gt; persistentVars = new HashMap&lt;String, String&gt;();
     private Map&lt;String, Object&gt; transientVars = new HashMap&lt;String, Object&gt;();
    private ActionEndTimesComparator actionEndTimesComparator = null;
 
     protected LiteWorkflowInstance() {
         log = XLog.getLog(getClass());
@@ -168,6 +175,11 @@ public class LiteWorkflowInstance implements Writable, WorkflowInstance {
         status = Status.PREP;
     }
 
    public LiteWorkflowInstance(LiteWorkflowApp def, Configuration conf, String instanceId, Map&lt;String, Date&gt; actionEndTimes) {
        this(def, conf, instanceId);
        actionEndTimesComparator = new ActionEndTimesComparator(actionEndTimes);
    }

     public synchronized boolean start() throws WorkflowException {
         if (status != Status.PREP) {
             throw new WorkflowException(ErrorCode.E0719);
@@ -294,6 +306,16 @@ public class LiteWorkflowInstance implements Writable, WorkflowInstance {
                                 }
 
                             }

                            // If we're doing a rerun, then we need to make sure to put the actions in pathToStart into the order
                            // that they ended in.  Otherwise, it could result in an error later on in some edge cases.
                            // e.g. You have a fork with two nodes, A and B, that both succeeded, followed by a join and some more
                            // nodes, some of which failed.  If you do the rerun, it will always signal A and then B, even if in the
                            // original run B signaled first and then A.  By sorting this, we maintain the proper signal ordering.
                            if (actionEndTimesComparator != null &amp;&amp; pathsToStart.size() &gt; 1) {
                                Collections.sort(pathsToStart, actionEndTimesComparator);
                            }

                             // signal all new synch transitions
                             for (String pathToStart : pathsToStart) {
                                 signal(pathToStart, "::synch::");
@@ -585,6 +607,14 @@ public class LiteWorkflowInstance implements Writable, WorkflowInstance {
             dOut.writeUTF(entry.getKey());
             writeStringAsBytes(entry.getValue(), dOut);
         }
        if (actionEndTimesComparator != null) {
            Map&lt;String, Date&gt; actionEndTimes = actionEndTimesComparator.getActionEndTimes();
            dOut.writeInt(actionEndTimes.size());
            for (Map.Entry&lt;String, Date&gt; entry : actionEndTimes.entrySet()) {
                dOut.writeUTF(entry.getKey());
                dOut.writeLong(entry.getValue().getTime());
            }
        }
     }
 
     @Override
@@ -616,6 +646,21 @@ public class LiteWorkflowInstance implements Writable, WorkflowInstance {
             String vVal = readBytesAsString(dIn);
             persistentVars.put(vName, vVal);
         }
        int numActionEndTimes = -1;
        try {
            numActionEndTimes = dIn.readInt();
        } catch (IOException ioe) {
            // This means that there isn't an actionEndTimes, so just ignore
        }
        if (numActionEndTimes &gt; 0) {
            Map&lt;String, Date&gt; actionEndTimes = new HashMap&lt;String, Date&gt;(numActionEndTimes);
            for (int x = 0; x &lt; numActionEndTimes; x++) {
                String name = dIn.readUTF();
                long endTime = dIn.readLong();
                actionEndTimes.put(name, new Date(endTime));
            }
            actionEndTimesComparator = new ActionEndTimesComparator(actionEndTimes);
        }
         refreshLog();
     }
 
@@ -671,4 +716,31 @@ public class LiteWorkflowInstance implements Writable, WorkflowInstance {
         return instanceId.hashCode();
     }
 
    private class ActionEndTimesComparator implements Comparator&lt;String&gt; {

        private final Map&lt;String, Date&gt; actionEndTimes;

        public ActionEndTimesComparator(Map&lt;String, Date&gt; actionEndTimes) {
            this.actionEndTimes = actionEndTimes;
        }

        @Override
        public int compare(String node1, String node2) {
            Date date1 = FAR_INTO_THE_FUTURE;
            Date date2 = FAR_INTO_THE_FUTURE;
            NodeInstance node1Instance = executionPaths.get(node1);
            if (node1Instance != null) {
                date1 = this.actionEndTimes.get(node1Instance.nodeName);
            }
            NodeInstance node2Instance = executionPaths.get(node2);
            if (node2Instance != null) {
                date2 = this.actionEndTimes.get(node2Instance.nodeName);
            }
            return date1.compareTo(date2);
        }

        public Map&lt;String, Date&gt; getActionEndTimes() {
            return actionEndTimes;
        }
    }
 }
diff --git a/core/src/main/java/org/apache/oozie/workflow/lite/LiteWorkflowLib.java b/core/src/main/java/org/apache/oozie/workflow/lite/LiteWorkflowLib.java
index 7f6f1ccab..0e0aefdc7 100644
-- a/core/src/main/java/org/apache/oozie/workflow/lite/LiteWorkflowLib.java
++ b/core/src/main/java/org/apache/oozie/workflow/lite/LiteWorkflowLib.java
@@ -30,6 +30,8 @@ import org.apache.hadoop.conf.Configuration;
 
 import javax.xml.validation.Schema;
 import java.io.StringReader;
import java.util.Date;
import java.util.Map;
 
 //TODO javadoc
 public abstract class LiteWorkflowLib implements WorkflowLib {
@@ -63,9 +65,10 @@ public abstract class LiteWorkflowLib implements WorkflowLib {
     }
 
     @Override
    public WorkflowInstance createInstance(WorkflowApp app, Configuration conf, String wfId) throws WorkflowException {
    public WorkflowInstance createInstance(WorkflowApp app, Configuration conf, String wfId, Map&lt;String, Date&gt; actionEndTimes)
            throws WorkflowException {
         ParamChecker.notNull(app, "app");
         ParamChecker.notNull(wfId, "wfId");
        return new LiteWorkflowInstance((LiteWorkflowApp) app, conf, wfId);
        return new LiteWorkflowInstance((LiteWorkflowApp) app, conf, wfId, actionEndTimes);
     }
 }
diff --git a/core/src/test/java/org/apache/oozie/command/wf/TestReRunXCommand.java b/core/src/test/java/org/apache/oozie/command/wf/TestReRunXCommand.java
index 1688dc926..5bae614af 100644
-- a/core/src/test/java/org/apache/oozie/command/wf/TestReRunXCommand.java
++ b/core/src/test/java/org/apache/oozie/command/wf/TestReRunXCommand.java
@@ -24,13 +24,16 @@ import java.io.FileWriter;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.Writer;
import java.util.List;
 import org.apache.hadoop.fs.Path;
 import org.apache.oozie.local.LocalOozie;
import org.apache.oozie.action.hadoop.ShellActionExecutor;
 import org.apache.oozie.client.CoordinatorAction;
 import org.apache.oozie.client.CoordinatorJob;
 import org.apache.oozie.client.WorkflowJob;
 import org.apache.oozie.client.OozieClient;
 import org.apache.oozie.client.OozieClientException;
import org.apache.oozie.client.WorkflowAction;
 import org.apache.oozie.command.coord.CoordActionStartXCommand;
 import org.apache.oozie.executor.jpa.CoordActionGetJPAExecutor;
 import org.apache.oozie.test.XDataTestCase;
@@ -39,7 +42,9 @@ import org.apache.oozie.util.IOUtils;
 import org.apache.oozie.CoordinatorActionBean;
 import org.apache.oozie.CoordinatorJobBean;
 import org.apache.oozie.ErrorCode;
import org.apache.oozie.service.ActionService;
 import org.apache.oozie.service.JPAService;
import org.apache.oozie.service.SchemaService;
 import org.apache.oozie.service.Services;
 import org.apache.oozie.service.XLogService;
 
@@ -110,6 +115,69 @@ public class TestReRunXCommand extends XDataTestCase {
         assertEquals(WorkflowJob.Status.SUCCEEDED, wfClient.getJobInfo(jobId1).getStatus());
     }
 
    /**
     * This tests a specific edge case where rerun can fail when there's a fork, the actions in the fork succeed, but an action
     * after the fork fails.  Previously, the rerun would step through the forked actions in the order they were listed in the
     * fork action's XML; if they happened to finish in a different order, this would cause an error during rerun.  This is fixed by
     * enforcing the same order in LiteWorkflowInstance#signal, which this test verifies.
     *
     * @throws Exception
     */</comment>
    <expr><specifier>public</specifier> <name>void</name> <call><name>testRerunFork</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
        <comment type="line">// We need the shell schema and action for this test</comment>
        <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConf</name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name><name>ActionService</name><operator>.</operator><name>CONF_ACTION_EXECUTOR_EXT_CLASSES</name></name></expr></argument>, <argument><expr><call><name><name>ShellActionExecutor</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
        <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setService</name><argument_list>(<argument><expr><name><name>ActionService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConf</name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name><name>SchemaService</name><operator>.</operator><name>WF_CONF_EXT_SCHEMAS</name></name></expr></argument>, <argument><expr><literal type="string">"shell-action-0.3.xsd"</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setService</name><argument_list>(<argument><expr><name><name>SchemaService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;

        <expr><name>Reader</name> <name>reader</name> <operator>=</operator> <call><name><name>IOUtils</name><operator>.</operator><name>getResourceAsReader</name></name><argument_list>(<argument><expr><literal type="string">"rerun-wf-fork.xml"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name>Writer</name> <name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getTestCaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"workflow.xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>IOUtils</name><operator>.</operator><name>copyCharStream</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;

        <expr><name>final</name> <name>OozieClient</name> <name>wfClient</name> <operator>=</operator> <call><name><name>LocalOozie</name><operator>.</operator><name>getClient</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name>Properties</name> <name>conf</name> <operator>=</operator> <call><name><name>wfClient</name><operator>.</operator><name>createConfiguration</name></name><argument_list>()</argument_list></call></expr>;
        <expr><call><name><name>conf</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"nameNode"</literal></expr></argument>, <argument><expr><call><name>getNameNodeUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>conf</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"jobTracker"</literal></expr></argument>, <argument><expr><call><name>getJobTrackerUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>conf</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>APP_PATH</name></name></expr></argument>, <argument><expr><call><name>getTestCaseFileUri</name><argument_list>(<argument><expr><literal type="string">"workflow.xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>conf</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>USER_NAME</name></name></expr></argument>, <argument><expr><call><name>getTestUser</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>conf</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"cmd3"</literal></expr></argument>, <argument><expr><literal type="string">"echo1"</literal></expr></argument>)</argument_list></call></expr>;      <comment type="line">// expected to fail</comment>

        <expr><name>final</name> <name>String</name> <name>jobId1</name> <operator>=</operator> <call><name><name>wfClient</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>wfClient</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>jobId1</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>waitFor</name><argument_list>(<argument><expr><literal type="number">40</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
                <return>return <expr><call><name><name>wfClient</name><operator>.</operator><name>getJobInfo</name></name><argument_list>(<argument><expr><name>jobId1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>KILLED</name></name></expr>;</return>
            <expr_stmt/>}</block_content>
        }</block></function>)</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call></expr>
        <call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>KILLED</name></name></expr></argument>, <argument><expr><call><name><name>wfClient</name><operator>.</operator><name>getJobInfo</name></name><argument_list>(<argument><expr><name>jobId1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WorkflowAction</name></argument>&gt;</argument_list></name></type> <name>actions</name> <init>= <expr><call><name><name>wfClient</name><operator>.</operator><name>getJobInfo</name></name><argument_list>(<argument><expr><name>jobId1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getActions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>OK</name></name></expr></argument>, <argument><expr><call><name><name>actions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// fork</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>OK</name></name></expr></argument>, <argument><expr><call><name><name>actions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// sh1</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>OK</name></name></expr></argument>, <argument><expr><call><name><name>actions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// sh2</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>OK</name></name></expr></argument>, <argument><expr><call><name><name>actions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// join</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>ERROR</name></name></expr></argument>, <argument><expr><call><name><name>actions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// sh3</comment>

        <comment type="line">// rerun failed node, which is after the fork</comment>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>OozieClient</name><operator>.</operator><name>RERUN_FAIL_NODES</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"cmd3"</literal></expr></argument>, <argument><expr><literal type="string">"echo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line">// expected to succeed</comment>

        <expr_stmt><expr><call><name><name>wfClient</name><operator>.</operator><name>reRun</name></name><argument_list>(<argument><expr><name>jobId1</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>waitFor</name><argument_list>(<argument><expr><literal type="number">40</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
                <return>return <expr><call><name><name>wfClient</name><operator>.</operator><name>getJobInfo</name></name><argument_list>(<argument><expr><name>jobId1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>SUCCEEDED</name></name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowJob</name><operator>.</operator><name>Status</name><operator>.</operator><name>SUCCEEDED</name></name></expr></argument>, <argument><expr><call><name><name>wfClient</name><operator>.</operator><name>getJobInfo</name></name><argument_list>(<argument><expr><name>jobId1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>actions</name> <operator>=</operator> <call><name><name>wfClient</name><operator>.</operator><name>getJobInfo</name></name><argument_list>(<argument><expr><name>jobId1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getActions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>OK</name></name></expr></argument>, <argument><expr><call><name><name>actions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// fork</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>OK</name></name></expr></argument>, <argument><expr><call><name><name>actions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// sh1</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>OK</name></name></expr></argument>, <argument><expr><call><name><name>actions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// sh2</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>OK</name></name></expr></argument>, <argument><expr><call><name><name>actions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// join</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>WorkflowAction</name><operator>.</operator><name>Status</name><operator>.</operator><name>OK</name></name></expr></argument>, <argument><expr><call><name><name>actions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// sh3</comment>
    </block_content>}</block></catch></try>

     <comment type="block">/*
      * Test to ensure parameterized configuration variables get resolved in workflow rerun
      */</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>rerun</name><operator>-</operator><name>wf</name><operator>-</operator><name><name>fork</name><operator>.</operator><name>xml</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>rerun</name><operator>-</operator><name>wf</name><operator>-</operator><name><name>fork</name><operator>.</operator><name>xml</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..8fa8f34fd</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>resources</name><operator>/</operator><name>rerun</name><operator>-</operator><name>wf</name><operator>-</operator><name><name>fork</name><operator>.</operator><name>xml</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">63</literal> @@
<operator>&lt;</operator><operator>!</operator><operator>--</operator>
  <name>Licensed</name> <name>to</name> <name>the</name> <name>Apache</name> <name>Software</name> <call><name>Foundation</name> <argument_list>(<argument><expr><name>ASF</name></expr></argument>)</argument_list></call> <name>under</name> <name>one</name>
  <name>or</name> <name>more</name> <name>contributor</name> <name>license</name> <name><name>agreements</name><operator>.</operator>  <name>See</name></name> <name>the</name> <name>NOTICE</name> <name>file</name>
  <name>distributed</name> <name>with</name> <name>this</name> <name>work</name></expr></expr_stmt> <for>for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License<operator>,</operator> <expr_stmt><expr><name>Version</name> <literal type="number">2.0</literal> <operator>(</operator><name>the</name>
  <literal type="string">"License"</literal><operator>)</operator></expr>;</expr_stmt></for> <expr_stmt><expr><name>you</name> <name>may</name> <name>not</name> <name>use</name> <name>this</name> <name>file</name> <name>except</name> <name>in</name> <name>compliance</name>
  <name>with</name> <name>the</name> <name><name>License</name><operator>.</operator>  <name>You</name></name> <name>may</name> <name>obtain</name> <name>a</name> <name>copy</name> <name>of</name> <name>the</name> <name>License</name> <name>at</name>

       <name>http</name><operator>:</operator><comment type="line">//www.apache.org/licenses/LICENSE-2.0</comment>

  <name>Unless</name> <name>required</name> <name>by</name> <name>applicable</name> <name>law</name> <name>or</name> <name>agreed</name> <name>to</name> <name>in</name> <name>writing</name></expr><operator>,</operator> <expr><name>software</name>
  <name>distributed</name> <name>under</name> <name>the</name> <name>License</name> <name>is</name> <name>distributed</name> <name>on</name> <name>an</name> <literal type="string">"AS IS"</literal> <name>BASIS</name></expr><operator>,</operator>
  <expr><name>WITHOUT</name> <name>WARRANTIES</name> <name>OR</name> <name>CONDITIONS</name> <name>OF</name> <name>ANY</name> <name>KIND</name></expr><operator>,</operator> <expr><name>either</name> <name>express</name> <name>or</name> <name><name>implied</name><operator>.</operator>
  <name>See</name></name> <name>the</name> <name>License</name></expr></expr_stmt> <for>for the specific language governing permissions and
  limitations under the License.
--&gt;
&lt;workflow-app xmlns="uri:oozie:workflow:0.4" name="rerun-wf-fork"&gt;
    &lt;global&gt;
       &lt;job-tracker&gt;$<block>{<block_content><expr><name>jobTracker</name></expr></block_content>}</block></for><expr><operator>&lt;</operator><operator>/</operator><name>job</name><operator>-</operator><name>tracker</name><operator>&gt;</operator>
       <operator>&lt;</operator><name>name</name><operator>-</operator><name>node</name><operator>&gt;</operator><name>$</name><block>{<expr><name>nameNode</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>name</name><operator>-</operator><name>node</name><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>global</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>start</name> <name>to</name><operator>=</operator><literal type="string">"f"</literal><operator>/</operator><operator>&gt;</operator>

    <operator>&lt;</operator><name>fork</name> <name>name</name><operator>=</operator><literal type="string">"f"</literal><operator>&gt;</operator>
        <operator>&lt;</operator><name>path</name> <name>start</name><operator>=</operator><literal type="string">"sh1"</literal><operator>/</operator><operator>&gt;</operator>
        <operator>&lt;</operator><name>path</name> <name>start</name><operator>=</operator><literal type="string">"sh2"</literal><operator>/</operator><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>fork</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>action</name> <name>name</name><operator>=</operator><literal type="string">"sh1"</literal><operator>&gt;</operator>
        <operator>&lt;</operator><name>shell</name> <name>xmlns</name><operator>=</operator><literal type="string">"uri:oozie:shell-action:0.3"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>exec</name><operator>&gt;</operator><name><name>sleep</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>exec</name></argument>&gt;</argument_list></name>
            <operator>&lt;</operator><name>argument</name><operator>&gt;</operator><literal type="number">15</literal><operator>&lt;</operator><operator>/</operator><name>argument</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>shell</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>ok</name> <name>to</name><operator>=</operator><literal type="string">"j"</literal><operator>/</operator><operator>&gt;</operator>
        <operator>&lt;</operator><name>error</name> <name>to</name><operator>=</operator><literal type="string">"k"</literal><operator>/</operator><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>action</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>action</name> <name>name</name><operator>=</operator><literal type="string">"sh2"</literal><operator>&gt;</operator>
        <operator>&lt;</operator><name>shell</name> <name>xmlns</name><operator>=</operator><literal type="string">"uri:oozie:shell-action:0.3"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>exec</name><operator>&gt;</operator><name><name>echo</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>exec</name></argument>&gt;</argument_list></name>
        <operator>&lt;</operator><operator>/</operator><name>shell</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>ok</name> <name>to</name><operator>=</operator><literal type="string">"j"</literal><operator>/</operator><operator>&gt;</operator>
        <operator>&lt;</operator><name>error</name> <name>to</name><operator>=</operator><literal type="string">"k"</literal><operator>/</operator><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>action</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>join</name> <name>name</name><operator>=</operator><literal type="string">"j"</literal> <name>to</name><operator>=</operator><literal type="string">"sh3"</literal><operator>/</operator><operator>&gt;</operator>

    <operator>&lt;</operator><name>action</name> <name>name</name><operator>=</operator><literal type="string">"sh3"</literal><operator>&gt;</operator>
        <operator>&lt;</operator><name>shell</name> <name>xmlns</name><operator>=</operator><literal type="string">"uri:oozie:shell-action:0.3"</literal><operator>&gt;</operator>
            <operator>&lt;</operator><name>exec</name><operator>&gt;</operator><name>$</name><block>{<expr><name>cmd3</name></expr>}</block><operator>&lt;</operator><operator>/</operator><name>exec</name><operator>&gt;</operator>
        <operator>&lt;</operator><operator>/</operator><name>shell</name><operator>&gt;</operator>
        <operator>&lt;</operator><name>ok</name> <name>to</name><operator>=</operator><literal type="string">"end"</literal><operator>/</operator><operator>&gt;</operator>
        <operator>&lt;</operator><name>error</name> <name>to</name><operator>=</operator><literal type="string">"k"</literal><operator>/</operator><operator>&gt;</operator>
    <operator>&lt;</operator><operator>/</operator><name>action</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>kill</name> <name>name</name><operator>=</operator><literal type="string">"k"</literal><operator>&gt;</operator>
        <operator>&lt;</operator><name>message</name><operator>&gt;</operator><name><name>kill</name><argument_list type="generic">&lt;<argument><operator>/</operator><name>message</name></argument>&gt;</argument_list></name>
    <operator>&lt;</operator><operator>/</operator><name>kill</name><operator>&gt;</operator>

    <operator>&lt;</operator><name>end</name> <name>name</name><operator>=</operator><literal type="string">"end"</literal><operator>/</operator><operator>&gt;</operator>
<operator>&lt;</operator><operator>/</operator><name>workflow</name><operator>-</operator><name>app</name><operator>&gt;</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">74416783d</literal><operator>..</operator><literal type="number">43a5aad0d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
 <operator>--</operator> <name>Oozie</name> <literal type="number">4.1.0</literal> <call><name>release</name> <argument_list>(<argument><expr><name>trunk</name> <operator>-</operator> <name>unreleased</name></expr></argument>)</argument_list></call>
 
<name>OOZIE</name><operator>-</operator><literal type="number">1879</literal> <name>Workflow</name> <name>Rerun</name> <name>causes</name> <name>error</name> <name>depending</name> <name>on</name> <name>the</name> <name>order</name> <name>of</name> <name>forked</name> <call><name>nodes</name> <argument_list>(<argument><expr><name>rkanter</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">1659</literal> <name>oozie</name><operator>-</operator><name>site</name> <name>is</name> <name>missing</name> <name>email</name><operator>-</operator><name>action</name><operator>-</operator><literal type="number">0.2</literal> <call><name>schema</name> <argument_list>(<argument><expr><name>jagatsingh</name> <name>via</name> <name>rkanter</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">1492</literal> <name>Make</name> <name>sure</name> <name>HA</name> <name>works</name> <name>with</name> <call><name>HCat</name> <argument_list>(<argument><expr><name>ryota</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">1869</literal> <name>Sharelib</name> <name>update</name> <name>shows</name> <name>vip</name><operator>/</operator><name>load</name> <name>balancer</name> <name>address</name> <name>as</name> <name>one</name> <name>of</name> <name>the</name> <call><name>hostname</name> <argument_list>(<argument><expr><name>puru</name> <name>via</name> <name>ryota</name></expr></argument>)</argument_list></call>
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
