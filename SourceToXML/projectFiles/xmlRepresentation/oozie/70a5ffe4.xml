<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/oozie/70a5ffe4.java"><expr_stmt><expr><name>From</name> <literal type="number">70a5ffe4b029896df81aa49cd08bbaf9b0355a36</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Purshotam</name> <name>Shah</name> <operator>&lt;</operator><name>purushah</name>@<name>yahoo</name><operator>-</operator><name><name>inc</name><operator>.</operator><name>com</name></name><operator>&gt;</operator>
<name>Date</name><operator>:</operator> <name>Tue</name></expr><operator>,</operator> <expr><literal type="number">26</literal> <name>Jan</name> <literal type="number">2016</literal> <literal type="number">10</literal><operator>:</operator><literal type="number">10</literal><operator>:</operator><literal type="number">01</literal> <operator>-</operator><literal type="number">0800</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>OOZIE</name><operator>-</operator><literal type="number">1922</literal> <name>MemoryLocksService</name> <name>fails</name></expr></expr_stmt> <if_stmt><if>if lock is acquired
 multiple times in same thread and released

--
 .../org/apache/oozie/lock/MemoryLocks.java    <operator>|</operator>  12 +-
 .../oozie/service/MemoryLocksService.java     <operator>|</operator>   7 ++
 .../apache/oozie/service/ZKLocksService.java  <operator>|</operator>  21 +++-
 .../apache/oozie/lock/TestMemoryLocks.java    <operator>|</operator> 116 ++++++++++++++++++
 .../oozie/service/TestZKLocksService.java     <operator>|</operator>  75 ++++++-----
 release-log.txt                               <operator>|</operator>   1 +
 6 files changed<operator>,</operator> <expr_stmt><expr><literal type="number">182</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">50</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>lock</name><operator>/</operator><name><name>MemoryLocks</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>lock</name><operator>/</operator><name><name>MemoryLocks</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ee564b3de</name><operator>..</operator><literal type="number">7d65ac0e2</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>lock</name><operator>/</operator><name><name>MemoryLocks</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>lock</name><operator>/</operator><name><name>MemoryLocks</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>MemoryLocks</name> <block>{
          <expr><operator>*</operator><operator>/</operator>
         @<name>Override</name>
         <specifier>public</specifier> <name>void</name> <call><name>release</name><argument_list>()</argument_list></call> <block>{
            <expr><name>int</name> <name>val</name> <operator>=</operator> <call><name><name>rwLock</name><operator>.</operator><name>getQueueLength</name></name><argument_list>()</argument_list></call></expr>;</block></expr>
            <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isLockHeld</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                 <synchronized>synchronized <init>(<expr><name>locks</name></expr>)</init> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>locks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isLockHeld</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>locks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                 </block_content>}</block></synchronized>
             </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <specifier>private</specifier> <name>boolean</name> <call><name>isLockHeld</name><argument_list>()</argument_list></call><block>{
            <return>return <expr><call><name><name>rwLock</name><operator>.</operator><name>hasQueuedThreads</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>rwLock</name><operator>.</operator><name>isWriteLocked</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>rwLock</name><operator>.</operator><name>getReadLockCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
         }</block>
     }</block></expr></expr_stmt></if></if_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>MemoryLocksService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>MemoryLocksService</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e3eccdb3f</name><operator>..</operator><name>d7c6a89fd</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>MemoryLocksService</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>MemoryLocksService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>Instrumentation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>lock</name><operator>.</operator><name>LockToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>lock</name><operator>.</operator><name>MemoryLocks</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * Service that provides in-memory locks.  Assumes no other Oozie servers are using the database.
  */</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">95</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>MemoryLocksService</name> implements <name>Service</name></expr><operator>,</operator> <expr><name>Instrumentable</name> <block>{
     <expr><specifier>public</specifier> <name>LockToken</name> <call><name>getWriteLock</name><argument_list>(<argument><expr><name>String</name> <name>resource</name></expr></argument>, <argument><expr><name>long</name> <name>wait</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>InterruptedException</name> <block>{</block></expr></argument></throws></expr>
         <return>return <expr><call><name><name>locks</name><operator>.</operator><name>getWriteLock</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</return>
     }</block></expr></expr_stmt>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>MemoryLocks</name></type> <name>getMemoryLocks</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>locks</name></expr>;</return>
    </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>ZKLocksService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>ZKLocksService</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e3a6bcf04</name><operator>..</operator><literal type="number">35fc8a659</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>ZKLocksService</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>ZKLocksService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">197</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">197</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>ZKLocksService</name> extends <name>MemoryLocksService</name> implements <name>Service</name></expr><operator>,</operator> <expr><name>Instr</name>
         <specifier>public</specifier> <name>void</name> <call><name>release</name><argument_list>()</argument_list></call> <block>{
             <try>try <block>{<block_content>
                 <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name><name>lock</name><operator>.</operator><name>getParticipantNodes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">//TODO this might break, when count is zero and before we remove lock, same thread may ask for same lock.</comment>
                <comment type="line">// Hashmap will return the lock, but eventually release will remove it from hashmap and a immediate getlock will</comment>
                <comment type="line">//create a new instance. Will fix this as part of OOZIE-1922</comment>
                <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>zkLocks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></try>}</block></expr></expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isLockHeld</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                     <synchronized>synchronized <init>(<expr><name>zkLocks</name></expr>)</init> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>zkLocks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>zkLocks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isLockHeld</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>zkLocks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                     </block_content>}</block></synchronized>
                 </block_content>}</block></if></if_stmt>
             }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">212</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">215</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>ZKLocksService</name> extends <name>MemoryLocksService</name> implements <name>Service</name></expr><operator>,</operator> <expr><name>Instr</name></expr></expr_stmt>
             }
 
         }

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isLockHeld</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>zkLocks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>readLock</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAcquiredInThisProcess</name><argument_list>()</argument_list></call>
                    <operator>||</operator> <call><name><name>zkLocks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>writeLock</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAcquiredInThisProcess</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

     }
 
     @<expr_stmt><expr><name>VisibleForTesting</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>lock</name><operator>/</operator><name><name>TestMemoryLocks</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>lock</name><operator>/</operator><name><name>TestMemoryLocks</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0efe31033</literal><operator>..</operator><literal type="number">61fec19b3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>lock</name><operator>/</operator><name><name>TestMemoryLocks</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>lock</name><operator>/</operator><name><name>TestMemoryLocks</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt>
 
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>lock</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>MemoryLocksService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>ServiceException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>service</name><operator>.</operator><name>Services</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>test</name><operator>.</operator><name>XTestCase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>oozie</name><operator>.</operator><name>util</name><operator>.</operator><name>XLog</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">219</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">223</literal></expr><operator>,</operator><expr><literal type="number">116</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestMemoryLocks</name> extends <name>XTestCase</name> <block>{
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a:1-L a:1-U a:2-L a:2-U"</literal></expr></argument>, <argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
 
    <specifier>public</specifier> <name>class</name> <name>SameThreadWriteLocker</name> implements <name>Runnable</name> <block>{
        <expr><specifier>protected</specifier> <name>String</name> <name>name</name></expr>;
        <expr><specifier>private</specifier> <name>String</name> <name>nameIndex</name></expr>;
        <expr><specifier>private</specifier> <name>StringBuffer</name> <name>sb</name></expr>;
        <expr><specifier>protected</specifier> <name>long</name> <name>timeout</name></expr>;

        <expr><specifier>public</specifier> <call><name>SameThreadWriteLocker</name><argument_list>(<argument><expr><name>String</name> <name>name</name></expr></argument>, <argument><expr><name>int</name> <name>nameIndex</name></expr></argument>, <argument><expr><name>long</name> <name>timeout</name></expr></argument>, <argument><expr><name>StringBuffer</name> <name>buffer</name></expr></argument>)</argument_list></call> <block>{
            <expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;
            <expr><name><name>this</name><operator>.</operator><name>nameIndex</name></name> <operator>=</operator> <name>name</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name>nameIndex</name></expr>;
            <expr><name><name>this</name><operator>.</operator><name>sb</name></name> <operator>=</operator> <name>buffer</name></expr>;
            <expr><name><name>this</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;
        }</block>

        <specifier>public</specifier> <name>void</name> <call><name>run</name><argument_list>()</argument_list></call> <block>{
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Getting lock [{0}]"</literal></expr></argument>, <argument><expr><name>nameIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>MemoryLocks</name><operator>.</operator><name>MemoryLockToken</name></name></type> <name>token</name> <init>= <expr><call><name>getLock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>MemoryLocks</name><operator>.</operator><name>MemoryLockToken</name></name></type> <name>token2</name> <init>= <expr><call><name>getLock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Got lock [{0}]"</literal></expr></argument>, <argument><expr><name>nameIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>nameIndex</name> <operator>+</operator> <literal type="string">"-L1 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>token2</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>nameIndex</name> <operator>+</operator> <literal type="string">"-L2 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></try>}</block>
                    <call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>nameIndex</name> <operator>+</operator> <literal type="string">"-U1 "</literal></expr></argument>)</argument_list></call></expr>;
                    <expr><call><name><name>token</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;
                    <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
                        <expr_stmt><expr><call><name>wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt/></block_content></block></synchronized>}</block>
                    <call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>nameIndex</name> <operator>+</operator> <literal type="string">"-U2 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>token2</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Release lock [{0}]"</literal></expr></argument>, <argument><expr><name>nameIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }
                else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>nameIndex</name> <operator>+</operator> <literal type="string">"-N "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Did not get lock [{0}]"</literal></expr></argument>, <argument><expr><name>nameIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
            }
            catch <expr_stmt><expr><operator>(</operator><name>Exception</name> <name>ex</name><operator>)</operator> <block>{
                <throw>throw <argument_list>new <argument><expr><call><name>RuntimeException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
            }</block></expr></expr_stmt>
        }

        public <function><type><name>void</name></type> <name>finish</name><parameter_list>()</parameter_list> <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
                <expr_stmt><expr><call><name>notify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name><name>MemoryLocks</name><operator>.</operator><name>MemoryLockToken</name></name></type> <name>getLock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
            <return>return <expr><call><name><name>locks</name><operator>.</operator><name>getWriteLock</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

    }

    public <function><type><name>void</name></type> <name>testWriteLockSameThreadNoWait</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SameThreadWriteLocker</name></type> <name>l1</name> <init>= <expr><operator>new</operator> <call><name>SameThreadWriteLocker</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Locker</name></type> <name>l2</name> <init>= <expr><operator>new</operator> <call><name>WriteLocker</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l1</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l2</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a:1-L1 a:1-L2 a:1-U1 a:2-N a:1-U2"</literal></expr></argument>, <argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWriteLockSameThreadWait</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SameThreadWriteLocker</name></type> <name>l1</name> <init>= <expr><operator>new</operator> <call><name>SameThreadWriteLocker</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Locker</name></type> <name>l2</name> <init>= <expr><operator>new</operator> <call><name>WriteLocker</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l1</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l2</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a:1-L1 a:1-L2 a:1-U1 a:1-U2 a:2-L a:2-U"</literal></expr></argument>, <argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLockReentrant</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ServiceException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>path</name> <init>= <expr><call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemoryLocksService</name></type> <name>lockService</name> <init>= <expr><operator>new</operator> <call><name>MemoryLocksService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>lockService</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>LockToken</name></type> <name>lock</name> <init>= <expr><call><name><name>lockService</name><operator>.</operator><name>getWriteLock</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>lock</name> <operator>=</operator> <operator>(</operator><name>LockToken</name><operator>)</operator> <call><name><name>lockService</name><operator>.</operator><name>getWriteLock</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lock</name> <operator>=</operator> <operator>(</operator><name>LockToken</name><operator>)</operator> <call><name><name>lockService</name><operator>.</operator><name>getWriteLock</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>lockService</name><operator>.</operator><name>getMemoryLocks</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>lockService</name><operator>.</operator><name>getMemoryLocks</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>lockService</name><operator>.</operator><name>getMemoryLocks</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>lockService</name><operator>.</operator><name>getMemoryLocks</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Reentrant property, it should have acquired lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch>
        <finally>finally <block>{<block_content>
            <expr_stmt><expr><call><name><name>lockService</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>TestZKLocksService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>TestZKLocksService</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">02cc1372d</literal><operator>..</operator><literal type="number">70aa4d7d5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>TestZKLocksService</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>oozie</name><operator>/</operator><name>service</name><operator>/</operator><name><name>TestZKLocksService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">464</literal></expr><operator>,</operator><expr><literal type="number">49</literal> <operator>+</operator><literal type="number">464</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestZKLocksService</name> extends <name>ZKXTestCase</name> <block>{
     <expr><specifier>public</specifier> <name>void</name> <call><name>testReentrantMultipleThread</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>ServiceException</name></expr></argument>, <argument><expr><name>InterruptedException</name> <block>{
         <expr><name>final</name> <name>String</name> <name>path</name> <operator>=</operator> <call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
         <expr><name>final</name> <name>ZKLocksService</name> <name>zkls</name> <operator>=</operator> <operator>new</operator> <call><name>ZKLocksService</name><argument_list>()</argument_list></call></expr>;
        <expr><name>final</name> <name><name>LockToken</name><index>[]</index></name> <name>locks</name> <operator>=</operator> <operator>new</operator> <name><name>LockToken</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;

        <expr><call><name><name>zkls</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>zkls</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Thread</name></type> <name>t1</name> <init>= <expr><operator>new</operator> <class><super><name>Thread</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name><name>locks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>zkls</name><operator>.</operator><name>getWriteLock</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt/>}</block_content>
                    catch (InterruptedException e</block></try>)</block_content> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt/>}</block_content>
                }
            }</block></block>;</function>
            <decl_stmt><decl><type><name>Thread</name></type> <name>t2</name> <init>= <expr><operator>new</operator> <class><super><name>Thread</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name><name>locks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>zkls</name><operator>.</operator><name>getWriteLock</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt/>}</block_content>
                    catch (InterruptedException e</block></try>)</block_content> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt/>}</block_content>
                }
            }</block></block>;</function>
            <decl_stmt><decl><type><name>ThreadLock</name></type> <name>t1</name> <init>= <expr><operator>new</operator> <call><name>ThreadLock</name><argument_list>(<argument><expr><name>zkls</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ThreadLock</name></type> <name>t2</name> <init>= <expr><operator>new</operator> <call><name>ThreadLock</name><argument_list>(<argument><expr><name>zkls</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <constructor_decl><name><name>t1</name><operator>.</operator><name>start</name></name><parameter_list>()</parameter_list>;</constructor_decl>
            <constructor_decl><name><name>t2</name><operator>.</operator><name>start</name></name><parameter_list>()</parameter_list>;</constructor_decl>
             <constructor_decl><name><name>t1</name><operator>.</operator><name>join</name></name><parameter_list>()</parameter_list>;</constructor_decl>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>zkls</name><operator>.</operator><name>getLocks</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <constructor_decl><name><name>t2</name><operator>.</operator><name>start</name></name><parameter_list>()</parameter_list>;</constructor_decl>
             <constructor_decl><name><name>t2</name><operator>.</operator><name>join</name></name><parameter_list>()</parameter_list>;</constructor_decl>

            <if_stmt><if>if <condition>(<expr><name><name>locks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><name><name>locks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/>}</block_content>
            if (locks[1] != null</block></if></if_stmt>)</block> <block>{
                <constructor_decl><name>assertNull</name><parameter_list>(<parameter><decl><type><name><name>locks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
            <expr_stmt/>}</block>

            <if_stmt><if>if <condition>(<expr><name><name>locks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>locks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/>}</block_content>
            if (locks[1] != null</block></if></if_stmt></class></expr>)</init> <block>{<block_content>
                <expr_stmt><expr><name><name>locks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/>}</block_content>
            assertTrue(zkls.getLocks(</block></decl>).containsKey(path</decl_stmt>)</block></class></expr>)</init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>zkls</name><operator>.</operator><name>getLocks</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></try>}</block></expr></expr_stmt>
         <finally>finally <block>{<block_content>
             <expr_stmt><expr><call><name><name>zkls</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">514</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">481</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestZKLocksService</name> extends <name>ZKXTestCase</name> <block>{
     }</block>
 
     <specifier>public</specifier> <name>void</name> <call><name>testLockReaper</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
        <expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConf</name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name><name>ZKLocksService</name><operator>.</operator><name>REAPING_THRESHOLD</name></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ConfigurationService</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>ZKLocksService</name><operator>.</operator><name>REAPING_THRESHOLD</name></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>ZKLocksService</name></type> <name>zkls</name> <init>= <expr><operator>new</operator> <call><name>ZKLocksService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

         <try>try <block>{<block_content>
             <expr_stmt><expr><call><name><name>zkls</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>Services</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">531</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">499</literal></expr><operator>,</operator><expr><literal type="number">31</literal> @@ <specifier>public</specifier> <name>class</name> <name>TestZKLocksService</name> extends <name>ZKXTestCase</name> <block>{
             <expr><call><name><name>zkls</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;
         }</block></expr></expr_stmt>
     </block_content>}</block></for>

    <class><specifier>static</specifier> class <name>ThreadLock</name> <super_list><extends>extends <super><name>Thread</name></super></extends></super_list> <block>{
        <decl_stmt><decl><type><name>ZKLocksService</name></type> <name>zkls</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LockToken</name></type> <name>lock</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ThreadLock</name><parameter_list>(<parameter><decl><type><name>ZKLocksService</name></type> <name>zkls</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zkls</name></name> <operator>=</operator> <name>zkls</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name><name>zkls</name><operator>.</operator><name>getWriteLock</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>lock</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name><name>zkls</name><operator>.</operator><name>getWriteLock</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>
    }</block></class>
 </block_content>}</block></try>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">1b675bb48</literal><operator>..</operator><literal type="number">6dac28b83</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>release</name><operator>-</operator><name><name>log</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">5</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
 <operator>--</operator> <name>Oozie</name> <literal type="number">4.3.0</literal> <call><name>release</name> <argument_list>(<argument><expr><name>trunk</name> <operator>-</operator> <name>unreleased</name></expr></argument>)</argument_list></call>
 
<name>OOZIE</name><operator>-</operator><literal type="number">1922</literal> <name>MemoryLocksService</name> <name>fails</name></expr></expr_stmt> <if_stmt><if>if lock is acquired multiple times in same thread and released <condition>(<expr><name>puru</name></expr>)</condition><block type="pseudo"><block_content>
 <expr_stmt><expr><name>OOZIE</name><operator>-</operator><literal type="number">2432</literal> <name>TestPurgeXCommand</name> <call><name>fails</name> <argument_list>(<argument><expr><name>fdenes</name> <name>via</name> <name>rkanter</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">2434</literal> <name>inconsistent</name> <name>coord</name> <name>action</name> <name>status</name> <name>and</name> <name>workflow</name> <name>job</name> <call><name>status</name> <argument_list>(<argument><expr><name>satishsaley</name> <name>via</name> <name>puru</name></expr></argument>)</argument_list></call>
 <name>OOZIE</name><operator>-</operator><literal type="number">2438</literal> <name>Oozie</name> <name>client</name> <literal type="string">"jobs -filter"</literal> <name>diagnostic</name> <name>message</name> <call><name>clarification</name> <argument_list>(<argument><expr><name>satishsaley</name> <name>via</name> <name>puru</name></expr></argument>)</argument_list></call>
<operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></finally>

</unit>
