<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/accumulo/2f788f482.java"><expr_stmt><expr><name>From</name> <literal type="number">2f788f4826d0fd6d96ad04def79320e8479c9108</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Keith</name> <name><name>Turner</name> <argument_list type="generic">&lt;<argument><name>kturner</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">4</literal> <name>Dec</name> <literal type="number">2014</literal> <literal type="number">22</literal><operator>:</operator><literal type="number">33</literal><operator>:</operator><literal type="number">00</literal> <operator>-</operator><literal type="number">0500</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>ACCUMULO</name><operator>-</operator><literal type="number">1798</literal> <name>Add</name> <name>ability</name> <name>to</name> <name>specify</name> <name>compaction</name> <name>strategy</name></expr></expr_stmt> <for>for
 user specificed compactions.

--
 .../core/client/admin/CompactionConfig.java   <operator>|</operator>  155 ++
 .../admin/CompactionStrategyConfig.java       <operator>|</operator>   74 +
 .../core/client/admin/TableOperations.java    <operator>|</operator>   17 +
 .../impl/CompactionStrategyConfigUtil.java    <operator>|</operator>   98 ++
 .../core/client/impl/TableOperationsImpl.java <operator>|</operator>   20 +-
 .../core/client/mock/MockTableOperations.java <operator>|</operator>   13 +
 .../impl/TableOperationsHelperTest.java       <operator>|</operator>    5 +
 proxy/src/main/cpp/AccumuloProxy.cpp          <operator>|</operator> 1479 ++++++++--------
 proxy/src/main/cpp/AccumuloProxy.h            <operator>|</operator>   25 +-
 .../cpp/AccumuloProxy_server.skeleton.cpp     <operator>|</operator>    2 +-
 proxy/src/main/cpp/proxy_types.cpp            <operator>|</operator>   99 ++
 proxy/src/main/cpp/proxy_types.h              <operator>|</operator>   51 +
 .../apache/accumulo/proxy/ProxyServer.java    <operator>|</operator>   18 +-
 .../accumulo/proxy/thrift/AccumuloProxy.java  <operator>|</operator> 1545 +++++++++--------
 .../thrift/CompactionStrategyConfig.java      <operator>|</operator>  556 ++++++
 proxy/src/main/python/AccumuloProxy-remote    <operator>|</operator>    8 +-
 proxy/src/main/python/AccumuloProxy.py        <operator>|</operator>  560 +++---
 proxy/src/main/python/ttypes.py               <operator>|</operator>   82 +
 proxy/src/main/ruby/accumulo_proxy.rb         <operator>|</operator>   14 +-
 proxy/src/main/ruby/proxy_types.rb            <operator>|</operator>   18 +
 proxy/src/main/thrift/proxy.thrift            <operator>|</operator>    9 +-
 ...erators.java =&gt; UserCompactionConfig.java</for>} |   <expr_stmt><expr><literal type="number">44</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>FateServiceHandler</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>CompactRange</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">99</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name> <operator>|</operator>    <literal type="number">9</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServerResourceManager</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">10</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>CompactionPlan</name><operator>.</operator><name>java</name></name>    <operator>|</operator>    <literal type="number">3</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>compaction</name><operator>/</operator><name><name>CompactionStrategy</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">10</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>compaction</name><operator>/</operator><name><name>DefaultCompactionStrategy</name><operator>.</operator><name>java</name></name> <operator>|</operator>    <literal type="number">5</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name><name>EverythingCompactionStrategy</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   <literal type="number">39</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name><name>SizeLimitCompactionStrategy</name><operator>.</operator><name>java</name></name>          <operator>|</operator>    <literal type="number">4</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  <literal type="number">134</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>CompactCommand</name><operator>.</operator><name>java</name></name>        <operator>|</operator>   <literal type="number">55</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name><name>SimpleProxyIT</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">47</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name><name>UserCompactionStrategyIT</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  <literal type="number">337</literal> <operator>++</operator><operator>++</operator>
 <operator>...</operator><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>FunctionalTestUtils</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   <literal type="number">13</literal> <operator>+</operator><operator>-</operator>
 <literal type="number">37</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">3743</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">1932</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CompactionConfig</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CompactionStrategyConfig</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>CompactionStrategyConfigUtil</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>CompactionStrategyConfig</name><operator>.</operator><name>java</name></name>
 <name>rename</name> <name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><block>{<expr><name><name>CompactionIterators</name><operator>.</operator><name>java</name></name> <operator>=</operator><operator>&gt;</operator> <name><name>UserCompactionConfig</name><operator>.</operator><name>java</name></name></expr>}</block> <operator>(</operator><literal type="number">79</literal><operator>%</operator><operator>)</operator>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>EverythingCompactionStrategy</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>UserCompactionStrategyIT</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CompactionConfig</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CompactionConfig</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..f59c70b85</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CompactionConfig</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">155</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class exist to pass parameters to {@link TableOperations#compact(String, CompactionConfig)}
 * 
 * @since 1.7.0
 */</comment>

<class><specifier>public</specifier> class <name>CompactionConfig</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Text</name></type> <name>start</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Text</name></type> <name>end</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>flush</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>wait</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>CompactionStrategyConfig</name></type> <name>compactionStrategy</name> <init>= <expr><operator>new</operator> <class><super><name>CompactionStrategyConfig</name></super><argument_list>(<argument><expr><literal type="string">"org.apache.accumulo.tserver.compaction.EverythingCompactionStrategy"</literal></expr></argument>)</argument_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>CompactionStrategyConfig</name></type> <name>setOptions</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * @param start
   *          First tablet to be compacted contains the row after this row, null means the first tablet in table. The default is null.
   * @return this
   */</comment>

  <function><type><specifier>public</specifier> <name>CompactionConfig</name></type> <name>setStartRow</name><parameter_list>(<parameter><decl><type><name>Text</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @return The previously set start row. The default is null.
   */</comment>
  <function><type><specifier>public</specifier> <name>Text</name></type> <name>getStartRow</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>start</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * 
   * @param end
   *          Last tablet to be compacted contains this row, null means the last tablet in table. The default is null.
   * @return this
   */</comment>
  <function><type><specifier>public</specifier> <name>CompactionConfig</name></type> <name>setEndRow</name><parameter_list>(<parameter><decl><type><name>Text</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @return The previously set end row. The default is null.
   */</comment>
  <function><type><specifier>public</specifier> <name>Text</name></type> <name>getEndRow</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>end</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @param flush
   *          If set to true, will flush in memory data of all tablets in range before compacting. If not set, the default is true.
   * @return this
   */</comment>
  <function><type><specifier>public</specifier> <name>CompactionConfig</name></type> <name>setFlush</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>flush</name></name> <operator>=</operator> <name>flush</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @return The previously set flush. The default is true.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFlush</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>flush</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @param wait
   *          If set to true, will cause compact operation to wait for all tablets in range to compact. If not set, the default is true.
   * @return this
   */</comment>

  <function><type><specifier>public</specifier> <name>CompactionConfig</name></type> <name>setWait</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wait</name></name> <operator>=</operator> <name>wait</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * 
   * @return The previously set wait. The default is true.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getWait</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>wait</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @param iterators
   *          configures the iterators that will be used when compacting tablets. These iterators are merged with current iterators configured for the table.
   * @return this
   */</comment>
  <function><type><specifier>public</specifier> <name>CompactionConfig</name></type> <name>setIterators</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @return The previously set iterators. Returns an empty list if not set. The returned list is unmodifiable.
   */</comment>
  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>getIterators</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableList</name></name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @param csConfig
   *          configures the strategy that will be used by each tablet to select files. If no strategy is set, then all files will be compacted.
   * @return this
   */</comment>
  <function><type><specifier>public</specifier> <name>CompactionConfig</name></type> <name>setCompactionStrategy</name><parameter_list>(<parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>csConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>csConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <name>csConfig</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @return The previously set compaction strategy. Defaults to a configuration of org.apache.accumulo.tserver.compaction.EverythingCompactionStrategy which
   *         always compacts all files.
   */</comment>
  <function><type><specifier>public</specifier> <name>CompactionStrategyConfig</name></type> <name>getCompactionStrategy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>compactionStrategy</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CompactionStrategyConfig</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CompactionStrategyConfig</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..14b275e7c</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>CompactionStrategyConfig</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">74</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

<comment type="block" format="javadoc">/**
 * 
 * @since 1.7.0
 */</comment>

<class><specifier>public</specifier> class <name>CompactionStrategyConfig</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>className</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * 
   * @param className
   *          The name of a class that implements org.apache.accumulo.tserver.compaction.CompactionStrategy. This class must be exist on tservers.
   */</comment>

  <constructor><specifier>public</specifier> <name>CompactionStrategyConfig</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <name>className</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * @return the class name passed to the constructor.
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>className</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @param opts
   *          The options that will be passed to the init() method of the compaction strategy when its instantiated on a tserver. This method will copy the map.
   *          The default is an empty map.
   * @return this
   */</comment>

  <function><type><specifier>public</specifier> <name>CompactionStrategyConfig</name></type> <name>setOptions</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * 
   * @return The previously set options. Returns an unmodifiable map. The default is an empty map.
   */</comment>

  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>TableOperations</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>TableOperations</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">97f538dd2</literal><operator>..</operator><literal type="number">75bdf8d7b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>TableOperations</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>TableOperations</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">288</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">288</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> interface <name>TableOperations</name> <block>{
   <expr><name>void</name> <call><name>compact</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>Text</name> <name>start</name></expr></argument>, <argument><expr><name>Text</name> <name>end</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr></argument>, <argument><expr><name>boolean</name> <name>flush</name></expr></argument>, <argument><expr><name>boolean</name> <name>wait</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>,
       <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument></throws></expr>;
 
  <comment type="block" format="javadoc">/**
   * Starts a full major compaction of the tablets in the range (start, end]. If the config does not specify a compaction strategy, then all files in a tablet
   * are compacted. The compaction is performed even for tablets that have only one file.
   * 
   * &lt;p&gt;
   * Only one compact call at a time can pass iterators and/or a compaction strategy. If two threads call compaction with iterators and/or a copmaction
   * strategy, then one will fail.
   * 
   * @param tableName
   *          the table to compact
   * @param config
   *          the configuration to use
   * 
   * @since 1.7.0
   */</comment>
  <expr><name>void</name> <call><name>compact</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>CompactionConfig</name> <name>config</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument></throws></expr>;

   <comment type="block" format="javadoc">/**
    * Cancels a user initiated major compaction of a table initiated with {@link #compact(String, Text, Text, boolean, boolean)} or
    * {@link #compact(String, Text, Text, List, boolean, boolean)}. Compactions of tablets that are currently running may finish, but new compactions of tablets
diff --git a/core/src/main/java/org/apache/accumulo/core/client/impl/CompactionStrategyConfigUtil.java b/core/src/main/java/org/apache/accumulo/core/client/impl/CompactionStrategyConfigUtil.java
new file mode 100644
index 000000000..8dce87764
-- /dev/null
++ b/core/src/main/java/org/apache/accumulo/core/client/impl/CompactionStrategyConfigUtil.java
@@ -0,0 +1,98 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name></name>;</package></block></expr></expr_stmt>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionStrategyConfig</name></name>;</import>

<class><specifier>public</specifier> class <name>CompactionStrategyConfigUtil</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAGIC</name> <init>= <expr><literal type="number">0xcc5e6024</literal></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>dout</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>csc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <expr_stmt><expr><call><name><name>dout</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dout</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>dout</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>csc</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dout</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>csc</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>csc</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>dout</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>dout</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>csc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>dos</name> <init>= <expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>encode</name><argument_list>(<argument><expr><name>dos</name></expr></argument>, <argument><expr><name>csc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompactionStrategyConfig</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>din</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>din</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>MAGIC</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unexpected MAGIC "</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>din</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unexpected version"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>classname</name> <init>= <expr><call><name><name>din</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numEntries</name> <init>= <expr><call><name><name>din</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>opts</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numEntries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>k</name> <init>= <expr><call><name><name>din</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>v</name> <init>= <expr><call><name><name>din</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompactionStrategyConfig</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encodedCsc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteArrayInputStream</name></type> <name>bais</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>encodedCsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DataInputStream</name></type> <name>dis</name> <init>= <expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><name>bais</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{<block_content>
      <return>return <expr><call><name>decode</name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">77b6a0102</literal><operator>..</operator><literal type="number">1def09136</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">48</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReference</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipEntry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipInputStream</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionConfig</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">114</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">116</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TTransportException</name></name>;</import>

 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Joiner</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>TableOperationsImpl</name> <super_list><extends>extends <super><name>TableOperationsHelper</name></super></extends></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">775</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">776</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <specifier>public</specifier> <name>class</name> <name>TableOperationsImpl</name> extends <name>TableOperationsHelper</name> <block>{
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>void</name> <call><name>compact</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>Text</name> <name>start</name></expr></argument>, <argument><expr><name>Text</name> <name>end</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr></argument>, <argument><expr><name>boolean</name> <name>flush</name></expr></argument>, <argument><expr><name>boolean</name> <name>wait</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>,
       <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name> <block>{
    <expr><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setStartRow</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setEndRow</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setIterators</name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setFlush</name><argument_list>(<argument><expr><name>flush</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
  }</block>

  @<name>Override</name>
  <specifier>public</specifier> <name>void</name> <call><name>compact</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>CompactionConfig</name> <name>config</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name> <block>{
     <expr><call><name>checkArgument</name><argument_list>(<argument><expr><name>tableName</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"tableName is null"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>EMPTY</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>String</name></type> <name>tableId</name> <init>= <expr><call><name><name>Tables</name><operator>.</operator><name>getTableId</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition><block type="pseudo"><block_content>
    <decl_stmt><decl><type><name>Text</name></type> <name>start</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getStartRow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>Text</name></type> <name>end</name> <init>= <expr><call><name><name>config</name><operator>.</operator><name>getEndRow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>config</name><operator>.</operator><name>getFlush</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name>_flush</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>args</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>tableId</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>start</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>EMPTY</name></expr> </then><else>: <expr><call><name><name>TextUtil</name><operator>.</operator><name>getByteBuffer</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>end</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>EMPTY</name></expr>
        </then><else>: <expr><call><name><name>TextUtil</name><operator>.</operator><name>getByteBuffer</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>IteratorUtil</name><operator>.</operator><name>encodeIteratorSettings</name></name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>args</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>tableId</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>start</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>EMPTY</name></expr> </then><else>: <expr><call><name><name>TextUtil</name><operator>.</operator><name>getByteBuffer</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><name>end</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>EMPTY</name></expr> </then><else>: <expr><call><name><name>TextUtil</name><operator>.</operator><name>getByteBuffer</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>IteratorUtil</name><operator>.</operator><name>encodeIteratorSettings</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getIterators</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>CompactionStrategyConfigUtil</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getCompactionStrategy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>opts</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>doFateOperation</name><argument_list>(<argument><expr><name><name>FateOperation</name><operator>.</operator><name>TABLE_COMPACT</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doFateOperation</name><argument_list>(<argument><expr><name><name>FateOperation</name><operator>.</operator><name>TABLE_COMPACT</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name><name>config</name><operator>.</operator><name>getWait</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>TableExistsException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <comment type="line">// should not happen</comment>
       <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mock</name><operator>/</operator><name><name>MockTableOperations</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mock</name><operator>/</operator><name><name>MockTableOperations</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">59afc8b0b</literal><operator>..</operator><name>f8d2ccdd0</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mock</name><operator>/</operator><name><name>MockTableOperations</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mock</name><operator>/</operator><name><name>MockTableOperations</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>NamespaceNotFoundException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableExistsException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DiskUsage</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>FindMax</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>TimeType</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">399</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">400</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <name>class</name> <name>MockTableOperations</name> extends <name>TableOperationsHelper</name> <block>{
       <expr><name>TableNotFoundException</name></expr>, <expr><name>AccumuloException</name> <block>{
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>exists</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
       <throw>throw <expr><operator>new</operator> <call><name>TableNotFoundException</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block></expr>

    <if_stmt><if>if <condition>(<expr><name>iterators</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>iterators</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
  }</block></expr></expr_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>compact</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>CompactionConfig</name></type> <name>config</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>exists</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>TableNotFoundException</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>config</name><operator>.</operator><name>getIterators</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>config</name><operator>.</operator><name>getCompactionStrategy</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Mock does not support iterators or compaction strategies for compactions"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
   </block_content>}</block></function>
 
   <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsHelperTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsHelperTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">02838edc8</literal><operator>..</operator><name>f7a7395ea</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsHelperTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>TableOperationsHelperTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionConfig</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">115</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">117</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>TableOperationsHelperTest</name> <block>{
     <expr><specifier>public</specifier> <name>void</name> <call><name>compact</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>Text</name> <name>start</name></expr></argument>, <argument><expr><name>Text</name> <name>end</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr></argument>, <argument><expr><name>boolean</name> <name>flush</name></expr></argument>, <argument><expr><name>boolean</name> <name>wait</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>,
         <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name> <block>{}</block>
 
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name> <call><name>compact</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>CompactionConfig</name> <name>config</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name> <block>{}</block>

     <annotation>@<name>Override</name></annotation>
     <specifier>public</specifier> <name>void</name> <call><name>delete</name><argument_list>(<argument><expr><name>String</name> <name>tableName</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name> <block>{}</block>
 
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>cpp</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>cpp</name></name>
<name>index</name> <literal type="number">26677701e</literal><operator>..</operator><name>b220dcb16</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>cpp</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>cpp</name></name></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">56</literal></expr></argument>,<argument><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">56</literal></expr></argument>,<argument><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_login_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name><operator>*</operator> <name>i</name></expr></argument>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>loginProperties</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size125</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype126</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype127</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype126</name></expr></argument>, <argument><expr><name>_vtype127</name></expr></argument>, <argument><expr><name>_size125</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i129</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i129</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i129</name> <operator>&lt;</operator> <name>_size125</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i129</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size133</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype134</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype135</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype134</name></expr></argument>, <argument><expr><name>_vtype135</name></expr></argument>, <argument><expr><name>_size133</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i137</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i137</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i137</name> <operator>&lt;</operator> <name>_size133</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i137</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key130</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key130</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val131</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>loginProperties</name><index>[<expr><name>_key130</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val131</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key138</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key138</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val139</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>loginProperties</name><index>[<expr><name>_key138</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val139</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             <expr_stmt/>}</block_content>
             xfer += iprot-&gt;readMapEnd(</block></for>)</block_content></block><empty_stmt>;</empty_stmt>
           <expr_stmt/>}</block_content>
@@ -98</block><operator>,</operator><expr_stmt><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_login_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name><operator>*</operator>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"loginProperties"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt></if></if_stmt></argument_list></call></expr></argument></throws></expr>
   <block>{
     <expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>loginProperties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;
    <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter132</name></expr>;
    <for>for <control>(<init><expr><name>_iter132</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>loginProperties</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter132</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>loginProperties</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter132</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter140</name></expr>;</expr_stmt></block_content></block></for></block></block></expr></expr_stmt>
    <for>for <control>(<init><expr><name>_iter140</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>loginProperties</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter140</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>loginProperties</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter140</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter132</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter132</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter140</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter140</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block></catch></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_login_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name><operator>*</operator>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"loginProperties"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>loginProperties</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter133</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter133</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>loginProperties</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter133</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>loginProperties</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter133</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter141</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter141</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>loginProperties</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter141</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>loginProperties</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter141</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter133</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter133</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter141</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter141</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block></argument_list></call></expr></expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">549</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">549</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_addSplits_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtoco</name></expr></argument>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>splits</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size134</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype137</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype137</name></expr></argument>, <argument><expr><name>_size134</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i138</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i138</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i138</name> <operator>&lt;</operator> <name>_size134</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i138</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size142</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype145</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype145</name></expr></argument>, <argument><expr><name>_size142</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i146</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i146</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i146</name> <operator>&lt;</operator> <name>_size142</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i146</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem139</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_elem139</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>splits</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem139</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem147</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_elem147</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>splits</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem147</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">593</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">593</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_addSplits_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtoc</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"splits"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>splits</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter140</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter140</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>splits</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter140</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>splits</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter140</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter148</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter148</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>splits</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter148</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>splits</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter148</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter140</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter148</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">622</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">622</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_addSplits_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProto</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"splits"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>splits</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter141</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter141</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>splits</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter141</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>splits</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter141</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter149</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter149</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>splits</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter149</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>splits</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter149</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter141</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter149</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">820</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">820</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_attachIterator_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPr</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size142</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype145</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype145</name></expr></argument>, <argument><expr><name>_size142</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i146</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i146</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i146</name> <operator>&lt;</operator> <name>_size142</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i146</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size150</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype153</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype153</name></expr></argument>, <argument><expr><name>_size150</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i154</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i154</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i154</name> <operator>&lt;</operator> <name>_size150</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i154</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>IteratorScope</name><operator>::</operator><name>type</name> <name>_elem147</name></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast148</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast148</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>_elem147</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast148</name></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem147</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>IteratorScope</name><operator>::</operator><name>type</name> <name>_elem155</name></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast156</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast156</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>_elem155</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast156</name></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem155</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">870</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">870</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_attachIterator_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TP</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"scopes"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter149</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter149</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter149</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter149</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter157</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter157</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter157</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter157</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter149</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter157</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">903</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">903</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_attachIterator_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"scopes"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter150</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter150</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter150</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter150</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter158</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter158</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter158</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter158</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter150</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter158</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1101</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">1101</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_checkIteratorConflicts_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>proto</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size151</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype154</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype154</name></expr></argument>, <argument><expr><name>_size151</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i155</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i155</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i155</name> <operator>&lt;</operator> <name>_size151</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i155</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size159</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype162</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype162</name></expr></argument>, <argument><expr><name>_size159</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i163</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i163</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i163</name> <operator>&lt;</operator> <name>_size159</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i163</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>IteratorScope</name><operator>::</operator><name>type</name> <name>_elem156</name></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast157</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast157</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>_elem156</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast157</name></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem156</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>IteratorScope</name><operator>::</operator><name>type</name> <name>_elem164</name></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast165</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast165</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>_elem164</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast165</name></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem164</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1151</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1151</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_checkIteratorConflicts_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>prot</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"scopes"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter158</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter158</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter158</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter158</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter166</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter166</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter166</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter166</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter158</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter166</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1184</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1184</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_checkIteratorConflicts_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pro</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"scopes"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter159</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter159</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter159</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter159</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter167</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter167</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter167</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter167</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter159</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter167</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1568</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">1568</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_cloneTable_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtoc</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToSet</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size160</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype161</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype162</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype161</name></expr></argument>, <argument><expr><name>_vtype162</name></expr></argument>, <argument><expr><name>_size160</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i164</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i164</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i164</name> <operator>&lt;</operator> <name>_size160</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i164</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size168</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype169</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype170</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype169</name></expr></argument>, <argument><expr><name>_vtype170</name></expr></argument>, <argument><expr><name>_size168</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i172</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i172</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i172</name> <operator>&lt;</operator> <name>_size168</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i172</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key165</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key165</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val166</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>propertiesToSet</name><index>[<expr><name>_key165</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val166</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key173</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key173</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val174</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>propertiesToSet</name><index>[<expr><name>_key173</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val174</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1591</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">1591</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_cloneTable_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtoc</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToExclude</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size167</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype170</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype170</name></expr></argument>, <argument><expr><name>_size167</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i171</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i171</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i171</name> <operator>&lt;</operator> <name>_size167</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i171</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size175</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype178</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype178</name></expr></argument>, <argument><expr><name>_size175</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i179</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i179</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i179</name> <operator>&lt;</operator> <name>_size175</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i179</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem172</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem172</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToExclude</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem172</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem180</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem180</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToExclude</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem180</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1643</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">1643</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_cloneTable_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProto</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"propertiesToSet"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter173</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter173</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToSet</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter173</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter173</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter181</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter181</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToSet</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter181</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter181</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter173</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter173</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter181</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter181</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1656</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1656</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_cloneTable_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProto</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"propertiesToExclude"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToExclude</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter174</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter174</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToExclude</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter174</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToExclude</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter174</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter182</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter182</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToExclude</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter182</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>propertiesToExclude</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter182</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter174</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter182</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1693</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">1693</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_cloneTable_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProt</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"propertiesToSet"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>propertiesToSet</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter175</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter175</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>propertiesToSet</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter175</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>propertiesToSet</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter175</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter183</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter183</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>propertiesToSet</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter183</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>propertiesToSet</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter183</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter175</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter175</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter183</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter183</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1706</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">1706</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_cloneTable_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProt</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"propertiesToExclude"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>propertiesToExclude</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter176</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter176</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>propertiesToExclude</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter176</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>propertiesToExclude</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter176</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter184</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter184</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>propertiesToExclude</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter184</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>propertiesToExclude</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter184</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter176</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter184</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1932</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">1932</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_compactTable_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProt</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>iterators</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size177</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype180</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype180</name></expr></argument>, <argument><expr><name>_size177</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>iterators</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size177</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i181</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i181</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i181</name> <operator>&lt;</operator> <name>_size177</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i181</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size185</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype188</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype188</name></expr></argument>, <argument><expr><name>_size185</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>iterators</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size185</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i189</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i189</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i189</name> <operator>&lt;</operator> <name>_size185</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i189</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>iterators</name><index>[<expr><name>_i181</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>iterators</name><index>[<expr><name>_i189</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1964</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1964</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_compactTable_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProt</name>
           <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
         </block_content>}</block></if></if_stmt>
         <break>break;</break>
      <case>case <expr><literal type="number">8</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>compactionStrategy</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
       <default>default:</default>
         <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
         <break>break;</break>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1999</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">2007</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_compactTable_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPro</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"iterators"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>iterators</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter182</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter182</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>iterators</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter182</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>iterators</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter182</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter190</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter190</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>iterators</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter190</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>iterators</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter190</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter182</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter190</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2016</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2024</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_compactTable_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPro</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBool</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>wait</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
 
  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"compactionStrategy"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>compactionStrategy</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>

   <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldStop</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeStructEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   <return>return <expr><name>xfer</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2044</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">2056</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_compactTable_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPr</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"iterators"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>iterators</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter183</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter183</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>iterators</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter183</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>iterators</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter183</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter191</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter191</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>iterators</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter191</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>iterators</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter191</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter183</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter191</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2061</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2073</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_compactTable_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPr</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBool</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>wait</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
 
  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"compactionStrategy"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>compactionStrategy</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>

   <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldStop</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeStructEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   <return>return <expr><name>xfer</name></expr>;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2466</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">2482</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_createTable_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProto</name></expr></argument></argument_list></call></expr></expr_stmt>
         <break>break;</break>
       <case>case <expr><literal type="number">4</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast184</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast184</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>TimeType</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast184</name></expr></block_content></block></lambda></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast192</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast192</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>TimeType</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast192</name></expr></block_content></block></lambda></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3672</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">3688</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getDiskUsage_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProt</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>tables</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size185</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype188</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype188</name></expr></argument>, <argument><expr><name>_size185</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i189</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i189</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i189</name> <operator>&lt;</operator> <name>_size185</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i189</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size193</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype196</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype196</name></expr></argument>, <argument><expr><name>_size193</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i197</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i197</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i197</name> <operator>&lt;</operator> <name>_size193</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i197</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem190</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem190</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>tables</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem190</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem198</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem198</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>tables</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem198</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3712</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">3728</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getDiskUsage_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPro</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>tables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter191</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter191</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>tables</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter191</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>tables</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter191</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter199</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter199</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>tables</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter199</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>tables</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter199</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter191</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter199</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3737</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">3753</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getDiskUsage_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPr</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>tables</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter192</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter192</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>tables</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter192</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>tables</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter192</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter200</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter200</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>tables</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter200</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>tables</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter200</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter192</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter200</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3775</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">3791</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getDiskUsage_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPr</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size193</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype196</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype196</name></expr></argument>, <argument><expr><name>_size193</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size193</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i197</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i197</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i197</name> <operator>&lt;</operator> <name>_size193</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i197</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size201</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype204</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype204</name></expr></argument>, <argument><expr><name>_size201</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size201</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i205</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i205</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i205</name> <operator>&lt;</operator> <name>_size201</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i205</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i197</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i205</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3837</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">3853</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getDiskUsage_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TP</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>DiskUsage</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter198</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter198</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter198</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter198</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>DiskUsage</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter206</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter206</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter206</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter206</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter198</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter206</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3887</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">3903</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getDiskUsage_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TP</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size199</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype202</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype202</name></expr></argument>, <argument><expr><name>_size199</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size199</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i203</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i203</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i203</name> <operator>&lt;</operator> <name>_size199</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i203</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size207</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype210</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype210</name></expr></argument>, <argument><expr><name>_size207</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size207</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i211</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i211</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i211</name> <operator>&lt;</operator> <name>_size207</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i211</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i203</name></expr>]</index><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i211</name></expr>]</index><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4045</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">4061</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getLocalityGroups_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size204</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype205</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype206</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype205</name></expr></argument>, <argument><expr><name>_vtype206</name></expr></argument>, <argument><expr><name>_size204</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i208</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i208</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i208</name> <operator>&lt;</operator> <name>_size204</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i208</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size212</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype213</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype214</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype213</name></expr></argument>, <argument><expr><name>_vtype214</name></expr></argument>, <argument><expr><name>_size212</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i216</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i216</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i216</name> <operator>&lt;</operator> <name>_size212</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i216</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key209</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key209</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val210</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key209</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key217</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key217</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val218</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key217</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>_val210</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size211</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype214</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype214</name></expr></argument>, <argument><expr><name>_size211</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i215</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i215</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i215</name> <operator>&lt;</operator> <name>_size211</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i215</name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>_val218</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size219</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype222</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype222</name></expr></argument>, <argument><expr><name>_size219</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i223</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i223</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i223</name> <operator>&lt;</operator> <name>_size219</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i223</name></expr></incr>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem216</name></expr>;</expr_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem216</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val210</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem216</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem224</name></expr>;</expr_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem224</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val218</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem224</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4123</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">4139</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getLocalityGroups_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protoco</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter217</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter217</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter217</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter217</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter225</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter225</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter225</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter225</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter217</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter225</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
         <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter217</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter218</name></expr>;</expr_stmt>
          <for>for <control>(<init><expr><name>_iter218</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter217</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter218</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter217</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter218</name></expr></incr>)</control><block type="pseudo"><block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter225</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt></block_content></block></for>
          <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter226</name></expr>;</expr_stmt>
          <for>for <control>(<init><expr><name>_iter226</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter225</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter226</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter225</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter226</name></expr></incr>)</control>
           <block>{<block_content>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter218</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter226</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block></for>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4182</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">4198</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getLocalityGroups_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protoco</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size219</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype220</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype221</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype220</name></expr></argument>, <argument><expr><name>_vtype221</name></expr></argument>, <argument><expr><name>_size219</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i223</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i223</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i223</name> <operator>&lt;</operator> <name>_size219</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i223</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size227</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype228</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype229</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype228</name></expr></argument>, <argument><expr><name>_vtype229</name></expr></argument>, <argument><expr><name>_size227</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i231</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i231</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i231</name> <operator>&lt;</operator> <name>_size227</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i231</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key224</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key224</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val225</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key224</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key232</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key232</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val233</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key232</name></expr>]</index></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>_val225</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size226</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype229</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype229</name></expr></argument>, <argument><expr><name>_size226</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i230</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i230</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i230</name> <operator>&lt;</operator> <name>_size226</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i230</name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>_val233</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size234</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype237</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype237</name></expr></argument>, <argument><expr><name>_size234</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i238</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i238</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i238</name> <operator>&lt;</operator> <name>_size234</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i238</name></expr></incr>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem231</name></expr>;</expr_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem231</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val225</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem231</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem239</name></expr>;</expr_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem239</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val233</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem239</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4296</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">4312</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getIteratorSetting_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>:</operator></expr></argument></argument_list></call></expr></expr_stmt>
         <break>break;</break>
       <case>case <expr><literal type="number">4</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast232</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast232</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scope</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast232</name></expr></block_content></block></lambda></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast240</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast240</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scope</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast240</name></expr></block_content></block></lambda></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>scope</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4562</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">4578</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getMaxRow_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtoco</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>auths</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size233</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype236</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype236</name></expr></argument>, <argument><expr><name>_size233</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i237</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i237</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i237</name> <operator>&lt;</operator> <name>_size233</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i237</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size241</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype244</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype244</name></expr></argument>, <argument><expr><name>_size241</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i245</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i245</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i245</name> <operator>&lt;</operator> <name>_size241</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i245</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem238</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_elem238</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>auths</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem238</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem246</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_elem246</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>auths</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem246</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4638</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">4654</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getMaxRow_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtoc</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"auths"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>auths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter239</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter239</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>auths</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter239</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>auths</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter239</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter247</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter247</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>auths</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter247</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>auths</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter247</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter239</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter247</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4683</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">4699</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getMaxRow_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProto</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"auths"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>auths</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter240</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter240</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>auths</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter240</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>auths</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter240</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter248</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter248</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>auths</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter248</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>auths</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter248</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter240</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter248</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">4975</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">4991</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getTableProperties_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protoco</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size241</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype242</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype243</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype242</name></expr></argument>, <argument><expr><name>_vtype243</name></expr></argument>, <argument><expr><name>_size241</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i245</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i245</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i245</name> <operator>&lt;</operator> <name>_size241</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i245</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size249</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype250</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype251</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype250</name></expr></argument>, <argument><expr><name>_vtype251</name></expr></argument>, <argument><expr><name>_size249</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i253</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i253</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i253</name> <operator>&lt;</operator> <name>_size249</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i253</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key246</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key246</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val247</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key246</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val247</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key254</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key254</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val255</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key254</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val255</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5040</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">5056</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getTableProperties_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protoc</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter248</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter248</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter248</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter248</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter256</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter256</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter256</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter256</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter248</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter248</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter256</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter256</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5091</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">5107</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getTableProperties_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protoc</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size249</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype250</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype251</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype250</name></expr></argument>, <argument><expr><name>_vtype251</name></expr></argument>, <argument><expr><name>_size249</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i253</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i253</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i253</name> <operator>&lt;</operator> <name>_size249</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i253</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size257</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype258</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype259</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype258</name></expr></argument>, <argument><expr><name>_vtype259</name></expr></argument>, <argument><expr><name>_size257</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i261</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i261</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i261</name> <operator>&lt;</operator> <name>_size257</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i261</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key254</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key254</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val255</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key254</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val255</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key262</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key262</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val263</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key262</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val263</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5768</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">5784</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listSplits_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProt</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size256</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype259</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype259</name></expr></argument>, <argument><expr><name>_size256</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size256</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i260</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i260</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i260</name> <operator>&lt;</operator> <name>_size256</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i260</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size264</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype267</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype267</name></expr></argument>, <argument><expr><name>_size264</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size264</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i268</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i268</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i268</name> <operator>&lt;</operator> <name>_size264</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i268</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i260</name></expr>]</index></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i268</name></expr>]</index></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5830</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">5846</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listSplits_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPro</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter261</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter261</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter261</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter261</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter269</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter269</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter269</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter269</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter261</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter269</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5880</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">5896</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listSplits_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPro</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size262</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype265</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype265</name></expr></argument>, <argument><expr><name>_size262</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size262</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i266</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i266</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i266</name> <operator>&lt;</operator> <name>_size262</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i266</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size270</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype273</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype273</name></expr></argument>, <argument><expr><name>_size270</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size270</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i274</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i274</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i274</name> <operator>&lt;</operator> <name>_size270</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i274</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i266</name></expr>]</index></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i274</name></expr>]</index></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6022</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">6038</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listTables_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProt</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size267</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype270</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype270</name></expr></argument>, <argument><expr><name>_size267</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i271</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i271</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i271</name> <operator>&lt;</operator> <name>_size267</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i271</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size275</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype278</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype278</name></expr></argument>, <argument><expr><name>_size275</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i279</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i279</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i279</name> <operator>&lt;</operator> <name>_size275</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i279</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem272</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem272</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem272</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem280</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem280</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem280</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6061</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">6077</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listTables_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPro</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter273</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter273</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter273</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter273</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter281</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter281</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter281</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter281</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter273</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter281</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6099</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">6115</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listTables_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPro</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size274</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype277</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype277</name></expr></argument>, <argument><expr><name>_size274</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i278</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i278</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i278</name> <operator>&lt;</operator> <name>_size274</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i278</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size282</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype285</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype285</name></expr></argument>, <argument><expr><name>_size282</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i286</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i286</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i286</name> <operator>&lt;</operator> <name>_size282</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i286</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem279</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem279</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>_elem279</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem287</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem287</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>_elem287</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6234</literal></expr><operator>,</operator><expr><literal type="number">29</literal> <operator>+</operator><literal type="number">6250</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listIterators_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TP</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size280</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype281</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype282</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype281</name></expr></argument>, <argument><expr><name>_vtype282</name></expr></argument>, <argument><expr><name>_size280</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i284</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i284</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i284</name> <operator>&lt;</operator> <name>_size280</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i284</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size288</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype289</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype290</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype289</name></expr></argument>, <argument><expr><name>_vtype290</name></expr></argument>, <argument><expr><name>_size288</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i292</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i292</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i292</name> <operator>&lt;</operator> <name>_size288</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i292</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key285</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key285</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val286</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key285</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key293</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key293</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val294</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key293</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>_val286</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size287</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype290</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype290</name></expr></argument>, <argument><expr><name>_size287</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i291</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i291</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i291</name> <operator>&lt;</operator> <name>_size287</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i291</name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>_val294</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size295</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype298</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype298</name></expr></argument>, <argument><expr><name>_size295</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i299</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i299</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i299</name> <operator>&lt;</operator> <name>_size295</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i299</name></expr></incr>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><name>IteratorScope</name><operator>::</operator><name>type</name> <name>_elem292</name></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast293</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast293</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_elem292</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast293</name></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val286</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem292</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>IteratorScope</name><operator>::</operator><name>type</name> <name>_elem300</name></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast301</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast301</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_elem300</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast301</name></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val294</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem300</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6314</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">6330</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listIterators_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter294</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter294</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter294</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter294</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter302</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter302</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter302</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter302</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter294</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter302</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
         <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter294</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter295</name></expr>;</expr_stmt>
          <for>for <control>(<init><expr><name>_iter295</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter294</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter295</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter294</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter295</name></expr></incr>)</control><block type="pseudo"><block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter302</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt></block_content></block></for>
          <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter303</name></expr>;</expr_stmt>
          <for>for <control>(<init><expr><name>_iter303</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter302</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter303</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter302</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter303</name></expr></incr>)</control>
           <block>{<block_content>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter295</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter303</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block></for>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6373</literal></expr><operator>,</operator><expr><literal type="number">29</literal> <operator>+</operator><literal type="number">6389</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listIterators_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size296</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype297</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype298</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype297</name></expr></argument>, <argument><expr><name>_vtype298</name></expr></argument>, <argument><expr><name>_size296</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i300</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i300</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i300</name> <operator>&lt;</operator> <name>_size296</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i300</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size304</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype305</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype306</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype305</name></expr></argument>, <argument><expr><name>_vtype306</name></expr></argument>, <argument><expr><name>_size304</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i308</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i308</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i308</name> <operator>&lt;</operator> <name>_size304</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i308</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key301</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key301</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val302</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key301</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key309</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key309</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val310</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key309</name></expr>]</index></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>_val302</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size303</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype306</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype306</name></expr></argument>, <argument><expr><name>_size303</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i307</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i307</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i307</name> <operator>&lt;</operator> <name>_size303</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i307</name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>_val310</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size311</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype314</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype314</name></expr></argument>, <argument><expr><name>_size311</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i315</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i315</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i315</name> <operator>&lt;</operator> <name>_size311</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i315</name></expr></incr>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><name>IteratorScope</name><operator>::</operator><name>type</name> <name>_elem308</name></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast309</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast309</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_elem308</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast309</name></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val302</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem308</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>IteratorScope</name><operator>::</operator><name>type</name> <name>_elem316</name></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast317</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast317</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_elem316</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast317</name></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val310</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem316</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6549</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">6565</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listConstraints_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size310</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype311</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype312</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype311</name></expr></argument>, <argument><expr><name>_vtype312</name></expr></argument>, <argument><expr><name>_size310</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i314</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i314</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i314</name> <operator>&lt;</operator> <name>_size310</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i314</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size318</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype319</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype320</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype319</name></expr></argument>, <argument><expr><name>_vtype320</name></expr></argument>, <argument><expr><name>_size318</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i322</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i322</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i322</name> <operator>&lt;</operator> <name>_size318</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i322</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key315</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key315</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>int32_t</name><operator>&amp;</operator> <name>_val316</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key315</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>_val316</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key323</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key323</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>int32_t</name><operator>&amp;</operator> <name>_val324</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key323</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>_val324</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6614</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">6630</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listConstraints_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>:</operator>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>int32_t</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter317</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter317</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter317</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter317</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>int32_t</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter325</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter325</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter325</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter325</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter317</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter317</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter325</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter325</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">6665</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">6681</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listConstraints_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>:</operator></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size318</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype319</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype320</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype319</name></expr></argument>, <argument><expr><name>_vtype320</name></expr></argument>, <argument><expr><name>_size318</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i322</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i322</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i322</name> <operator>&lt;</operator> <name>_size318</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i322</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size326</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype327</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype328</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype327</name></expr></argument>, <argument><expr><name>_vtype328</name></expr></argument>, <argument><expr><name>_size326</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i330</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i330</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i330</name> <operator>&lt;</operator> <name>_size326</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i330</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key323</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key323</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>int32_t</name><operator>&amp;</operator> <name>_val324</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key323</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>_val324</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key331</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key331</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>int32_t</name><operator>&amp;</operator> <name>_val332</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key331</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>_val332</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">7720</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">7736</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_removeIterator_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPr</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size325</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype328</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype328</name></expr></argument>, <argument><expr><name>_size325</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i329</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i329</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i329</name> <operator>&lt;</operator> <name>_size325</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i329</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size333</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype336</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype336</name></expr></argument>, <argument><expr><name>_size333</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i337</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i337</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i337</name> <operator>&lt;</operator> <name>_size333</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i337</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>IteratorScope</name><operator>::</operator><name>type</name> <name>_elem330</name></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast331</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast331</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>_elem330</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast331</name></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem330</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>IteratorScope</name><operator>::</operator><name>type</name> <name>_elem338</name></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast339</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast339</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>_elem338</name> <operator>=</operator> <operator>(</operator><name>IteratorScope</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast339</name></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem338</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">7770</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">7786</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_removeIterator_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TP</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"scopes"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter332</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter332</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter332</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter332</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter340</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter340</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter340</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>scopes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter340</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter332</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter340</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">7803</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">7819</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_removeIterator_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"scopes"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter333</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter333</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter333</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter333</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter341</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter341</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter341</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>scopes</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter341</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter333</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>_iter341</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8481</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">8497</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_setLocalityGroups_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>groups</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size334</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype335</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype336</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype335</name></expr></argument>, <argument><expr><name>_vtype336</name></expr></argument>, <argument><expr><name>_size334</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i338</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i338</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i338</name> <operator>&lt;</operator> <name>_size334</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i338</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size342</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype343</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype344</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype343</name></expr></argument>, <argument><expr><name>_vtype344</name></expr></argument>, <argument><expr><name>_size342</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i346</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i346</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i346</name> <operator>&lt;</operator> <name>_size342</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i346</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key339</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key339</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val340</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>groups</name><index>[<expr><name>_key339</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key347</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key347</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val348</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>groups</name><index>[<expr><name>_key347</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>_val340</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size341</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype344</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype344</name></expr></argument>, <argument><expr><name>_size341</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i345</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i345</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i345</name> <operator>&lt;</operator> <name>_size341</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i345</name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>_val348</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size349</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype352</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype352</name></expr></argument>, <argument><expr><name>_size349</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i353</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i353</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i353</name> <operator>&lt;</operator> <name>_size349</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i353</name></expr></incr>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem346</name></expr>;</expr_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem346</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val340</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem346</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem354</name></expr>;</expr_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem354</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val348</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem354</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8540</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">8556</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_setLocalityGroups_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>:</operator>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"groups"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter347</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter347</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>groups</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter347</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>groups</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter347</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter355</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter355</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>groups</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter355</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>groups</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter355</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter347</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter355</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter347</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter348</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter348</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter347</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter348</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter347</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter348</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter355</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter356</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter356</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter355</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter356</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter355</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter356</name></expr></incr>)</control>
         <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter348</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter356</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8578</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">8594</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_setLocalityGroups_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"groups"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>groups</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter349</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter349</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>groups</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter349</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>groups</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter349</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter357</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter357</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>groups</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter357</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>groups</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter357</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter349</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter357</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter349</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter350</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter350</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter349</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter350</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter349</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter350</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter357</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter358</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter358</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter357</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter358</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter357</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter358</name></expr></incr>)</control>
         <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter350</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter358</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9125</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">9141</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_splitRangeByTablets_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protoc</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size351</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype354</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype354</name></expr></argument>, <argument><expr><name>_size351</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i355</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i355</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i355</name> <operator>&lt;</operator> <name>_size351</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i355</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size359</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype362</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype362</name></expr></argument>, <argument><expr><name>_size359</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i363</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i363</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i363</name> <operator>&lt;</operator> <name>_size359</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i363</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>Range</name></type> <name>_elem356</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <call><name><name>_elem356</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem356</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>Range</name></type> <name>_elem364</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <call><name><name>_elem364</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem364</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9188</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">9204</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_splitRangeByTablets_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>proto</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter357</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter357</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter357</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter357</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter365</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter365</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter365</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter365</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter357</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter365</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9238</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">9254</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_splitRangeByTablets_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>proto</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size358</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype361</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype361</name></expr></argument>, <argument><expr><name>_size358</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i362</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i362</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i362</name> <operator>&lt;</operator> <name>_size358</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i362</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size366</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype369</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype369</name></expr></argument>, <argument><expr><name>_size366</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i370</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i370</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i370</name> <operator>&lt;</operator> <name>_size366</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i370</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>Range</name></type> <name>_elem363</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <call><name><name>_elem363</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>_elem363</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>Range</name></type> <name>_elem371</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <call><name><name>_elem371</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>_elem371</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9559</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">9575</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_tableIdMap_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProt</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size364</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype365</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype366</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype365</name></expr></argument>, <argument><expr><name>_vtype366</name></expr></argument>, <argument><expr><name>_size364</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i368</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i368</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i368</name> <operator>&lt;</operator> <name>_size364</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i368</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size372</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype373</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype374</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype373</name></expr></argument>, <argument><expr><name>_vtype374</name></expr></argument>, <argument><expr><name>_size372</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i376</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i376</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i376</name> <operator>&lt;</operator> <name>_size372</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i376</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key369</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key369</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val370</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key369</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val370</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key377</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key377</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val378</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key377</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val378</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9600</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">9616</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_tableIdMap_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPro</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter371</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter371</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter371</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter371</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter379</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter379</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter379</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter379</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter371</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter371</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter379</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter379</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">9639</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">9655</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_tableIdMap_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPro</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size372</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype373</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype374</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype373</name></expr></argument>, <argument><expr><name>_vtype374</name></expr></argument>, <argument><expr><name>_size372</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i376</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i376</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i376</name> <operator>&lt;</operator> <name>_size372</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i376</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size380</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype381</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype382</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype381</name></expr></argument>, <argument><expr><name>_vtype382</name></expr></argument>, <argument><expr><name>_size380</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i384</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i384</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i384</name> <operator>&lt;</operator> <name>_size380</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i384</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key377</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key377</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val378</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key377</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val378</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key385</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key385</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val386</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key385</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val386</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10244</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">10260</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getActiveScans_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size379</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype382</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype382</name></expr></argument>, <argument><expr><name>_size379</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size379</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i383</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i383</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i383</name> <operator>&lt;</operator> <name>_size379</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i383</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size387</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype390</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype390</name></expr></argument>, <argument><expr><name>_size387</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size387</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i391</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i391</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i391</name> <operator>&lt;</operator> <name>_size387</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i391</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i383</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i391</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10298</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">10314</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getActiveScans_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ActiveScan</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter384</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter384</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter384</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter384</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ActiveScan</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter392</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter392</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter392</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter392</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter384</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter392</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10344</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">10360</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getActiveScans_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size385</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype388</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype388</name></expr></argument>, <argument><expr><name>_size385</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size385</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i389</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i389</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i389</name> <operator>&lt;</operator> <name>_size385</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i389</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size393</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype396</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype396</name></expr></argument>, <argument><expr><name>_size393</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size393</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i397</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i397</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i397</name> <operator>&lt;</operator> <name>_size393</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i397</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i389</name></expr>]</index><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i397</name></expr>]</index><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10494</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">10510</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getActiveCompactions_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>proto</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size390</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype393</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype393</name></expr></argument>, <argument><expr><name>_size390</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size390</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i394</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i394</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i394</name> <operator>&lt;</operator> <name>_size390</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i394</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size398</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype401</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype401</name></expr></argument>, <argument><expr><name>_size398</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size398</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i402</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i402</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i402</name> <operator>&lt;</operator> <name>_size398</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i402</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i394</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i402</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10548</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">10564</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getActiveCompactions_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>prot</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ActiveCompaction</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter395</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter395</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter395</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter395</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ActiveCompaction</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter403</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter403</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter403</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter403</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter395</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter403</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10594</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">10610</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getActiveCompactions_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>prot</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size396</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype399</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype399</name></expr></argument>, <argument><expr><name>_size396</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size396</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i400</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i400</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i400</name> <operator>&lt;</operator> <name>_size396</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i400</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size404</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype407</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype407</name></expr></argument>, <argument><expr><name>_size404</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size404</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i408</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i408</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i408</name> <operator>&lt;</operator> <name>_size404</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i408</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i400</name></expr>]</index><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i408</name></expr>]</index><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10728</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">10744</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getSiteConfiguration_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>proto</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size401</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype402</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype403</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype402</name></expr></argument>, <argument><expr><name>_vtype403</name></expr></argument>, <argument><expr><name>_size401</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i405</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i405</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i405</name> <operator>&lt;</operator> <name>_size401</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i405</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size409</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype410</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype411</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype410</name></expr></argument>, <argument><expr><name>_vtype411</name></expr></argument>, <argument><expr><name>_size409</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i413</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i413</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i413</name> <operator>&lt;</operator> <name>_size409</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i413</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key406</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key406</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val407</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key406</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val407</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key414</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key414</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val415</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key414</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val415</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10785</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">10801</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getSiteConfiguration_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>prot</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter408</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter408</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter408</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter408</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter416</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter416</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter416</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter416</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter408</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter408</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter416</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter416</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10832</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">10848</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getSiteConfiguration_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>prot</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size409</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype410</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype411</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype410</name></expr></argument>, <argument><expr><name>_vtype411</name></expr></argument>, <argument><expr><name>_size409</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i413</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i413</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i413</name> <operator>&lt;</operator> <name>_size409</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i413</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size417</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype418</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype419</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype418</name></expr></argument>, <argument><expr><name>_vtype419</name></expr></argument>, <argument><expr><name>_size417</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i421</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i421</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i421</name> <operator>&lt;</operator> <name>_size417</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i421</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key414</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key414</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val415</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key414</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val415</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key422</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key422</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val423</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key422</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val423</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">10969</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">10985</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getSystemConfiguration_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pro</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size416</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype417</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype418</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype417</name></expr></argument>, <argument><expr><name>_vtype418</name></expr></argument>, <argument><expr><name>_size416</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i420</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i420</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i420</name> <operator>&lt;</operator> <name>_size416</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i420</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size424</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype425</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype426</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype425</name></expr></argument>, <argument><expr><name>_vtype426</name></expr></argument>, <argument><expr><name>_size424</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i428</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i428</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i428</name> <operator>&lt;</operator> <name>_size424</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i428</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key421</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key421</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val422</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key421</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val422</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key429</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key429</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val430</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key429</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val430</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">11026</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">11042</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getSystemConfiguration_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pr</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter423</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter423</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter423</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter423</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter431</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter431</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter431</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter431</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter423</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter423</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter431</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter431</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">11073</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">11089</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getSystemConfiguration_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pr</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size424</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype425</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype426</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype425</name></expr></argument>, <argument><expr><name>_vtype426</name></expr></argument>, <argument><expr><name>_size424</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i428</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i428</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i428</name> <operator>&lt;</operator> <name>_size424</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i428</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size432</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype433</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype434</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype433</name></expr></argument>, <argument><expr><name>_vtype434</name></expr></argument>, <argument><expr><name>_size432</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i436</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i436</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i436</name> <operator>&lt;</operator> <name>_size432</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i436</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key429</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key429</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val430</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key429</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val430</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key437</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key437</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val438</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key437</name></expr>]</index></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val438</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">11210</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">11226</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getTabletServers_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>:</operator></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size431</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype434</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype434</name></expr></argument>, <argument><expr><name>_size431</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size431</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i435</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i435</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i435</name> <operator>&lt;</operator> <name>_size431</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i435</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size439</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype442</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype442</name></expr></argument>, <argument><expr><name>_size439</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size439</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i443</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i443</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i443</name> <operator>&lt;</operator> <name>_size439</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i443</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i435</name></expr>]</index></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i443</name></expr>]</index></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">11248</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">11264</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getTabletServers_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter436</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter436</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter436</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter436</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter444</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter444</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter444</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter444</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter436</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter444</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">11286</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">11302</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getTabletServers_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size437</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype440</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype440</name></expr></argument>, <argument><expr><name>_size437</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size437</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i441</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i441</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i441</name> <operator>&lt;</operator> <name>_size437</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i441</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size445</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype448</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype448</name></expr></argument>, <argument><expr><name>_size445</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size445</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i449</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i449</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i449</name> <operator>&lt;</operator> <name>_size445</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i449</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i441</name></expr>]</index></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i449</name></expr>]</index></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">12000</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">12016</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_authenticateUser_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>properties</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size442</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype443</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype444</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype443</name></expr></argument>, <argument><expr><name>_vtype444</name></expr></argument>, <argument><expr><name>_size442</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i446</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i446</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i446</name> <operator>&lt;</operator> <name>_size442</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i446</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size450</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype451</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype452</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype451</name></expr></argument>, <argument><expr><name>_vtype452</name></expr></argument>, <argument><expr><name>_size450</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i454</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i454</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i454</name> <operator>&lt;</operator> <name>_size450</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i454</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key447</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key447</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val448</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>properties</name><index>[<expr><name>_key447</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val448</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key455</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key455</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val456</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>properties</name><index>[<expr><name>_key455</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val456</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">12046</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">12062</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_authenticateUser_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"properties"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>properties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter449</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter449</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>properties</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter449</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>properties</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter449</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter457</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter457</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>properties</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter457</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>properties</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter457</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter449</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter449</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter457</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter457</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">12076</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">12092</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_authenticateUser_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>:</operator>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"properties"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>properties</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter450</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter450</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>properties</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter450</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>properties</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter450</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter458</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter458</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>properties</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter458</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>properties</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter458</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter450</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter450</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter458</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter458</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">12267</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">12283</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_changeUserAuthorizations_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pro</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>authorizations</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size451</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype454</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype454</name></expr></argument>, <argument><expr><name>_size451</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i455</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i455</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i455</name> <operator>&lt;</operator> <name>_size451</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i455</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size459</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype462</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype462</name></expr></argument>, <argument><expr><name>_size459</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i463</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i463</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i463</name> <operator>&lt;</operator> <name>_size459</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i463</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem456</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_elem456</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>authorizations</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem456</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem464</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_elem464</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>authorizations</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem464</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">12311</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">12327</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_changeUserAuthorizations_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pr</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"authorizations"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>authorizations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter457</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter457</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>authorizations</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter457</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>authorizations</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter457</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter465</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter465</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>authorizations</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter465</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>authorizations</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter465</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter457</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter465</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">12340</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">12356</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_changeUserAuthorizations_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>p</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"authorizations"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>authorizations</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter458</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter458</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>authorizations</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter458</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>authorizations</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter458</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter466</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter466</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>authorizations</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter466</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>authorizations</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter466</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter458</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter466</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13202</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">13218</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getUserAuthorizations_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>prot</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size459</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype462</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype462</name></expr></argument>, <argument><expr><name>_size459</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size459</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i463</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i463</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i463</name> <operator>&lt;</operator> <name>_size459</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i463</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size467</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype470</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype470</name></expr></argument>, <argument><expr><name>_size467</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size467</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i471</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i471</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i471</name> <operator>&lt;</operator> <name>_size467</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i471</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i463</name></expr>]</index></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_i471</name></expr>]</index></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13256</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">13272</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getUserAuthorizations_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pro</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter464</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter464</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter464</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter464</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter472</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter472</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter472</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter472</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter464</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter472</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13302</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">13318</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getUserAuthorizations_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pro</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size465</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype468</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype468</name></expr></argument>, <argument><expr><name>_size465</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size465</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i469</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i469</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i469</name> <operator>&lt;</operator> <name>_size465</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i469</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size473</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype476</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype476</name></expr></argument>, <argument><expr><name>_size473</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>_size473</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i477</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i477</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i477</name> <operator>&lt;</operator> <name>_size473</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i477</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i469</name></expr>]</index></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_i477</name></expr>]</index></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13384</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">13400</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_grantSystemPermission_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protoc</name></expr></argument></argument_list></call></expr></expr_stmt>
         <break>break;</break>
       <case>case <expr><literal type="number">3</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast470</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast470</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>SystemPermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast470</name></expr></block_content></block></lambda></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast478</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast478</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>SystemPermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast478</name></expr></block_content></block></lambda></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>perm</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13608</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">13624</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_grantTablePermission_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protoco</name></expr></argument></argument_list></call></expr></expr_stmt>
         <break>break;</break>
       <case>case <expr><literal type="number">4</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast471</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast471</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>TablePermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast471</name></expr></block_content></block></lambda></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast479</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast479</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>TablePermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast479</name></expr></block_content></block></lambda></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>perm</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13852</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">13868</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_hasSystemPermission_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name></expr></argument></argument_list></call></expr></expr_stmt>
         <break>break;</break>
       <case>case <expr><literal type="number">3</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast472</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast472</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>SystemPermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast472</name></expr></block_content></block></lambda></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast480</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast480</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>SystemPermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast480</name></expr></block_content></block></lambda></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>perm</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">14096</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">14112</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_hasTablePermission_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>:</operator></expr></argument></argument_list></call></expr></expr_stmt>
         <break>break;</break>
       <case>case <expr><literal type="number">4</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast473</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast473</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>TablePermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast473</name></expr></block_content></block></lambda></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast481</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast481</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>TablePermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast481</name></expr></block_content></block></lambda></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>perm</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">14412</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">14428</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listLocalUsers_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size474</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype477</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype477</name></expr></argument>, <argument><expr><name>_size474</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i478</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i478</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i478</name> <operator>&lt;</operator> <name>_size474</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i478</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size482</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype485</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype485</name></expr></argument>, <argument><expr><name>_size482</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i486</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i486</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i486</name> <operator>&lt;</operator> <name>_size482</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i486</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem479</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem479</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem479</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem487</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem487</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>_elem487</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">14475</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">14491</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listLocalUsers_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter480</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter480</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter480</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter480</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter488</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter488</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter488</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter488</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter480</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>_iter488</name><operator>)</operator></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">14525</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">14541</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_listLocalUsers_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_SET</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size481</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype484</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype484</name></expr></argument>, <argument><expr><name>_size481</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i485</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i485</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i485</name> <operator>&lt;</operator> <name>_size481</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i485</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size489</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype492</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetBegin</name><argument_list>(<argument><expr><name>_etype492</name></expr></argument>, <argument><expr><name>_size489</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i493</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i493</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i493</name> <operator>&lt;</operator> <name>_size489</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i493</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem486</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem486</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>_elem486</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_elem494</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_elem494</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>_elem494</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readSetEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">14616</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">14632</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_revokeSystemPermission_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>proto</name></expr></argument></argument_list></call></expr></expr_stmt>
         <break>break;</break>
       <case>case <expr><literal type="number">3</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast487</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast487</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>SystemPermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast487</name></expr></block_content></block></lambda></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast495</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast495</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>SystemPermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast495</name></expr></block_content></block></lambda></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>perm</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">14840</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">14856</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_revokeTablePermission_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protoc</name></expr></argument></argument_list></call></expr></expr_stmt>
         <break>break;</break>
       <case>case <expr><literal type="number">4</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast488</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast488</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>TablePermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast488</name></expr></block_content></block></lambda></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast496</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast496</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>TablePermission</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast496</name></expr></block_content></block></lambda></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>perm</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16398</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">16414</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateAndFlush_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TPr</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size489</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype490</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype491</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype490</name></expr></argument>, <argument><expr><name>_vtype491</name></expr></argument>, <argument><expr><name>_size489</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i493</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i493</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i493</name> <operator>&lt;</operator> <name>_size489</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i493</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size497</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype498</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype499</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype498</name></expr></argument>, <argument><expr><name>_vtype499</name></expr></argument>, <argument><expr><name>_size497</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i501</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i501</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i501</name> <operator>&lt;</operator> <name>_size497</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i501</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key494</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_key494</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val495</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>cells</name><index>[<expr><name>_key494</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key502</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_key502</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val503</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>cells</name><index>[<expr><name>_key502</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>_val495</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size496</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype499</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype499</name></expr></argument>, <argument><expr><name>_size496</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>_val495</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size496</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i500</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i500</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i500</name> <operator>&lt;</operator> <name>_size496</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i500</name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>_val503</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size504</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype507</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype507</name></expr></argument>, <argument><expr><name>_size504</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>_val503</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size504</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i508</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i508</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i508</name> <operator>&lt;</operator> <name>_size504</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i508</name></expr></incr>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <name><name>_val495</name><index>[<expr><name>_i500</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <name><name>_val503</name><index>[<expr><name>_i508</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16456</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">16472</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateAndFlush_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TP</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"cells"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter501</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter501</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter501</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter501</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter509</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter509</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter509</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter509</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter501</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter509</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter501</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter502</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter502</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter501</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter502</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter501</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter502</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter509</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter510</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter510</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter509</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter510</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter509</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter510</name></expr></incr>)</control>
         <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter502</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter510</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16494</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">16510</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateAndFlush_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"cells"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>cells</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter503</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter503</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>cells</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter503</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>cells</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter503</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter511</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter511</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>cells</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter511</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>cells</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter511</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter503</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter511</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter503</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter504</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter504</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter503</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter504</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter503</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter504</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter511</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter512</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter512</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter511</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter512</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter511</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter512</name></expr></incr>)</control>
         <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter504</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter512</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16959</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">16975</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_update_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name><operator>*</operator></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size505</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype506</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype507</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype506</name></expr></argument>, <argument><expr><name>_vtype507</name></expr></argument>, <argument><expr><name>_size505</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i509</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i509</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i509</name> <operator>&lt;</operator> <name>_size505</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i509</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size513</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype514</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype515</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype514</name></expr></argument>, <argument><expr><name>_vtype515</name></expr></argument>, <argument><expr><name>_size513</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i517</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i517</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i517</name> <operator>&lt;</operator> <name>_size513</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i517</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key510</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_key510</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val511</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>cells</name><index>[<expr><name>_key510</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key518</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_key518</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>_val519</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>cells</name><index>[<expr><name>_key518</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>_val511</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size512</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype515</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype515</name></expr></argument>, <argument><expr><name>_size512</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>_val511</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i516</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i516</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i516</name> <operator>&lt;</operator> <name>_size512</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i516</name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>_val519</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size520</name></decl>;</decl_stmt>
                <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_etype523</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListBegin</name><argument_list>(<argument><expr><name>_etype523</name></expr></argument>, <argument><expr><name>_size520</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>_val519</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>_size520</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i524</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>_i524</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i524</name> <operator>&lt;</operator> <name>_size520</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i524</name></expr></incr>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <name><name>_val511</name><index>[<expr><name>_i516</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <name><name>_val519</name><index>[<expr><name>_i524</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">17013</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">17029</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_update_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name><operator>*</operator>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"cells"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter517</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter517</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter517</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter517</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter525</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter525</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter525</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>cells</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter525</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter517</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter525</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter517</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter518</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter518</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter517</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter518</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter517</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter518</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter525</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter526</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter526</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter525</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter526</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter525</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter526</name></expr></incr>)</control>
         <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter518</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter526</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">17047</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">17063</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_update_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"cells"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_LIST</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>cells</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter519</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter519</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>cells</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter519</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>cells</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter519</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter527</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter527</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>cells</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter527</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>cells</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter527</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter519</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter527</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter519</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter520</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter520</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter519</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter520</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter519</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter520</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter527</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter528</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>_iter528</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter527</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter528</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter527</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter528</name></expr></incr>)</control>
         <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter520</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>_iter528</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></for>
         <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeListEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">17570</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17586</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateRowConditionally_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pro</name>
     <block>{
       <case>case <expr><literal type="number">0</literal></expr>:</case></block></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast521</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast521</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name> <operator>=</operator> <operator>(</operator><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast521</name></expr></block_content></block></lambda></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast529</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast529</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name> <operator>=</operator> <operator>(</operator><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast529</name></expr></block_content></block></lambda></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>success</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">17664</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17680</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateRowConditionally_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pr</name>
     <block>{
       <case>case <expr><literal type="number">0</literal></expr>:</case></block></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast522</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast522</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast522</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast530</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast530</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast530</name></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>success</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">17994</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">18010</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateRowsConditionally_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>prot</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>updates</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size523</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype524</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype525</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype524</name></expr></argument>, <argument><expr><name>_vtype525</name></expr></argument>, <argument><expr><name>_size523</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i527</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i527</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i527</name> <operator>&lt;</operator> <name>_size523</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i527</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size531</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype532</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype533</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype532</name></expr></argument>, <argument><expr><name>_vtype533</name></expr></argument>, <argument><expr><name>_size531</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i535</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i535</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i535</name> <operator>&lt;</operator> <name>_size531</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i535</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key528</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_key528</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>ConditionalUpdates</name><operator>&amp;</operator> <name>_val529</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>updates</name><index>[<expr><name>_key528</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <call><name><name>_val529</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key536</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_key536</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>ConditionalUpdates</name><operator>&amp;</operator> <name>_val537</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>updates</name><index>[<expr><name>_key536</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <call><name><name>_val537</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18036</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">18052</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateRowsConditionally_args</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pro</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"updates"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>updates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter530</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter530</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>updates</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter530</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>updates</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter530</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter538</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter538</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>updates</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter538</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>updates</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter538</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter530</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter530</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter538</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter538</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18062</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">18078</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateRowsConditionally_pargs</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pr</name>
   <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"updates"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
   <block>{<block_content>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRUCT</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>updates</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter531</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>_iter531</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>updates</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter531</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>updates</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter531</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter539</name></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>_iter539</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>updates</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>_iter539</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>updates</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>_iter539</name></expr></incr>)</control>
     <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter531</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter531</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter539</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>_iter539</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>second</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block></for>
     <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18101</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">18117</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateRowsConditionally_result</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>pr</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size532</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype533</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype534</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype533</name></expr></argument>, <argument><expr><name>_vtype534</name></expr></argument>, <argument><expr><name>_size532</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i536</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i536</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i536</name> <operator>&lt;</operator> <name>_size532</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i536</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size540</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype541</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype542</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype541</name></expr></argument>, <argument><expr><name>_vtype542</name></expr></argument>, <argument><expr><name>_size540</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i544</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i544</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i544</name> <operator>&lt;</operator> <name>_size540</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i544</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key537</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_key537</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>&amp;</operator> <name>_val538</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key537</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast539</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast539</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val538</name> <operator>=</operator> <operator>(</operator><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast539</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key545</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_key545</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>&amp;</operator> <name>_val546</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>success</name><index>[<expr><name>_key545</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast547</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast547</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val546</name> <operator>=</operator> <operator>(</operator><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast547</name></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18168</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">18184</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateRowsConditionally_result</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>p</name>
     <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
     <block>{<block_content>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>ConditionalStatus</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter540</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>_iter540</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter540</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter540</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>ConditionalStatus</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter548</name></expr>;</expr_stmt></block_content></block></for>
      <for>for <control>(<init><expr><name>_iter548</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter548</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>success</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter548</name></expr></incr>)</control>
       <block>{<block_content>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter540</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter540</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeBinary</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter548</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeI32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter548</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
       </block_content>}</block></for>
       <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18219</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">18235</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_updateRowsConditionally_presult</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>p</name></expr></argument></argument_list></call></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size541</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype542</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype543</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype542</name></expr></argument>, <argument><expr><name>_vtype543</name></expr></argument>, <argument><expr><name>_size541</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i545</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i545</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i545</name> <operator>&lt;</operator> <name>_size541</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i545</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size549</name></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype550</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype551</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype550</name></expr></argument>, <argument><expr><name>_vtype551</name></expr></argument>, <argument><expr><name>_size549</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i553</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i553</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i553</name> <operator>&lt;</operator> <name>_size549</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i553</name></expr></incr>)</control>
             <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key546</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_key546</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>&amp;</operator> <name>_val547</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key546</name></expr>]</index></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast548</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast548</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val547</name> <operator>=</operator> <operator>(</operator><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast548</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key554</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readBinary</name><argument_list>(<argument><expr><name>_key554</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>&amp;</operator> <name>_val555</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>success</name></expr></block_content></block></lambda><operator>)</operator><operator>)</operator><index>[<expr><name>_key554</name></expr>]</index></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast556</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast556</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val555</name> <operator>=</operator> <operator>(</operator><name>ConditionalStatus</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast556</name></expr>;</expr_stmt>
             </block_content>}</block></for>
             <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18599</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">18615</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>uint32_t</name> <name>AccumuloProxy_getFollowing_args</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProt</name></expr></argument></argument_list></call></expr></expr_stmt>
         <break>break;</break>
       <case>case <expr><literal type="number">2</literal></expr>:</case>
         <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_I32</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast549</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast549</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>part</name> <operator>=</operator> <operator>(</operator><name>PartialKey</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast549</name></expr></block_content></block></lambda></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>ecast557</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readI32</name><argument_list>(<argument><expr><name>ecast557</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>part</name> <operator>=</operator> <operator>(</operator><name>PartialKey</name><operator>::</operator><name>type</name><operator>)</operator><name>ecast557</name></expr></block_content></block></lambda></expr>;</expr_stmt>
           <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>part</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
         </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">19201</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">19217</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <name>void</name> <name>AccumuloProxyClient</name><operator>::</operator><call><name>recv_cloneTable</name><argument_list>()</argument_list></call></expr></expr_stmt>
   <return>return;</return>
 </block_content>}</block></else></if_stmt>
 
<expr_stmt><expr><name>void</name> <name>AccumuloProxyClient</name><operator>::</operator><call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>)</argument_list></call>
<name>void</name> <name>AccumuloProxyClient</name><operator>::</operator><call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompactionStrategyConfig</name><operator>&amp;</operator> <name>compactionStrategy</name></expr></argument>)</argument_list></call>
 <block>{
  <expr><call><name>send_compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;
  <call><name>send_compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>recv_compactTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></if></if_stmt>
 
<expr_stmt><expr><name>void</name> <name>AccumuloProxyClient</name><operator>::</operator><call><name>send_compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>)</argument_list></call>
<name>void</name> <name>AccumuloProxyClient</name><operator>::</operator><call><name>send_compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompactionStrategyConfig</name><operator>&amp;</operator> <name>compactionStrategy</name></expr></argument>)</argument_list></call>
 <block>{
   <expr><name>int32_t</name> <name>cseqid</name> <operator>=</operator> <literal type="number">0</literal></expr>;
   <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot_</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMessageBegin</name><argument_list>(<argument><expr><literal type="string">"compactTable"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_CALL</name></expr></argument>, <argument><expr><name>cseqid</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></block></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">19220</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19236</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>void</name> <name>AccumuloProxyClient</name><operator>::</operator><call><name>send_compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>:</operator>
   <name><name>args</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <operator>&amp;</operator><name>iterators</name></expr></argument>;</argument_list></call></expr></expr_stmt>
   <expr_stmt><expr><name><name>args</name><operator>.</operator><name>flush</name></name> <operator>=</operator> <operator>&amp;</operator><name>flush</name></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>args</name><operator>.</operator><name>wait</name></name> <operator>=</operator> <operator>&amp;</operator><name>wait</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <operator>&amp;</operator><name>compactionStrategy</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
   <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>oprot_</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMessageEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">24136</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">24153</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>void</name> <name>AccumuloProxyProcessor</name><operator>::</operator><call><name>process_compactTable</name><argument_list>(<argument><expr><name>int32_t</name> <name>seqid</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrif</name>
 
   <name>AccumuloProxy_compactTable_result</name> <name>result</name></expr></argument>;</argument_list></call></expr></expr_stmt>
   <try>try <block>{<block_content>
    <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>iface_</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>compactTable</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>login</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>iterators</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>iface_</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>compactTable</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>login</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>iterators</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>wait</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>compactionStrategy</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
   </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl/></parameter></parameter_list>AccumuloSecurityException <expr_stmt><expr><operator>&amp;</operator><name>ouch1</name></expr></expr_stmt></catch></try></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></block_content></block></for></block_content></block></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></for></block_content></block></block_content></block></for></block_content></block></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></block_content></block></for></block_content></block></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></for></block_content></block></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></for></block_content></block></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>)</argument_list></call> <block>{
     <expr><name><name>result</name><operator>.</operator><name>ouch1</name></name> <operator>=</operator> <name>ouch1</name></expr>;
     <expr><name><name>result</name><operator>.</operator><name>__isset</name><operator>.</operator><name>ouch1</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>h</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>h</name></name>
<name>index</name> <name>e9b77694c</name><operator>..</operator><literal type="number">269884f98</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>h</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>h</name></name>
@@ <operator>-</operator><literal type="number">38</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">38</literal></expr>,<expr><literal type="number">7</literal> @@ <name>class</name> <name>AccumuloProxyIf</name> <block>{
   <expr><name>virtual</name> <name>void</name> <call><name>checkIteratorConflicts</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>IteratorSetting</name><operator>&amp;</operator> <name>setting</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name><operator>::</operator><name>type</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>scopes</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
   <expr><name>virtual</name> <name>void</name> <call><name>clearLocatorCache</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
   <expr><name>virtual</name> <name>void</name> <call><name>cloneTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>newTableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>propertiesToSet</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>propertiesToExclude</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>virtual</name> <name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>virtual</name> <name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompactionStrategyConfig</name><operator>&amp;</operator> <name>compactionStrategy</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
   <expr><name>virtual</name> <name>void</name> <call><name>cancelCompaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
   <expr><name>virtual</name> <name>void</name> <call><name>createTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>versioningIter</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TimeType</name><operator>::</operator><name>type</name> <name>type</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
   <expr><name>virtual</name> <name>void</name> <call><name>deleteTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
@@ <expr><operator>-</operator><literal type="number">159</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">159</literal></expr>,<expr><literal type="number">7</literal> @@ <name>class</name> <name>AccumuloProxyNull</name> <operator>:</operator> <name>virtual</name> <specifier>public</specifier> <name>AccumuloProxyIf</name> <block>{
   <expr><name>void</name> <call><name>cloneTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* login */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* tableName */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* newTableName */</comment>, <argument><expr><specifier>const</specifier> <name>bool</name></expr></argument> <comment type="block">/* flush */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator></expr></argument> <comment type="block">/* propertiesToSet */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator></expr></argument> <comment type="block">/* propertiesToExclude */</comment>)</argument_list></call> <block>{
     <return>return;</return></block></expr>
   }</block>
  <name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* login */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* tableName */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* startRow */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* endRow */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator></expr></argument> <comment type="block">/* iterators */</comment>, <argument><expr><specifier>const</specifier> <name>bool</name></expr></argument> <comment type="block">/* flush */</comment>, <argument><expr><specifier>const</specifier> <name>bool</name></expr></argument> <comment type="block">/* wait */</comment>)</argument_list></call> <block>{
  <expr><name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* login */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* tableName */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* startRow */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* endRow */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator></expr></argument> <comment type="block">/* iterators */</comment>, <argument><expr><specifier>const</specifier> <name>bool</name></expr></argument> <comment type="block">/* flush */</comment>, <argument><expr><specifier>const</specifier> <name>bool</name></expr></argument> <comment type="block">/* wait */</comment>, <argument><expr><specifier>const</specifier> <name>CompactionStrategyConfig</name><operator>&amp;</operator></expr></argument> <comment type="block">/* compactionStrategy */</comment>)</argument_list></call> <block>{
     <return>return;</return></block></expr>
   }</block>
   <name>void</name> <call><name>cancelCompaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* login */</comment>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator></expr></argument> <comment type="block">/* tableName */</comment>)</argument_list></call> <block>{
@@ <expr><operator>-</operator><literal type="number">1419</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1419</literal></expr>,<expr><literal type="number">7</literal> @@ <name>class</name> <name>AccumuloProxy_cloneTable_presult</name> <block>{
 }</block></expr>;
 
 <expr><name>typedef</name> <name>struct</name> <name>_AccumuloProxy_compactTable_args__isset</name> <block>{
  <expr><call><name>_AccumuloProxy_compactTable_args__isset</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>login</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tableName</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>startRow</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>endRow</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>iterators</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>flush</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>wait</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <block>{}</block>
  <call><name>_AccumuloProxy_compactTable_args__isset</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>login</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tableName</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>startRow</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>endRow</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>iterators</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>flush</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>wait</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>compactionStrategy</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <block>{}</block>
   <name>bool</name> <name>login</name></expr>;
   <expr><name>bool</name> <name>tableName</name></expr>;
   <expr><name>bool</name> <name>startRow</name></expr>;
@@ <expr><operator>-</operator><literal type="number">1427</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1427</literal></expr>,<expr><literal type="number">7</literal> @@ <name>typedef</name> <name>struct</name> <name>_AccumuloProxy_compactTable_args__isset</name> <block>{
   <expr><name>bool</name> <name>iterators</name></expr>;
   <expr><name>bool</name> <name>flush</name></expr>;
   <expr><name>bool</name> <name>wait</name></expr>;
  <expr><name>bool</name> <name>compactionStrategy</name></expr>;
 }</block> <name>_AccumuloProxy_compactTable_args__isset</name></expr>;
 
 <expr><name>class</name> <name>AccumuloProxy_compactTable_args</name> <block>{
@@ <expr><operator>-</operator><literal type="number">1444</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1445</literal></expr>,<expr><literal type="number">7</literal> @@ <name>class</name> <name>AccumuloProxy_compactTable_args</name> <block>{
   <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name>  <name>iterators</name></expr>;
   <expr><name>bool</name> <name>flush</name></expr>;
   <expr><name>bool</name> <name>wait</name></expr>;
  <expr><name>CompactionStrategyConfig</name> <name>compactionStrategy</name></expr>;
 
   <expr><name>_AccumuloProxy_compactTable_args__isset</name> <name>__isset</name></expr>;
 
@@ <expr><operator>-</operator><literal type="number">1475</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1477</literal></expr>,<expr><literal type="number">10</literal> @@ <name>class</name> <name>AccumuloProxy_compactTable_args</name> <block>{
     <expr><name>wait</name> <operator>=</operator> <name>val</name></expr>;
   }</block>
 
  <name>void</name> <call><name>__set_compactionStrategy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompactionStrategyConfig</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>compactionStrategy</name> <operator>=</operator> <name>val</name></expr>;
  }</block>

   <name>bool</name> <name>operator</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>AccumuloProxy_compactTable_args</name> <operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier>
   <block>{
     <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>login</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>login</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1491</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1497</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>AccumuloProxy_compactTable_args</name> <block>{
       <return>return <expr><literal type="boolean">false</literal></expr>;</return></block></expr></expr_stmt></block_content></block></if></if_stmt>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wait</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>wait</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
       <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt></block></expr>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>compactionStrategy</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>compactionStrategy</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt></block></expr>
     <return>return <expr><literal type="boolean">true</literal></expr>;</return></block></expr>
   }</block>
   <name>bool</name> <name>operator</name> <operator>!=</operator> <operator>(</operator><specifier>const</specifier> <name>AccumuloProxy_compactTable_args</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
@@ <expr><operator>-</operator><literal type="number">1518</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1526</literal></expr>,<expr><literal type="number">7</literal> @@ <name>class</name> <name>AccumuloProxy_compactTable_pargs</name> <block>{
   <expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>*</operator> <name>iterators</name></expr>;
   <expr><specifier>const</specifier> <name>bool</name><operator>*</operator> <name>flush</name></expr>;
   <expr><specifier>const</specifier> <name>bool</name><operator>*</operator> <name>wait</name></expr>;
  <expr><specifier>const</specifier> <name>CompactionStrategyConfig</name><operator>*</operator> <name>compactionStrategy</name></expr>;
 
   <expr><name>uint32_t</name> <call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name><operator>*</operator> <name>oprot</name></expr></argument>)</argument_list></call> <specifier>const</specifier></expr>;
 
@@ <expr><operator>-</operator><literal type="number">11342</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">11351</literal></expr>,<expr><literal type="number">8</literal> @@ <name>class</name> <name>AccumuloProxyClient</name> <operator>:</operator> <name>virtual</name> <specifier>public</specifier> <name>AccumuloProxyIf</name> <block>{
   <expr><name>void</name> <call><name>cloneTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>newTableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>propertiesToSet</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>propertiesToExclude</name></expr></argument>)</argument_list></call></expr>;
   <expr><name>void</name> <call><name>send_cloneTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>newTableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>propertiesToSet</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>propertiesToExclude</name></expr></argument>)</argument_list></call></expr>;
   <expr><name>void</name> <call><name>recv_cloneTable</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>send_compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompactionStrategyConfig</name><operator>&amp;</operator> <name>compactionStrategy</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>send_compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompactionStrategyConfig</name><operator>&amp;</operator> <name>compactionStrategy</name></expr></argument>)</argument_list></call></expr>;
   <expr><name>void</name> <call><name>recv_compactTable</name><argument_list>()</argument_list></call></expr>;
   <expr><name>void</name> <call><name>cancelCompaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>)</argument_list></call></expr>;
   <expr><name>void</name> <call><name>send_cancelCompaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">11815</literal></expr>,<expr><literal type="number">13</literal> <operator>+</operator><literal type="number">11824</literal></expr>,<expr><literal type="number">13</literal> @@ <name>class</name> <name>AccumuloProxyMultiface</name> <operator>:</operator> <name>virtual</name> <specifier>public</specifier> <name>AccumuloProxyIf</name> <block>{
     <expr><lambda><parameter_list type="pseudo"><parameter><decl><name><name>ifaces_</name><index>[<expr><name>i</name></expr>]</index></name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>cloneTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>newTableName</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>propertiesToSet</name></expr></argument>, <argument><expr><name>propertiesToExclude</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;
   }</block>
 
  <name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>)</argument_list></call> <block>{
  <expr><name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompactionStrategyConfig</name><operator>&amp;</operator> <name>compactionStrategy</name></expr></argument>)</argument_list></call> <block>{
     <expr><name>size_t</name> <name>sz</name> <operator>=</operator> <call><name><name>ifaces_</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name>size_t</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;
     <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>sz</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name><name>ifaces_</name><index>[<expr><name>i</name></expr>]</index></name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name><name>ifaces_</name><index>[<expr><name>i</name></expr>]</index></name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></for>}</block>
    <lambda><parameter_list type="pseudo"><parameter><decl><name><name>ifaces_</name><index>[<expr><name>i</name></expr>]</index></name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;
    <expr><lambda><parameter_list type="pseudo"><parameter><decl><name><name>ifaces_</name><index>[<expr><name>i</name></expr>]</index></name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;
   }</block>
 
   <name>void</name> <call><name>cancelCompaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>)</argument_list></call> <block>{
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy_server</name><operator>.</operator><name>skeleton</name><operator>.</operator><name>cpp</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy_server</name><operator>.</operator><name>skeleton</name><operator>.</operator><name>cpp</name></name>
<name>index</name> <literal type="number">2654c3779</literal><operator>..</operator><literal type="number">302aec252</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy_server</name><operator>.</operator><name>skeleton</name><operator>.</operator><name>cpp</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>AccumuloProxy_server</name><operator>.</operator><name>skeleton</name><operator>.</operator><name>cpp</name></name>
@@ <operator>-</operator><literal type="number">73</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">73</literal></expr>,<expr><literal type="number">7</literal> @@ <name>class</name> <name>AccumuloProxyHandler</name> <operator>:</operator> <name>virtual</name> <specifier>public</specifier> <name>AccumuloProxyIf</name> <block>{
     <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"cloneTable\n"</literal></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>)</argument_list></call> <block>{
  <expr><name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>login</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tableName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>startRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>endRow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>iterators</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>flush</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>bool</name> <name>wait</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CompactionStrategyConfig</name><operator>&amp;</operator> <name>compactionStrategy</name></expr></argument>)</argument_list></call> <block>{
     <comment type="line">// Your implementation goes here</comment>
     <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"compactTable\n"</literal></expr></argument>)</argument_list></call></expr>;
   }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>cpp</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>cpp</name></name>
<name>index</name> <name>edb0978af</name><operator>..</operator><name>a055b485d</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>cpp</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>cpp</name></name>
@@ <operator>-</operator><literal type="number">2611</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2611</literal></expr>,<expr><literal type="number">105</literal> @@ <name>void</name> <call><name>swap</name><argument_list>(<argument><expr><name>WriterOptions</name> <operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>WriterOptions</name> <operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <block>{
   <expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>__isset</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>__isset</name></name></expr></argument>)</argument_list></call></expr>;
 }</block>
 
<specifier>const</specifier> <name>char</name><operator>*</operator> <name>CompactionStrategyConfig</name><operator>::</operator><name>ascii_fingerprint</name> <operator>=</operator> <literal type="string">"F7C641917C22B35AE581CCD54910B00D"</literal></expr>;
<expr><specifier>const</specifier> <name>uint8_t</name> <name>CompactionStrategyConfig</name><operator>::</operator><name><name>binary_fingerprint</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0xF7</literal></expr>,<expr><literal type="number">0xC6</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0x7C</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0xB3</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0xE5</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0xD5</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0xB0</literal></expr>,<expr><literal type="number">0x0D</literal></expr>}</block></expr>;

<expr><name>uint32_t</name> <name>CompactionStrategyConfig</name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name><operator>*</operator> <name>iprot</name></expr></argument>)</argument_list></call> <block>{

  <expr><name>uint32_t</name> <name>xfer</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>std</name><operator>::</operator><name>string</name> <name>fname</name></expr>;
  <expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>ftype</name></expr>;
  <expr><name>int16_t</name> <name>fid</name></expr>;

  <expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readStructBegin</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;

  <expr><name>using</name> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocolException</name></expr>;


  <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readFieldBegin</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STOP</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    <expr_stmt/></block_content></block></if></if_stmt></block_content></block></while>}</block></expr>
    <switch>switch <condition>(<expr><name>fid</name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>className</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
          <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>className</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt></block_content></block></switch>}</block></expr> <if_stmt><else>else <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></else></if_stmt>}</block></expr>
        <break>break;</break></block></expr>
      <case>case <expr><literal type="number">2</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>ftype</name> <operator>==</operator> <operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr>)</condition> <block>{<block_content>
          <block>{<block_content>
            <expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>options</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_size125</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_ktype126</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TType</name> <name>_vtype127</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapBegin</name><argument_list>(<argument><expr><name>_ktype126</name></expr></argument>, <argument><expr><name>_vtype127</name></expr></argument>, <argument><expr><name>_size125</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>_i129</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>_i129</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>_i129</name> <operator>&lt;</operator> <name>_size125</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i129</name></expr></incr>)</control>
            <block>{<block_content>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>_key130</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_key130</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>_val131</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>options</name><index>[<expr><name>_key130</name></expr>]</index></name></expr></block_content></block></lambda></expr>;</expr_stmt>
              <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readString</name><argument_list>(<argument><expr><name>_val131</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
            <expr_stmt/></block_content></block></for></block_content></block></block_content></block></if></if_stmt>}</block>
            <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;
          }</block>
          <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name><name>__isset</name><operator>.</operator><name>options</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;
        }</block></expr> <if_stmt><else>else <block>{<block_content>
          <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></else></if_stmt>}</block></expr>
        <break>break;</break></block></expr></expr_stmt>
      <default>default:</default>
        <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>skip</name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <break>break;</break>
    }</block></class>
    <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readFieldEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
  }

  xfer <expr_stmt><expr><operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>iprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>readStructEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>

  <return>return <expr><name>xfer</name></expr>;</return>
}

uint32_t <expr_stmt><expr><name>CompactionStrategyConfig</name><operator>::</operator><call><name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name><operator>*</operator> <name>oprot</name></expr></argument>)</argument_list></call> <specifier>const</specifier> <block>{
  <expr><name>uint32_t</name> <name>xfer</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeStructBegin</name><argument_list>(<argument><expr><literal type="string">"CompactionStrategyConfig"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;

  <expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;
  <expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>className</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;
  <expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;

  <expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldBegin</name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_MAP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;
  <expr><block>{
    <expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapBegin</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>T_STRING</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><name>uint32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>options</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;
    <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>::</operator><name>const_iterator</name> <name>_iter132</name></expr>;
    <for>for <control>(<init><expr><name>_iter132</name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>options</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</init> <condition><expr><name>_iter132</name> <operator>!=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>this</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name><name>options</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</condition> <incr><expr><operator>++</operator><name>_iter132</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter132</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>first</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
      <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeString</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>_iter132</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><name>second</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block>
    <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeMapEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;
  }</block>
  <name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>

  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeFieldStop</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
  <expr_stmt><expr><name>xfer</name> <operator>+=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>oprot</name></decl></parameter></parameter_list>-&gt;<block type="pseudo"><block_content><expr><call><name>writeStructEnd</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
  <return>return <expr><name>xfer</name></expr>;</return>
}

void <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>CompactionStrategyConfig</name> <operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>CompactionStrategyConfig</name> <operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <block>{
  <expr><name>using</name> <operator>::</operator><name>std</name><operator>::</operator><name>swap</name></expr>;
  <expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>className</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>options</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>__isset</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>__isset</name></name></expr></argument>)</argument_list></call></expr>;
}</block>

 <specifier>const</specifier> <name>char</name><operator>*</operator> <name>UnknownScanner</name><operator>::</operator><name>ascii_fingerprint</name> <operator>=</operator> <literal type="string">"EFB929595D312AC8F305D5A794CFEDA1"</literal></expr>;</expr_stmt>
 <expr_stmt><expr><specifier>const</specifier> <name>uint8_t</name> <name>UnknownScanner</name><operator>::</operator><name><name>binary_fingerprint</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0xEF</literal></expr>,<expr><literal type="number">0xB9</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x2A</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0xD5</literal></expr>,<expr><literal type="number">0xA7</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0xED</literal></expr>,<expr><literal type="number">0xA1</literal></expr>}</block></expr>;</expr_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>h</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>h</name></name>
<name>index</name> <literal type="number">625586c66</literal><operator>..</operator><literal type="number">569de8843</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>h</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>cpp</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>h</name></name>
@@ <operator>-</operator><literal type="number">1555</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1555</literal></expr><operator>,</operator><expr><literal type="number">57</literal> @@ <name>class</name> <name>WriterOptions</name> <block>{
 
 <expr><name>void</name> <call><name>swap</name><argument_list>(<argument><expr><name>WriterOptions</name> <operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>WriterOptions</name> <operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;
 
<expr><name>typedef</name> <name>struct</name> <name>_CompactionStrategyConfig__isset</name> <block>{
  <expr><call><name>_CompactionStrategyConfig__isset</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>className</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>options</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <block>{}</block>
  <name>bool</name> <name>className</name></expr>;
  <expr><name>bool</name> <name>options</name></expr>;
}</block> <name>_CompactionStrategyConfig__isset</name></expr>;

<expr><name>class</name> <name>CompactionStrategyConfig</name> <block>{
 <expr><specifier>public</specifier><operator>:</operator>

  <specifier>static</specifier> <specifier>const</specifier> <name>char</name><operator>*</operator> <name>ascii_fingerprint</name></expr>; <comment type="line">// = "F7C641917C22B35AE581CCD54910B00D";</comment>
  <expr><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <name><name>binary_fingerprint</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>; <comment type="line">// = {0xF7,0xC6,0x41,0x91,0x7C,0x22,0xB3,0x5A,0xE5,0x81,0xCC,0xD5,0x49,0x10,0xB0,0x0D};</comment>

  <expr><call><name>CompactionStrategyConfig</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>className</name><argument_list>()</argument_list></call> <block>{
  }</block>

  <name>virtual</name> <operator>~</operator><call><name>CompactionStrategyConfig</name><argument_list>()</argument_list></call> <throw>throw<argument_list>()</argument_list></throw></expr> <block>{}</block></block>

  <name>std</name><operator>::</operator><name>string</name> <name>className</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name>  <name>options</name></expr>;

  <expr><name>_CompactionStrategyConfig__isset</name> <name>__isset</name></expr>;

  <expr><name>void</name> <call><name>__set_className</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>className</name> <operator>=</operator> <name>val</name></expr>;
  }</block>

  <name>void</name> <call><name>__set_options</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>std</name><operator>::</operator><name>string</name></argument>, <argument><name>std</name><operator>::</operator><name>string</name></argument>&gt;</argument_list></name> <operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call> <block>{
    <expr><name>options</name> <operator>=</operator> <name>val</name></expr>;
  }</block>

  <name>bool</name> <name>operator</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>CompactionStrategyConfig</name> <operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier>
  <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>className</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>className</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt></block></expr>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>options</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }
  bool <expr_stmt><expr><name>operator</name> <operator>!=</operator> <operator>(</operator><specifier>const</specifier> <name>CompactionStrategyConfig</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
    <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return>
  }</block></expr></expr_stmt>

  <expr_stmt><expr><name>bool</name> <name>operator</name> <operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>CompactionStrategyConfig</name> <operator>&amp;</operator> <operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>read</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name><operator>*</operator> <name>iprot</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>write</name><argument_list>(<argument><expr><operator>::</operator><name>apache</name><operator>::</operator><name>thrift</name><operator>::</operator><name>protocol</name><operator>::</operator><name>TProtocol</name><operator>*</operator> <name>oprot</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

};

<decl_stmt><decl><type><name>void</name></type> <name>swap</name><argument_list>(<argument><expr><name>CompactionStrategyConfig</name> <operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>CompactionStrategyConfig</name> <operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <decl_stmt><decl><type><name>typedef</name> <name>struct</name></type> <name>_UnknownScanner__isset</name> <block>{<block_content>
   <expr_stmt><expr><call><name>_UnknownScanner__isset</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>msg</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <block>{}</block>
   <name>bool</name> <name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name><name>ProxyServer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name><name>ProxyServer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bd0782d0b</name><operator>..</operator><name>b51d43db9</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name><name>ProxyServer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name><name>ProxyServer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ZooKeeperInstance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>ActiveCompaction</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>ActiveScan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>TimeType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TableOperationExceptionType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftTableOperationException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>AccumuloProxy</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>BatchScanOptions</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ColumnUpdate</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>CompactionReason</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>CompactionStrategyConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>CompactionType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>Condition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ConditionalStatus</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">331</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">333</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>ProxyServer</name> implements <name><name>AccumuloProxy</name><operator>.</operator><name>Iface</name></name> <block>{
   
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><name>ByteBuffer</name> <name>login</name></expr></argument>, <argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>startRow</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>endRow</name></expr></argument>,
      <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IteratorSetting</name></name></argument>&gt;</argument_list></name> <name>iterators</name></expr></argument>, <argument><expr><name>boolean</name> <name>flush</name></expr></argument>, <argument><expr><name>boolean</name> <name>wait</name></expr></argument>)</argument_list></call>
      <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>IteratorSetting</name></name></argument>&gt;</argument_list></name> <name>iterators</name></expr>, <expr><name>boolean</name> <name>flush</name></expr>, <expr><name>boolean</name> <name>wait</name></expr>, <expr><name>CompactionStrategyConfig</name> <name>compactionStrategy</name></expr>)
       <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>AccumuloSecurityException</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TableNotFoundException</name></name></expr></argument>,
       <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>AccumuloException</name></name></expr></argument>, <argument><expr><name>TException</name> <block>{</block></expr></argument></throws></block></expr></expr_stmt>
     <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>getConnector</name><argument_list>(<argument><expr><name>login</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>tableOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>toText</name></name><argument_list>(<argument><expr><name>startRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>toText</name></name><argument_list>(<argument><expr><name>endRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getIteratorSettings</name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>CompactionConfig</name></type> <name>compactionConfig</name> <init>= <expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setStartRow</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>toText</name></name><argument_list>(<argument><expr><name>startRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setEndRow</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>toText</name></name><argument_list>(<argument><expr><name>endRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>setIterators</name><argument_list>(<argument><expr><call><name>getIteratorSettings</name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setFlush</name><argument_list>(<argument><expr><name>flush</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>compactionStrategy</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionStrategyConfig</name></name></type> <name>ccc</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionStrategyConfig</name></name><argument_list>(
            <argument><expr><call><name><name>compactionStrategy</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>compactionStrategy</name><operator>.</operator><name>options</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>ccc</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><name><name>compactionStrategy</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>compactionConfig</name><operator>.</operator><name>setCompactionStrategy</name></name><argument_list>(<argument><expr><name>ccc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>getConnector</name><argument_list>(<argument><expr><name>login</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>tableOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>compactionConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name>handleExceptionTNF</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></catch></try>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3b23175f9</literal><operator>..</operator><literal type="number">65863b9d6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
     <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>cloneTable</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>newTableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertiesToSet</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertiesToExclude</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>TableExistsException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>
 
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>compactTable</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>wait</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>compactTable</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>compactionStrategy</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>
 
     <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>cancelCompaction</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">224</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">224</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
     <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>cloneTable</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>newTableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertiesToSet</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertiesToExclude</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>
 
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>compactTable</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>compactTable</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>compactionStrategy</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>
 
     <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>cancelCompaction</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">603</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">603</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <return>return;</return>
     </block_content>}</block></decl></decl_stmt>
 
    <decl_stmt><decl><type><specifier>public</specifier> <name>void</name></type> <name>compactTable</name><argument_list>(<argument><expr><name>ByteBuffer</name> <name>login</name></expr></argument>, <argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>startRow</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>endRow</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr></argument>, <argument><expr><name>boolean</name> <name>flush</name></expr></argument>, <argument><expr><name>boolean</name> <name>wait</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name>void</name> <call><name>compactTable</name><argument_list>(<argument><expr><name>ByteBuffer</name> <name>login</name></expr></argument>, <argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>startRow</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>endRow</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr></argument>, <argument><expr><name>boolean</name> <name>flush</name></expr></argument>, <argument><expr><name>boolean</name> <name>wait</name></expr></argument>, <argument><expr><name>CompactionStrategyConfig</name> <name>compactionStrategy</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument>, <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
      <expr><call><name>send_compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>send_compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>recv_compactTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }
 
    public <decl_stmt><decl><type><name>void</name></type> <name>send_compactTable</name><argument_list>(<argument><expr><name>ByteBuffer</name> <name>login</name></expr></argument>, <argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>startRow</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>endRow</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr></argument>, <argument><expr><name>boolean</name> <name>flush</name></expr></argument>, <argument><expr><name>boolean</name> <name>wait</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
    <specifier>public</specifier> <name>void</name> <call><name>send_compactTable</name><argument_list>(<argument><expr><name>ByteBuffer</name> <name>login</name></expr></argument>, <argument><expr><name>String</name> <name>tableName</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>startRow</name></expr></argument>, <argument><expr><name>ByteBuffer</name> <name>endRow</name></expr></argument>, <argument><expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr></argument>, <argument><expr><name>boolean</name> <name>flush</name></expr></argument>, <argument><expr><name>boolean</name> <name>wait</name></expr></argument>, <argument><expr><name>CompactionStrategyConfig</name> <name>compactionStrategy</name></expr></argument>)</argument_list></call></expr></argument></throws> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>
     <block>{
       <expr><name>compactTable_args</name> <name>args</name> <operator>=</operator> <operator>new</operator> <call><name>compactTable_args</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setLogin</name></name><argument_list>(<argument><expr><name>login</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">619</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">619</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setIterators</name></name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setFlush</name></name><argument_list>(<argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setWait</name></name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setCompactionStrategy</name></name><argument_list>(<argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>sendBase</name><argument_list>(<argument><expr><literal type="string">"compactTable"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">3008</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">3009</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       }
     }
 
    <function><type><specifier>public</specifier> <name>void</name></type> <name>compactTable</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>compactTable</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>compactionStrategy</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
       <expr_stmt><expr><call><name>checkReady</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>compactTable_call</name></type> <name>method_call</name> <init>= <expr><operator>new</operator> <call><name>compactTable_call</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>___protocolFactory</name></expr></argument>, <argument><expr><name>___transport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>compactTable_call</name></type> <name>method_call</name> <init>= <expr><operator>new</operator> <call><name>compactTable_call</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>___protocolFactory</name></expr></argument>, <argument><expr><name>___transport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>___currentMethod</name></name> <operator>=</operator> <name>method_call</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>___manager</name><operator>.</operator><name>call</name></name><argument_list>(<argument><expr><name>method_call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3023</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3024</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>flush</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>wait</name></decl>;</decl_stmt>
      <constructor><specifier>public</specifier> <name>compactTable_call</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncClient</name></name></type> <name>client</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolFactory</name></name></type> <name>protocolFactory</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TNonblockingTransport</name></name></type> <name>transport</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><specifier>private</specifier> <name>CompactionStrategyConfig</name></type> <name>compactionStrategy</name></decl>;</decl_stmt>
      <constructor><specifier>public</specifier> <name>compactTable_call</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>compactionStrategy</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncClient</name></name></type> <name>client</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolFactory</name></name></type> <name>protocolFactory</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TNonblockingTransport</name></name></type> <name>transport</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>protocolFactory</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>login</name></name> <operator>=</operator> <name>login</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableName</name></name> <operator>=</operator> <name>tableName</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3032</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">3034</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <name>iterators</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>flush</name></name> <operator>=</operator> <name>flush</name></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wait</name></name> <operator>=</operator> <name>wait</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <name>compactionStrategy</name></expr>;</expr_stmt>
       </block_content>}</block></constructor>
 
       <function><type><specifier>public</specifier> <name>void</name></type> <name>write_args</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">3044</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">3047</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setIterators</name></name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setFlush</name></name><argument_list>(<argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setWait</name></name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setCompactionStrategy</name></name><argument_list>(<argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>prot</name><operator>.</operator><name>writeMessageEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">5907</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">5911</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <function><type><specifier>public</specifier> <name>compactTable_result</name></type> <name>getResult</name><parameter_list>(<parameter><decl><type><name>I</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>compactTable_args</name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>compactTable_result</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>compactTable_result</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>iface</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>login</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>iterators</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>iface</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>login</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>iterators</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>wait</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>compactionStrategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AccumuloSecurityException</name></type> <name>ouch1</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><name><name>result</name><operator>.</operator><name>ouch1</name></name> <operator>=</operator> <name>ouch1</name></expr>;</expr_stmt>
         </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TableNotFoundException</name></type> <name>ouch2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">8356</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">8360</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       </block_content>}</block></catch></try>
 
       <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>I</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>compactTable_args</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name><name>AsyncMethodCallback</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>iface</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>login</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>iterators</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>wait</name></name></expr></argument>,<argument><expr><name>resultHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iface</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>login</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>iterators</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>wait</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>compactionStrategy</name></name></expr></argument>,<argument><expr><name>resultHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></function>
     </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13091</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">13095</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// LOGIN_PROPERTIES</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map154</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>loginProperties</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map154</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i155</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i155</name> <operator>&lt;</operator> <name><name>_map154</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i155</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map164</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>loginProperties</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map164</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i165</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i165</name> <operator>&lt;</operator> <name><name>_map164</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i165</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key156</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val157</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key156</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val157</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key156</name></expr></argument>, <argument><expr><name>_val157</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key166</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val167</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key166</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val167</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key166</name></expr></argument>, <argument><expr><name>_val167</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13132</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">13136</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>LOGIN_PROPERTIES_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter158</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter168</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter158</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter158</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter168</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter168</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13172</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">13176</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetLoginProperties</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter159</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter169</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter159</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter159</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter169</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter169</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">13191</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">13195</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map160</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>loginProperties</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map160</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i161</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i161</name> <operator>&lt;</operator> <name><name>_map160</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i161</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map170</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>loginProperties</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map170</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i171</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i171</name> <operator>&lt;</operator> <name><name>_map170</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i171</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key162</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val163</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key162</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val163</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key162</name></expr></argument>, <argument><expr><name>_val163</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key172</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val173</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key172</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val173</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key172</name></expr></argument>, <argument><expr><name>_val173</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setLoginPropertiesIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">15388</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">15392</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// SPLITS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set164</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>splits</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set164</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i165</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i165</name> <operator>&lt;</operator> <name><name>_set164</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i165</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set174</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>splits</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set174</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i175</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i175</name> <operator>&lt;</operator> <name><name>_set174</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i175</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem166</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem166</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>splits</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem166</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem176</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem176</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>splits</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem176</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">15432</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">15436</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SPLITS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>splits</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter167</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>splits</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter177</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>splits</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter167</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter177</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">15477</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">15481</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSplits</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>splits</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter168</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>splits</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter178</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>splits</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter168</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter178</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">15499</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">15503</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set169</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>splits</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set169</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i170</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i170</name> <operator>&lt;</operator> <name><name>_set169</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i170</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set179</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>splits</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set179</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i180</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i180</name> <operator>&lt;</operator> <name><name>_set179</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i180</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem171</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem171</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>splits</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem171</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem181</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem181</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>splits</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem181</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSplitsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16654</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">16658</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// SCOPES</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set172</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set172</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i173</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i173</name> <operator>&lt;</operator> <name><name>_set172</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i173</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set182</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set182</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i183</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i183</name> <operator>&lt;</operator> <name><name>_set182</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i183</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem174</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem174</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem174</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem184</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem184</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem184</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16703</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">16707</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SCOPES_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter175</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter185</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter175</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter185</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16754</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">16758</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetScopes</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter176</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter186</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter176</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter186</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">16781</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">16785</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set177</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set177</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i178</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i178</name> <operator>&lt;</operator> <name><name>_set177</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i178</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set187</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set187</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i188</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i188</name> <operator>&lt;</operator> <name><name>_set187</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i188</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem179</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem179</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem179</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem189</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem189</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem189</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setScopesIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">17936</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">17940</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// SCOPES</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set180</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set180</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i181</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i181</name> <operator>&lt;</operator> <name><name>_set180</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i181</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set190</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set190</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i191</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i191</name> <operator>&lt;</operator> <name><name>_set190</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i191</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem182</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem182</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem182</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem192</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem192</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem192</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">17985</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17989</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SCOPES_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter183</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter193</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter183</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter193</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18036</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">18040</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetScopes</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter184</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter194</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter184</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter194</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18063</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">18067</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set185</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set185</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i186</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i186</name> <operator>&lt;</operator> <name><name>_set185</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i186</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set195</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set195</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i196</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i196</name> <operator>&lt;</operator> <name><name>_set195</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i196</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem187</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem187</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem187</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem197</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem197</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem197</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setScopesIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">20208</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">20212</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="line">// PROPERTIES_TO_SET</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map188</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>propertiesToSet</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map188</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i189</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i189</name> <operator>&lt;</operator> <name><name>_map188</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i189</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map198</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>propertiesToSet</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map198</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i199</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i199</name> <operator>&lt;</operator> <name><name>_map198</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i199</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key190</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val191</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key190</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val191</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key190</name></expr></argument>, <argument><expr><name>_val191</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key200</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val201</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key200</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val201</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key200</name></expr></argument>, <argument><expr><name>_val201</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">20228</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">20232</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">6</literal></expr>:</case> <comment type="line">// PROPERTIES_TO_EXCLUDE</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set192</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set192</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i193</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i193</name> <operator>&lt;</operator> <name><name>_set192</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i193</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set202</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set202</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i203</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i203</name> <operator>&lt;</operator> <name><name>_set202</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i203</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem194</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem194</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem194</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem204</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem204</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem204</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">20280</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">20284</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>PROPERTIES_TO_SET_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter195</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter205</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter195</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter195</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter205</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter205</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">20293</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">20297</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>PROPERTIES_TO_EXCLUDE_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter196</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter206</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter196</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter206</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">20353</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">20357</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetPropertiesToSet</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter197</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter207</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter197</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter197</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter207</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter207</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetPropertiesToExclude</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter198</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter208</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter198</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter208</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">20393</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">20397</literal></expr><operator>,</operator><expr><literal type="number">28</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map199</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>propertiesToSet</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map199</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i200</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i200</name> <operator>&lt;</operator> <name><name>_map199</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i200</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map209</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>propertiesToSet</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map209</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i210</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i210</name> <operator>&lt;</operator> <name><name>_map209</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i210</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key201</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val202</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key201</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val202</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key201</name></expr></argument>, <argument><expr><name>_val202</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key211</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val212</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key211</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val212</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key211</name></expr></argument>, <argument><expr><name>_val212</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setPropertiesToSetIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set203</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set203</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i204</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i204</name> <operator>&lt;</operator> <name><name>_set203</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i204</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set213</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set213</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i214</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i214</name> <operator>&lt;</operator> <name><name>_set213</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i214</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem205</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem205</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem205</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem215</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem215</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>propertiesToExclude</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem215</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setPropertiesToExcludeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21096</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21100</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>ITERATORS_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"iterators"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>FLUSH_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"flush"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>BOOL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>WAIT_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>BOOL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>COMPACTION_STRATEGY_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"compactionStrategy"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <static>static <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21110</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21115</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>flush</name></decl>;</decl_stmt> <comment type="line">// required</comment>
     <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>wait</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CompactionStrategyConfig</name></type> <name>compactionStrategy</name></decl>;</decl_stmt> <comment type="line">// required</comment>
 
     <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
     <enum><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
<annotation>@</annotation>@ <expr><operator>-</operator><literal type="number">21119</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">21125</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <decl><name>END_ROW</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"endRow"</literal></expr></argument>)</argument_list></decl>,
       <decl><name>ITERATORS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"iterators"</literal></expr></argument>)</argument_list></decl>,
       <decl><name>FLUSH</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"flush"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>WAIT</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"wait"</literal></expr></argument>)</argument_list></decl>;
      <decl><name>WAIT</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"wait"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>COMPACTION_STRATEGY</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"compactionStrategy"</literal></expr></argument>)</argument_list></decl>;
 
       <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr><operator>-</operator><literal type="number">21148</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21155</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <return>return <expr><name>FLUSH</name></expr>;</return>
           <case>case <expr><literal type="number">7</literal></expr>:</case> <comment type="line">// WAIT</comment>
             <return>return <expr><name>WAIT</name></expr>;</return>
          <case>case <expr><literal type="number">8</literal></expr>:</case> <comment type="line">// COMPACTION_STRATEGY</comment>
            <return>return <expr><name>COMPACTION_STRATEGY</name></expr>;</return>
           <default>default:</default>
             <return>return <expr><literal type="null">null</literal></expr>;</return>
         }</block></enum>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21209</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21218</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>BOOL</name></name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block></static>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
       <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>WAIT</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
           <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>BOOL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>COMPACTION_STRATEGY</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"compactionStrategy"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>CompactionStrategyConfig</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>compactTable_args</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21223</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">21234</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>endRow</name></decl>,
       <decl><type ref="prev"/><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></decl>,
       <decl><type ref="prev"/><name>boolean</name> <name>flush</name></decl>,
      <decl><type ref="prev"/><name>boolean</name> <name>wait</name></decl>)
      boolean wait<operator>,</operator>
      CompactionStrategyConfig compactionStrategy</decl_stmt>)</block_content>
     <block>{<block_content>
       <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>login</name></name> <operator>=</operator> <name>login</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21235</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21247</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name>setFlushIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wait</name></name> <operator>=</operator> <name>wait</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>setWaitIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <name>compactionStrategy</name></expr>;</expr_stmt>
     </block_content>}</block></block></if></if_stmt>
 
     <comment type="block" format="javadoc">/**
@@ -21266,6 +21279,9 @@ import org.slf4j.LoggerFactory;
       }
       this.flush = other.flush;
       this.wait = other.wait;
      if (other.isSetCompactionStrategy()) {
        this.compactionStrategy = new CompactionStrategyConfig(other.compactionStrategy);
      }
     }
 
     public compactTable_args deepCopy() {
@@ -21283,6 +21299,7 @@ import org.slf4j.LoggerFactory;
       this.flush = false;
       setWaitIsSet(false);
       this.wait = false;
      this.compactionStrategy = null;
     }
 
     public byte[] getLogin() {
@@ -21496,6 +21513,30 @@ import org.slf4j.LoggerFactory;
       __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAIT_ISSET_ID, value);
     }
 
    public CompactionStrategyConfig getCompactionStrategy() {
      return this.compactionStrategy;
    }

    public compactTable_args setCompactionStrategy(CompactionStrategyConfig compactionStrategy) {
      this.compactionStrategy = compactionStrategy;
      return this;
    }

    public void unsetCompactionStrategy() {
      this.compactionStrategy = null;
    }

    /** Returns true if field compactionStrategy is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetCompactionStrategy</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>compactionStrategy</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompactionStrategyIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

     <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
       <case>case <expr><name>LOGIN</name></expr>:</case>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21554</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21595</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></switch>
         <break>break;</break>
 
      <case>case <expr><name>COMPACTION_STRATEGY</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetCompactionStrategy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setCompactionStrategy</name><argument_list>(<argument><expr><operator>(</operator><name>CompactionStrategyConfig</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

       </block_content>}</block></function>
     </block_content>}</block></if></if_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21580</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21629</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <case>case <expr><name>WAIT</name></expr>:</case>
         <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isWait</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
 
      <case>case <expr><name>COMPACTION_STRATEGY</name></expr>:</case>
        <return>return <expr><call><name>getCompactionStrategy</name><argument_list>()</argument_list></call></expr>;</return>

       </block_content>}</block></if></if_stmt>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21605</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21657</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <return>return <expr><call><name>isSetFlush</name><argument_list>()</argument_list></call></expr>;</return>
       <case>case <expr><name>WAIT</name></expr>:</case>
         <return>return <expr><call><name>isSetWait</name><argument_list>()</argument_list></call></expr>;</return>
      <case>case <expr><name>COMPACTION_STRATEGY</name></expr>:</case>
        <return>return <expr><call><name>isSetCompactionStrategy</name><argument_list>()</argument_list></call></expr>;</return>
       </block_content>}</block></constructor>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21685</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21739</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return>
       }
 
      boolean <expr_stmt><expr><name>this_present_compactionStrategy</name> <operator>=</operator> <literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetCompactionStrategy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_compactionStrategy</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetCompactionStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_compactionStrategy</name> <operator>||</operator> <name>that_present_compactionStrategy</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_compactionStrategy</name> <operator>&amp;&amp;</operator> <name>that_present_compactionStrategy</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>compactionStrategy</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>compactionStrategy</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

       <return>return <expr><literal type="boolean">true</literal></expr>;</return>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">21771</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21834</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <return>return <expr><name>lastComparison</name></expr>;</return>
         }
       }
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetCompactionStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetCompactionStrategy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetCompactionStrategy</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>compactionStrategy</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>compactionStrategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
       <return>return <expr><literal type="number">0</literal></expr>;</return>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">21838</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21911</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"wait:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"compactionStrategy:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>compactionStrategy</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>compactionStrategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
     }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">21845</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21926</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
       <comment type="line">// check for required fields</comment>
       <comment type="line">// check for sub-struct validity</comment>
      <if_stmt><if>if <condition>(<expr><name>compactionStrategy</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>compactionStrategy</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
     </block_content>}</block></function>
 
     <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21918</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">22002</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="line">// ITERATORS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list206</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list206</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i207</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i207</name> <operator>&lt;</operator> <name><name>_list206</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i207</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list216</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list216</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i217</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i217</name> <operator>&lt;</operator> <name><name>_list216</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i217</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>IteratorSetting</name></type> <name>_elem208</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem208</name> <operator>=</operator> <operator>new</operator> <call><name>IteratorSetting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem208</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>iterators</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem208</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>IteratorSetting</name></type> <name>_elem218</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem218</name> <operator>=</operator> <operator>new</operator> <call><name>IteratorSetting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem218</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>iterators</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem218</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21950</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">22034</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
                 <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if></if_stmt>
               <break>break;</break>
            <case>case <expr><literal type="number">8</literal></expr>:</case> <comment type="line">// COMPACTION_STRATEGY</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>compactionStrategy</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setCompactionStrategyIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
             <default>default:</default>
               <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">21989</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">22082</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>ITERATORS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>iterators</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>IteratorSetting</name></type> <name>_iter209</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>iterators</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>IteratorSetting</name></type> <name>_iter219</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>iterators</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter209</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter219</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">22003</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">22096</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>WAIT_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBool</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>compactionStrategy</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>COMPACTION_STRATEGY_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>compactionStrategy</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       }
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">22042</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">22140</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetWait</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCompactionStrategy</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetLogin</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>login</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">22058</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">22159</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetIterators</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>iterators</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>IteratorSetting</name></type> <name>_iter210</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>iterators</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>IteratorSetting</name></type> <name>_iter220</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>iterators</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter210</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter220</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">22070</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">22171</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetWait</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBool</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCompactionStrategy</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>compactionStrategy</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       }
 
       @<function><type><name>Override</name>
       <specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>compactTable_args</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
         <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>login</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setLoginIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">22094</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">22198</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list211</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list211</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i212</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i212</name> <operator>&lt;</operator> <name><name>_list211</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i212</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list221</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list221</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i222</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i222</name> <operator>&lt;</operator> <name><name>_list221</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i222</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>IteratorSetting</name></type> <name>_elem213</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem213</name> <operator>=</operator> <operator>new</operator> <call><name>IteratorSetting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem213</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>iterators</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem213</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>IteratorSetting</name></type> <name>_elem223</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem223</name> <operator>=</operator> <operator>new</operator> <call><name>IteratorSetting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem223</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>iterators</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setIteratorsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">22114</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">22218</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>wait</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setWaitIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>compactionStrategy</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setCompactionStrategyIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
       </block_content>}</block></function>
     }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">30087</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">30196</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// TABLES</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set214</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tables</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set214</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i215</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i215</name> <operator>&lt;</operator> <name><name>_set214</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i215</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set224</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tables</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set224</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i225</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i225</name> <operator>&lt;</operator> <name><name>_set224</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i225</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem216</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem216</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem216</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem226</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem226</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem226</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30126</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">30235</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>TABLES_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>tables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter217</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>tables</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter227</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>tables</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter217</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter227</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30165</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">30274</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTables</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>tables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter218</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>tables</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter228</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>tables</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter218</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter228</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30183</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">30292</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set219</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tables</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set219</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i220</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i220</name> <operator>&lt;</operator> <name><name>_set219</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i220</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set229</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tables</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set229</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i230</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i230</name> <operator>&lt;</operator> <name><name>_set229</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i230</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem221</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem221</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem221</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem231</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem231</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem231</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTablesIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30739</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">30848</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list222</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>DiskUsage</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list222</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i223</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i223</name> <operator>&lt;</operator> <name><name>_list222</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i223</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list232</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>DiskUsage</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list232</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i233</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i233</name> <operator>&lt;</operator> <name><name>_list232</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i233</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>DiskUsage</name></type> <name>_elem224</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem224</name> <operator>=</operator> <operator>new</operator> <call><name>DiskUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem224</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem224</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>DiskUsage</name></type> <name>_elem234</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem234</name> <operator>=</operator> <operator>new</operator> <call><name>DiskUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem234</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem234</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30801</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">30910</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>DiskUsage</name></type> <name>_iter225</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>DiskUsage</name></type> <name>_iter235</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter225</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter235</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30858</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">30967</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>DiskUsage</name></type> <name>_iter226</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>DiskUsage</name></type> <name>_iter236</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter226</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter236</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30881</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">30990</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list227</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>DiskUsage</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list227</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i228</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i228</name> <operator>&lt;</operator> <name><name>_list227</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i228</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list237</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>DiskUsage</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list237</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i238</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i238</name> <operator>&lt;</operator> <name><name>_list237</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i238</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>DiskUsage</name></type> <name>_elem229</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem229</name> <operator>=</operator> <operator>new</operator> <call><name>DiskUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem229</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem229</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>DiskUsage</name></type> <name>_elem239</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem239</name> <operator>=</operator> <operator>new</operator> <call><name>DiskUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem239</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem239</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">31924</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">32033</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map230</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map230</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i231</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i231</name> <operator>&lt;</operator> <name><name>_map230</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i231</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map240</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map240</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i241</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i241</name> <operator>&lt;</operator> <name><name>_map240</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i241</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key232</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val233</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key232</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key242</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val243</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key242</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     <block>{<block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set234</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>_val233</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set234</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i235</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i235</name> <operator>&lt;</operator> <name><name>_set234</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i235</name></expr></incr>)</control><block type="pseudo"><block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set244</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                      <expr_stmt><expr><name>_val243</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set244</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i245</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i245</name> <operator>&lt;</operator> <name><name>_set244</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i245</name></expr></incr>)</control>
                       <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>_elem236</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem236</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val233</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem236</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>_elem246</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem246</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val243</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem246</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       </block_content>}</block></for>
                       <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key232</name></expr></argument>, <argument><expr><name>_val233</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key242</name></expr></argument>, <argument><expr><name>_val243</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">31997</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">32106</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter237</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter247</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter237</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter247</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>_iter237</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter238</name> <range>: <expr><call><name><name>_iter237</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>_iter247</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter248</name> <range>: <expr><call><name><name>_iter247</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter238</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter248</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32062</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">32171</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter239</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter249</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter239</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter249</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter239</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter240</name> <range>: <expr><call><name><name>_iter239</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter249</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter250</name> <range>: <expr><call><name><name>_iter249</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter240</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter250</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
             </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">32092</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">32201</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map241</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map241</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i242</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i242</name> <operator>&lt;</operator> <name><name>_map241</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i242</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map251</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map251</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i252</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i252</name> <operator>&lt;</operator> <name><name>_map251</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i252</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key243</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val244</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key243</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key253</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val254</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key253</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set245</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>_val244</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set245</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i246</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i246</name> <operator>&lt;</operator> <name><name>_set245</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i246</name></expr></incr>)</control><block type="pseudo"><block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set255</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                <expr_stmt><expr><name>_val254</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set255</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i256</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i256</name> <operator>&lt;</operator> <name><name>_set255</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i256</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name>String</name></type> <name>_elem247</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem247</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val244</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem247</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_elem257</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem257</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val254</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem257</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key243</name></expr></argument>, <argument><expr><name>_val244</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key253</name></expr></argument>, <argument><expr><name>_val254</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34293</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">34402</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// AUTHS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set248</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>auths</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set248</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i249</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i249</name> <operator>&lt;</operator> <name><name>_set248</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i249</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set258</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>auths</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set258</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i259</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i259</name> <operator>&lt;</operator> <name><name>_set258</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i259</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem250</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem250</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>auths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem250</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem260</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem260</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>auths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem260</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34369</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">34478</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>AUTHS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>auths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter251</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>auths</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter261</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>auths</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter251</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter261</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34442</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">34551</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetAuths</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>auths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter252</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>auths</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter262</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>auths</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter252</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter262</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34476</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">34585</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set253</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>auths</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set253</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i254</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i254</name> <operator>&lt;</operator> <name><name>_set253</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i254</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set263</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>auths</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set263</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i264</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i264</name> <operator>&lt;</operator> <name><name>_set263</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i264</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem255</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem255</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>auths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem255</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem265</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem265</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>auths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem265</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setAuthsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36178</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">36287</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map256</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map256</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i257</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i257</name> <operator>&lt;</operator> <name><name>_map256</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i257</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map266</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map266</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i267</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i267</name> <operator>&lt;</operator> <name><name>_map266</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i267</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key258</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val259</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key258</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val259</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key258</name></expr></argument>, <argument><expr><name>_val259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key268</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val269</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key268</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val269</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key268</name></expr></argument>, <argument><expr><name>_val269</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36241</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">36350</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter260</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter270</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter260</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter260</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter270</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter270</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36299</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">36408</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter261</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter271</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter261</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter261</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter271</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter271</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">36323</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">36432</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map262</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map262</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i263</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i263</name> <operator>&lt;</operator> <name><name>_map262</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i263</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map272</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map272</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i273</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i273</name> <operator>&lt;</operator> <name><name>_map272</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i273</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key264</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val265</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key264</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val265</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key264</name></expr></argument>, <argument><expr><name>_val265</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key274</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val275</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key274</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val275</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key274</name></expr></argument>, <argument><expr><name>_val275</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">39904</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">40013</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list266</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list266</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i267</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i267</name> <operator>&lt;</operator> <name><name>_list266</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i267</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list276</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list276</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i277</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i277</name> <operator>&lt;</operator> <name><name>_list276</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i277</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem268</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem268</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem268</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem278</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem278</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem278</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">39965</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">40074</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter269</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter279</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter269</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter279</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40022</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">40131</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter270</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter280</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter270</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter280</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40045</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">40154</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list271</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list271</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i272</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i272</name> <operator>&lt;</operator> <name><name>_list271</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i272</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list281</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list281</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i282</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i282</name> <operator>&lt;</operator> <name><name>_list281</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i282</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem273</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem273</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem273</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem283</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem283</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem283</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40747</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">40856</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set274</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set274</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i275</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i275</name> <operator>&lt;</operator> <name><name>_set274</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i275</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set284</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set284</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i285</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i285</name> <operator>&lt;</operator> <name><name>_set284</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i285</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem276</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem276</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem276</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem286</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem286</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem286</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40781</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">40890</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter277</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter287</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter277</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter287</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40814</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">40923</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter278</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter288</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter278</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter288</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40828</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">40937</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set279</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set279</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i280</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i280</name> <operator>&lt;</operator> <name><name>_set279</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i280</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set289</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set289</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i290</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i290</name> <operator>&lt;</operator> <name><name>_set289</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i290</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem281</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem281</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem281</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem291</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem291</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem291</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">41858</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">41967</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map282</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map282</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i283</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i283</name> <operator>&lt;</operator> <name><name>_map282</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i283</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map292</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map292</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i293</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i293</name> <operator>&lt;</operator> <name><name>_map292</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i293</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key284</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></type> <name>_val285</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key284</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key294</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></type> <name>_val295</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key294</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     <block>{<block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set286</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>_val285</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set286</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i287</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i287</name> <operator>&lt;</operator> <name><name>_set286</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i287</name></expr></incr>)</control><block type="pseudo"><block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set296</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                      <expr_stmt><expr><name>_val295</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set296</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i297</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i297</name> <operator>&lt;</operator> <name><name>_set296</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i297</name></expr></incr>)</control>
                       <block>{<block_content>
                        <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem288</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem288</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val285</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem288</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem298</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem298</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val295</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem298</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       </block_content>}</block></for>
                       <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key284</name></expr></argument>, <argument><expr><name>_val285</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key294</name></expr></argument>, <argument><expr><name>_val295</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">41931</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">42040</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter289</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter299</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter289</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter299</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>_iter289</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter290</name> <range>: <expr><call><name><name>_iter289</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>_iter299</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter300</name> <range>: <expr><call><name><name>_iter299</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter290</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter300</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">41996</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">42105</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter291</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter301</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter291</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter301</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter291</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter292</name> <range>: <expr><call><name><name>_iter291</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter301</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter302</name> <range>: <expr><call><name><name>_iter301</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter292</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter302</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
             </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">42026</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">42135</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map293</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map293</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i294</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i294</name> <operator>&lt;</operator> <name><name>_map293</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i294</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map303</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map303</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i304</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i304</name> <operator>&lt;</operator> <name><name>_map303</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i304</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key295</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></type> <name>_val296</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key295</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key305</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name></type> <name>_val306</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key305</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set297</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>_val296</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set297</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i298</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i298</name> <operator>&lt;</operator> <name><name>_set297</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i298</name></expr></incr>)</control><block type="pseudo"><block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set307</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                <expr_stmt><expr><name>_val306</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set307</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i308</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i308</name> <operator>&lt;</operator> <name><name>_set307</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i308</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem299</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem299</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val296</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem299</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem309</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem309</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val306</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem309</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key295</name></expr></argument>, <argument><expr><name>_val296</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key305</name></expr></argument>, <argument><expr><name>_val306</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43067</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">43176</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map300</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map300</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i301</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i301</name> <operator>&lt;</operator> <name><name>_map300</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i301</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map310</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map310</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i311</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i311</name> <operator>&lt;</operator> <name><name>_map310</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i311</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key302</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>_val303</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key302</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val303</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key302</name></expr></argument>, <argument><expr><name>_val303</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key312</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>_val313</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key312</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val313</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key312</name></expr></argument>, <argument><expr><name>_val313</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43130</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">43239</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></name></type> <name>_iter304</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></name></type> <name>_iter314</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter304</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter304</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter314</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter314</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43188</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">43297</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></name></type> <name>_iter305</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></name></type> <name>_iter315</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter305</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter305</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter315</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter315</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">43212</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">43321</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map306</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map306</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i307</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i307</name> <operator>&lt;</operator> <name><name>_map306</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i307</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map316</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map316</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i317</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i317</name> <operator>&lt;</operator> <name><name>_map316</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i317</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key308</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>int</name></type> <name>_val309</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key308</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val309</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key308</name></expr></argument>, <argument><expr><name>_val309</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key318</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>int</name></type> <name>_val319</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key318</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val319</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key318</name></expr></argument>, <argument><expr><name>_val319</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">48440</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">48549</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// SCOPES</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set310</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set310</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i311</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i311</name> <operator>&lt;</operator> <name><name>_set310</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i311</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set320</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set320</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i321</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i321</name> <operator>&lt;</operator> <name><name>_set320</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i321</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem312</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem312</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem312</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem322</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem322</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem322</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">48489</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">48598</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SCOPES_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter313</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter323</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter313</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter323</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">48540</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">48649</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetScopes</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter314</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>IteratorScope</name></type> <name>_iter324</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>scopes</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter314</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter324</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">48566</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">48675</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set315</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set315</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i316</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i316</name> <operator>&lt;</operator> <name><name>_set315</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i316</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set325</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>scopes</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>IteratorScope</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set325</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i326</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i326</name> <operator>&lt;</operator> <name><name>_set325</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i326</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem317</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem317</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem317</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>IteratorScope</name></type> <name>_elem327</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem327</name> <operator>=</operator> <call><name><name>IteratorScope</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem327</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setScopesIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51990</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">52099</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// GROUPS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map318</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>groups</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map318</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i319</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i319</name> <operator>&lt;</operator> <name><name>_map318</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i319</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map328</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>groups</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map328</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i329</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i329</name> <operator>&lt;</operator> <name><name>_map328</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i329</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key320</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val321</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key320</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key330</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val331</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key330</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     <block>{<block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set322</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>_val321</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set322</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i323</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i323</name> <operator>&lt;</operator> <name><name>_set322</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i323</name></expr></incr>)</control><block type="pseudo"><block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set332</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                      <expr_stmt><expr><name>_val331</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set332</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i333</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i333</name> <operator>&lt;</operator> <name><name>_set332</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i333</name></expr></incr>)</control>
                       <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>_elem324</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem324</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val321</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem324</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>_elem334</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem334</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val331</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem334</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       </block_content>}</block></for>
                       <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>groups</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key320</name></expr></argument>, <argument><expr><name>_val321</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>groups</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key330</name></expr></argument>, <argument><expr><name>_val331</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">52046</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">52155</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>GROUPS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter325</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>groups</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter335</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>groups</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter325</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter335</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>_iter325</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter326</name> <range>: <expr><call><name><name>_iter325</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>_iter335</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter336</name> <range>: <expr><call><name><name>_iter335</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter326</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">52099</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">52208</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetGroups</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter327</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>groups</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter337</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>groups</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter327</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter337</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter327</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter328</name> <range>: <expr><call><name><name>_iter327</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter337</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter338</name> <range>: <expr><call><name><name>_iter337</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter328</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter338</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
             </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">52128</literal></expr><operator>,</operator><expr><literal type="number">24</literal> <operator>+</operator><literal type="number">52237</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map329</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>groups</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map329</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i330</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i330</name> <operator>&lt;</operator> <name><name>_map329</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i330</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map339</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>groups</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map339</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i340</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i340</name> <operator>&lt;</operator> <name><name>_map339</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i340</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key331</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val332</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key331</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key341</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_val342</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key341</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set333</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>_val332</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set333</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i334</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i334</name> <operator>&lt;</operator> <name><name>_set333</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i334</name></expr></incr>)</control><block type="pseudo"><block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set343</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                <expr_stmt><expr><name>_val342</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set343</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i344</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i344</name> <operator>&lt;</operator> <name><name>_set343</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i344</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name>String</name></type> <name>_elem335</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem335</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val332</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem335</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_elem345</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem345</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val342</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem345</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>groups</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key331</name></expr></argument>, <argument><expr><name>_val332</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>groups</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key341</name></expr></argument>, <argument><expr><name>_val342</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setGroupsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55148</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">55257</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set336</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set336</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i337</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i337</name> <operator>&lt;</operator> <name><name>_set336</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i337</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set346</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set346</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i347</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i347</name> <operator>&lt;</operator> <name><name>_set346</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i347</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>Range</name></type> <name>_elem338</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem338</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem338</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem338</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Range</name></type> <name>_elem348</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem348</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem348</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem348</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55210</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">55319</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Range</name></type> <name>_iter339</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>Range</name></type> <name>_iter349</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter339</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter349</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55267</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">55376</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Range</name></type> <name>_iter340</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>Range</name></type> <name>_iter350</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter340</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter350</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55290</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">55399</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set341</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set341</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i342</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i342</name> <operator>&lt;</operator> <name><name>_set341</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i342</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set351</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set351</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i352</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i352</name> <operator>&lt;</operator> <name><name>_set351</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i352</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>Range</name></type> <name>_elem343</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem343</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem343</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem343</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>Range</name></type> <name>_elem353</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem353</name> <operator>=</operator> <operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem353</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem353</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56809</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">56918</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map344</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map344</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i345</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i345</name> <operator>&lt;</operator> <name><name>_map344</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i345</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map354</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map354</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i355</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i355</name> <operator>&lt;</operator> <name><name>_map354</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i355</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key346</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val347</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key346</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val347</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key346</name></expr></argument>, <argument><expr><name>_val347</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key356</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val357</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key356</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val357</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key356</name></expr></argument>, <argument><expr><name>_val357</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56845</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">56954</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter348</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter358</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter348</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter348</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter358</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter358</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56879</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">56988</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter349</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter359</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter349</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter349</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter359</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter359</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56894</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">57003</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map350</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map350</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i351</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i351</name> <operator>&lt;</operator> <name><name>_map350</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i351</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map360</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map360</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i361</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i361</name> <operator>&lt;</operator> <name><name>_map360</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i361</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key352</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val353</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key352</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val353</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key352</name></expr></argument>, <argument><expr><name>_val353</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key362</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val363</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key362</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val363</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key362</name></expr></argument>, <argument><expr><name>_val363</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60088</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">60197</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list354</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveScan</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list354</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i355</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i355</name> <operator>&lt;</operator> <name><name>_list354</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i355</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list364</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveScan</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list364</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i365</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i365</name> <operator>&lt;</operator> <name><name>_list364</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i365</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ActiveScan</name></type> <name>_elem356</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem356</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveScan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem356</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem356</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ActiveScan</name></type> <name>_elem366</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem366</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveScan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem366</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem366</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60141</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">60250</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ActiveScan</name></type> <name>_iter357</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ActiveScan</name></type> <name>_iter367</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter357</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter367</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60190</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">60299</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ActiveScan</name></type> <name>_iter358</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ActiveScan</name></type> <name>_iter368</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter358</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter368</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60210</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">60319</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list359</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveScan</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list359</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i360</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i360</name> <operator>&lt;</operator> <name><name>_list359</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i360</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list369</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveScan</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list369</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i370</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i370</name> <operator>&lt;</operator> <name><name>_list369</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i370</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ActiveScan</name></type> <name>_elem361</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem361</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveScan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem361</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem361</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ActiveScan</name></type> <name>_elem371</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem371</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveScan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem371</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem371</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">61165</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">61274</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list362</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveCompaction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list362</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i363</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i363</name> <operator>&lt;</operator> <name><name>_list362</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i363</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list372</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveCompaction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list372</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i373</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i373</name> <operator>&lt;</operator> <name><name>_list372</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i373</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ActiveCompaction</name></type> <name>_elem364</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem364</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveCompaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem364</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem364</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ActiveCompaction</name></type> <name>_elem374</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem374</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveCompaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_elem374</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem374</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">61218</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">61327</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ActiveCompaction</name></type> <name>_iter365</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ActiveCompaction</name></type> <name>_iter375</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter365</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter375</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">61267</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">61376</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ActiveCompaction</name></type> <name>_iter366</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ActiveCompaction</name></type> <name>_iter376</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>_iter366</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter376</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">61287</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">61396</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list367</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveCompaction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list367</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i368</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i368</name> <operator>&lt;</operator> <name><name>_list367</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i368</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list377</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ActiveCompaction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list377</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i378</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i378</name> <operator>&lt;</operator> <name><name>_list377</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i378</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ActiveCompaction</name></type> <name>_elem369</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem369</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveCompaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem369</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem369</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ActiveCompaction</name></type> <name>_elem379</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem379</name> <operator>=</operator> <operator>new</operator> <call><name>ActiveCompaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_elem379</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem379</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62136</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">62245</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map370</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map370</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i371</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i371</name> <operator>&lt;</operator> <name><name>_map370</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i371</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map380</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map380</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i381</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i381</name> <operator>&lt;</operator> <name><name>_map380</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i381</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key372</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val373</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key372</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val373</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key372</name></expr></argument>, <argument><expr><name>_val373</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key382</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val383</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key382</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val383</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key382</name></expr></argument>, <argument><expr><name>_val383</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62190</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">62299</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter374</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter384</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter374</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter374</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter384</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter384</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62240</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">62349</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter375</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter385</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter375</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter375</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter385</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter385</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62261</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">62370</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map376</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map376</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i377</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i377</name> <operator>&lt;</operator> <name><name>_map376</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i377</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map386</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map386</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i387</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i387</name> <operator>&lt;</operator> <name><name>_map386</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i387</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key378</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val379</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key378</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val379</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key378</name></expr></argument>, <argument><expr><name>_val379</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key388</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val389</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key388</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val389</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key388</name></expr></argument>, <argument><expr><name>_val389</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63111</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">63220</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map380</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map380</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i381</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i381</name> <operator>&lt;</operator> <name><name>_map380</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i381</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map390</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map390</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i391</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i391</name> <operator>&lt;</operator> <name><name>_map390</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i391</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key382</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val383</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key382</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val383</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key382</name></expr></argument>, <argument><expr><name>_val383</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key392</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val393</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key392</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val393</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key392</name></expr></argument>, <argument><expr><name>_val393</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63165</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">63274</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter384</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter394</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter384</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter384</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter394</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter394</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63215</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">63324</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter385</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter395</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter385</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter385</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter395</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter395</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63236</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">63345</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map386</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map386</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i387</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i387</name> <operator>&lt;</operator> <name><name>_map386</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i387</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map396</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map396</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i397</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i397</name> <operator>&lt;</operator> <name><name>_map396</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i397</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key388</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val389</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key388</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val389</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key388</name></expr></argument>, <argument><expr><name>_val389</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key398</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val399</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key398</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val399</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key398</name></expr></argument>, <argument><expr><name>_val399</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63935</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">64044</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list390</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list390</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i391</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i391</name> <operator>&lt;</operator> <name><name>_list390</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i391</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list400</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list400</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i401</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i401</name> <operator>&lt;</operator> <name><name>_list400</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i401</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem392</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem392</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem392</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem402</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem402</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem402</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63969</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">64078</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter393</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter403</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter393</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter403</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">64002</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">64111</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter394</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter404</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter394</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter404</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">64016</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">64125</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list395</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list395</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i396</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i396</name> <operator>&lt;</operator> <name><name>_list395</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i396</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list405</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list405</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i406</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i406</name> <operator>&lt;</operator> <name><name>_list405</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i406</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem397</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem397</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem397</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem407</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem407</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem407</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67585</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">67694</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// PROPERTIES</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map398</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map398</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i399</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i399</name> <operator>&lt;</operator> <name><name>_map398</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i399</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map408</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map408</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i409</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i409</name> <operator>&lt;</operator> <name><name>_map408</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i409</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key400</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val401</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key400</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val401</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key400</name></expr></argument>, <argument><expr><name>_val401</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_key410</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_val411</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key410</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val411</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key410</name></expr></argument>, <argument><expr><name>_val411</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67631</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">67740</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>PROPERTIES_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>properties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter402</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>properties</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter412</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>properties</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter402</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter402</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter412</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter412</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67677</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">67786</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetProperties</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>properties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter403</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>properties</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter413</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>properties</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter403</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter403</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter413</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter413</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">67700</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">67809</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map404</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map404</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i405</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i405</name> <operator>&lt;</operator> <name><name>_map404</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i405</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map414</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map414</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i415</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i415</name> <operator>&lt;</operator> <name><name>_map414</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i415</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_key406</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val407</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key406</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val407</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key406</name></expr></argument>, <argument><expr><name>_val407</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_key416</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_val417</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key416</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val417</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key416</name></expr></argument>, <argument><expr><name>_val417</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setPropertiesIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68763</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">68872</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// AUTHORIZATIONS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set408</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set408</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i409</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i409</name> <operator>&lt;</operator> <name><name>_set408</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i409</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set418</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set418</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i419</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i419</name> <operator>&lt;</operator> <name><name>_set418</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i419</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem410</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem410</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem410</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem420</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem420</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68807</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">68916</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>AUTHORIZATIONS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter411</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter421</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter411</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter421</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68852</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">68961</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetAuthorizations</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter412</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter422</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter412</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter422</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">68874</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">68983</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set413</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set413</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i414</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i414</name> <operator>&lt;</operator> <name><name>_set413</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i414</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set423</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>authorizations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set423</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i424</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i424</name> <operator>&lt;</operator> <name><name>_set423</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i424</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem415</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem415</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem415</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem425</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem425</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem425</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setAuthorizationsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">73264</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">73373</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list416</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list416</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i417</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i417</name> <operator>&lt;</operator> <name><name>_list416</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i417</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list426</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list426</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i427</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i427</name> <operator>&lt;</operator> <name><name>_list426</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i427</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem418</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem418</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem418</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem428</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem428</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem428</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">73316</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">73425</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter419</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter429</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter419</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter429</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">73365</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">73474</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter420</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>_iter430</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name>_iter430</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">73385</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">73494</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list421</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list421</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i422</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i422</name> <operator>&lt;</operator> <name><name>_list421</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i422</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list431</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list431</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i432</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i432</name> <operator>&lt;</operator> <name><name>_list431</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i432</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem423</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem423</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem423</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_elem433</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem433</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem433</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">79073</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">79182</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>SET</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set424</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set424</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i425</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i425</name> <operator>&lt;</operator> <name><name>_set424</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i425</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set434</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set434</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i435</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i435</name> <operator>&lt;</operator> <name><name>_set434</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i435</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem426</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem426</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem426</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>_elem436</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_elem436</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem436</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">79134</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">79243</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter427</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter437</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter427</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter437</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">79191</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">79300</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter428</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>_iter438</name> <range>: <expr><name><name>struct</name><operator>.</operator><name>success</name></name></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter428</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>_iter438</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">79214</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">79323</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set429</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set429</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i430</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i430</name> <operator>&lt;</operator> <name><name>_set429</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i430</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name></type> <name>_set439</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TSet</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_set439</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i440</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i440</name> <operator>&lt;</operator> <name><name>_set439</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i440</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem431</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem431</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem431</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>_elem441</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_elem441</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem441</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">88141</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">88250</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// CELLS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map432</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>cells</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map432</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i433</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i433</name> <operator>&lt;</operator> <name><name>_map432</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i433</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map442</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>cells</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map442</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i443</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i443</name> <operator>&lt;</operator> <name><name>_map442</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i443</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key434</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>_val435</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key434</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key444</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>_val445</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key444</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     <block>{<block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list436</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>_val435</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list436</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i437</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i437</name> <operator>&lt;</operator> <name><name>_list436</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i437</name></expr></incr>)</control><block type="pseudo"><block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list446</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                      <expr_stmt><expr><name>_val445</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list446</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i447</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i447</name> <operator>&lt;</operator> <name><name>_list446</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i447</name></expr></incr>)</control>
                       <block>{<block_content>
                        <decl_stmt><decl><type><name>ColumnUpdate</name></type> <name>_elem438</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem438</name> <operator>=</operator> <operator>new</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_elem438</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val435</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem438</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>ColumnUpdate</name></type> <name>_elem448</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem448</name> <operator>=</operator> <operator>new</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_elem448</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val445</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem448</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       </block_content>}</block></for>
                       <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key434</name></expr></argument>, <argument><expr><name>_val435</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key444</name></expr></argument>, <argument><expr><name>_val445</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">88198</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">88307</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>CELLS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter439</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter449</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter439</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter449</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>_iter439</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>ColumnUpdate</name></type> <name>_iter440</name> <range>: <expr><call><name><name>_iter439</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>_iter449</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>ColumnUpdate</name></type> <name>_iter450</name> <range>: <expr><call><name><name>_iter449</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>_iter440</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter450</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">88251</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">88360</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCells</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter441</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter451</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter441</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter451</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter441</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>ColumnUpdate</name></type> <name>_iter442</name> <range>: <expr><call><name><name>_iter441</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter451</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>ColumnUpdate</name></type> <name>_iter452</name> <range>: <expr><call><name><name>_iter451</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>_iter442</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter452</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
             </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">88280</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">88389</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map443</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>cells</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map443</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i444</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i444</name> <operator>&lt;</operator> <name><name>_map443</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i444</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map453</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>cells</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map453</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i454</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i454</name> <operator>&lt;</operator> <name><name>_map453</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i454</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key445</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>_val446</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key445</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key455</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>_val456</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key455</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list447</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>_val446</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list447</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i448</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i448</name> <operator>&lt;</operator> <name><name>_list447</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i448</name></expr></incr>)</control><block type="pseudo"><block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list457</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                <expr_stmt><expr><name>_val456</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list457</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i458</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i458</name> <operator>&lt;</operator> <name><name>_list457</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i458</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name>ColumnUpdate</name></type> <name>_elem449</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem449</name> <operator>=</operator> <operator>new</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_elem449</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val446</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem449</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>ColumnUpdate</name></type> <name>_elem459</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem459</name> <operator>=</operator> <operator>new</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_elem459</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val456</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem459</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key445</name></expr></argument>, <argument><expr><name>_val446</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key455</name></expr></argument>, <argument><expr><name>_val456</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setCellsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90604</literal></expr><operator>,</operator><expr><literal type="number">26</literal> <operator>+</operator><literal type="number">90713</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// CELLS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map450</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>cells</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map450</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i451</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i451</name> <operator>&lt;</operator> <name><name>_map450</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i451</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map460</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>cells</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map460</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i461</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i461</name> <operator>&lt;</operator> <name><name>_map460</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i461</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key452</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>_val453</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key452</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key462</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>_val463</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key462</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     <block>{<block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list454</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name>_val453</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list454</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i455</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i455</name> <operator>&lt;</operator> <name><name>_list454</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i455</name></expr></incr>)</control><block type="pseudo"><block_content>
                      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list464</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                      <expr_stmt><expr><name>_val463</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list464</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      <for>for <control>(<init><decl><type><name>int</name></type> <name>_i465</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i465</name> <operator>&lt;</operator> <name><name>_list464</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i465</name></expr></incr>)</control>
                       <block>{<block_content>
                        <decl_stmt><decl><type><name>ColumnUpdate</name></type> <name>_elem456</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem456</name> <operator>=</operator> <operator>new</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_elem456</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val453</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem456</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>ColumnUpdate</name></type> <name>_elem466</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>_elem466</name> <operator>=</operator> <operator>new</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_elem466</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>_val463</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem466</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       </block_content>}</block></for>
                       <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key452</name></expr></argument>, <argument><expr><name>_val453</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key462</name></expr></argument>, <argument><expr><name>_val463</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90656</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">90765</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>CELLS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter457</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter467</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter457</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter467</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>_iter457</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>ColumnUpdate</name></type> <name>_iter458</name> <range>: <expr><call><name><name>_iter457</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>_iter467</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>ColumnUpdate</name></type> <name>_iter468</name> <range>: <expr><call><name><name>_iter467</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>_iter458</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter468</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
                 <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90703</literal></expr><operator>,</operator><expr><literal type="number">14</literal> <operator>+</operator><literal type="number">90812</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCells</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter459</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>_iter469</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter459</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter469</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter459</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>ColumnUpdate</name></type> <name>_iter460</name> <range>: <expr><call><name><name>_iter459</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter469</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>ColumnUpdate</name></type> <name>_iter470</name> <range>: <expr><call><name><name>_iter469</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                 <block>{<block_content>
                  <expr_stmt><expr><call><name><name>_iter460</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_iter470</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
             </block_content>}</block></for></block_content></block></for>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90728</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">90837</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map461</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>cells</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map461</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i462</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i462</name> <operator>&lt;</operator> <name><name>_map461</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i462</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map471</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>cells</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map471</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i472</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i472</name> <operator>&lt;</operator> <name><name>_map471</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i472</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key463</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>_val464</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key463</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key473</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name></type> <name>_val474</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key473</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list465</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>_val464</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list465</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i466</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i466</name> <operator>&lt;</operator> <name><name>_list465</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i466</name></expr></incr>)</control><block type="pseudo"><block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name></type> <name>_list475</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TList</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                <expr_stmt><expr><name>_val474</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ColumnUpdate</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_list475</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i476</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i476</name> <operator>&lt;</operator> <name><name>_list475</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i476</name></expr></incr>)</control>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name>ColumnUpdate</name></type> <name>_elem467</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem467</name> <operator>=</operator> <operator>new</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_elem467</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val464</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem467</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name>ColumnUpdate</name></type> <name>_elem477</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_elem477</name> <operator>=</operator> <operator>new</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_elem477</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>_val474</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem477</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></for>
               </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key463</name></expr></argument>, <argument><expr><name>_val464</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cells</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key473</name></expr></argument>, <argument><expr><name>_val474</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setCellsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">95367</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">95476</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// UPDATES</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map468</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>updates</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map468</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i469</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i469</name> <operator>&lt;</operator> <name><name>_map468</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i469</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map478</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>updates</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map478</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i479</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i479</name> <operator>&lt;</operator> <name><name>_map478</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i479</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key470</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ConditionalUpdates</name></type> <name>_val471</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key470</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val471</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionalUpdates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_val471</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>updates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key470</name></expr></argument>, <argument><expr><name>_val471</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key480</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ConditionalUpdates</name></type> <name>_val481</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key480</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val481</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionalUpdates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>_val481</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>updates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key480</name></expr></argument>, <argument><expr><name>_val481</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">95409</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">95518</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>UPDATES_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>updates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name></name></type> <name>_iter472</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>updates</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name></name></type> <name>_iter482</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>updates</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter472</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter472</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter482</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter482</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">95449</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">95558</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetUpdates</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>updates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name></name></type> <name>_iter473</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>updates</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name></name></type> <name>_iter483</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>updates</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter473</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter473</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter483</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_iter483</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">95468</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">95577</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map474</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>updates</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map474</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i475</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i475</name> <operator>&lt;</operator> <name><name>_map474</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i475</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map484</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>updates</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ConditionalUpdates</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map484</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i485</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i485</name> <operator>&lt;</operator> <name><name>_map484</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i485</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key476</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>ConditionalUpdates</name></type> <name>_val477</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key476</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val477</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionalUpdates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_val477</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>updates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key476</name></expr></argument>, <argument><expr><name>_val477</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key486</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>ConditionalUpdates</name></type> <name>_val487</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key486</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val487</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionalUpdates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>_val487</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>updates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key486</name></expr></argument>, <argument><expr><name>_val487</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setUpdatesIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">96033</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">96142</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
             <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
               <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
                 <block>{<block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map478</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ConditionalStatus</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map478</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i479</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i479</name> <operator>&lt;</operator> <name><name>_map478</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i479</name></expr></incr>)</control><block type="pseudo"><block_content>
                  <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map488</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
                  <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ConditionalStatus</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map488</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <for>for <control>(<init><decl><type><name>int</name></type> <name>_i489</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i489</name> <operator>&lt;</operator> <name><name>_map488</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i489</name></expr></incr>)</control>
                   <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key480</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ConditionalStatus</name></type> <name>_val481</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key480</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val481</name> <operator>=</operator> <call><name><name>ConditionalStatus</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key480</name></expr></argument>, <argument><expr><name>_val481</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key490</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ConditionalStatus</name></type> <name>_val491</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>_key490</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>_val491</name> <operator>=</operator> <call><name><name>ConditionalStatus</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key490</name></expr></argument>, <argument><expr><name>_val491</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">96096</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">96205</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
           <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ConditionalStatus</name></argument>&gt;</argument_list></name></name></type> <name>_iter482</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ConditionalStatus</name></argument>&gt;</argument_list></name></name></type> <name>_iter492</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter482</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter482</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter492</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter492</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">96154</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">96263</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
             <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ConditionalStatus</name></argument>&gt;</argument_list></name></name></type> <name>_iter483</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ConditionalStatus</name></argument>&gt;</argument_list></name></name></type> <name>_iter493</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter483</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter483</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><call><name><name>_iter493</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>_iter493</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for></block_content></block></for>
           </block_content>}</block>
         </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">96178</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">96287</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
         <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <block>{<block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map484</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ConditionalStatus</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map484</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i485</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i485</name> <operator>&lt;</operator> <name><name>_map484</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i485</name></expr></incr>)</control><block type="pseudo"><block_content>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map494</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>,<argument><name>ConditionalStatus</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map494</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>_i495</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i495</name> <operator>&lt;</operator> <name><name>_map494</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i495</name></expr></incr>)</control>
             <block>{<block_content>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key486</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>ConditionalStatus</name></type> <name>_val487</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key486</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val487</name> <operator>=</operator> <call><name><name>ConditionalStatus</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key486</name></expr></argument>, <argument><expr><name>_val487</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>_key496</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>ConditionalStatus</name></type> <name>_val497</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>_key496</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>_val497</name> <operator>=</operator> <call><name><name>ConditionalStatus</name><operator>.</operator><name>findByValue</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key496</name></expr></argument>, <argument><expr><name>_val497</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>
           </block_content>}</block>
           <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>CompactionStrategyConfig</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>CompactionStrategyConfig</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..2ece0090e</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>CompactionStrategyConfig</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">556</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<comment type="block" format="javadoc">/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>IScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>SchemeFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>StandardScheme</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>TupleScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TTupleProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>EncodingUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>server</name><operator>.</operator><name>AbstractNonblockingServer</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> class <name>CompactionStrategyConfig</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>CompactionStrategyConfig</name></argument>, <argument><name><name>CompactionStrategyConfig</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>CompactionStrategyConfig</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"CompactionStrategyConfig"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>CLASS_NAME_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>OPTIONS_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionStrategyConfigStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionStrategyConfigTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>className</name></decl>;</decl_stmt> <comment type="line">// required</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl>;</decl_stmt> <comment type="line">// required</comment>

  <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
  <enum><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
    <decl><name>CLASS_NAME</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"className"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>OPTIONS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"options"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
      <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// CLASS_NAME</comment>
          <return>return <expr><name>CLASS_NAME</name></expr>;</return>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// OPTIONS</comment>
          <return>return <expr><name>OPTIONS</name></expr>;</return>
        <default>default:</default>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches name, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

    <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_thriftId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_fieldName</name></expr>;</return>
    </block_content>}</block></function>
  }</block></enum>

  <comment type="line">// isset id assignments</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>CLASS_NAME</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>OPTIONS</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>MapMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr></argument>, 
            <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>, 
            <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>CompactionStrategyConfig</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <constructor><specifier>public</specifier> <name>CompactionStrategyConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>CompactionStrategyConfig</name><parameter_list>(
    <parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>,
    <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <name>className</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
   */</comment>
  <constructor><specifier>public</specifier> <name>CompactionStrategyConfig</name><parameter_list>(<parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>className</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>__this__options</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>__this__options</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>CompactionStrategyConfig</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>className</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>CompactionStrategyConfig</name></type> <name>setClassName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <name>className</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field className is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassNameIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>getOptionsSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>options</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>this</name><operator>.</operator><name>options</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>putToOptions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>options</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>CompactionStrategyConfig</name></type> <name>setOptions</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field options is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setOptionsIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CLASS_NAME</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetClassName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setClassName</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>OPTIONS</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setOptions</name><argument_list>(<argument><expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CLASS_NAME</name></expr>:</case>
      <return>return <expr><call><name>getClassName</name><argument_list>()</argument_list></call></expr>;</return>

    <case>case <expr><name>OPTIONS</name></expr>:</case>
      <return>return <expr><call><name>getOptions</name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CLASS_NAME</name></expr>:</case>
      <return>return <expr><call><name>isSetClassName</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>OPTIONS</name></expr>:</case>
      <return>return <expr><call><name>isSetOptions</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>CompactionStrategyConfig</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>CompactionStrategyConfig</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_className</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_className</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_className</name> <operator>||</operator> <name>that_present_className</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_className</name> <operator>&amp;&amp;</operator> <name>that_present_className</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>className</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_options</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_options</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_options</name> <operator>||</operator> <name>that_present_options</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_options</name> <operator>&amp;&amp;</operator> <name>that_present_options</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>options</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetClassName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetClassName</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>className</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetOptions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetOptions</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>options</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"CompactionStrategyConfig("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"className:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>className</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"options:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// check for required fields</comment>
    <comment type="line">// check for sub-struct validity</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CompactionStrategyConfigStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>CompactionStrategyConfigStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>CompactionStrategyConfigStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CompactionStrategyConfigStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>CompactionStrategyConfig</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// CLASS_NAME</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>className</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setClassNameIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// OPTIONS</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>MAP</name></name></expr>)</condition> <block>{<block_content>
              <block>{<block_content>
                <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map154</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map154</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>_i155</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i155</name> <operator>&lt;</operator> <name><name>_map154</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i155</name></expr></incr>)</control>
                <block>{<block_content>
                  <decl_stmt><decl><type><name>String</name></type> <name>_key156</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>String</name></type> <name>_val157</name></decl>;</decl_stmt>
                  <expr_stmt><expr><name>_key156</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>_val157</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key156</name></expr></argument>, <argument><expr><name>_val157</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setOptionsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>className</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>CLASS_NAME_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>options</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>OPTIONS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter158</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
          <block>{<block_content>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter158</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter158</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CompactionStrategyConfigTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>CompactionStrategyConfigTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>CompactionStrategyConfigTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CompactionStrategyConfigTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>CompactionStrategyConfig</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetClassName</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetOptions</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>_iter159</name> <range>: <expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
          <block>{<block_content>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter159</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>_iter159</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>className</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setClassNameIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <block>{<block_content>
          <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name></type> <name>_map160</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMap</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>options</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>_map160</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>_i161</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i161</name> <operator>&lt;</operator> <name><name>_map160</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>_i161</name></expr></incr>)</control>
          <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>_key162</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>_val163</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>_key162</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>_val163</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>_key162</name></expr></argument>, <argument><expr><name>_val163</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setOptionsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>python</name><operator>/</operator><name>AccumuloProxy</name><operator>-</operator><name>remote</name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>python</name><operator>/</operator><name>AccumuloProxy</name><operator>-</operator><name>remote</name>
<name>index</name> <name>b4292a2a0</name><operator>..</operator><name>a8d754212</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>python</name><operator>/</operator><name>AccumuloProxy</name><operator>-</operator><name>remote</name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>python</name><operator>/</operator><name>AccumuloProxy</name><operator>-</operator><name>remote</name>
@@ <operator>-</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <if_stmt><if>if len<condition>(<expr><name><name>sys</name><operator>.</operator><name>argv</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>&lt;=</operator> <literal type="number">1</literal> <name>or</name> <name><name>sys</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'--help'</literal><operator>:</operator>
   <name>print</name> <literal type="char">'  void checkIteratorConflicts(string login, string tableName, IteratorSetting setting,  scopes)'</literal>
   <name>print</name> <literal type="char">'  void clearLocatorCache(string login, string tableName)'</literal>
   <name>print</name> <literal type="char">'  void cloneTable(string login, string tableName, string newTableName, bool flush,  propertiesToSet,  propertiesToExclude)'</literal>
  <name>print</name> <literal type="char">'  void compactTable(string login, string tableName, string startRow, string endRow,  iterators, bool flush, bool wait)'</literal>
  <name>print</name> <literal type="char">'  void compactTable(string login, string tableName, string startRow, string endRow,  iterators, bool flush, bool wait, CompactionStrategyConfig compactionStrategy)'</literal>
   <name>print</name> <literal type="char">'  void cancelCompaction(string login, string tableName)'</literal>
   <name>print</name> <literal type="char">'  void createTable(string login, string tableName, bool versioningIter, TimeType type)'</literal>
   <name>print</name> <literal type="char">'  void deleteTable(string login, string tableName)'</literal>
@@ <operator>-</operator><literal type="number">208</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">208</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>elif</name> <name>cmd</name> <operator>==</operator> <literal type="char">'cloneTable'</literal><operator>:</operator>
   <call><name><name>pp</name><operator>.</operator><name>pprint</name></name><argument_list>(<argument><expr><call><name><name>client</name><operator>.</operator><name>cloneTable</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>eval</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>eval</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>eval</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,)</argument_list></call></expr></argument>)</argument_list></call>
 
 <name>elif</name> <name>cmd</name> <operator>==</operator> <literal type="char">'compactTable'</literal><operator>:</operator></expr></expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if len<condition>(<expr><name>args</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>!=</operator> <literal type="number">7</literal><operator>:</operator>
    <name>print</name> <literal type="char">'compactTable requires 7 args'</literal></expr></expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if len<condition>(<expr><name>args</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>!=</operator> <literal type="number">8</literal><operator>:</operator>
    <name>print</name> <literal type="char">'compactTable requires 8 args'</literal>
     <call><name><name>sys</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
  <call><name><name>pp</name><operator>.</operator><name>pprint</name></name><argument_list>(<argument><expr><call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>eval</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>eval</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>eval</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,)</argument_list></call></expr></argument>)</argument_list></call>
  <call><name><name>pp</name><operator>.</operator><name>pprint</name></name><argument_list>(<argument><expr><call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>eval</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>eval</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>eval</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>eval</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,)</argument_list></call></expr></argument>)</argument_list></call>
 
 <name>elif</name> <name>cmd</name> <operator>==</operator> <literal type="char">'cancelCompaction'</literal><operator>:</operator></expr></expr_stmt></block_content></block></if></if_stmt>
   <if_stmt><if>if len<condition>(<expr><name>args</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>!=</operator> <literal type="number">2</literal><operator>:</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>python</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>py</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>python</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>py</name></name>
<name>index</name> <literal type="number">37dda0fb5</literal><operator>..</operator><literal type="number">2805fff95</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>python</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>py</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>python</name><operator>/</operator><name><name>AccumuloProxy</name><operator>.</operator><name>py</name></name>
@@ <operator>-</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>Iface</name><operator>:</operator>
     <literal type="string">"""</literal>
     <name>pass</name>
 
  <name>def</name> <call><name>compactTable</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call><operator>:</operator>
  <name>def</name> <call><name>compactTable</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call><operator>:</operator>
     <literal type="string">"""</literal>
     <name>Parameters</name><operator>:</operator>
      <operator>-</operator> <name>login</name>
@@ <operator>-</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">108</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>Iface</name><operator>:</operator>
      <operator>-</operator> <name>iterators</name>
      <operator>-</operator> <name>flush</name>
      <operator>-</operator> <name>wait</name>
     <operator>-</operator> <name>compactionStrategy</name>
     <literal type="string">"""</literal>
     <name>pass</name>
 
@@ <operator>-</operator><literal type="number">986</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">987</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <call><name>Client</name><argument_list>(<argument><expr><name>Iface</name></expr></argument>)</argument_list></call><operator>:</operator>
       <name>raise</name> <name><name>result</name><operator>.</operator><name>ouch4</name></name></expr></expr_stmt></block_content></block></if></if_stmt>
     <return>return
 
  <expr><name>def</name> <call><name>compactTable</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call><operator>:</operator>
  <name>def</name> <call><name>compactTable</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call><operator>:</operator>
     <literal type="string">"""</literal>
     <name>Parameters</name><operator>:</operator>
      <operator>-</operator> <name>login</name>
@@ <operator>-</operator><literal type="number">996</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">997</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <name>class</name> <call><name>Client</name><argument_list>(<argument><expr><name>Iface</name></expr></argument>)</argument_list></call><operator>:</operator>
      <operator>-</operator> <name>iterators</name>
      <operator>-</operator> <name>flush</name>
      <operator>-</operator> <name>wait</name>
     <operator>-</operator> <name>compactionStrategy</name>
     <literal type="string">"""</literal>
    <call><name><name>self</name><operator>.</operator><name>send_compactTable</name></name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call>
    <call><name><name>self</name><operator>.</operator><name>send_compactTable</name></name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call>
     <call><name><name>self</name><operator>.</operator><name>recv_compactTable</name></name><argument_list>()</argument_list></call>
 
  <name>def</name> <call><name>send_compactTable</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call><operator>:</operator>
  <name>def</name> <call><name>send_compactTable</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call><operator>:</operator>
     <call><name><name>self</name><operator>.</operator><name>_oprot</name><operator>.</operator><name>writeMessageBegin</name></name><argument_list>(<argument><expr><literal type="char">'compactTable'</literal></expr></argument>, <argument><expr><name><name>TMessageType</name><operator>.</operator><name>CALL</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>.</operator><name>_seqid</name></name></expr></argument>)</argument_list></call>
     <name>args</name> <operator>=</operator> <call><name>compactTable_args</name><argument_list>()</argument_list></call>
     <name><name>args</name><operator>.</operator><name>login</name></name> <operator>=</operator> <name>login</name>
@@ <operator>-</operator><literal type="number">1010</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1012</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <call><name>Client</name><argument_list>(<argument><expr><name>Iface</name></expr></argument>)</argument_list></call><operator>:</operator>
     <name><name>args</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <name>iterators</name>
     <name><name>args</name><operator>.</operator><name>flush</name></name> <operator>=</operator> <name>flush</name>
     <name><name>args</name><operator>.</operator><name>wait</name></name> <operator>=</operator> <name>wait</name>
    <name><name>args</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <name>compactionStrategy</name>
     <call><name><name>args</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>_oprot</name></name></expr></argument>)</argument_list></call>
     <call><name><name>self</name><operator>.</operator><name>_oprot</name><operator>.</operator><name>writeMessageEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>self</name><operator>.</operator><name>_oprot</name><operator>.</operator><name>trans</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">3796</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">3799</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <call><name>Processor</name><argument_list>(<argument><expr><name>Iface</name></expr></argument>, <argument><expr><name>TProcessor</name></expr></argument>)</argument_list></call><operator>:</operator>
     <call><name><name>iprot</name><operator>.</operator><name>readMessageEnd</name></name><argument_list>()</argument_list></call>
     <name>result</name> <operator>=</operator> <call><name>compactTable_result</name><argument_list>()</argument_list></call></expr></return>
     <try>try:
      <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>_handler</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>login</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>iterators</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call>
      <call><name><name>self</name><operator>.</operator><name>_handler</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>login</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>iterators</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>wait</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>compactionStrategy</name></name></expr></argument>)</argument_list></call>
     <name>except</name> <name>AccumuloSecurityException</name></expr><operator>,</operator> <expr><name>ouch1</name><operator>:</operator>
       <name><name>result</name><operator>.</operator><name>ouch1</name></name> <operator>=</operator> <name>ouch1</name>
     <name>except</name> <name>TableNotFoundException</name></expr><operator>,</operator> <expr><name>ouch2</name><operator>:</operator>
@@ <operator>-</operator><literal type="number">4985</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">4988</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>login_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">2</literal><operator>:</operator></expr></expr_stmt></try>
         <if_stmt><if>if ftype == TType.MAP:
           self.loginProperties = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype136</name><operator>,</operator> <name>_vtype137</name><operator>,</operator> <name>_size135</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i139 in xrange<control>(<init><expr><name>_size135</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key140</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val141</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>loginProperties</name><index>[<expr><name>_key140</name></expr>]</index></name> <operator>=</operator> <call><name>_val141</name>
          <argument_list>(<argument><expr><name>_ktype145</name></expr></argument>, <argument><expr><name>_vtype146</name></expr></argument>, <argument><expr><name>_size144</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i148 in xrange<control>(<init><expr><name>_size144</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key149</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val150</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>loginProperties</name><index>[<expr><name>_key149</name></expr>]</index></name> <operator>=</operator> <name>_val150</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">5010</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">5013</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>login_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.loginProperties is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'loginProperties'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>loginProperties</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter142<operator>,</operator><macro><name>viter143</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter142</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter143</name></expr></argument>)</argument_list></call></expr></expr_stmt></for>
      <for>for kiter151<operator>,</operator><macro><name>viter152</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>loginProperties</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter151</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter152</name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">5329</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">5332</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>addSplits_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">3</literal><operator>:</operator></expr></expr_stmt></for>
         <if_stmt><if>if ftype == TType.SET:
           self.splits = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype147</name><operator>,</operator> <name>_size144</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i148 in xrange<control>(<init><expr><name>_size144</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem149</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>splits</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem149</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype156</name><operator>,</operator> <name>_size153</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i157 in xrange<control>(<init><expr><name>_size153</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem158</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>splits</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem158</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">5357</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">5360</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>addSplits_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.splits is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'splits'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>splits</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter150 in self.splits:
        oprot.writeString<control>(<init><expr><name>iter150</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter159 in self.splits:
        oprot.writeString<control>(<init><expr><name>iter159</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">5517</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">5520</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>attachIterator_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">4</literal><operator>:</operator></expr></expr_stmt></block_content></block></for></block_content></block></for>
         <if_stmt><if>if ftype == TType.SET:
           self.scopes = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype154</name><operator>,</operator> <name>_size151</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i155 in xrange<control>(<init><expr><name>_size151</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem156</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem156</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype163</name><operator>,</operator> <name>_size160</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i164 in xrange<control>(<init><expr><name>_size160</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem165</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem165</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">5549</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">5552</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>attachIterator_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.scopes is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'scopes'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>scopes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter157 in self.scopes:
        oprot.writeI32<control>(<init><expr><name>iter157</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter166 in self.scopes:
        oprot.writeI32<control>(<init><expr><name>iter166</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">5709</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">5712</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>checkIteratorConflicts_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">4</literal><operator>:</operator></expr></expr_stmt></block_content></block></for></block_content></block></for>
         <if_stmt><if>if ftype == TType.SET:
           self.scopes = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype161</name><operator>,</operator> <name>_size158</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i162 in xrange<control>(<init><expr><name>_size158</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem163</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem163</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype170</name><operator>,</operator> <name>_size167</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i171 in xrange<control>(<init><expr><name>_size167</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem172</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem172</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">5741</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">5744</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>checkIteratorConflicts_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.scopes is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'scopes'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>scopes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter164 in self.scopes:
        oprot.writeI32<control>(<init><expr><name>iter164</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter173 in self.scopes:
        oprot.writeI32<control>(<init><expr><name>iter173</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">6044</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">6047</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@ <name>class</name> <name>cloneTable_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">5</literal><operator>:</operator></expr></expr_stmt></block_content></block></for></block_content></block></for>
         <if_stmt><if>if ftype == TType.MAP:
           self.propertiesToSet = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype166</name><operator>,</operator> <name>_vtype167</name><operator>,</operator> <name>_size165</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i169 in xrange<control>(<init><expr><name>_size165</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key170</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val171</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>propertiesToSet</name><index>[<expr><name>_key170</name></expr>]</index></name> <operator>=</operator> <call><name>_val171</name>
          <argument_list>(<argument><expr><name>_ktype175</name></expr></argument>, <argument><expr><name>_vtype176</name></expr></argument>, <argument><expr><name>_size174</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i178 in xrange<control>(<init><expr><name>_size174</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key179</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val180</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>propertiesToSet</name><index>[<expr><name>_key179</name></expr>]</index></name> <operator>=</operator> <name>_val180</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">6</literal><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
         <if_stmt><if>if ftype == TType.SET:
           self.propertiesToExclude = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype175</name><operator>,</operator> <name>_size172</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i176 in xrange<control>(<init><expr><name>_size172</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem177</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>propertiesToExclude</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem177</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype184</name><operator>,</operator> <name>_size181</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i185 in xrange<control>(<init><expr><name>_size181</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem186</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>propertiesToExclude</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem186</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">6091</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">6094</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>class</name> <name>cloneTable_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.propertiesToSet is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'propertiesToSet'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>propertiesToSet</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter178<operator>,</operator><macro><name>viter179</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter178</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter179</name></expr></argument>)</argument_list></call></expr></expr_stmt></for>
      <for>for kiter187<operator>,</operator><macro><name>viter188</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>propertiesToSet</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter187</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter188</name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></for>
     <if_stmt><if>if self.propertiesToExclude is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'propertiesToExclude'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>propertiesToExclude</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter180 in self.propertiesToExclude:
        oprot.writeString<control>(<init><expr><name>iter180</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter189 in self.propertiesToExclude:
        oprot.writeString<control>(<init><expr><name>iter189</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">6231</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6234</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>compactTable_args</name><operator>:</operator>
    <operator>-</operator> <name>iterators</name>
    <operator>-</operator> <name>flush</name>
    <operator>-</operator> <name>wait</name>
   <operator>-</operator> <name>compactionStrategy</name>
   <literal type="string">"""</literal>
 
   <name>thrift_spec</name> <operator>=</operator> <operator>(</operator>
@@ <operator>-</operator><literal type="number">6242</literal><operator>,</operator><literal type="number">9</literal> <operator>+</operator><literal type="number">6246</literal><operator>,</operator><literal type="number">10</literal> @@ class <name>compactTable_args</name><operator>:</operator>
     <operator>(</operator><literal type="number">5</literal><operator>,</operator> <name><name>TType</name><operator>.</operator><name>LIST</name></name><operator>,</operator> <literal type="char">'iterators'</literal><operator>,</operator> <operator>(</operator><name><name>TType</name><operator>.</operator><name>STRUCT</name></name><operator>,</operator><operator>(</operator><name>IteratorSetting</name><operator>,</operator> <name><name>IteratorSetting</name><operator>.</operator><name>thrift_spec</name></name><operator>)</operator><operator>)</operator><operator>,</operator> <name>None</name><operator>,</operator> <operator>)</operator><operator>,</operator> <operator>#</operator> <literal type="number">5</literal>
     <operator>(</operator><literal type="number">6</literal><operator>,</operator> <name><name>TType</name><operator>.</operator><name>BOOL</name></name><operator>,</operator> <literal type="char">'flush'</literal><operator>,</operator> <name>None</name><operator>,</operator> <name>None</name><operator>,</operator> <operator>)</operator><operator>,</operator> <operator>#</operator> <literal type="number">6</literal>
     <operator>(</operator><literal type="number">7</literal><operator>,</operator> <name><name>TType</name><operator>.</operator><name>BOOL</name></name><operator>,</operator> <literal type="char">'wait'</literal><operator>,</operator> <name>None</name><operator>,</operator> <name>None</name><operator>,</operator> <operator>)</operator><operator>,</operator> <operator>#</operator> <literal type="number">7</literal>
    <operator>(</operator><literal type="number">8</literal><operator>,</operator> <name><name>TType</name><operator>.</operator><name>STRUCT</name></name><operator>,</operator> <literal type="char">'compactionStrategy'</literal><operator>,</operator> <operator>(</operator><name>CompactionStrategyConfig</name><operator>,</operator> <name><name>CompactionStrategyConfig</name><operator>.</operator><name>thrift_spec</name></name><operator>)</operator><operator>,</operator> <name>None</name><operator>,</operator> <operator>)</operator><operator>,</operator> <operator>#</operator> <literal type="number">8</literal>
   <operator>)</operator>
 
  <name>def</name> <call><name>__init__</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>login</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>tableName</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>startRow</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>endRow</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>iterators</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>flush</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>wait</name><operator>=</operator><name>None</name></expr></argument>,)</argument_list></call><operator>:</operator>
  <name>def</name> <call><name>__init__</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>login</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>tableName</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>startRow</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>endRow</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>iterators</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>flush</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>wait</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>compactionStrategy</name><operator>=</operator><name>None</name></expr></argument>,)</argument_list></call><operator>:</operator>
     <name><name>self</name><operator>.</operator><name>login</name></name> <operator>=</operator> <name>login</name>
     <name><name>self</name><operator>.</operator><name>tableName</name></name> <operator>=</operator> <name>tableName</name>
     <name><name>self</name><operator>.</operator><name>startRow</name></name> <operator>=</operator> <name>startRow</name>
@@ <operator>-</operator><literal type="number">6252</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6257</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>compactTable_args</name><operator>:</operator>
     <name><name>self</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <name>iterators</name>
     <name><name>self</name><operator>.</operator><name>flush</name></name> <operator>=</operator> <name>flush</name>
     <name><name>self</name><operator>.</operator><name>wait</name></name> <operator>=</operator> <name>wait</name>
    <name><name>self</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <name>compactionStrategy</name>
 
   <name>def</name> <call><name>read</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>iprot</name></expr></argument>)</argument_list></call><operator>:</operator></expr></expr_stmt></block_content></block></for></block_content></block></for>
     <if_stmt><if>if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance<condition>(<expr><name><name>iprot</name><operator>.</operator><name>trans</name></name></expr><operator>,</operator> <expr><name><name>TTransport</name><operator>.</operator><name>CReadableTransport</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>and</name> <name><name>self</name><operator>.</operator><name>thrift_spec</name></name> <name>is</name> <name>not</name> <name>None</name> <name>and</name> <name>fastbinary</name> <name>is</name> <name>not</name> <name>None</name><operator>:</operator>
@@ <operator>-</operator><literal type="number">6285</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">6291</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>compactTable_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">5</literal><operator>:</operator></expr></expr_stmt></block_content></block></if></if_stmt>
         <if_stmt><if>if ftype == TType.LIST:
           self.iterators = []
          <condition>(<expr><name>_etype184</name></expr><operator>,</operator> <expr><name>_size181</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i185 in xrange<control>(<init><expr><name>_size181</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem186</name> <operator>=</operator> <call><name>IteratorSetting</name><argument_list>()</argument_list></call>
            <call><name><name>_elem186</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <call><name><name>self</name><operator>.</operator><name>iterators</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem186</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype193</name><operator>,</operator> <name>_size190</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
          <for>for _i194 in xrange<control>(<init><expr><name>_size190</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem195</name> <operator>=</operator> <call><name>IteratorSetting</name><argument_list>()</argument_list></call>
            <call><name><name>_elem195</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <call><name><name>self</name><operator>.</operator><name>iterators</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem195</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">6303</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6309</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <name>class</name> <name>compactTable_args</name><operator>:</operator>
           <name><name>self</name><operator>.</operator><name>wait</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
      <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">8</literal><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if ftype == TType.STRUCT:
          self.compactionStrategy = CompactionStrategyConfig<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>compactionStrategy</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>:
          <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></else></if_stmt>
       <if_stmt><else>else<block type="pseudo"><block_content>:
         <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
       <call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">6332</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">6344</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>compactTable_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.iterators is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'iterators'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>LIST</name></name></expr><operator>,</operator> <expr><literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>iterators</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter187 in self.iterators:
        iter187.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter196 in self.iterators:
        iter196.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for></block_content></block></for>
     <if_stmt><if>if self.flush is not None:
@@ -6344<operator>,</operator><expr_stmt><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">6356</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>compactTable_args</name><operator>:</operator>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><literal type="char">'wait'</literal></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>BOOL</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeBool</name></name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></if></if_stmt>
    <if_stmt><if>if self.compactionStrategy is not None:
      oprot.writeFieldBegin<condition>(<expr><literal type="char">'compactionStrategy'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr><operator>,</operator> <expr><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>compactionStrategy</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call>
      <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call>
 
@@ <operator>-</operator><literal type="number">7533</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">7549</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>getDiskUsage_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">2</literal><operator>:</operator></expr></expr_stmt></block_content></block></if></if_stmt>
         <if_stmt><if>if ftype == TType.SET:
           self.tables = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype191</name><operator>,</operator> <name>_size188</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i192 in xrange<control>(<init><expr><name>_size188</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem193</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem193</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype200</name><operator>,</operator> <name>_size197</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i201 in xrange<control>(<init><expr><name>_size197</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem202</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem202</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">7557</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">7573</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>getDiskUsage_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.tables is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'tables'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>tables</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter194 in self.tables:
        oprot.writeString<control>(<init><expr><name>iter194</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter203 in self.tables:
        oprot.writeString<control>(<init><expr><name>iter203</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">7613</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">7629</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>getDiskUsage_result</name><operator>:</operator></expr></expr_stmt></block_content></block></for></block_content></block></for>
       <if_stmt><if>if fid == 0:
         if ftype == TType.LIST:
           self.success = []
          <condition>(<expr><name>_etype198</name></expr><operator>,</operator> <expr><name>_size195</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i199 in xrange<control>(<init><expr><name>_size195</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem200</name> <operator>=</operator> <call><name>DiskUsage</name><argument_list>()</argument_list></call>
            <call><name><name>_elem200</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem200</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype207</name><operator>,</operator> <name>_size204</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
          <for>for _i208 in xrange<control>(<init><expr><name>_size204</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem209</name> <operator>=</operator> <call><name>DiskUsage</name><argument_list>()</argument_list></call>
            <call><name><name>_elem209</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem209</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">7652</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">7668</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>getDiskUsage_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>LIST</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter201 in self.success:
        iter201.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter210 in self.success:
        iter210.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for></block_content></block></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -7792<operator>,</operator><expr_stmt><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">7808</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>class</name> <name>getLocalityGroups_result</name><operator>:</operator></expr></expr_stmt></if></if_stmt>
       <if_stmt><if>if fid == 0:
         if ftype == TType.MAP:
           self.success = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype203</name><operator>,</operator> <name>_vtype204</name><operator>,</operator> <name>_size202</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i206 in xrange<control>(<init><expr><name>_size202</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key207</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val208</name> <operator>=</operator> <call><name>set</name><argument_list>()</argument_list></call>
            <operator>(</operator><name>_etype212</name><operator>,</operator> <name>_size209</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
            <for>for _i213 in xrange<control>(<init><expr><name>_size209</name></expr></init>)</control><block type="pseudo"><block_content>:
              <expr_stmt><expr><name>_elem214</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
              <expr_stmt><expr><call><name><name>_val208</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem214</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_ktype212</name><operator>,</operator> <name>_vtype213</name><operator>,</operator> <name>_size211</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i215 in xrange<control>(<init><expr><name>_size211</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key216</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val217</name> <operator>=</operator> <call><name>set</name><argument_list>()</argument_list></call>
            <operator>(</operator><name>_etype221</name><operator>,</operator> <name>_size218</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
            <for>for _i222 in xrange<control>(<init><expr><name>_size218</name></expr></init>)</control><block type="pseudo"><block_content>:
              <expr_stmt><expr><name>_elem223</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
              <expr_stmt><expr><call><name><name>_val217</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem223</name></expr></argument>)</argument_list></call>
             <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call>
            <name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key207</name></expr>]</index></name> <operator>=</operator> <name>_val208</name>
            <name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key216</name></expr>]</index></name> <operator>=</operator> <name>_val217</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">7836</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">7852</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>getLocalityGroups_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter215<operator>,</operator><macro><name>viter216</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter215</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name>viter216</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></for>
        <for>for iter217 in viter216:
          oprot.writeString<control>(<init><expr><name>iter217</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for kiter224<operator>,</operator><macro><name>viter225</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter224</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name>viter225</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></for></block_content></block></for>
        <for>for iter226 in viter225:
          oprot.writeString<control>(<init><expr><name>iter226</name></expr></init>)</control><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">8123</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">8139</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>getMaxRow_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">3</literal><operator>:</operator></expr></expr_stmt></block_content></block></for>
         <if_stmt><if>if ftype == TType.SET:
           self.auths = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype221</name><operator>,</operator> <name>_size218</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i222 in xrange<control>(<init><expr><name>_size218</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem223</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>auths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem223</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype230</name><operator>,</operator> <name>_size227</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i231 in xrange<control>(<init><expr><name>_size227</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem232</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>auths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem232</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">8171</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">8187</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>getMaxRow_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.auths is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'auths'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>auths</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter224 in self.auths:
        oprot.writeString<control>(<init><expr><name>iter224</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter233 in self.auths:
        oprot.writeString<control>(<init><expr><name>iter233</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for></block_content></block></for>
     <if_stmt><if>if self.startRow is not None:
@@ -8413<operator>,</operator><expr_stmt><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">8429</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>getTableProperties_result</name><operator>:</operator></expr></expr_stmt></if></if_stmt>
       <if_stmt><if>if fid == 0:
         if ftype == TType.MAP:
           self.success = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype226</name><operator>,</operator> <name>_vtype227</name><operator>,</operator> <name>_size225</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i229 in xrange<control>(<init><expr><name>_size225</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key230</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val231</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key230</name></expr>]</index></name> <operator>=</operator> <call><name>_val231</name>
          <argument_list>(<argument><expr><name>_ktype235</name></expr></argument>, <argument><expr><name>_vtype236</name></expr></argument>, <argument><expr><name>_size234</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i238 in xrange<control>(<init><expr><name>_size234</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key239</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val240</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key239</name></expr>]</index></name> <operator>=</operator> <name>_val240</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">8452</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">8468</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>getTableProperties_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter232<operator>,</operator><macro><name>viter233</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter232</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter233</name></expr></argument>)</argument_list></call></expr></expr_stmt></for>
      <for>for kiter241<operator>,</operator><macro><name>viter242</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter241</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter242</name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -8971<operator>,</operator><expr_stmt><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">8987</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>listSplits_result</name><operator>:</operator></expr></expr_stmt></if></if_stmt>
       <if_stmt><if>if fid == 0:
         if ftype == TType.LIST:
           self.success = []
          <condition>(<expr><name>_etype237</name></expr><operator>,</operator> <expr><name>_size234</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i238 in xrange<control>(<init><expr><name>_size234</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem239</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem239</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype246</name><operator>,</operator> <name>_size243</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i247 in xrange<control>(<init><expr><name>_size243</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem248</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem248</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">9009</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">9025</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>listSplits_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>LIST</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter240 in self.success:
        oprot.writeString<control>(<init><expr><name>iter240</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter249 in self.success:
        oprot.writeString<control>(<init><expr><name>iter249</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for></block_content></block></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -9128<operator>,</operator><expr_stmt><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">9144</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>listTables_result</name><operator>:</operator></expr></expr_stmt></if></if_stmt>
       <if_stmt><if>if fid == 0:
         if ftype == TType.SET:
           self.success = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype244</name><operator>,</operator> <name>_size241</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i245 in xrange<control>(<init><expr><name>_size241</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem246</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem246</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype253</name><operator>,</operator> <name>_size250</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i254 in xrange<control>(<init><expr><name>_size250</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem255</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem255</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">9148</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">9164</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>listTables_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter247 in self.success:
        oprot.writeString<control>(<init><expr><name>iter247</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter256 in self.success:
        oprot.writeString<control>(<init><expr><name>iter256</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">9276</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">9292</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>class</name> <name>listIterators_result</name><operator>:</operator></expr></expr_stmt></block_content></block></for></block_content></block></for>
       <if_stmt><if>if fid == 0:
         if ftype == TType.MAP:
           self.success = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype249</name><operator>,</operator> <name>_vtype250</name><operator>,</operator> <name>_size248</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i252 in xrange<control>(<init><expr><name>_size248</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key253</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val254</name> <operator>=</operator> <call><name>set</name><argument_list>()</argument_list></call>
            <operator>(</operator><name>_etype258</name><operator>,</operator> <name>_size255</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
            <for>for _i259 in xrange<control>(<init><expr><name>_size255</name></expr></init>)</control><block type="pseudo"><block_content>:
              <expr_stmt><expr><name>_elem260</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
              <expr_stmt><expr><call><name><name>_val254</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem260</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_ktype258</name><operator>,</operator> <name>_vtype259</name><operator>,</operator> <name>_size257</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i261 in xrange<control>(<init><expr><name>_size257</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key262</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val263</name> <operator>=</operator> <call><name>set</name><argument_list>()</argument_list></call>
            <operator>(</operator><name>_etype267</name><operator>,</operator> <name>_size264</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
            <for>for _i268 in xrange<control>(<init><expr><name>_size264</name></expr></init>)</control><block type="pseudo"><block_content>:
              <expr_stmt><expr><name>_elem269</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
              <expr_stmt><expr><call><name><name>_val263</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem269</name></expr></argument>)</argument_list></call>
             <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call>
            <name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key253</name></expr>]</index></name> <operator>=</operator> <name>_val254</name>
            <name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key262</name></expr>]</index></name> <operator>=</operator> <name>_val263</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">9320</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">9336</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>listIterators_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter261<operator>,</operator><macro><name>viter262</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter261</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name>viter262</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></for>
        <for>for iter263 in viter262:
          oprot.writeI32<control>(<init><expr><name>iter263</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for kiter270<operator>,</operator><macro><name>viter271</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter270</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name>viter271</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></for></block_content></block></for>
        <for>for iter272 in viter271:
          oprot.writeI32<control>(<init><expr><name>iter272</name></expr></init>)</control><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">9464</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">9480</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>listConstraints_result</name><operator>:</operator></expr></expr_stmt></block_content></block></for>
       <if_stmt><if>if fid == 0:
         if ftype == TType.MAP:
           self.success = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype265</name><operator>,</operator> <name>_vtype266</name><operator>,</operator> <name>_size264</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i268 in xrange<control>(<init><expr><name>_size264</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key269</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val270</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key269</name></expr>]</index></name> <operator>=</operator> <call><name>_val270</name>
          <argument_list>(<argument><expr><name>_ktype274</name></expr></argument>, <argument><expr><name>_vtype275</name></expr></argument>, <argument><expr><name>_size273</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i277 in xrange<control>(<init><expr><name>_size273</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key278</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val279</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key278</name></expr>]</index></name> <operator>=</operator> <name>_val279</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">9503</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">9519</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>listConstraints_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter271<operator>,</operator><macro><name>viter272</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter271</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><name>viter272</name></expr></argument>)</argument_list></call></expr></expr_stmt></for>
      <for>for kiter280<operator>,</operator><macro><name>viter281</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter280</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><name>viter281</name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -10284<operator>,</operator><expr_stmt><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">10300</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>removeIterator_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">4</literal><operator>:</operator></expr></expr_stmt></if></if_stmt>
         <if_stmt><if>if ftype == TType.SET:
           self.scopes = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype276</name><operator>,</operator> <name>_size273</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i277 in xrange<control>(<init><expr><name>_size273</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem278</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem278</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype285</name><operator>,</operator> <name>_size282</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i286 in xrange<control>(<init><expr><name>_size282</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem287</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>scopes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem287</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">10316</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">10332</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>removeIterator_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.scopes is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'scopes'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>scopes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter279 in self.scopes:
        oprot.writeI32<control>(<init><expr><name>iter279</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter288 in self.scopes:
        oprot.writeI32<control>(<init><expr><name>iter288</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">10822</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">10838</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <name>class</name> <name>setLocalityGroups_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">3</literal><operator>:</operator></expr></expr_stmt></block_content></block></for></block_content></block></for>
         <if_stmt><if>if ftype == TType.MAP:
           self.groups = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype281</name><operator>,</operator> <name>_vtype282</name><operator>,</operator> <name>_size280</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i284 in xrange<control>(<init><expr><name>_size280</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key285</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val286</name> <operator>=</operator> <call><name>set</name><argument_list>()</argument_list></call>
            <operator>(</operator><name>_etype290</name><operator>,</operator> <name>_size287</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
            <for>for _i291 in xrange<control>(<init><expr><name>_size287</name></expr></init>)</control><block type="pseudo"><block_content>:
              <expr_stmt><expr><name>_elem292</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
              <expr_stmt><expr><call><name><name>_val286</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem292</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_ktype290</name><operator>,</operator> <name>_vtype291</name><operator>,</operator> <name>_size289</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i293 in xrange<control>(<init><expr><name>_size289</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key294</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val295</name> <operator>=</operator> <call><name>set</name><argument_list>()</argument_list></call>
            <operator>(</operator><name>_etype299</name><operator>,</operator> <name>_size296</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
            <for>for _i300 in xrange<control>(<init><expr><name>_size296</name></expr></init>)</control><block type="pseudo"><block_content>:
              <expr_stmt><expr><name>_elem301</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
              <expr_stmt><expr><call><name><name>_val295</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem301</name></expr></argument>)</argument_list></call>
             <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call>
            <name><name>self</name><operator>.</operator><name>groups</name><index>[<expr><name>_key285</name></expr>]</index></name> <operator>=</operator> <name>_val286</name>
            <name><name>self</name><operator>.</operator><name>groups</name><index>[<expr><name>_key294</name></expr>]</index></name> <operator>=</operator> <name>_val295</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">10856</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">10872</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>setLocalityGroups_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.groups is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'groups'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>groups</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter293<operator>,</operator><macro><name>viter294</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>groups</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter293</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name>viter294</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></for>
        <for>for iter295 in viter294:
          oprot.writeString<control>(<init><expr><name>iter295</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for kiter302<operator>,</operator><macro><name>viter303</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>groups</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter302</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name>viter303</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></for></block_content></block></for>
        <for>for iter304 in viter303:
          oprot.writeString<control>(<init><expr><name>iter304</name></expr></init>)</control><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">11283</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">11299</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>splitRangeByTablets_result</name><operator>:</operator></expr></expr_stmt></block_content></block></for>
       <if_stmt><if>if fid == 0:
         if ftype == TType.SET:
           self.success = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype299</name><operator>,</operator> <name>_size296</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i300 in xrange<control>(<init><expr><name>_size296</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem301</name> <operator>=</operator> <call><name>Range</name><argument_list>()</argument_list></call>
            <call><name><name>_elem301</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem301</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype308</name><operator>,</operator> <name>_size305</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
          <for>for _i309 in xrange<control>(<init><expr><name>_size305</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem310</name> <operator>=</operator> <call><name>Range</name><argument_list>()</argument_list></call>
            <call><name><name>_elem310</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem310</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">11322</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">11338</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>splitRangeByTablets_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter302 in self.success:
        iter302.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter311 in self.success:
        iter311.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for></block_content></block></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -11572<operator>,</operator><expr_stmt><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">11588</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>tableIdMap_result</name><operator>:</operator></expr></expr_stmt></if></if_stmt>
       <if_stmt><if>if fid == 0:
         if ftype == TType.MAP:
           self.success = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype304</name><operator>,</operator> <name>_vtype305</name><operator>,</operator> <name>_size303</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i307 in xrange<control>(<init><expr><name>_size303</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key308</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val309</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key308</name></expr>]</index></name> <operator>=</operator> <call><name>_val309</name>
          <argument_list>(<argument><expr><name>_ktype313</name></expr></argument>, <argument><expr><name>_vtype314</name></expr></argument>, <argument><expr><name>_size312</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i316 in xrange<control>(<init><expr><name>_size312</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key317</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val318</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key317</name></expr>]</index></name> <operator>=</operator> <name>_val318</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">11593</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">11609</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>tableIdMap_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter310<operator>,</operator><macro><name>viter311</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter310</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter311</name></expr></argument>)</argument_list></call></expr></expr_stmt></for>
      <for>for kiter319<operator>,</operator><macro><name>viter320</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter319</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter320</name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">12059</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">12075</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>getActiveScans_result</name><operator>:</operator></expr></expr_stmt></for>
       <if_stmt><if>if fid == 0:
         if ftype == TType.LIST:
           self.success = []
          <condition>(<expr><name>_etype315</name></expr><operator>,</operator> <expr><name>_size312</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i316 in xrange<control>(<init><expr><name>_size312</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem317</name> <operator>=</operator> <call><name>ActiveScan</name><argument_list>()</argument_list></call>
            <call><name><name>_elem317</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem317</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype324</name><operator>,</operator> <name>_size321</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
          <for>for _i325 in xrange<control>(<init><expr><name>_size321</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem326</name> <operator>=</operator> <call><name>ActiveScan</name><argument_list>()</argument_list></call>
            <call><name><name>_elem326</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem326</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">12092</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">12108</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>getActiveScans_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>LIST</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter318 in self.success:
        iter318.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter327 in self.success:
        iter327.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for></block_content></block></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -12225<operator>,</operator><expr_stmt><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">12241</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>getActiveCompactions_result</name><operator>:</operator></expr></expr_stmt></if></if_stmt>
       <if_stmt><if>if fid == 0:
         if ftype == TType.LIST:
           self.success = []
          <condition>(<expr><name>_etype322</name></expr><operator>,</operator> <expr><name>_size319</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i323 in xrange<control>(<init><expr><name>_size319</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem324</name> <operator>=</operator> <call><name>ActiveCompaction</name><argument_list>()</argument_list></call>
            <call><name><name>_elem324</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem324</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype331</name><operator>,</operator> <name>_size328</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
          <for>for _i332 in xrange<control>(<init><expr><name>_size328</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem333</name> <operator>=</operator> <call><name>ActiveCompaction</name><argument_list>()</argument_list></call>
            <call><name><name>_elem333</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem333</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">12258</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">12274</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>getActiveCompactions_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>LIST</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter325 in self.success:
        iter325.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter334 in self.success:
        iter334.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for></block_content></block></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -12379<operator>,</operator><expr_stmt><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">12395</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>getSiteConfiguration_result</name><operator>:</operator></expr></expr_stmt></if></if_stmt>
       <if_stmt><if>if fid == 0:
         if ftype == TType.MAP:
           self.success = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype327</name><operator>,</operator> <name>_vtype328</name><operator>,</operator> <name>_size326</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i330 in xrange<control>(<init><expr><name>_size326</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key331</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val332</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key331</name></expr>]</index></name> <operator>=</operator> <call><name>_val332</name>
          <argument_list>(<argument><expr><name>_ktype336</name></expr></argument>, <argument><expr><name>_vtype337</name></expr></argument>, <argument><expr><name>_size335</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i339 in xrange<control>(<init><expr><name>_size335</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key340</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val341</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key340</name></expr>]</index></name> <operator>=</operator> <name>_val341</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">12412</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">12428</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>getSiteConfiguration_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter333<operator>,</operator><macro><name>viter334</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter333</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter334</name></expr></argument>)</argument_list></call></expr></expr_stmt></for>
      <for>for kiter342<operator>,</operator><macro><name>viter343</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter342</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter343</name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -12534<operator>,</operator><expr_stmt><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">12550</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>getSystemConfiguration_result</name><operator>:</operator></expr></expr_stmt></if></if_stmt>
       <if_stmt><if>if fid == 0:
         if ftype == TType.MAP:
           self.success = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype336</name><operator>,</operator> <name>_vtype337</name><operator>,</operator> <name>_size335</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i339 in xrange<control>(<init><expr><name>_size335</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key340</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val341</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key340</name></expr>]</index></name> <operator>=</operator> <call><name>_val341</name>
          <argument_list>(<argument><expr><name>_ktype345</name></expr></argument>, <argument><expr><name>_vtype346</name></expr></argument>, <argument><expr><name>_size344</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i348 in xrange<control>(<init><expr><name>_size344</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key349</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val350</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key349</name></expr>]</index></name> <operator>=</operator> <name>_val350</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">12567</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">12583</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>getSystemConfiguration_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter342<operator>,</operator><macro><name>viter343</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter342</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter343</name></expr></argument>)</argument_list></call></expr></expr_stmt></for>
      <for>for kiter351<operator>,</operator><macro><name>viter352</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter351</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter352</name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -12683<operator>,</operator><expr_stmt><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">12699</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>getTabletServers_result</name><operator>:</operator></expr></expr_stmt></if></if_stmt>
       <if_stmt><if>if fid == 0:
         if ftype == TType.LIST:
           self.success = []
          <condition>(<expr><name>_etype347</name></expr><operator>,</operator> <expr><name>_size344</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i348 in xrange<control>(<init><expr><name>_size344</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem349</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem349</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype356</name><operator>,</operator> <name>_size353</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i357 in xrange<control>(<init><expr><name>_size353</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem358</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem358</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">12703</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">12719</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>getTabletServers_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>LIST</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter350 in self.success:
        oprot.writeString<control>(<init><expr><name>iter350</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter359 in self.success:
        oprot.writeString<control>(<init><expr><name>iter359</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">13240</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">13256</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>authenticateUser_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">3</literal><operator>:</operator></expr></expr_stmt></block_content></block></for></block_content></block></for>
         <if_stmt><if>if ftype == TType.MAP:
           self.properties = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype352</name><operator>,</operator> <name>_vtype353</name><operator>,</operator> <name>_size351</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i355 in xrange<control>(<init><expr><name>_size351</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key356</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val357</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>properties</name><index>[<expr><name>_key356</name></expr>]</index></name> <operator>=</operator> <call><name>_val357</name>
          <argument_list>(<argument><expr><name>_ktype361</name></expr></argument>, <argument><expr><name>_vtype362</name></expr></argument>, <argument><expr><name>_size360</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i364 in xrange<control>(<init><expr><name>_size360</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key365</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val366</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>properties</name><index>[<expr><name>_key365</name></expr>]</index></name> <operator>=</operator> <name>_val366</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">13269</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">13285</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>authenticateUser_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.properties is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'properties'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter358<operator>,</operator><macro><name>viter359</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>properties</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter358</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter359</name></expr></argument>)</argument_list></call></expr></expr_stmt></for>
      <for>for kiter367<operator>,</operator><macro><name>viter368</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>properties</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter367</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter368</name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">13419</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">13435</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>changeUserAuthorizations_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">3</literal><operator>:</operator></expr></expr_stmt></for>
         <if_stmt><if>if ftype == TType.SET:
           self.authorizations = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype363</name><operator>,</operator> <name>_size360</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i364 in xrange<control>(<init><expr><name>_size360</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem365</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem365</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype372</name><operator>,</operator> <name>_size369</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i373 in xrange<control>(<init><expr><name>_size369</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem374</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>authorizations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem374</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">13447</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">13463</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>changeUserAuthorizations_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.authorizations is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'authorizations'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>authorizations</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter366 in self.authorizations:
        oprot.writeString<control>(<init><expr><name>iter366</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter375 in self.authorizations:
        oprot.writeString<control>(<init><expr><name>iter375</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">14108</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">14124</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>getUserAuthorizations_result</name><operator>:</operator></expr></expr_stmt></block_content></block></for></block_content></block></for>
       <if_stmt><if>if fid == 0:
         if ftype == TType.LIST:
           self.success = []
          <condition>(<expr><name>_etype370</name></expr><operator>,</operator> <expr><name>_size367</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i371 in xrange<control>(<init><expr><name>_size367</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem372</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem372</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype379</name><operator>,</operator> <name>_size376</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i380 in xrange<control>(<init><expr><name>_size376</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem381</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem381</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">14140</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">14156</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>getUserAuthorizations_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>LIST</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter373 in self.success:
        oprot.writeString<control>(<init><expr><name>iter373</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter382 in self.success:
        oprot.writeString<control>(<init><expr><name>iter382</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for></block_content></block></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -14968<operator>,</operator><expr_stmt><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">14984</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <name>class</name> <name>listLocalUsers_result</name><operator>:</operator></expr></expr_stmt></if></if_stmt>
       <if_stmt><if>if fid == 0:
         if ftype == TType.SET:
           self.success = set<condition>()</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>(</operator><name>_etype377</name><operator>,</operator> <name>_size374</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
          <for>for _i378 in xrange<control>(<init><expr><name>_size374</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem379</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem379</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_etype386</name><operator>,</operator> <name>_size383</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readSetBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i387 in xrange<control>(<init><expr><name>_size383</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_elem388</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>_elem388</name></expr></argument>)</argument_list></call>
           <call><name><name>iprot</name><operator>.</operator><name>readSetEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">15006</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">15022</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <name>class</name> <name>listLocalUsers_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>SET</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for iter380 in self.success:
        oprot.writeString<control>(<init><expr><name>iter380</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for iter389 in self.success:
        oprot.writeString<control>(<init><expr><name>iter389</name></expr></init>)</control><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeSetEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for></block_content></block></for>
     <if_stmt><if>if self.ouch1 is not None:
@@ -16372<operator>,</operator><expr_stmt><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">16388</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>class</name> <name>updateAndFlush_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">3</literal><operator>:</operator></expr></expr_stmt></if></if_stmt>
         <if_stmt><if>if ftype == TType.MAP:
           self.cells = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype382</name><operator>,</operator> <name>_vtype383</name><operator>,</operator> <name>_size381</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i385 in xrange<control>(<init><expr><name>_size381</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key386</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val387</name> <operator>=</operator> <index>[]</index>
            <operator>(</operator><name>_etype391</name><operator>,</operator> <name>_size388</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
            <for>for _i392 in xrange<control>(<init><expr><name>_size388</name></expr></init>)</control><block type="pseudo"><block_content>:
              <expr_stmt><expr><name>_elem393</name> <operator>=</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call>
              <call><name><name>_elem393</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
              <call><name><name>_val387</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem393</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_ktype391</name><operator>,</operator> <name>_vtype392</name><operator>,</operator> <name>_size390</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
          <for>for _i394 in xrange<control>(<init><expr><name>_size390</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key395</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val396</name> <operator>=</operator> <index>[]</index>
            <operator>(</operator><name>_etype400</name><operator>,</operator> <name>_size397</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
            <for>for _i401 in xrange<control>(<init><expr><name>_size397</name></expr></init>)</control><block type="pseudo"><block_content>:
              <expr_stmt><expr><name>_elem402</name> <operator>=</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call>
              <call><name><name>_elem402</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
              <call><name><name>_val396</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem402</name></expr></argument>)</argument_list></call>
             <call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call>
            <name><name>self</name><operator>.</operator><name>cells</name><index>[<expr><name>_key386</name></expr>]</index></name> <operator>=</operator> <name>_val387</name>
            <name><name>self</name><operator>.</operator><name>cells</name><index>[<expr><name>_key395</name></expr>]</index></name> <operator>=</operator> <name>_val396</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">16407</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">16423</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>updateAndFlush_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.cells is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'cells'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>cells</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter394<operator>,</operator><macro><name>viter395</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>cells</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter394</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name>viter395</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></for>
        <for>for iter396 in viter395:
          iter396.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for kiter403<operator>,</operator><macro><name>viter404</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>cells</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter403</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name>viter404</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></for></block_content></block></for>
        <for>for iter405 in viter404:
          iter405.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">16750</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">16766</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <name>class</name> <name>update_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">2</literal><operator>:</operator></expr></expr_stmt></block_content></block></for>
         <if_stmt><if>if ftype == TType.MAP:
           self.cells = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype398</name><operator>,</operator> <name>_vtype399</name><operator>,</operator> <name>_size397</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i401 in xrange<control>(<init><expr><name>_size397</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key402</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val403</name> <operator>=</operator> <index>[]</index>
            <operator>(</operator><name>_etype407</name><operator>,</operator> <name>_size404</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
            <for>for _i408 in xrange<control>(<init><expr><name>_size404</name></expr></init>)</control><block type="pseudo"><block_content>:
              <expr_stmt><expr><name>_elem409</name> <operator>=</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call>
              <call><name><name>_elem409</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
              <call><name><name>_val403</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem409</name></expr></argument>)</argument_list></call>
          <operator>(</operator><name>_ktype407</name><operator>,</operator> <name>_vtype408</name><operator>,</operator> <name>_size406</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
          <for>for _i410 in xrange<control>(<init><expr><name>_size406</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key411</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val412</name> <operator>=</operator> <index>[]</index>
            <operator>(</operator><name>_etype416</name><operator>,</operator> <name>_size413</name><operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readListBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
            <for>for _i417 in xrange<control>(<init><expr><name>_size413</name></expr></init>)</control><block type="pseudo"><block_content>:
              <expr_stmt><expr><name>_elem418</name> <operator>=</operator> <call><name>ColumnUpdate</name><argument_list>()</argument_list></call>
              <call><name><name>_elem418</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
              <call><name><name>_val412</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>_elem418</name></expr></argument>)</argument_list></call>
             <call><name><name>iprot</name><operator>.</operator><name>readListEnd</name></name><argument_list>()</argument_list></call>
            <name><name>self</name><operator>.</operator><name>cells</name><index>[<expr><name>_key402</name></expr>]</index></name> <operator>=</operator> <name>_val403</name>
            <name><name>self</name><operator>.</operator><name>cells</name><index>[<expr><name>_key411</name></expr>]</index></name> <operator>=</operator> <name>_val412</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></for>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">16781</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">16797</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>update_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.cells is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'cells'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>LIST</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>cells</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter410<operator>,</operator><macro><name>viter411</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>cells</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter410</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name>viter411</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></for>
        <for>for iter412 in viter411:
          iter412.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
      <for>for kiter419<operator>,</operator><macro><name>viter420</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>cells</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter419</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeListBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name>viter420</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></for></block_content></block></for>
        <for>for iter421 in viter420:
          iter421.write<control>(<init><expr><name>oprot</name></expr></init>)</control><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeListEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">17487</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">17503</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <name>class</name> <name>updateRowsConditionally_args</name><operator>:</operator>
       <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">2</literal><operator>:</operator></expr></expr_stmt></block_content></block></for>
         <if_stmt><if>if ftype == TType.MAP:
           self.updates = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype414</name><operator>,</operator> <name>_vtype415</name><operator>,</operator> <name>_size413</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i417 in xrange<control>(<init><expr><name>_size413</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key418</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val419</name> <operator>=</operator> <call><name>ConditionalUpdates</name><argument_list>()</argument_list></call>
            <call><name><name>_val419</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <name><name>self</name><operator>.</operator><name>updates</name><index>[<expr><name>_key418</name></expr>]</index></name> <operator>=</operator> <call><name>_val419</name>
          <argument_list>(<argument><expr><name>_ktype423</name></expr></argument>, <argument><expr><name>_vtype424</name></expr></argument>, <argument><expr><name>_size422</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i426 in xrange<control>(<init><expr><name>_size422</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key427</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val428</name> <operator>=</operator> <call><name>ConditionalUpdates</name><argument_list>()</argument_list></call>
            <call><name><name>_val428</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call>
            <name><name>self</name><operator>.</operator><name>updates</name><index>[<expr><name>_key427</name></expr>]</index></name> <operator>=</operator> <name>_val428</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">17513</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17529</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>updateRowsConditionally_args</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.updates is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'updates'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>updates</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter420<operator>,</operator><macro><name>viter421</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>updates</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter420</name></expr></argument>)</argument_list></call>
        <call><name><name>viter421</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr></expr_stmt></for>
      <for>for kiter429<operator>,</operator><macro><name>viter430</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>updates</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter429</name></expr></argument>)</argument_list></call>
        <call><name><name>viter430</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
     <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">17570</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">17586</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>class</name> <name>updateRowsConditionally_result</name><operator>:</operator></expr></expr_stmt></for>
       <if_stmt><if>if fid == 0:
         if ftype == TType.MAP:
           self.success = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype423</name><operator>,</operator> <name>_vtype424</name><operator>,</operator> <name>_size422</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i426 in xrange<control>(<init><expr><name>_size422</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key427</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val428</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key427</name></expr>]</index></name> <operator>=</operator> <call><name>_val428</name>
          <argument_list>(<argument><expr><name>_ktype432</name></expr></argument>, <argument><expr><name>_vtype433</name></expr></argument>, <argument><expr><name>_size431</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i435 in xrange<control>(<init><expr><name>_size431</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key436</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val437</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>success</name><index>[<expr><name>_key436</name></expr>]</index></name> <operator>=</operator> <name>_val437</name>
           <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
         <if_stmt><else>else<block type="pseudo"><block_content>:
           <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">17609</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">17625</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>updateRowsConditionally_result</name><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
     <if_stmt><if>if self.success is not None:
       oprot.writeFieldBegin<condition>(<expr><literal type="char">'success'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
       <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter429<operator>,</operator><macro><name>viter430</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter429</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><name>viter430</name></expr></argument>)</argument_list></call></expr></expr_stmt></for>
      <for>for kiter438<operator>,</operator><macro><name>viter439</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>success</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter438</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><name>viter439</name></expr></argument>)</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
       <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></for>
     <if_stmt><if>if self.ouch1 is not None:
diff --git a/proxy/src/main/python/ttypes.py b/proxy/src/main/python/ttypes.py
index 5e4c001e6..9444f715e 100644
-- a/proxy/src/main/python/ttypes.py
++ b/proxy/src/main/python/ttypes.py
@@ -2337<operator>,</operator><expr_stmt><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2337</literal></expr><operator>,</operator><expr><literal type="number">88</literal> @@ <name>class</name> <name>WriterOptions</name><operator>:</operator>
   <name>def</name> <call><name>__ne__</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call><operator>:</operator></expr></expr_stmt></if></if_stmt>
     <return>return <expr><call><name>not</name> <argument_list>(<argument><expr><name>self</name> <operator>==</operator> <name>other</name></expr></argument>)</argument_list></call>
 
<name>class</name> <name>CompactionStrategyConfig</name><operator>:</operator>
  <literal type="string">"""</literal>
  <name>Attributes</name><operator>:</operator>
   <operator>-</operator> <name>className</name>
   <operator>-</operator> <name>options</name>
  <literal type="string">"""</literal>

  <name>thrift_spec</name> <operator>=</operator> <operator>(</operator>
    <name>None</name><operator>,</operator> <operator>#</operator> <literal type="number">0</literal>
    <operator>(</operator><literal type="number">1</literal><operator>,</operator> <name><name>TType</name><operator>.</operator><name>STRING</name></name><operator>,</operator> <literal type="char">'className'</literal><operator>,</operator> <name>None</name><operator>,</operator> <name>None</name><operator>,</operator> <operator>)</operator><operator>,</operator> <operator>#</operator> <literal type="number">1</literal>
    <operator>(</operator><literal type="number">2</literal><operator>,</operator> <name><name>TType</name><operator>.</operator><name>MAP</name></name><operator>,</operator> <literal type="char">'options'</literal><operator>,</operator> <operator>(</operator><name><name>TType</name><operator>.</operator><name>STRING</name></name><operator>,</operator><name>None</name><operator>,</operator><name><name>TType</name><operator>.</operator><name>STRING</name></name><operator>,</operator><name>None</name><operator>)</operator><operator>,</operator> <name>None</name><operator>,</operator> <operator>)</operator><operator>,</operator> <operator>#</operator> <literal type="number">2</literal>
  <operator>)</operator>

  <name>def</name> <call><name>__init__</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>className</name><operator>=</operator><name>None</name></expr></argument>, <argument><expr><name>options</name><operator>=</operator><name>None</name></expr></argument>,)</argument_list></call><operator>:</operator>
    <name><name>self</name><operator>.</operator><name>className</name></name> <operator>=</operator> <name>className</name>
    <name><name>self</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name>

  <name>def</name> <call><name>read</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>iprot</name></expr></argument>)</argument_list></call><operator>:</operator></expr></return>
    <if_stmt><if>if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance<condition>(<expr><name><name>iprot</name><operator>.</operator><name>trans</name></name></expr><operator>,</operator> <expr><name><name>TTransport</name><operator>.</operator><name>CReadableTransport</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>and</name> <name><name>self</name><operator>.</operator><name>thrift_spec</name></name> <name>is</name> <name>not</name> <name>None</name> <name>and</name> <name>fastbinary</name> <name>is</name> <name>not</name> <name>None</name><operator>:</operator>
      <call><name><name>fastbinary</name><operator>.</operator><name>decode_binary</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>iprot</name><operator>.</operator><name>trans</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>self</name><operator>.</operator><name>__class__</name></name><operator>,</operator> <name><name>self</name><operator>.</operator><name>thrift_spec</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <return>return
    <expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr></return>
    <while>while True:
      <condition>(<expr><name>fname</name></expr><operator>,</operator> <expr><name>ftype</name></expr><operator>,</operator> <expr><name>fid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></while>
      <if_stmt><if>if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.className = iprot.readString<condition>()</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>:
          <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
      <name>elif</name> <name>fid</name> <operator>==</operator> <literal type="number">2</literal><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if ftype == TType.MAP:
          self.options = <block>{<block_content/>}</block></if></if_stmt>
          <expr_stmt><expr><operator>(</operator><name>_ktype136</name><operator>,</operator> <name>_vtype137</name><operator>,</operator> <name>_size135</name> <operator>)</operator> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readMapBegin</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
          <for>for _i139 in xrange<control>(<init><expr><name>_size135</name></expr></init>)</control><block type="pseudo"><block_content>:
            <expr_stmt><expr><name>_key140</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>_val141</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>self</name><operator>.</operator><name>options</name><index>[<expr><name>_key140</name></expr>]</index></name> <operator>=</operator> <name>_val141</name>
          <call><name><name>iprot</name><operator>.</operator><name>readMapEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt>
        <if_stmt><else>else<block type="pseudo"><block_content>:
          <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></else></if_stmt>
      <if_stmt><else>else<block type="pseudo"><block_content>:
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>ftype</name></expr></argument>)</argument_list></call>
      <call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call>
    <call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call>

  <name>def</name> <call><name>write</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>oprot</name></expr></argument>)</argument_list></call><operator>:</operator></expr></expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write<condition>(<expr><call><name><name>fastbinary</name><operator>.</operator><name>encode_binary</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>(</operator><name><name>self</name><operator>.</operator><name>__class__</name></name><operator>,</operator> <name><name>self</name><operator>.</operator><name>thrift_spec</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return
    <expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><literal type="char">'CompactionStrategyConfig'</literal></expr></argument>)</argument_list></call></expr></return></block_content></block></if></if_stmt>
    <if_stmt><if>if self.className is not None:
      oprot.writeFieldBegin<condition>(<expr><literal type="char">'className'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr><operator>,</operator> <expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>className</name></name></expr></argument>)</argument_list></call>
      <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if self.options is not None:
      oprot.writeFieldBegin<condition>(<expr><literal type="char">'options'</literal></expr><operator>,</operator> <expr><name><name>TType</name><operator>.</operator><name>MAP</name></name></expr><operator>,</operator> <expr><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeMapBegin</name></name><argument_list>(<argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><call><name>len</name><argument_list>(<argument><expr><name><name>self</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></if></if_stmt>
      <for>for kiter142<operator>,</operator><macro><name>viter143</name></macro> <macro><name>in</name></macro> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>options</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>kiter142</name></expr></argument>)</argument_list></call>
        <call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>viter143</name></expr></argument>)</argument_list></call>
      <call><name><name>oprot</name><operator>.</operator><name>writeMapEnd</name></name><argument_list>()</argument_list></call>
      <call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call>
    <call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call>
    <call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call>

  <name>def</name> <call><name>validate</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>:</operator></expr></expr_stmt></for>
    <return>return


  <expr><name>def</name> <call><name>__repr__</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>:</operator>
    <name>L</name> <operator>=</operator> <index>[<expr><literal type="char">'%s=%r'</literal> <operator>%</operator> <operator>(</operator><name>key</name><operator>,</operator> <name>value</name><operator>)</operator></expr></index>
      for <name>key</name></expr><operator>,</operator> <expr><name>value</name> <name>in</name> <call><name><name>self</name><operator>.</operator><name>__dict__</name><operator>.</operator><name>iteritems</name></name><argument_list>()</argument_list></call>]</expr></return>
    <return>return <expr><literal type="char">'%s(%s)'</literal> <operator>%</operator> <operator>(</operator><name><name>self</name><operator>.</operator><name>__class__</name><operator>.</operator><name>__name__</name></name><operator>,</operator> <literal type="char">', '</literal><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>)</operator>

  <name>def</name> <call><name>__eq__</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call><operator>:</operator></expr></return>
    <return>return <expr><call><name>isinstance</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name><name>self</name><operator>.</operator><name>__class__</name></name></expr></argument>)</argument_list></call> <name>and</name> <name><name>self</name><operator>.</operator><name>__dict__</name></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>__dict__</name></name>

  <name>def</name> <call><name>__ne__</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call><operator>:</operator></expr></return>
    <return>return <expr><call><name>not</name> <argument_list>(<argument><expr><name>self</name> <operator>==</operator> <name>other</name></expr></argument>)</argument_list></call>

 <name>class</name> <call><name>UnknownScanner</name><argument_list>(<argument><expr><name>TException</name></expr></argument>)</argument_list></call><operator>:</operator>
   <literal type="string">"""</literal>
   <name>Attributes</name><operator>:</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>ruby</name><operator>/</operator><name><name>accumulo_proxy</name><operator>.</operator><name>rb</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>ruby</name><operator>/</operator><name><name>accumulo_proxy</name><operator>.</operator><name>rb</name></name>
<name>index</name> <literal type="number">16f704259</literal><operator>..</operator><name>f8d892e53</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>ruby</name><operator>/</operator><name><name>accumulo_proxy</name><operator>.</operator><name>rb</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>ruby</name><operator>/</operator><name><name>accumulo_proxy</name><operator>.</operator><name>rb</name></name>
@@ <operator>-</operator><literal type="number">144</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">144</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <name>module</name> <name>Accumulo</name></expr></return>
         <return>return
       <expr><name>end</name>
 
      <name>def</name> <call><name>compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call>
        <call><name>send_compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call>
      <name>def</name> <call><name>compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call>
        <call><name>send_compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call>
         <call><name>recv_compactTable</name><argument_list>()</argument_list></call>
       <name>end</name>
 
      <name>def</name> <call><name>send_compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call>
        <call><name>send_message</name><argument_list>(<argument><expr><literal type="char">'compactTable'</literal></expr></argument>, <argument><expr><name>CompactTable_args</name></expr></argument>, :<argument><expr><name>login</name> <operator>=</operator><operator>&gt;</operator> <name>login</name></expr></argument>, :<argument><expr><name>tableName</name> <operator>=</operator><operator>&gt;</operator> <name>tableName</name></expr></argument>, :<argument><expr><name>startRow</name> <operator>=</operator><operator>&gt;</operator> <name>startRow</name></expr></argument>, :<argument><expr><name>endRow</name> <operator>=</operator><operator>&gt;</operator> <name>endRow</name></expr></argument>, :<argument><expr><name>iterators</name> <operator>=</operator><operator>&gt;</operator> <name>iterators</name></expr></argument>, :<argument><expr><name>flush</name> <operator>=</operator><operator>&gt;</operator> <name>flush</name></expr></argument>, :<argument><expr><name>wait</name> <operator>=</operator><operator>&gt;</operator> <name>wait</name></expr></argument>)</argument_list></call>
      <name>def</name> <call><name>send_compactTable</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call>
        <call><name>send_message</name><argument_list>(<argument><expr><literal type="char">'compactTable'</literal></expr></argument>, <argument><expr><name>CompactTable_args</name></expr></argument>, :<argument><expr><name>login</name> <operator>=</operator><operator>&gt;</operator> <name>login</name></expr></argument>, :<argument><expr><name>tableName</name> <operator>=</operator><operator>&gt;</operator> <name>tableName</name></expr></argument>, :<argument><expr><name>startRow</name> <operator>=</operator><operator>&gt;</operator> <name>startRow</name></expr></argument>, :<argument><expr><name>endRow</name> <operator>=</operator><operator>&gt;</operator> <name>endRow</name></expr></argument>, :<argument><expr><name>iterators</name> <operator>=</operator><operator>&gt;</operator> <name>iterators</name></expr></argument>, :<argument><expr><name>flush</name> <operator>=</operator><operator>&gt;</operator> <name>flush</name></expr></argument>, :<argument><expr><name>wait</name> <operator>=</operator><operator>&gt;</operator> <name>wait</name></expr></argument>, :<argument><expr><name>compactionStrategy</name> <operator>=</operator><operator>&gt;</operator> <name>compactionStrategy</name></expr></argument>)</argument_list></call>
       <name>end</name>
 
       <name>def</name> <call><name>recv_compactTable</name><argument_list>()</argument_list></call>
@@ <operator>-</operator><literal type="number">1425</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1425</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>module</name> <name>Accumulo</name>
         <name>args</name> <operator>=</operator> <call><name>read_args</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>CompactTable_args</name></expr></argument>)</argument_list></call>
         <name>result</name> <operator>=</operator> <name><name>CompactTable_result</name><operator>.</operator></name>new<operator>(</operator><operator>)</operator>
         <name>begin</name>
          @<call><name><name>handler</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>login</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>iterators</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>wait</name></name></expr></argument>)</argument_list></call>
          @<call><name><name>handler</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>login</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>iterators</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>wait</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>compactionStrategy</name></name></expr></argument>)</argument_list></call>
         <name>rescue</name> <operator>::</operator><name>Accumulo</name><operator>::</operator><name>AccumuloSecurityException</name> <operator>=</operator><operator>&gt;</operator> <name>ouch1</name>
           <name><name>result</name><operator>.</operator><name>ouch1</name></name> <operator>=</operator> <name>ouch1</name>
         <name>rescue</name> <operator>::</operator><name>Accumulo</name><operator>::</operator><name>TableNotFoundException</name> <operator>=</operator><operator>&gt;</operator> <name>ouch2</name>
@@ <operator>-</operator><literal type="number">2661</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2661</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>module</name> <name>Accumulo</name>
       <name>ITERATORS</name> <operator>=</operator> <literal type="number">5</literal>
       <name>FLUSH</name> <operator>=</operator> <literal type="number">6</literal>
       <name>WAIT</name> <operator>=</operator> <literal type="number">7</literal>
      <name>COMPACTIONSTRATEGY</name> <operator>=</operator> <literal type="number">8</literal>
 
       <name>FIELDS</name> <operator>=</operator> <block>{
         <expr><name>LOGIN</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>STRING</name></expr>, <operator>:</operator><expr><name>name</name> <operator>=</operator><operator>&gt;</operator> <literal type="char">'login'</literal></expr>, <operator>:</operator><expr><name>binary</name> <operator>=</operator><operator>&gt;</operator> <literal type="boolean">true</literal></expr>}</block></expr>,
@@ <expr><operator>-</operator><literal type="number">2669</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">2670</literal></expr>,<expr><literal type="number">8</literal> @@ <name>module</name> <name>Accumulo</name>
         <name>ENDROW</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>STRING</name></expr>, <operator>:</operator><expr><name>name</name> <operator>=</operator><operator>&gt;</operator> <literal type="char">'endRow'</literal></expr>, <operator>:</operator><expr><name>binary</name> <operator>=</operator><operator>&gt;</operator> <literal type="boolean">true</literal></expr>}</block></expr>,
         <expr><name>ITERATORS</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>LIST</name></expr>, <operator>:</operator><expr><name>name</name> <operator>=</operator><operator>&gt;</operator> <literal type="char">'iterators'</literal></expr>, <operator>:</operator><expr><name>element</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>STRUCT</name></expr>, <operator>:</operator><expr><name>class</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Accumulo</name><operator>::</operator><name>IteratorSetting</name></expr>}</block></expr>}</block></expr>,
         <expr><name>FLUSH</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>BOOL</name></expr>, <operator>:</operator><expr><name>name</name> <operator>=</operator><operator>&gt;</operator> <literal type="char">'flush'</literal></expr>}</block></expr>,
        <expr><name>WAIT</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>BOOL</name></expr>, <operator>:</operator><expr><name>name</name> <operator>=</operator><operator>&gt;</operator> <literal type="char">'wait'</literal></expr>}</block>
        <name>WAIT</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>BOOL</name></expr>, <operator>:</operator><expr><name>name</name> <operator>=</operator><operator>&gt;</operator> <literal type="char">'wait'</literal></expr>}</block></expr>,
        <expr><name>COMPACTIONSTRATEGY</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>STRUCT</name></expr>, <operator>:</operator><expr><name>name</name> <operator>=</operator><operator>&gt;</operator> <literal type="char">'compactionStrategy'</literal></expr>, <operator>:</operator><expr><name>class</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Accumulo</name><operator>::</operator><name>CompactionStrategyConfig</name></expr>}</block></expr>
       }</block>
 
       <name>def</name> <name>struct_fields</name></expr>;</return> <expr_stmt><expr><name>FIELDS</name></expr>;</expr_stmt> <expr_stmt><expr><name>end</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>ruby</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>rb</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>ruby</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>rb</name></name>
<name>index</name> <name>beeeee4d3</name><operator>..</operator><literal type="number">57306d179</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>ruby</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>rb</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>ruby</name><operator>/</operator><name><name>proxy_types</name><operator>.</operator><name>rb</name></name>
@@ <operator>-</operator><literal type="number">573</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">573</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <name>module</name> <name>Accumulo</name>
     <operator>::</operator><name>Thrift</name><operator>::</operator><name><name>Struct</name><operator>.</operator><name>generate_accessors</name></name> <name>self</name>
   <name>end</name>
 
  <name>class</name> <name>CompactionStrategyConfig</name>
    <name>include</name> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Struct</name></expr><operator>,</operator> <expr><operator>::</operator><name>Thrift</name><operator>::</operator><name>Struct_Union</name>
    <name>CLASSNAME</name> <operator>=</operator> <literal type="number">1</literal>
    <name>OPTIONS</name> <operator>=</operator> <literal type="number">2</literal>

    <name>FIELDS</name> <operator>=</operator> <block>{
      <expr><name>CLASSNAME</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>STRING</name></expr>, <operator>:</operator><expr><name>name</name> <operator>=</operator><operator>&gt;</operator> <literal type="char">'className'</literal></expr>}</block></expr>,
      <expr><name>OPTIONS</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>MAP</name></expr>, <operator>:</operator><expr><name>name</name> <operator>=</operator><operator>&gt;</operator> <literal type="char">'options'</literal></expr>, <operator>:</operator><expr><name>key</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>STRING</name></expr>}</block></expr>, <operator>:</operator><expr><name>value</name> <operator>=</operator><operator>&gt;</operator> <block>{<operator>:</operator><expr><name>type</name> <operator>=</operator><operator>&gt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Types</name><operator>::</operator><name>STRING</name></expr>}</block></expr>}</block></expr>
    }</block>

    <name>def</name> <name>struct_fields</name></expr>;</expr_stmt> <expr_stmt><expr><name>FIELDS</name></expr>;</expr_stmt> <expr_stmt><expr><name>end</name>

    <name>def</name> <name>validate</name>
    <name>end</name>

    <operator>::</operator><name>Thrift</name><operator>::</operator><name><name>Struct</name><operator>.</operator><name>generate_accessors</name></name> <name>self</name>
  <name>end</name>

   <name>class</name> <name>UnknownScanner</name> <operator>&lt;</operator> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Exception</name>
     <name>include</name> <operator>::</operator><name>Thrift</name><operator>::</operator><name>Struct</name></expr><operator>,</operator> <expr><operator>::</operator><name>Thrift</name><operator>::</operator><name>Struct_Union</name>
     <name>def</name> <call><name>initialize</name><argument_list>(<argument><expr><name>message</name><operator>=</operator><name>nil</name></expr></argument>)</argument_list></call>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>proxy</name><operator>.</operator><name>thrift</name></name> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>proxy</name><operator>.</operator><name>thrift</name></name>
<name>index</name> <name>fbd9c5289</name><operator>..</operator><literal type="number">25510d1f2</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>proxy</name><operator>.</operator><name>thrift</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>proxy</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>proxy</name><operator>.</operator><name>thrift</name></name>
@@ <operator>-</operator><literal type="number">249</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">249</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <name>struct</name> <name>WriterOptions</name> <block>{
  <expr><literal type="number">5</literal><operator>:</operator><name>optional</name> <name>Durability</name> <name>durability</name></expr>
 }</block>
 
<name>struct</name> <name>CompactionStrategyConfig</name> <block>{
  <expr><literal type="number">1</literal><operator>:</operator><name>string</name> <name>className</name>
  <literal type="number">2</literal><operator>:</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>string</name></argument>,<argument><name>string</name></argument>&gt;</argument_list></name> <name>options</name></expr>
}</block>

 enum <name>IteratorScope</name> <block>{
   <expr><name>MINC</name></expr>,
   <expr><name>MAJC</name></expr>,
@@ <expr><operator>-</operator><literal type="number">310</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">315</literal></expr>,<expr><literal type="number">10</literal> @@ <name>service</name> <name>AccumuloProxy</name>
   <name>void</name> <call><name>cloneTable</name> <argument_list>(<argument><expr><literal type="number">1</literal><operator>:</operator><name>binary</name> <name>login</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>:</operator><name>string</name> <name>tableName</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>:</operator><name>string</name> <name>newTableName</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>:</operator><name>bool</name> <name>flush</name></expr></argument>, 
                    <argument><expr><literal type="number">5</literal><operator>:</operator><name><name>map</name><argument_list type="generic">&lt;<argument><name>string</name></argument>,<argument><name>string</name></argument>&gt;</argument_list></name> <name>propertiesToSet</name></expr></argument>, <argument><expr><literal type="number">6</literal><operator>:</operator><name><name>set</name><argument_list type="generic">&lt;<argument><name>string</name></argument>&gt;</argument_list></name> <name>propertiesToExclude</name></expr></argument>)</argument_list></call> 
                                                                                                        <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><operator>:</operator><name>AccumuloException</name> <name>ouch1</name></expr>, <expr><literal type="number">2</literal><operator>:</operator><name>AccumuloSecurityException</name> <name>ouch2</name></expr>, <expr><literal type="number">3</literal><operator>:</operator><name>TableNotFoundException</name> <name>ouch3</name></expr>, <expr><literal type="number">4</literal><operator>:</operator><name>TableExistsException</name> <name>ouch4</name></expr>)</block></expr>;</expr_stmt>
  <comment type="line">//changed in 1.7.0, see comment at top about compatibility</comment>
   <decl_stmt><decl><type><name>void</name></type> <name>compactTable</name> <argument_list>(<argument><expr><literal type="number">1</literal><operator>:</operator><name>binary</name> <name>login</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>:</operator><name>string</name> <name>tableName</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>:</operator><name>binary</name> <name>startRow</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>:</operator><name>binary</name> <name>endRow</name></expr></argument>, 
		     <argument><expr><literal type="number">5</literal><operator>:</operator><name><name>list</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr></argument>, <argument><expr><literal type="number">6</literal><operator>:</operator><name>bool</name> <name>flush</name></expr></argument>, <argument><expr><literal type="number">7</literal><operator>:</operator><name>bool</name> <name>wait</name></expr></argument>)</argument_list>                             <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><range>:<expr><name>AccumuloSecurityException</name> <name>ouch1</name></expr></range></decl>, 2<range>:<expr><name>TableNotFoundException</name> <name>ouch2</name></expr></range>, 3<range>:<expr><name>AccumuloException</name> <name>ouch3</name></expr>)</range>;</decl_stmt>
		     <expr_stmt><expr><literal type="number">5</literal><operator>:</operator><name><name>list</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name> <name>iterators</name></expr><operator>,</operator> <expr><literal type="number">6</literal><operator>:</operator><name>bool</name> <name>flush</name></expr><operator>,</operator> <expr><literal type="number">7</literal><operator>:</operator><name>bool</name> <name>wait</name></expr><operator>,</operator> 
		     <expr><literal type="number">8</literal><operator>:</operator><name>CompactionStrategyConfig</name> <name>compactionStrategy</name></expr></expr_stmt>)</block_content>                                            <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws>:AccumuloSecurityException ouch1</block><operator>,</operator> <expr_stmt><expr><literal type="number">2</literal><operator>:</operator><name>TableNotFoundException</name> <name>ouch2</name></expr><operator>,</operator> <expr><literal type="number">3</literal><operator>:</operator><name>AccumuloException</name> <name>ouch3</name></expr></expr_stmt></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
   <decl_stmt><decl><type><name>void</name></type> <name>cancelCompaction</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>:</operator><name>binary</name> <name>login</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>:</operator><name>string</name> <name>tableName</name></expr></argument>)</argument_list>                                            <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><range>:<expr><name>AccumuloSecurityException</name> <name>ouch1</name></expr></range></decl>, 2<range>:<expr><name>TableNotFoundException</name> <name>ouch2</name></expr></range>, 3<range>:<expr><name>AccumuloException</name> <name>ouch3</name></expr>)</range>;</decl_stmt>
                                                                                                             
   <decl_stmt><decl><type><name>void</name></type> <name>createTable</name> <argument_list>(<argument><expr><literal type="number">1</literal><operator>:</operator><name>binary</name> <name>login</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>:</operator><name>string</name> <name>tableName</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>:</operator><name>bool</name> <name>versioningIter</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>:</operator><name>TimeType</name> <name>type</name></expr></argument>)</argument_list>        <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><range>:<expr><name>AccumuloException</name> <name>ouch1</name></expr></range></decl>, 2<range>:<expr><name>AccumuloSecurityException</name> <name>ouch2</name></expr></range>, 3<range>:<expr><name>TableExistsException</name> <name>ouch3</name></expr>)</range>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>CompactionIterators</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>UserCompactionConfig</name><operator>.</operator><name>java</name></name>
<name>similarity</name> <name>index</name> <literal type="number">79</literal><operator>%</operator>
<name>rename</name> <name>from</name> <name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>CompactionIterators</name><operator>.</operator><name>java</name></name>
<name>rename</name> <name>to</name> <name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>UserCompactionConfig</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4f5bf42e9</literal><operator>..</operator><literal type="number">63141053a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>CompactionIterators</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>UserCompactionConfig</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">27</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">32</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionStrategyConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>CompactionStrategyConfigUtil</name></name>;</import>

 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Writable</name></name>;</import>
 
<class><specifier>public</specifier> class <name>CompactionIterators</name> <super_list><implements>implements <super><name>Writable</name></super></implements></super_list> <block>{
<class><specifier>public</specifier> class <name>UserCompactionConfig</name> <super_list><implements>implements <super><name>Writable</name></super></implements></super_list> <block>{
   <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>startRow</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>endRow</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>CompactionIterators</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>private</specifier> <name>CompactionStrategyConfig</name></type> <name>compactionStrategy</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>UserCompactionConfig</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>csc</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startRow</name></name> <operator>=</operator> <name>startRow</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>endRow</name></name> <operator>=</operator> <name>endRow</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <name>iterators</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compactionStrategy</name></name> <operator>=</operator> <name>csc</name></expr>;</expr_stmt>
   </block_content>}</block></constructor>
  
  <constructor><specifier>public</specifier> <name>CompactionIterators</name><parameter_list>()</parameter_list> <block>{<block_content>

  <constructor><specifier>public</specifier> <name>UserCompactionConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
     <expr_stmt><expr><name>startRow</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>endRow</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>iterators</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
  

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><name>startRow</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactionIterators</name> implements <name>Writable</name> <block>{
       <expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>startRow</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;
       <call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>startRow</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     </block_content>}</block></function>
    

     <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><name>endRow</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>endRow</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>endRow</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>endRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
    

     <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>iterators</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <for>for <control>(<init><decl><type><name>IteratorSetting</name></type> <name>is</name> <range>: <expr><name>iterators</name></expr></range></decl></init>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>CompactionStrategyConfigUtil</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   </block_content>}</block></constructor>
  

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">35</literal> <operator>+</operator><literal type="number">80</literal></expr><operator>,</operator><expr><literal type="number">41</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactionIterators</name> implements <name>Writable</name> <block>{
     }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
       <expr_stmt><expr><name>startRow</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    

     <if_stmt><if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>endRow</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>endRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <expr_stmt><expr><name>endRow</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    

     <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><name>iterators</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name><name>iterators</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IteratorSetting</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>

    <expr_stmt><expr><name>compactionStrategy</name> <operator>=</operator> <call><name><name>CompactionStrategyConfigUtil</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
  

   <function><type><specifier>public</specifier> <name>Text</name></type> <name>getEndRow</name><parameter_list>()</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>endRow</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
       <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
     <return>return <expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>endRow</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  

   <function><type><specifier>public</specifier> <name>Text</name></type> <name>getStartRow</name><parameter_list>()</parameter_list> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name>startRow</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
       <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
     <return>return <expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>startRow</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
  

   <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>getIterators</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>iterators</name></expr>;</return>
   </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>CompactionStrategyConfig</name></type> <name>getCompactionStrategy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>compactionStrategy</name></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></function>
<expr_stmt><expr><operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>FateServiceHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>FateServiceHandler</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bdb5e2f90</name><operator>..</operator><literal type="number">5207745fc</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>FateServiceHandler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>FateServiceHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>CompactionStrategyConfigUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionStrategyConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>NamespaceNotFoundException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">370</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">372</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>FateServiceHandler</name> implements <name><name>FateService</name><operator>.</operator><name>Iface</name></name> <block>{
         <expr><name><name>byte</name><index>[]</index></name> <name>startRow</name> <operator>=</operator> <call><name><name>ByteBufferUtil</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><call><name><name>arguments</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <name><name>byte</name><index>[]</index></name> <name>endRow</name> <operator>=</operator> <call><name><name>ByteBufferUtil</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><call><name><name>arguments</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
         <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name> <init>= <expr><call><name><name>IteratorUtil</name><operator>.</operator><name>decodeIteratorSettings</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><call><name><name>arguments</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompactionStrategyConfig</name></type> <name>compactionStrategy</name> <init>= <expr><call><name><name>CompactionStrategyConfigUtil</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><call><name><name>arguments</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>String</name></type> <name>namespaceId</name> <init>= <expr><call><name><name>Tables</name><operator>.</operator><name>getNamespaceId</name></name><argument_list>(<argument><expr><call><name><name>master</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
         <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>canCompact</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">383</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">386</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>class</name> <name>FateServiceHandler</name> implements <name><name>FateService</name><operator>.</operator><name>Iface</name></name> <block>{
         <if_stmt><if>if <condition>(<expr><operator>!</operator><name>canCompact</name></expr>)</condition><block type="pseudo"><block_content>
           <throw>throw <expr><operator>new</operator> <call><name>ThriftSecurityException</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SecurityErrorCode</name><operator>.</operator><name>PERMISSION_DENIED</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
 
        <call><name><name>master</name><operator>.</operator><name>fate</name><operator>.</operator><name>seedTransaction</name></name><argument_list>(<argument><expr><name>opid</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>TraceRepo</name><argument_list type="generic">&lt;<argument><name>Master</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CompactRange</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>autoCleanup</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>master</name><operator>.</operator><name>fate</name><operator>.</operator><name>seedTransaction</name></name><argument_list>(<argument><expr><name>opid</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>TraceRepo</name><argument_list type="generic">&lt;<argument><name>Master</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CompactRange</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>autoCleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <break>break;</break>
       </block_content>}</block></constructor>
       <case>case <expr><name>TABLE_CANCEL_COMPACT</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>CompactRange</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>CompactRange</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b3037d35e</name><operator>..</operator><name>db8bbfe13</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>CompactRange</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name>tableOps</name><operator>/</operator><name><name>CompactRange</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>master</name><operator>.</operator><name>tableOps</name></name>;</package>
 
 <import>import static <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IsolatedScanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>RowIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionStrategyConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>Tables</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TableOperation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TableOperationExceptionType</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>IZooReaderWriter</name><operator>.</operator><name>Mutator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>master</name><operator>.</operator><name>Master</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>LiveTServerSet</name><operator>.</operator><name>TServerConnection</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>TServerInstance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>tableOps</name><operator>.</operator><name>UserCompactionConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReaderWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>codec</name><operator>.</operator><name>binary</name><operator>.</operator><name>Hex</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Writable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>WritableUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">207</literal></expr><operator>,</operator><expr><literal type="number">95</literal> <operator>+</operator><literal type="number">204</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactRange</name> extends <name>MasterRepo</name> <block>{
   <expr><specifier>private</specifier> <name>final</name> <name>String</name> <name>tableId</name></expr>;
   <specifier>private</specifier> <name><name>byte</name><index>[]</index></name> <name>startRow</name></block></expr>;</expr_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>endRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>iterators</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>config</name></decl>;</decl_stmt>
 
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>CompactionIterators</name> <super_list><implements>implements <super><name>Writable</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>startRow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>endRow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl>;</decl_stmt>
 
    <constructor><specifier>public</specifier> <name>CompactionIterators</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startRow</name></name> <operator>=</operator> <name>startRow</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>endRow</name></name> <operator>=</operator> <name>endRow</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <name>iterators</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CompactionIterators</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>startRow</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>endRow</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>iterators</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><name>startRow</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>startRow</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>startRow</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>startRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><name>endRow</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>endRow</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>endRow</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>endRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>iterators</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>IteratorSetting</name></type> <name>is</name> <range>: <expr><name>iterators</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>startRow</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>startRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>startRow</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>endRow</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>endRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>endRow</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>iterators</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>iterators</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IteratorSetting</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Text</name></type> <name>getEndRow</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>endRow</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>endRow</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Text</name></type> <name>getStartRow</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>startRow</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>startRow</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>getIterators</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>iterators</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <constructor><specifier>public</specifier> <name>CompactRange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableId</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ThriftTableOperationException</name></expr></argument></throws> <block>{<block_content>
  <constructor><specifier>public</specifier> <name>CompactRange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableId</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>endRow</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>compactionStrategy</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>ThriftTableOperationException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableId</name></name> <operator>=</operator> <name>tableId</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startRow</name></name> <operator>=</operator> <ternary><condition><expr><name><name>startRow</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>startRow</name></expr></else></ternary></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>endRow</name></name> <operator>=</operator> <ternary><condition><expr><name><name>endRow</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>endRow</name></expr></else></ternary></expr>;</expr_stmt>
 
    <if_stmt><if>if <condition>(<expr><call><name><name>iterators</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <call><name><name>WritableUtils</name><operator>.</operator><name>toByteArray</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CompactionIterators</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>iterators</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>iterators</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>compactionStrategy</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <call><name><name>WritableUtils</name><operator>.</operator><name>toByteArray</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UserCompactionConfig</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startRow</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>endRow</name></name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>compactionStrategy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
     <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>startRow</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>endRow</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>startRow</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>endRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">337</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">256</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactRange</name> extends <name>MasterRepo</name> <block>{
 
           <expr><name>StringBuilder</name> <name>encodedIterators</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt></block_content></block></if></if_stmt>
 
          <if_stmt><if>if <condition>(<expr><name>iterators</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>config</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
             <decl_stmt><decl><type><name>Hex</name></type> <name>hex</name> <init>= <expr><operator>new</operator> <call><name>Hex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>encodedIterators</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>encodedIterators</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>txidString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>encodedIterators</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>encodedIterators</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>hex</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>encodedIterators</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>hex</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
 
           <return>return <expr><operator>(</operator><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>flushID</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>encodedIterators</name><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d4447ab8a</name><operator>..</operator><name>f9f5b4caf</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">166</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">166</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>TabletLocationState</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>TabletLocationState</name><operator>.</operator><name>BadLocationStateException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>TabletStateStore</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>ZooTabletStateStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>tableOps</name><operator>.</operator><name>UserCompactionConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>problems</name><operator>.</operator><name>ProblemReport</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>problems</name><operator>.</operator><name>ProblemReports</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>replication</name><operator>.</operator><name>ZooKeeperInitialization</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1643</literal></expr><operator>,</operator><expr><literal type="number">19</literal> <operator>+</operator><literal type="number">1644</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
             <expr><call><name><name>tabletsToCompact</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tablet</name></expr></argument>)</argument_list></call></expr>;
       }</block></expr></expr_stmt>
 
      <decl_stmt><decl><type><name>Long</name></type> <name>compactionId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>UserCompactionConfig</name></argument>&gt;</argument_list></name></type> <name>compactionInfo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
       <for>for <control>(<init><decl><type><name>Tablet</name></type> <name>tablet</name> <range>: <expr><name>tabletsToCompact</name></expr></range></decl></init>)</control> <block>{<block_content>
         <comment type="line">// all for the same table id, so only need to read</comment>
         <comment type="line">// compaction id once</comment>
        <if_stmt><if>if <condition>(<expr><name>compactionId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name>compactionInfo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
           <try>try <block>{<block_content>
            <expr_stmt><expr><name>compactionId</name> <operator>=</operator> <call><name><name>tablet</name><operator>.</operator><name>getCompactionID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFirst</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>compactionInfo</name> <operator>=</operator> <call><name><name>tablet</name><operator>.</operator><name>getCompactionID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoNodeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Asked to compact table with no compaction id "</literal> <operator>+</operator> <name>ke</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <return>return;</return>
           </block_content>}</block></catch></try></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>tablet</name><operator>.</operator><name>compactAll</name></name><argument_list>(<argument><expr><name>compactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tablet</name><operator>.</operator><name>compactAll</name></name><argument_list>(<argument><expr><call><name><name>compactionInfo</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>compactionInfo</name><operator>.</operator><name>getSecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
 
     </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServerResourceManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServerResourceManager</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6c31fab6c</literal><operator>..</operator><literal type="number">6b2eaf0da</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServerResourceManager</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServerResourceManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name></name>;</package>
 
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>compaction</name><operator>.</operator><name>MajorCompactionRequest</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>tablet</name><operator>.</operator><name>Tablet</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
 
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

 <comment type="block" format="javadoc">/**
  * ResourceManager is responsible for managing the resources of all tablets within a tablet server.
  *
@@ -638,11 +638,13 @@ public class TabletServerResourceManager {
       request.setFiles(tabletFiles);
       try {
         return strategy.shouldCompact(request);
      } catch (IOException ex) {
        return false;
      } catch (IOException e) {
        throw new RuntimeException(e);
       }
     }
 


     // END methods that Tablets call to make decisions about major compaction
 
     // tablets call this method to run minor compactions,
diff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/CompactionPlan.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/CompactionPlan.java
index 6f69fb072..75c6bd81b 100644
-- a/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/CompactionPlan.java
++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/CompactionPlan.java
@@ -22,9 +22,8 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
import org.apache.accumulo.server.fs.FileRef;

 import com.google.common.collect.Sets;
import org.apache.accumulo.server.fs.FileRef;
 
 /**
  * A plan for a compaction: the input files, the files that are *not* inputs to a compaction that should simply be deleted, and the optional parameters used to
diff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/CompactionStrategy.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/CompactionStrategy.java
index 7bc1a80ea..2d9488475 100644
-- a/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/CompactionStrategy.java
++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/CompactionStrategy.java
@@ -43,6 +43,12 @@ public abstract class CompactionStrategy {
    * {@link #getCompactionPlan(MajorCompactionRequest)}) that it does not need to. Any state stored during shouldCompact will no longer exist when
    * {@link #gatherInformation(MajorCompactionRequest)} and {@link #getCompactionPlan(MajorCompactionRequest)} are called.
    * 
   * &lt;P&gt;
   * Called while holding the tablet lock, so it should not be doing any blocking.
   * 
   * &lt;P&gt;
   * Since no blocking should be done in this method, then its unexpected that this method will throw IOException. However since its in the API, it can not be
   * easily removed.
    */</comment>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>shouldCompact</name><argument_list>(<argument><expr><name>MajorCompactionRequest</name> <name>request</name></expr></argument>)</argument_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">64</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name>CompactionStrategy</name> <block>{
   <comment type="block" format="javadoc">/**
    * Get the plan for compacting a tablets files. Called while holding the tablet lock, so it should not be doing any blocking.
    * 
   * &lt;P&gt;
   * Since no blocking should be done in this method, then its unexpected that this method will throw IOException. However since its in the API, it can not be
   * easily removed.
   * 
    * @param request
    *          basic details about the tablet
    * @return the plan for a major compaction, or null to cancel the compaction.
diff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/DefaultCompactionStrategy.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/DefaultCompactionStrategy.java
index 8b03d1700..1f0dc3a6c 100644
-- a/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/DefaultCompactionStrategy.java
++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/compaction/DefaultCompactionStrategy.java
@@ -16,7 +16,6 @@
  */</comment>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>compaction</name></name>;</package></block></expr></expr_stmt>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileRef</name></name>;</import>
 <class><specifier>public</specifier> class <name>DefaultCompactionStrategy</name> <super_list><extends>extends <super><name>CompactionStrategy</name></super></extends></super_list> <block>{
 
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>shouldCompact</name><parameter_list>(<parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldCompact</name><parameter_list>(<parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>CompactionPlan</name></type> <name>plan</name> <init>= <expr><call><name>getCompactionPlan</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <return>return <expr><name>plan</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>plan</name><operator>.</operator><name>inputFiles</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>CompactionPlan</name></type> <name>getCompactionPlan</name><parameter_list>(<parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>CompactionPlan</name></type> <name>getCompactionPlan</name><parameter_list>(<parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>CompactionPlan</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>CompactionPlan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>&gt;</argument_list></name></type> <name>toCompact</name> <init>= <expr><call><name>findMapFilesToCompact</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>EverythingCompactionStrategy</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>EverythingCompactionStrategy</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..9295c305e</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>EverythingCompactionStrategy</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">39</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>compaction</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The default compaction strategy for user initiated compactions. This strategy will always select all files.
 */</comment>

<class><specifier>public</specifier> class <name>EverythingCompactionStrategy</name> <super_list><extends>extends <super><name>CompactionStrategy</name></super></extends></super_list> <block>{

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>shouldCompact</name><parameter_list>(<parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>request</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>CompactionPlan</name></type> <name>getCompactionPlan</name><parameter_list>(<parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>CompactionPlan</name></type> <name>plan</name> <init>= <expr><operator>new</operator> <call><name>CompactionPlan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>plan</name><operator>.</operator><name>inputFiles</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>plan</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>SizeLimitCompactionStrategy</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>SizeLimitCompactionStrategy</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">478939ade</literal><operator>..</operator><literal type="number">6d4dc795a</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>SizeLimitCompactionStrategy</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>compaction</name><operator>/</operator><name><name>SizeLimitCompactionStrategy</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SizeLimitCompactionStrategy</name> extends <name>DefaultCompactionStrategy</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>boolean</name> <call><name>shouldCompact</name><argument_list>(<argument><expr><name>MajorCompactionRequest</name> <name>request</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
  <expr><specifier>public</specifier> <name>boolean</name> <call><name>shouldCompact</name><argument_list>(<argument><expr><name>MajorCompactionRequest</name> <name>request</name></expr></argument>)</argument_list></call> <block>{</block></expr></block></expr></argument></throws></expr></expr_stmt>
     <return>return <expr><call><name><name>super</name><operator>.</operator><name>shouldCompact</name></name><argument_list>(<argument><expr><call><name>filterFiles</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SizeLimitCompactionStrategy</name> extends <name>DefaultCompactionStrategy</name> <block>{
   }</block>
 
   @<name>Override</name>
  <specifier>public</specifier> <name>CompactionPlan</name> <call><name>getCompactionPlan</name><argument_list>(<argument><expr><name>MajorCompactionRequest</name> <name>request</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
  <expr><specifier>public</specifier> <name>CompactionPlan</name> <call><name>getCompactionPlan</name><argument_list>(<argument><expr><name>MajorCompactionRequest</name> <name>request</name></expr></argument>)</argument_list></call> <block>{</block></expr></block></expr></argument></throws></expr></expr_stmt>
     <return>return <expr><call><name><name>super</name><operator>.</operator><name>getCompactionPlan</name></name><argument_list>(<argument><expr><call><name>filterFiles</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>bc55c4f9f</name><operator>..</operator><name>bc7506284</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name>tablet</name><operator>/</operator><name><name>Tablet</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantLock</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Durability</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionStrategyConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>DurabilityImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>Tables</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>VolumeManager</name><operator>.</operator><name>FileType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>VolumeUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>VolumeUtil</name><operator>.</operator><name>TabletFiles</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>TServerInstance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>tableOps</name><operator>.</operator><name>CompactionIterators</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>tableOps</name><operator>.</operator><name>UserCompactionConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>problems</name><operator>.</operator><name>ProblemReport</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>problems</name><operator>.</operator><name>ProblemReports</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>problems</name><operator>.</operator><name>ProblemType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>SystemCredentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>tablets</name><operator>.</operator><name>TabletTime</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>tablets</name><operator>.</operator><name>UniqueNameAllocator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtil</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1152</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1154</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
  <function><type><specifier>public</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getCompactionID</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoNodeException</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>UserCompactionConfig</name></argument>&gt;</argument_list></name></type> <name>getCompactionID</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoNodeException</name></expr></argument></throws> <block>{<block_content>
     <try>try <block>{<block_content>
       <decl_stmt><decl><type><name>String</name></type> <name>zTablePath</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>ZROOT</name></name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>tabletServer</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstanceID</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZTABLES</name></name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>extent</name><operator>.</operator><name>getTableId</name></name><argument_list>()</argument_list></call>
           <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZTABLE_COMPACT_ID</name></name></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1160</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1162</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
       <expr><name><name>String</name><index>[]</index></name> <name>tokens</name> <operator>=</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>ZooReaderWriter</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getData</name><argument_list>(<argument><expr><name>zTablePath</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;
       <name>long</name> <name>compactID</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
      <decl_stmt><decl><type><name>CompactionIterators</name></type> <name>iters</name> <init>= <expr><operator>new</operator> <call><name>CompactionIterators</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>UserCompactionConfig</name></type> <name>compactionConfig</name> <init>= <expr><operator>new</operator> <call><name>UserCompactionConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
       <if_stmt><if>if <condition>(<expr><name><name>tokens</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
         <decl_stmt><decl><type><name>Hex</name></type> <name>hex</name> <init>= <expr><operator>new</operator> <call><name>Hex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1168</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">1170</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
         <expr><name>DataInputStream</name> <name>dis</name> <operator>=</operator> <operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><name>bais</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
 
         <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>iters</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>compactionConfig</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></catch></try>
 
        <decl_stmt><decl><type><name>KeyExtent</name></type> <name>ke</name> <init>= <expr><operator>new</operator> <call><name>KeyExtent</name><argument_list>(<argument><expr><call><name><name>extent</name><operator>.</operator><name>getTableId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>iters</name><operator>.</operator><name>getEndRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>iters</name><operator>.</operator><name>getStartRow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>KeyExtent</name></type> <name>ke</name> <init>= <expr><operator>new</operator> <call><name>KeyExtent</name><argument_list>(<argument><expr><call><name><name>extent</name><operator>.</operator><name>getTableId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>compactionConfig</name><operator>.</operator><name>getEndRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>compactionConfig</name><operator>.</operator><name>getStartRow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
         <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ke</name><operator>.</operator><name>overlaps</name></name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
           <comment type="line">// only use iterators if compaction range overlaps</comment>
          <expr_stmt><expr><name>iters</name> <operator>=</operator> <operator>new</operator> <call><name>CompactionIterators</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>compactionConfig</name> <operator>=</operator> <operator>new</operator> <call><name>UserCompactionConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
       </block_content>}</block></if></if_stmt>
 
      <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>compactID</name></expr></argument>, <argument><expr><call><name><name>iters</name><operator>.</operator><name>getIterators</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>UserCompactionConfig</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>compactID</name></expr></argument>, <argument><expr><name>compactionConfig</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>nfe</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1780</literal></expr><operator>,</operator><expr><literal type="number">21</literal> <operator>+</operator><literal type="number">1782</literal></expr><operator>,</operator><expr><literal type="number">34</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
 
     <expr><name>long</name> <name>t1</name></expr>, <expr><name>t2</name></expr>, <expr><name>t3</name></expr>;
 
    <comment type="line">// acquire file info outside of tablet lock</comment>
    <name>CompactionStrategy</name> <name>strategy</name> <operator>=</operator> <call><name><name>Property</name><operator>.</operator><name>createTableInstanceFromPropertyName</name></name><argument_list>(<argument><expr><name>tableConfiguration</name></expr></argument>, <argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_COMPACTION_STRATEGY</name></name></expr></argument>,
        <argument><expr><name><name>CompactionStrategy</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DefaultCompactionStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>strategy</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>getCompactionStrategyOptions</name></name><argument_list>(<argument><expr><name>tableConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>UserCompactionConfig</name></argument>&gt;</argument_list></name></type> <name>compactionId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CompactionStrategy</name></type> <name>strategy</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Key</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>firstAndLastKeys</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name><name>MajorCompactionReason</name><operator>.</operator><name>CHOP</name></name></expr>)</condition> <block>{<block_content>

    <if_stmt><if>if<condition>(<expr><name>reason</name> <operator>==</operator> <name><name>MajorCompactionReason</name><operator>.</operator><name>USER</name></name></expr>)</condition><block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>compactionId</name> <operator>=</operator> <call><name>getCompactionID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>strategy</name> <operator>=</operator> <call><name>createCompactionStrategy</name><argument_list>(<argument><expr><call><name><name>compactionId</name><operator>.</operator><name>getSecond</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompactionStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoNodeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason</name> <operator>==</operator> <name><name>MajorCompactionReason</name><operator>.</operator><name>NORMAL</name></name> <operator>||</operator> <name>reason</name> <operator>==</operator> <name><name>MajorCompactionReason</name><operator>.</operator><name>IDLE</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>strategy</name> <operator>=</operator> <call><name><name>Property</name><operator>.</operator><name>createTableInstanceFromPropertyName</name></name><argument_list>(<argument><expr><name>tableConfiguration</name></expr></argument>, <argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_COMPACTION_STRATEGY</name></name></expr></argument>, <argument><expr><name><name>CompactionStrategy</name><operator>.</operator><name>class</name></name></expr></argument>,
          <argument><expr><operator>new</operator> <call><name>DefaultCompactionStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>strategy</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>getCompactionStrategyOptions</name></name><argument_list>(<argument><expr><name>tableConfiguration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason</name> <operator>==</operator> <name><name>MajorCompactionReason</name><operator>.</operator><name>CHOP</name></name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>firstAndLastKeys</name> <operator>=</operator> <call><name>getFirstAndLastKeys</name><argument_list>(<argument><expr><call><name>getDatafileManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatafileSizes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason</name> <operator>!=</operator> <name><name>MajorCompactionReason</name><operator>.</operator><name>USER</name></name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unknown compaction reason "</literal> <operator>+</operator> <name>reason</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>strategy</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name>MajorCompactionRequest</name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name>MajorCompactionRequest</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><call><name>getTabletServer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><call><name>getDatafileManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatafileSizes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>strategy</name><operator>.</operator><name>gatherInformation</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></type> <name>filesToCompact</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></type> <name>filesToCompact</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>int</name></type> <name>maxFilesToCompact</name> <init>= <expr><call><name><name>tableConfiguration</name><operator>.</operator><name>getCount</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TSERV_MAJC_THREAD_MAXOPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1802</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1817</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
     <expr><name>CompactionPlan</name> <name>plan</name> <operator>=</operator> <literal type="null">null</literal></expr>;
 
     <name>boolean</name> <name>propogateDeletes</name> <operator>=</operator> <literal type="boolean">false</literal></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>updateCompactionID</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
 
     <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
       <comment type="line">// plan all that work that needs to be done in the sync block... then do the actual work</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1831</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">1847</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
       <if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name><name>MajorCompactionReason</name><operator>.</operator><name>CHOP</name></name></expr>)</condition> <block>{<block_content>
         <comment type="line">// enforce rules: files with keys outside our range need to be compacted</comment>
         <expr_stmt><expr><call><name><name>inputFiles</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>findChopFiles</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>firstAndLastKeys</name></expr></argument>, <argument><expr><call><name><name>allFiles</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason</name> <operator>==</operator> <name><name>MajorCompactionReason</name><operator>.</operator><name>USER</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>inputFiles</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>allFiles</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if> <else>else <block>{<block_content>
         <decl_stmt><decl><type><name>MajorCompactionRequest</name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name>MajorCompactionRequest</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>tableConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><name>allFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1844</literal></expr><operator>,</operator><expr><literal type="number">32</literal> <operator>+</operator><literal type="number">1858</literal></expr><operator>,</operator><expr><literal type="number">48</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
       }</block></expr></expr_stmt>
 
       <if_stmt><if>if <condition>(<expr><call><name><name>inputFiles</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>majCStats</name></expr>;</return>
        <if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name><name>MajorCompactionReason</name><operator>.</operator><name>USER</name></name></expr>)</condition> <block>{<block_content>
          <comment type="line">// no work to do</comment>
          <expr_stmt><expr><name>lastCompactID</name> <operator>=</operator> <call><name><name>compactionId</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>updateCompactionID</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>majCStats</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// If no original files will exist at the end of the compaction, we do not have to propogate deletes</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>&gt;</argument_list></name></type> <name>droppedFiles</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>droppedFiles</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>inputFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>plan</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>droppedFiles</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name><name>plan</name><operator>.</operator><name>deleteFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>propogateDeletes</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name><name>droppedFiles</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>allFiles</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Major compaction plan: "</literal> <operator>+</operator> <name>plan</name> <operator>+</operator> <literal type="string">" propogate deletes : "</literal> <operator>+</operator> <name>propogateDeletes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filesToCompact</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>allFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filesToCompact</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>retainAll</name><argument_list>(<argument><expr><name>inputFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getDatafileManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>reserveMajorCompactingFiles</name><argument_list>(<argument><expr><call><name><name>filesToCompact</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
      <comment type="line">// If no original files will exist at the end of the compaction, we do not have to propogate deletes</comment>
      <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>&gt;</argument_list></name></type> <name>droppedFiles</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>droppedFiles</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>inputFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>plan</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>droppedFiles</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name><name>plan</name><operator>.</operator><name>deleteFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>propogateDeletes</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name><name>droppedFiles</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>allFiles</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Major compaction plan: "</literal> <operator>+</operator> <name>plan</name> <operator>+</operator> <literal type="string">" propogate deletes : "</literal> <operator>+</operator> <name>propogateDeletes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>filesToCompact</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>allFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>filesToCompact</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>retainAll</name><argument_list>(<argument><expr><name>inputFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
       <expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>getDatafileManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>reserveMajorCompactingFiles</name><argument_list>(<argument><expr><call><name><name>filesToCompact</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt></block></expr></expr_stmt>
 
     <try>try <block>{<block_content>
 
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"MajC initiate lock %.2f secs, wait %.2f secs"</literal></expr></argument>, <argument><expr><operator>(</operator><name>t3</name> <operator>-</operator> <name>t2</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>t2</name> <operator>-</operator> <name>t1</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
      <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>compactionId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>propogateDeletes</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>updateCompactionID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>MetadataTableUtil</name><operator>.</operator><name>updateTabletCompactID</name></name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><call><name><name>compactionId</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>tabletServer</name></expr></argument>, <argument><expr><call><name>getTabletServer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLock</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>majCStats</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>propogateDeletes</name> <operator>&amp;&amp;</operator> <name>compactionId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
         <comment type="line">// compacting everything, so update the compaction id in metadata</comment>
         <try>try <block>{<block_content>
           <expr_stmt><expr><name>compactionId</name> <operator>=</operator> <call><name>getCompactionID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>compactionId</name><operator>.</operator><name>getSecond</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompactionStrategy</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>compactionId</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <comment type="line">// TODO maybe return unless chop?</comment>
          </block_content>}</block></if></if_stmt>

         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoNodeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></catch></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1890</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1920</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
           }</block></expr></expr_stmt>
         </block_content>}</block></if></if_stmt>
 
        <expr_stmt><expr><name>compactionIterators</name> <operator>=</operator> <call><name><name>compactionId</name><operator>.</operator><name>getSecond</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compactionIterators</name> <operator>=</operator> <call><name><name>compactionId</name><operator>.</operator><name>getSecond</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIterators</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
 
       <comment type="line">// need to handle case where only one file is being major compacted</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2495</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">2525</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
     <expr><call><name>initiateMajorCompaction</name><argument_list>(<argument><expr><name><name>MajorCompactionReason</name><operator>.</operator><name>CHOP</name></name></expr></argument>)</argument_list></call></expr>;
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <name>void</name></type> <name>compactAll</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>compactionId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function><type><specifier>private</specifier> <name>CompactionStrategy</name></type> <name>createCompactionStrategy</name><parameter_list>(<parameter><decl><type><name>CompactionStrategyConfig</name></type> <name>strategyConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>context</name> <init>= <expr><call><name><name>tableConfiguration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>TABLE_CLASSPATH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>clazzName</name> <init>= <expr><call><name><name>strategyConfig</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>CompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>clazz</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>context</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><name>AccumuloVFSClassLoader</name><operator>.</operator><name>getContextManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>loadClass</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>clazzName</name></expr></argument>, <argument><expr><name><name>CompactionStrategy</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><name>AccumuloVFSClassLoader</name><operator>.</operator><name>loadClass</name></name><argument_list>(<argument><expr><name>clazzName</name></expr></argument>, <argument><expr><name><name>CompactionStrategy</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <decl_stmt><decl><type><name>CompactionStrategy</name></type> <name>strategy</name> <init>= <expr><call><name><name>clazz</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>strategy</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>strategyConfig</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>strategy</name></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>compactAll</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>compactionId</name></decl></parameter>, <parameter><decl><type><name>UserCompactionConfig</name></type> <name>compactionConfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>boolean</name></type> <name>updateMetadata</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
 
     <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2522</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">2569</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>class</name> <name>Tablet</name> implements <name>TabletCommitter</name> <block>{
         <expr><name>majorCompactionState</name> <operator>=</operator> <name><name>CompactionState</name><operator>.</operator><name>IN_PROGRESS</name></name></expr>;
         <name>updateMetadata</name> <operator>=</operator> <literal type="boolean">true</literal></block></expr>;</expr_stmt>
         <expr_stmt><expr><name>lastCompactID</name> <operator>=</operator> <name>compactionId</name></expr>;</expr_stmt>
      </block_content>}</block></synchronized> <if_stmt><else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>initiateMajorCompaction</name><argument_list>(<argument><expr><name><name>MajorCompactionReason</name><operator>.</operator><name>USER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></function> <if_stmt><else>else <block>{<block_content>
        <decl_stmt><decl><type><name>CompactionStrategyConfig</name></type> <name>strategyConfig</name> <init>= <expr><call><name><name>compactionConfig</name><operator>.</operator><name>getCompactionStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompactionStrategy</name></type> <name>strategy</name> <init>= <expr><call><name>createCompactionStrategy</name><argument_list>(<argument><expr><name>strategyConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>MajorCompactionRequest</name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name>MajorCompactionRequest</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name><name>MajorCompactionReason</name><operator>.</operator><name>USER</name></name></expr></argument>, <argument><expr><call><name>getTabletServer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFileSystem</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableConfiguration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setFiles</name></name><argument_list>(<argument><expr><call><name>getDatafileManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatafileSizes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>strategy</name><operator>.</operator><name>shouldCompact</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>initiateMajorCompaction</name><argument_list>(<argument><expr><name><name>MajorCompactionReason</name><operator>.</operator><name>USER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>majorCompactionState</name> <operator>=</operator> <name><name>CompactionState</name><operator>.</operator><name>IN_PROGRESS</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>updateMetadata</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastCompactID</name> <operator>=</operator> <name>compactionId</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
      </block_content>}</block></else></if_stmt>
     </block_content>}</block></function>
 
     <if_stmt><if>if <condition>(<expr><name>updateMetadata</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>CompactCommand</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>CompactCommand</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">80dd9ba73</literal><operator>..</operator><literal type="number">660630e92</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>CompactCommand</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>shell</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>CompactCommand</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">28</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>shell</name><operator>.</operator><name>commands</name></name>;</package>
 
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionStrategyConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>shell</name><operator>.</operator><name>Shell</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>cli</name><operator>.</operator><name>CommandLine</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>cli</name><operator>.</operator><name>Option</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>cli</name><operator>.</operator><name>Options</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>CompactCommand</name> <super_list><extends>extends <super><name>TableOperation</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Option</name></type> <name>noFlushOption</name></decl>, <decl><type ref="prev"/><name>waitOpt</name></decl>, <decl><type ref="prev"/><name>profileOpt</name></decl>, <decl><type ref="prev"/><name>cancelOpt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>flush</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Text</name></type> <name>startRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Text</name></type> <name>endRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Option</name></type> <name>noFlushOption</name></decl>, <decl><type ref="prev"/><name>waitOpt</name></decl>, <decl><type ref="prev"/><name>profileOpt</name></decl>, <decl><type ref="prev"/><name>cancelOpt</name></decl>, <decl><type ref="prev"/><name>strategyOpt</name></decl>, <decl><type ref="prev"/><name>strategyConfigOpt</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>CompactionConfig</name></type> <name>compactionConfig</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
   
   <decl_stmt><decl><type><name>boolean</name></type> <name>override</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>wait</name></decl>;</decl_stmt>
   
   <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>cancel</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">13</literal> <operator>+</operator><literal type="number">58</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactCommand</name> extends <name>TableOperation</name> <block>{
       }</block></expr></expr_stmt>
     }</block></class> <if_stmt><else>else <block>{<block_content>
       <try>try <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>wait</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>compactionConfig</name><operator>.</operator><name>getWait</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Compacting table ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
         
        <expr_stmt><expr><call><name><name>shellState</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tableOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>startRow</name></expr></argument>, <argument><expr><name>endRow</name></expr></argument>, <argument><expr><name>iterators</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>, <argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>shellState</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tableOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>compactionConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         
        <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Compaction of table "</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>wait</name></expr> ?</condition><then> <expr><literal type="string">"completed"</literal></expr> </then><else>: <expr><literal type="string">"started"</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">" for given range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Compaction of table "</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>compactionConfig</name><operator>.</operator><name>getWait</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"completed"</literal></expr> </then><else>: <expr><literal type="string">"started"</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">" for given range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <throw>throw <expr><operator>new</operator> <call><name>AccumuloException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
       </block_content>}</block></catch>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">85</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactCommand</name> extends <name>TableOperation</name> <block>{
       <expr><name>cancel</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;
     }</block></expr></expr_stmt>
 
    <expr_stmt><expr><name>flush</name> <operator>=</operator> <operator>!</operator><call><name><name>cl</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><call><name><name>noFlushOption</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>startRow</name> <operator>=</operator> <call><name><name>OptUtil</name><operator>.</operator><name>getStartRow</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>endRow</name> <operator>=</operator> <call><name><name>OptUtil</name><operator>.</operator><name>getEndRow</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wait</name> <operator>=</operator> <call><name><name>cl</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><call><name><name>waitOpt</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>compactionConfig</name> <operator>=</operator> <operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>compactionConfig</name><operator>.</operator><name>setFlush</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>cl</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><call><name><name>noFlushOption</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>compactionConfig</name><operator>.</operator><name>setWait</name></name><argument_list>(<argument><expr><call><name><name>cl</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><call><name><name>waitOpt</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>compactionConfig</name><operator>.</operator><name>setStartRow</name></name><argument_list>(<argument><expr><call><name><name>OptUtil</name><operator>.</operator><name>getStartRow</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>compactionConfig</name><operator>.</operator><name>setEndRow</name></name><argument_list>(<argument><expr><call><name><name>OptUtil</name><operator>.</operator><name>getEndRow</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <if_stmt><if>if <condition>(<expr><call><name><name>cl</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><call><name><name>profileOpt</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name></type> <name>iterators</name> <init>= <expr><call><name><name>shellState</name><operator>.</operator><name>iteratorProfiles</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>cl</name><operator>.</operator><name>getOptionValue</name></name><argument_list>(<argument><expr><call><name><name>profileOpt</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">98</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactCommand</name> extends <name>TableOperation</name> <block>{
         <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
       }</block></expr></expr_stmt>
       
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IteratorSetting</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterators</name></name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>compactionConfig</name><operator>.</operator><name>setIterators</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
 
    <if_stmt><if>if <condition>(<expr><call><name><name>cl</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><call><name><name>strategyOpt</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>CompactionStrategyConfig</name></type> <name>csc</name> <init>= <expr><operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>(<argument><expr><call><name><name>cl</name><operator>.</operator><name>getOptionValue</name></name><argument_list>(<argument><expr><call><name><name>strategyOpt</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>cl</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><call><name><name>strategyConfigOpt</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>keyVals</name> <init>= <expr><call><name><name>cl</name><operator>.</operator><name>getOptionValue</name></name><argument_list>(<argument><expr><call><name><name>strategyConfigOpt</name><operator>.</operator><name>getOpt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyVal</name> <range>: <expr><name>keyVals</name></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>sa</name> <init>= <expr><call><name><name>keyVal</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>sa</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>csc</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name><name>compactionConfig</name><operator>.</operator><name>setCompactionStrategy</name></name><argument_list>(<argument><expr><name>csc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
 
     <return>return <expr><call><name><name>super</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>fullCommand</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>shellState</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">121</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">135</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>CompactCommand</name> extends <name>TableOperation</name> <block>{
     <expr><call><name><name>profileOpt</name><operator>.</operator><name>setArgName</name></name><argument_list>(<argument><expr><literal type="string">"profile"</literal></expr></argument>)</argument_list></call></expr>;
     <call><name><name>opts</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>profileOpt</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>strategyOpt</name> <operator>=</operator> <operator>new</operator> <call><name>Option</name><argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><literal type="string">"strategy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"compaction strategy class name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>strategyOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strategyConfigOpt</name> <operator>=</operator> <operator>new</operator> <call><name>Option</name><argument_list>(<argument><expr><literal type="string">"sc"</literal></expr></argument>, <argument><expr><literal type="string">"strategyConfig"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Key value options for compaction strategy.  Expects &lt;prop&gt;=&lt;value&gt;{,&lt;prop&gt;=&lt;value&gt;}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>strategyConfigOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt><expr><name>cancelOpt</name> <operator>=</operator> <operator>new</operator> <call><name>Option</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"cancel"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"cancel user initiated compactions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>addOption</name></name><argument_list>(<argument><expr><name>cancelOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name><name>SimpleProxyIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name><name>SimpleProxyIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">50e53a9df</literal><operator>..</operator><name>c07507555</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name><name>SimpleProxyIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>proxy</name><operator>/</operator><name><name>SimpleProxyIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>BatchScanOptions</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>Column</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ColumnUpdate</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>CompactionReason</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>CompactionStrategyConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>CompactionType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>Condition</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>proxy</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ConditionalStatus</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">245</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">246</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleProxyIT</name> <block>{
       <expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"exception not thrown"</literal></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>TException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch>
     <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>badLogin</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>badLogin</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"exception not thrown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AccumuloSecurityException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch></try>
     <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">531</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">532</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleProxyIT</name> <block>{
       <expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"exception not thrown"</literal></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>TableNotFoundException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch>
     <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>doesNotExist</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>doesNotExist</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"exception not thrown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>TableNotFoundException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch></try>
     <try>try <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">874</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">875</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleProxyIT</name> <block>{
       <expr><specifier>public</specifier> <name>void</name> <call><name>run</name><argument_list>()</argument_list></call> <block>{
         <try>try <block>{<block_content>
           <decl_stmt><decl><type><name>Client</name></type> <name>client2</name> <init>= <expr><operator>new</operator> <call><name>TestProxyClient</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><name>proxyPort</name></expr></argument>, <argument><expr><call><name><name>protocolClass</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>proxy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>client2</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><literal type="string">"slow"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>client2</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><literal type="string">"slow"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt/></block_content></block></try></block></expr>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
         </block_content>}</block></catch>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1126</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1127</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleProxyIT</name> <block>{
     <expr><call><name><name>client</name><operator>.</operator><name>clearLocatorCache</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>TABLE_TEST</name></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// compact</comment>
    <call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>TABLE_TEST</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>TABLE_TEST</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>TABLE_TEST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertScan</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>TABLE_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1141</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1142</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleProxyIT</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>diskUsage</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>diskUsage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTables</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>diskUsage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTables</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>TABLE_TEST2</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>TABLE_TEST2</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>diskUsage</name> <operator>=</operator> <operator>(</operator><call><name><name>client</name><operator>.</operator><name>getDiskUsage</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tablesToScan</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>diskUsage</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>diskUsage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTables</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1591</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">1592</literal></expr><operator>,</operator><expr><literal type="number">40</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleProxyIT</name> <block>{
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>start</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>start</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;
     <call><name>assertEquals</name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>stop</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>stop</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
   </block_content>}</block></try>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCompactionStrategy</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>tableName</name> <init>= <expr><call><name>makeTableName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>createTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>TimeType</name><operator>.</operator><name>MILLIS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><call><name><name>Property</name><operator>.</operator><name>VFS_CONTEXT_CLASSPATH_PROPERTY</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"context1"</literal></expr></argument>,
        <argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/src/test/resources/TestCompactionStrat.jar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>setTableProperty</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_CLASSPATH</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"context1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>addSplits</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><call><name>s2bb</name><argument_list>(<argument><expr><literal type="string">"efg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>updateAndFlush</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name>mutation</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"cf"</literal></expr></argument>, <argument><expr><literal type="string">"cq"</literal></expr></argument>, <argument><expr><literal type="string">"v1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>flushTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>updateAndFlush</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name>mutation</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"cf"</literal></expr></argument>, <argument><expr><literal type="string">"cq"</literal></expr></argument>, <argument><expr><literal type="string">"v2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>flushTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>updateAndFlush</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name>mutation</name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><literal type="string">"cf"</literal></expr></argument>, <argument><expr><literal type="string">"cq"</literal></expr></argument>, <argument><expr><literal type="string">"v1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>flushTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>updateAndFlush</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name>mutation</name><argument_list>(<argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><literal type="string">"cf"</literal></expr></argument>, <argument><expr><literal type="string">"cq"</literal></expr></argument>, <argument><expr><literal type="string">"v2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>flushTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CompactionStrategyConfig</name></type> <name>csc</name> <init>= <expr><operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// The EfgCompactionStrat will only compact tablets with and end row of efg</comment>
    <expr_stmt><expr><call><name><name>csc</name><operator>.</operator><name>setClassName</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.accumulo.test.EfgCompactionStrat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>compactTable</name></name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>csc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 </block_content>}</block></try>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">544bb7674</literal><operator>..</operator><name>d878c7f7d</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">54</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>file</name><operator>.</operator><name>FileSKVWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>UtilWaitThread</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>shell</name><operator>.</operator><name>Shell</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>SharedMiniClusterIT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>shell</name><operator>.</operator><name>Shell</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>UserCompactionStrategyIT</name><operator>.</operator><name>TestCompactionStrategy</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name><operator>.</operator><name>FunctionalTestUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name><operator>.</operator><name>SlowIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tracer</name><operator>.</operator><name>TraceServer</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">725</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">726</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SharedMiniClusterIT</name> <block>{
     <comment type="line">// make two more files:</comment>
     <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert m 1 2 3"</literal></expr></argument>)</argument_list></call></expr>;
     <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert n 1 2 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert n 1 2 v901"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>oldFiles</name> <init>= <expr><call><name>getFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">740</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">741</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SharedMiniClusterIT</name> <block>{
     <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"merge --all -t "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
     <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -w"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// test compaction strategy</comment>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert z 1 2 v900"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -w -s "</literal> <operator>+</operator> <call><name><name>TestCompactionStrategy</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" -sc inputPrefix=F,dropPrefix=A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"v900"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"v901"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></else></if_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>UserCompactionStrategyIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>UserCompactionStrategyIT</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..5421f520b</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>UserCompactionStrategyIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">337</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriterConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IteratorSetting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionStrategyConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>iterators</name><operator>.</operator><name>user</name><operator>.</operator><name>RegExFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>DataFileValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>AccumuloClusterIT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name><operator>.</operator><name>FunctionalTestUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>compaction</name><operator>.</operator><name>CompactionPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>compaction</name><operator>.</operator><name>CompactionStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>tserver</name><operator>.</operator><name>compaction</name><operator>.</operator><name>MajorCompactionRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>

<class><specifier>public</specifier> class <name>UserCompactionStrategyIT</name> <super_list><extends>extends <super><name>AccumuloClusterIT</name></super></extends></super_list> <block>{

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>SizeCompactionStrategy</name> <super_list><extends>extends <super><name>CompactionStrategy</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>shouldCompact</name><parameter_list>(<parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

      <for>for <control>(<init><decl><type><name>DataFileValue</name></type> <name>dfv</name> <range>: <expr><call><name><name>request</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>dfv</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>CompactionPlan</name></type> <name>getCompactionPlan</name><parameter_list>(<parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>CompactionPlan</name></type> <name>plan</name> <init>= <expr><operator>new</operator> <call><name>CompactionPlan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>FileRef</name></argument>,<argument><name>DataFileValue</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>request</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>plan</name><operator>.</operator><name>inputFiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

      <return>return <expr><name>plan</name></expr>;</return>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TestCompactionStrategy</name> <super_list><extends>extends <super><name>CompactionStrategy</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>inputPrefix</name> <init>= <expr><literal type="string">"Z"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>dropPrefix</name> <init>= <expr><literal type="string">"Z"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>shouldCompact</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><literal type="string">"inputPrefix"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>inputPrefix</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"inputPrefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><literal type="string">"dropPrefix"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>dropPrefix</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"dropPrefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><literal type="string">"shouldCompact"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>shouldCompact</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"shouldCompact"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>shouldCompact</name><parameter_list>(<parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>shouldCompact</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

      <for>for <control>(<init><decl><type><name>FileRef</name></type> <name>fref</name> <range>: <expr><call><name><name>request</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>fref</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><name>inputPrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>fref</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><name>dropPrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></for>

      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>CompactionPlan</name></type> <name>getCompactionPlan</name><parameter_list>(<parameter><decl><type><name>MajorCompactionRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>CompactionPlan</name></type> <name>plan</name> <init>= <expr><operator>new</operator> <call><name>CompactionPlan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>FileRef</name></type> <name>fref</name> <range>: <expr><call><name><name>request</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>fref</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><name>dropPrefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>plan</name><operator>.</operator><name>deleteFiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>fref</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><name>inputPrefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>plan</name><operator>.</operator><name>inputFiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <return>return <expr><name>plan</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDropA</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Connector</name></type> <name>c</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// create a file that starts with A containing rows 'a' and 'b'</comment>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// drop files that start with A</comment>
    <decl_stmt><decl><type><name>CompactionStrategyConfig</name></type> <name>csConfig</name> <init>= <expr><operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>(<argument><expr><call><name><name>TestCompactionStrategy</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>csConfig</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"dropPrefix"</literal></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><literal type="string">"inputPrefix"</literal></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setCompactionStrategy</name><argument_list>(<argument><expr><name>csConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getRows</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// this compaction should not drop files starting with A</comment>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getRows</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>testDropNone</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>Connector</name></type> <name>c</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CompactionStrategyConfig</name></type> <name>csConfig</name> <init>= <expr><operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>(<argument><expr><call><name><name>TestCompactionStrategy</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>csConfig</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setCompactionStrategy</name><argument_list>(<argument><expr><name>csConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getRows</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDropNone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// test a compaction strategy that selects no files. In this case there is no work to do, want to ensure it does not hang.</comment>

    <expr_stmt><expr><call><name>testDropNone</name><argument_list>(<argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"inputPrefix"</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDropNone2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// test a compaction strategy that selects no files. This differs testDropNone() in that shouldCompact() will return true and getCompactionPlan() will</comment>
    <comment type="line">// return no work to do.</comment>

    <expr_stmt><expr><call><name>testDropNone</name><argument_list>(<argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"inputPrefix"</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>, <argument><expr><literal type="string">"shouldCompact"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testPerTableClasspath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// test pertable classpath + user specified compaction strat</comment>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Connector</name></type> <name>c</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>tableName</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>instanceOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>VFS_CONTEXT_CLASSPATH_PROPERTY</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"context1"</literal></expr></argument>,
        <argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/src/test/resources/TestCompactionStrat.jar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setProperty</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name><name>Property</name><operator>.</operator><name>TABLE_CLASSPATH</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"context1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addSplits</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>Text</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"efg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>FunctionalTestUtils</name><operator>.</operator><name>countRFiles</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// EfgCompactionStrat will only compact a tablet w/ end row of 'efg'. No other tablets are compacted.</comment>
    <decl_stmt><decl><type><name>CompactionStrategyConfig</name></type> <name>csConfig</name> <init>= <expr><operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>(<argument><expr><literal type="string">"org.apache.accumulo.test.EfgCompactionStrat"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setCompactionStrategy</name><argument_list>(<argument><expr><name>csConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>FunctionalTestUtils</name><operator>.</operator><name>countRFiles</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>FunctionalTestUtils</name><operator>.</operator><name>countRFiles</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIterators</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// test compaction strategy + iterators</comment>

    <decl_stmt><decl><type><name>Connector</name></type> <name>c</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// create a file that starts with A containing rows 'a' and 'b'</comment>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeFlush</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>FunctionalTestUtils</name><operator>.</operator><name>countRFiles</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// drop files that start with A</comment>
    <decl_stmt><decl><type><name>CompactionStrategyConfig</name></type> <name>csConfig</name> <init>= <expr><operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>(<argument><expr><call><name><name>TestCompactionStrategy</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>csConfig</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"inputPrefix"</literal></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IteratorSetting</name></type> <name>iterConf</name> <init>= <expr><operator>new</operator> <call><name>IteratorSetting</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="string">"myregex"</literal></expr></argument>, <argument><expr><name><name>RegExFilter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>RegExFilter</name><operator>.</operator><name>setRegexs</name></name><argument_list>(<argument><expr><name>iterConf</name></expr></argument>, <argument><expr><literal type="string">"a|c"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setCompactionStrategy</name><argument_list>(<argument><expr><name>csConfig</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setIterators</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>iterConf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// compaction strategy should only be applied to one file. If its applied to both, then row 'b' would be dropped by filter.</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getRows</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>FunctionalTestUtils</name><operator>.</operator><name>countRFiles</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ensure that iterator is not applied</comment>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getRows</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>FunctionalTestUtils</name><operator>.</operator><name>countRFiles</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testFileSize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Connector</name></type> <name>c</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// write random data because its very unlikely it will compress</comment>
    <expr_stmt><expr><call><name>writeRandomValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeRandomValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>writeRandomValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeRandomValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeRandomValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>FunctionalTestUtils</name><operator>.</operator><name>countRFiles</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CompactionStrategyConfig</name></type> <name>csConfig</name> <init>= <expr><operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>(<argument><expr><call><name><name>SizeCompactionStrategy</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>csConfig</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setCompactionStrategy</name><argument_list>(<argument><expr><name>csConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>FunctionalTestUtils</name><operator>.</operator><name>countRFiles</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>csConfig</name> <operator>=</operator> <operator>new</operator> <call><name>CompactionStrategyConfig</name><argument_list>(<argument><expr><call><name><name>SizeCompactionStrategy</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>csConfig</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compact</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CompactionConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setWait</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setCompactionStrategy</name><argument_list>(<argument><expr><name>csConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>FunctionalTestUtils</name><operator>.</operator><name>countRFiles</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>writeRandomValue</name><parameter_list>(<parameter><decl><type><name>Connector</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Random</name></type> <name>rand</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>byte</name></type> <name><name>data1</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>rand</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Mutation</name></type> <name>m1</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><literal type="string">"r"</literal> <operator>+</operator> <call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">909090</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><literal type="string">"bl0b"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><name>data1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getRows</name><parameter_list>(<parameter><decl><type><name>Connector</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name>scanner</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRowData</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>rows</name></expr>;</return>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>writeFlush</name><parameter_list>(<parameter><decl><type><name>Connector</name></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tablename</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>row</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><name>tablename</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Mutation</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>addMutation</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>(<argument><expr><name>tablename</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>FunctionalTestUtils</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>FunctionalTestUtils</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4e0721b73</literal><operator>..</operator><name>e4e7229bd</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>FunctionalTestUtils</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>FunctionalTestUtils</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name></name>;</package>
 
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">49</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">47</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>

 <class><specifier>public</specifier> class <name>FunctionalTestUtils</name> <block>{
 
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>countRFiles</name><parameter_list>(<parameter><decl><type><name>Connector</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>tableId</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tableIdMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><call><name><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name><operator>.</operator><name>getRange</name></name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scanner</name><operator>.</operator><name>fetchColumnFamily</name></name><argument_list>(<argument><expr><name><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name><operator>.</operator><name>DataFileColumnFamily</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>count</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><type><specifier>static</specifier> <name>void</name></type> <name>checkRFiles</name><parameter_list>(<parameter><decl><type><name>Connector</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minTablets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxTablets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minRFiles</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxRFiles</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>tableId</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tableIdMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></function></block></class></block_content></block></if></if_stmt></block_content></block></try></block_content></block></synchronized></block_content></block></if></if_stmt></block_content></block></catch></try></block_content></block></function></block_content></block></function></block></class></block_content></block></else></if_stmt></block_content></block></constructor></block_content></block></constructor></block_content></block></block></class></block></class></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</unit>
