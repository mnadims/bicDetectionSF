<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/accumulo/fa978b0c3.java"><expr_stmt><expr><name>From</name> <name>fa978b0c3097e7d94fe1c8e9a49db24175711221</name> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Josh</name> <name><name>Elser</name> <argument_list type="generic">&lt;<argument><name>elserj</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Thu</name></expr><operator>,</operator> <expr><literal type="number">6</literal> <name>Nov</name> <literal type="number">2014</literal> <literal type="number">23</literal><operator>:</operator><literal type="number">38</literal><operator>:</operator><literal type="number">37</literal> <operator>-</operator><literal type="number">0500</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>ACCUMULO</name><operator>-</operator><literal type="number">3312</literal> <name>Fix</name> <name>incorrect</name> <name>path</name> <name>generation</name> <name>during</name> <name>clone</name>
 <name><name>table</name><operator>.</operator>

<name>Expanded</name></name> <name>some</name> <name>ITs</name> <name>to</name> <name>actually</name> <name>cover</name> <name>this</name> <name>in</name> <name>the</name> <name><name>future</name><operator>.</operator></name>
--
 <operator>...</operator><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>MetadataTableUtil</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>CloneTestIT</name><operator>.</operator><name>java</name></name> <operator>|</operator> <literal type="number">90</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>-</operator>
 <literal type="number">2</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">90</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">2</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>MetadataTableUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>MetadataTableUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">9cd02eb6a</literal><operator>..</operator><literal type="number">6efd68c0d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>MetadataTableUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>util</name><operator>/</operator><name><name>MetadataTableUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">882</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">882</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>MetadataTableUtil</name> <block>{
       <expr><name>Key</name> <name>k</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;
       <expr><name>Mutation</name> <name>m</name> <operator>=</operator> <operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>getRow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <expr><call><name><name>m</name><operator>.</operator><name>putDelete</name></name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>getColumnFamily</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>k</name><operator>.</operator><name>getColumnQualifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><name>String</name> <name>dir</name> <operator>=</operator> <call><name><name>volumeManager</name><operator>.</operator><name>choose</name></name><argument_list>(<argument><expr><call><name><name>ServerConstants</name><operator>.</operator><name>getBaseUris</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>HDFS_TABLES_DIR</name></name> <operator>+</operator> <name><name>Path</name><operator>.</operator><name>SEPARATOR</name></name> <operator>+</operator> <name>tableId</name>
      <name>String</name> <name>dir</name> <operator>=</operator> <call><name><name>volumeManager</name><operator>.</operator><name>choose</name></name><argument_list>(<argument><expr><call><name><name>ServerConstants</name><operator>.</operator><name>getBaseUris</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>HDFS_TABLES_DIR</name></name> <operator>+</operator> <name><name>Path</name><operator>.</operator><name>SEPARATOR</name></name> <operator>+</operator> <name>tableId</name> <operator>+</operator> <name><name>Path</name><operator>.</operator><name>SEPARATOR</name></name>
           <operator>+</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>FastFormat</name><operator>.</operator><name>toZeroPaddedString</name></name><argument_list>(<argument><expr><name>dirCount</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>CLONE_PREFIX_BYTES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
       <expr><call><name><name>TabletsSection</name><operator>.</operator><name>ServerColumnFamily</name><operator>.</operator><name>DIRECTORY_COLUMN</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>CloneTestIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>CloneTestIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>fc6983163</name><operator>..</operator><literal type="number">505dd5af3</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>CloneTestIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>CloneTestIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr>,<expr><literal type="number">8</literal> @@</expr> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name></name>;</package></block></expr></expr_stmt>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriterConfig</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">22</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DiskUsage</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>ServerConstants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileStatus</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
 * 
 *
  */</comment>
 <class><specifier>public</specifier> class <name>CloneTestIT</name> <super_list><extends>extends <super><name>SimpleMacIT</name></super></extends></super_list> <block>{
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">88</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">96</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>CloneTestIT</name> extends <name>SimpleMacIT</name> <block>{
 
     <expr><call><name>checkData</name><argument_list>(<argument><expr><name>table2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name>checkMetadata</name><argument_list>(<argument><expr><name>table2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;

     <expr><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>tableProps</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>prop</name> <range>: <expr><call><name><name>c</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperties</name><argument_list>(<argument><expr><name>table2</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
       <expr_stmt><expr><call><name><name>tableProps</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>prop</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prop</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">119</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">129</literal></expr><operator>,</operator><expr><literal type="number">48</literal> @@ <specifier>public</specifier> <name>class</name> <name>CloneTestIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  <specifier>private</specifier> <name>void</name> <call><name>checkMetadata</name><argument_list>(<argument><expr><name>String</name> <name>table</name></expr></argument>, <argument><expr><name>Connector</name> <name>conn</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Scanner</name> <name>s</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>fetchColumnFamily</name></name><argument_list>(<argument><expr><name><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name><operator>.</operator><name>DataFileColumnFamily</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name><operator>.</operator><name>ServerColumnFamily</name><operator>.</operator><name>DIRECTORY_COLUMN</name><operator>.</operator><name>fetch</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>tableId</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tableIdMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><literal type="string">"Could not get table id for "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>setRange</name></name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>prefix</name></name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Key</name></type> <name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Text</name></type> <name>cf</name> <init>= <expr><operator>new</operator> <call><name>Text</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>cq</name> <init>= <expr><operator>new</operator> <call><name>Text</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>itemsInspected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>itemsInspected</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>k</name><operator>.</operator><name>getColumnFamily</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>k</name><operator>.</operator><name>getColumnQualifier</name></name><argument_list>(<argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>cf</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name><operator>.</operator><name>DataFileColumnFamily</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>cq</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Will this actually work against HDFS?</comment>
        <decl_stmt><decl><type><name>FileSystem</name></type> <name>fs</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getFileSystem</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><literal type="string">"File does not exist: "</literal> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><call><name><name>fs</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>cf</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name><operator>.</operator><name>ServerColumnFamily</name><operator>.</operator><name>DIRECTORY_COLUMN</name><operator>.</operator><name>getColumnFamily</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="string">"Saw unexpected cq"</literal></expr></argument>, <argument><expr><call><name><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name><operator>.</operator><name>ServerColumnFamily</name><operator>.</operator><name>DIRECTORY_COLUMN</name><operator>.</operator><name>getColumnQualifier</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>tabletDir</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>tableDir</name> <init>= <expr><call><name><name>tabletDir</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>tablesDir</name> <init>= <expr><call><name><name>tableDir</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name><name>ServerConstants</name><operator>.</operator><name>TABLE_DIR</name></name></expr></argument>, <argument><expr><call><name><name>tablesDir</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><literal type="string">"Got unexpected key-value: "</literal> <operator>+</operator> <name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>()</argument_list></call></expr>;</throw>
      </block_content>}</block></else></if_stmt>
    }</block></class>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><literal type="string">"Expected to find metadata entries"</literal></expr></argument>, <argument><expr><name>itemsInspected</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }

   private <function><type><name>BatchWriter</name></type> <name>writeData</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>table1</name></decl></parameter>, <parameter><decl><type><name>Connector</name></type> <name>c</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TableNotFoundException</name></expr></argument>, <argument><expr><name>MutationsRejectedException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><name>table1</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">199</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">251</literal></expr><operator>,</operator><expr><literal type="number">40</literal> @@ <specifier>public</specifier> <name>class</name> <name>CloneTestIT</name> extends <name>SimpleMacIT</name> <block>{
 
   }</block>
 
  @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testCloneWithSplits</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>Connector</name> <name>conn</name> <operator>=</operator> <call><name>getConnector</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>Text</name></argument>&gt;</argument_list></name></type> <name>splits</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>Text</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>splits</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Mutation</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mutations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>tables</name> <init>= <expr><call><name>getUniqueNames</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name><name>tables</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addSplits</name><argument_list>(<argument><expr><name><name>tables</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>splits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><name><name>tables</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>BatchWriterConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>addMutations</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clone</name><argument_list>(<argument><expr><name><name>tables</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tables</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deleteRows</name><argument_list>(<argument><expr><name><name>tables</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>actualRows</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Key</name></argument>,<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>conn</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name><name>tables</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Authorizations</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>actualRows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>actualRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

 }
- 
<expr><literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr>

</unit>
