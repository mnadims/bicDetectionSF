<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/accumulo/3ef67cbee.java"><expr_stmt><expr><name>From</name> <literal type="number">3ef67cbeea54f072c901f25f7bc17740cd30f981</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Keith</name> <name><name>Turner</name> <argument_list type="generic">&lt;<argument><name>kturner</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">14</literal> <name>Mar</name> <literal type="number">2014</literal> <literal type="number">19</literal><operator>:</operator><literal type="number">30</literal><operator>:</operator><literal type="number">40</literal> <operator>-</operator><literal type="number">0400</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>ACCUMULO</name><operator>-</operator><literal type="number">2460</literal> <name>hide</name> <name>experimental</name> <name>props</name> <name>in</name> <name>shell</name>

<operator>--</operator>
 <operator>...</operator><operator>/</operator><name>util</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>ConfigCommand</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   <literal type="number">2</literal> <operator>+</operator><operator>-</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellConfigIT</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  <literal type="number">52</literal> <operator>+</operator>
 <operator>...</operator><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>   <operator>|</operator> <literal type="number">943</literal> <operator>++</operator><operator>++</operator><operator>++</operator><operator>++</operator><operator>+</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>--</operator><operator>-</operator>
 <literal type="number">3</literal> <name>files</name> <name>changed</name></expr><operator>,</operator> <expr><literal type="number">529</literal> <call><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">468</literal> <call><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list></call>
 <name>create</name> <name>mode</name> <literal type="number">100644</literal> <name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellConfigIT</name><operator>.</operator><name>java</name></name>

<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>ConfigCommand</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>ConfigCommand</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">81cce7b8b</literal><operator>..</operator><name>c76a51fbc</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>ConfigCommand</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name>shell</name><operator>/</operator><name>commands</name><operator>/</operator><name><name>ConfigCommand</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">211</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">211</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ConfigCommand</name> extends <name>Command</name> <block>{
           <expr><name>siteVal</name> <operator>=</operator> <name>sysVal</name> <operator>=</operator> <name>dfault</name> <operator>=</operator> <name>curVal</name> <operator>=</operator> <call><name><name>curVal</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;
         }</block></expr></expr_stmt>
         <if_stmt><if>if <condition>(<expr><name>sysVal</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>defaults</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>defaults</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Property</name><operator>.</operator><name>getPropertyByKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isExperimental</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
             <expr_stmt><expr><call><name>printConfLine</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dfault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
           </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellConfigIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellConfigIT</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..3188c8e0d</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellConfigIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">52</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>minicluster</name><operator>.</operator><name>impl</name><operator>.</operator><name>MiniAccumuloConfigImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>ShellServerIT</name><operator>.</operator><name>TestShell</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name><operator>.</operator><name>ConfigurableMacIT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<comment type="block" format="javadoc">/**
 * 
 */</comment>
<class><specifier>public</specifier> class <name>ShellConfigIT</name> <super_list><extends>extends <super><name>ConfigurableMacIT</name></super></extends></super_list> <block>{
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>(<parameter><decl><type><name>MiniAccumuloConfigImpl</name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>hadoopCoreSite</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>CRYPTO_BLOCK_STREAM_SIZE</name></name></expr></argument>, <argument><expr><literal type="string">"7K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>experimentalPropTest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// ensure experimental props do not show up in config output unless set</comment>

    <decl_stmt><decl><type><name>TestShell</name></type> <name>ts</name> <init>= <expr><operator>new</operator> <call><name>TestShell</name><argument_list>(<argument><expr><name>ROOT_PASSWORD</name></expr></argument>, <argument><expr><call><name>getCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstanceName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getZooKeepers</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClientConfFile</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>CRYPTO_BLOCK_STREAM_SIZE</name><operator>.</operator><name>isExperimental</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>CRYPTO_CIPHER_ALGORITHM_NAME</name><operator>.</operator><name>isExperimental</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>configOutput</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>configOutput</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>CRYPTO_BLOCK_STREAM_SIZE</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>configOutput</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>CRYPTO_CIPHER_ALGORITHM_NAME</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">92bae4877</literal><operator>..</operator><literal type="number">87cd06954</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">83</literal> <operator>+</operator><literal type="number">123</literal></expr><operator>,</operator><expr><literal type="number">101</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NoOpErrorMessageCallback</name></type> <name>noop</name> <init>= <expr><operator>new</operator> <call><name>NoOpErrorMessageCallback</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TestShell</name> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <name>TestOutputStream</name></type> <name>output</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>StringInputStream</name></type> <name>input</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Shell</name></type> <name>shell</name></decl>;</decl_stmt>

    <constructor><name>TestShell</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>rootPass</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>instanceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>zookeepers</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>configFile</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <comment type="line">// start the shell</comment>
      <expr_stmt><expr><name>output</name> <operator>=</operator> <operator>new</operator> <call><name>TestOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>input</name> <operator>=</operator> <operator>new</operator> <call><name>StringInputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>PrintWriter</name></type> <name>pw</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>shell</name> <operator>=</operator> <operator>new</operator> <call><name>Shell</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ConsoleReader</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>setLogErrorsToConsole</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>config</name></name><argument_list>(<argument><expr><literal type="string">"-u"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>, <argument><expr><name>rootPass</name></expr></argument>, <argument><expr><literal type="string">"-z"</literal></expr></argument>, <argument><expr><name>instanceName</name></expr></argument>, <argument><expr><name>zookeepers</name></expr></argument>, <argument><expr><literal type="string">"--config-file"</literal></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"quit"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>setExit</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
 
  <decl_stmt><decl><type><specifier>public</specifier> <name>TestOutputStream</name></type> <name>output</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <name>StringInputStream</name></type> <name>input</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <name>Shell</name></type> <name>shell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Process</name></type> <name>traceProcess</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
  <type><specifier>public</specifier> <name>TestName</name></type> <name>name</name> <init>= <expr><operator>new</operator> <call><name>TestName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
 
  <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
    <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expectGoodExit</name></expr></argument>, <argument><expr><name>noop</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
 
  <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expectGoodExit</name></expr></argument>, <argument><expr><name>noop</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
    <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>, <parameter><decl><type><name>ErrorMessageCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>expectGoodExit</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assertGoodExit</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assertBadExit</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
 
  <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>, <parameter><decl><type><name>ErrorMessageCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>expectGoodExit</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>assertGoodExit</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>assertBadExit</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>
    <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>expectString</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expectGoodExit</name></expr></argument>, <argument><expr><name>expectString</name></expr></argument>, <argument><expr><name>noop</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
 
  <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>expectString</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expectGoodExit</name></expr></argument>, <argument><expr><name>expectString</name></expr></argument>, <argument><expr><name>noop</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
    <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>expectString</name></decl></parameter>, <parameter><decl><type><name>ErrorMessageCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expectGoodExit</name></expr></argument>, <argument><expr><name>expectString</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
 
  <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>expectString</name></decl></parameter>, <parameter><decl><type><name>ErrorMessageCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expectGoodExit</name></expr></argument>, <argument><expr><name>expectString</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
    <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>expectString</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stringPresent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expectGoodExit</name></expr></argument>, <argument><expr><name>expectString</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><name>noop</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
 
  <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>expectString</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stringPresent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expectGoodExit</name></expr></argument>, <argument><expr><name>expectString</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><name>noop</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
    <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>expectString</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stringPresent</name></decl></parameter>, <parameter><decl><type><name>ErrorMessageCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>expectGoodExit</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assertGoodExit</name><argument_list>(<argument><expr><name>expectString</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assertBadExit</name><argument_list>(<argument><expr><name>expectString</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
 
  <function><type><name>String</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>expectGoodExit</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>expectString</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stringPresent</name></decl></parameter>, <parameter><decl><type><name>ErrorMessageCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>expectGoodExit</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>assertGoodExit</name><argument_list>(<argument><expr><name>expectString</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>assertBadExit</name><argument_list>(<argument><expr><name>expectString</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>
    <function><type><name>void</name></type> <name>assertGoodExit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stringPresent</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>assertGoodExit</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><name>noop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
 
  <function><type><name>void</name></type> <name>assertGoodExit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stringPresent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assertGoodExit</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><name>noop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
    <function><type><name>void</name></type> <name>assertGoodExit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stringPresent</name></decl></parameter>, <parameter><decl><type><name>ErrorMessageCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name><name>shell</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>errorMsg</name> <init>= <expr><call><name><name>callback</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>errorMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>shell</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
 
  <function><type><name>void</name></type> <name>assertGoodExit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stringPresent</name></decl></parameter>, <parameter><decl><type><name>ErrorMessageCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name><name>shell</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>errorMsg</name> <init>= <expr><call><name><name>callback</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>errorMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>shell</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="string">" present in "</literal> <operator>+</operator> <call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" was not "</literal> <operator>+</operator> <name>stringPresent</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
     </block_content>}</block></if></if_stmt>
 
    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="string">" present in "</literal> <operator>+</operator> <call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" was not "</literal> <operator>+</operator> <name>stringPresent</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></function>
    <function><type><name>void</name></type> <name>assertBadExit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stringPresent</name></decl></parameter>, <parameter><decl><type><name>ErrorMessageCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name><name>shell</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>errorMsg</name> <init>= <expr><call><name><name>callback</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>errorMsg</name></expr></argument>, <argument><expr><call><name><name>shell</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
 
  <function><type><name>void</name></type> <name>assertBadExit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stringPresent</name></decl></parameter>, <parameter><decl><type><name>ErrorMessageCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Shell</name><operator>.</operator><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name><name>shell</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>errorMsg</name> <init>= <expr><call><name><name>callback</name><operator>.</operator><name>getErrorMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>errorMsg</name></expr></argument>, <argument><expr><call><name><name>shell</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="string">" present in "</literal> <operator>+</operator> <call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" was not "</literal> <operator>+</operator> <name>stringPresent</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>resetExitCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="string">" present in "</literal> <operator>+</operator> <call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" was not "</literal> <operator>+</operator> <name>stringPresent</name></expr></argument>, <argument><expr><name>stringPresent</name></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>resetExitCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NoOpErrorMessageCallback</name></type> <name>noop</name> <init>= <expr><operator>new</operator> <call><name>NoOpErrorMessageCallback</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>TestShell</name></type> <name>ts</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Process</name></type> <name>traceProcess</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
  <type><specifier>public</specifier> <name>TestName</name></type> <name>name</name> <init>= <expr><operator>new</operator> <call><name>TestName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

   <function><annotation>@<name>BeforeClass</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setUpBeforeClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// history file is updated in $HOME</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">217</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">235</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
   
   @<expr><name>Before</name>
   <specifier>public</specifier> <name>void</name> <call><name>setupShell</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <comment type="line">// start the shell</comment>
    <expr><name>output</name> <operator>=</operator> <operator>new</operator> <call><name>TestOutputStream</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>input</name> <operator>=</operator> <operator>new</operator> <call><name>StringInputStream</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PrintWriter</name></type> <name>pw</name> <init>= <expr><operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>shell</name> <operator>=</operator> <operator>new</operator> <call><name>Shell</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ConsoleReader</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>setLogErrorsToConsole</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>config</name></name><argument_list>(<argument><expr><literal type="string">"-u"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>, <argument><expr><name>ROOT_PASSWORD</name></expr></argument>, <argument><expr><literal type="string">"-z"</literal></expr></argument>, <argument><expr><call><name>getStaticCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstanceName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getStaticCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getZooKeepers</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"--config-file"</literal></expr></argument>, <argument><expr><call><name>getStaticCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClientConfFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"quit"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>setExit</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ts</name> <operator>=</operator> <operator>new</operator> <call><name>TestShell</name><argument_list>(<argument><expr><name>ROOT_PASSWORD</name></expr></argument>, <argument><expr><call><name>getStaticCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstanceName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getStaticCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getZooKeepers</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name>getStaticCluster</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClientConfFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <annotation>@<name>AfterClass</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">250</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">259</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
 
   @<expr><name>After</name>
   <specifier>public</specifier> <name>void</name> <call><name>tearDownShell</name><argument_list>()</argument_list></call> <block>{
    <expr><call><name><name>shell</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;
    <call><name><name>ts</name><operator>.</operator><name>shell</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></block></expr>;
   }</block></expr></expr_stmt>
 
   <annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">60000</literal></expr></argument>)</argument_list></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">258</literal></expr><operator>,</operator><expr><literal type="number">23</literal> <operator>+</operator><literal type="number">267</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>, <expr><name>table2</name> <operator>=</operator> <name>table</name> <operator>+</operator> <literal type="string">"2"</literal></expr>;
     
     <comment type="line">// exporttable / importtable</comment>
    <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -evc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -evc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"addsplits row5"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.split.threshold=345M"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"offline "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"addsplits row5"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.split.threshold=345M"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"offline "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>export</name> <init>= <expr><literal type="string">"file://"</literal> <operator>+</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ShellServerIT.export"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"exporttable -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>export</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"exporttable -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>export</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>DistCp</name></type> <name>cp</name> <init>= <expr><call><name>newDistCp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>import_</name> <init>= <expr><literal type="string">"file://"</literal> <operator>+</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ShellServerIT.import"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>cp</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"-f"</literal></expr>, <expr><name>export</name> <operator>+</operator> <literal type="string">"/distcp.txt"</literal></expr>, <expr><name>import_</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"importtable "</literal> <operator>+</operator> <name>table2</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>import_</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table2</name> <operator>+</operator> <literal type="string">" -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"345M"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getsplits -t "</literal> <operator>+</operator> <name>table2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"row5"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint --list -t "</literal> <operator>+</operator> <name>table2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"VisibilityConstraint=2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"onlinetable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"importtable "</literal> <operator>+</operator> <name>table2</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>import_</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table2</name> <operator>+</operator> <literal type="string">" -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"345M"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getsplits -t "</literal> <operator>+</operator> <name>table2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"row5"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint --list -t "</literal> <operator>+</operator> <name>table2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"VisibilityConstraint=2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"onlinetable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>private</specifier> <name>DistCp</name></type> <name>newDistCp</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">302</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">311</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>;
     
     <comment type="line">// setscaniter, deletescaniter</comment>
    <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setscaniter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletescaniter -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setscaniter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletescaniter -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">322</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">331</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>PrintWriter</name> <name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"about"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"execfile "</literal> <operator>+</operator> <call><name><name>file</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>VERSION</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"execfile "</literal> <operator>+</operator> <call><name><name>file</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>VERSION</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">331</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">340</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>;
     
     <comment type="line">// egrep</comment>
    <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <constructor_decl><name>make10</name><parameter_list>()</parameter_list>;</constructor_decl>
    <decl_stmt><decl><type><name>String</name></type> <name>lines</name> <init>= <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"egrep row[123]"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>lines</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"egrep row[123]"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>lines</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></class>
 
   <annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">343</literal></expr><operator>,</operator><expr><literal type="number">34</literal> <operator>+</operator><literal type="number">352</literal></expr><operator>,</operator><expr><literal type="number">34</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>;
     
     <comment type="line">// create and delete a table so we get out of a table context in the shell</comment>
    <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"notable"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"notable"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// Calling du not in a table context shouldn't throw an error</comment>
    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"du"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"du"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"flush -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"du "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">" ["</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">"]"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><literal type="string">"du -h"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>o</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"du "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">" ["</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">"]"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>shell</name><operator>.</operator><name>execCommand</name></name><argument_list>(<argument><expr><literal type="string">"du -h"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>o</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <comment type="line">// for some reason, there's a bit of fluctuation</comment>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Output did not match regex: '"</literal> <operator>+</operator> <name>o</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>, <argument><expr><call><name><name>o</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">".*[1-9][0-9][0-9]\\s\\["</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">"\\]\\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
 
   <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>debug</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"debug on"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"debug off"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"debug debug"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"debug debug debug"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"debug on"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"debug off"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"debug debug"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"debug debug debug"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">378</literal></expr><operator>,</operator><expr><literal type="number">35</literal> <operator>+</operator><literal type="number">387</literal></expr><operator>,</operator><expr><literal type="number">35</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>;
     
     <comment type="line">// createuser, deleteuser, user, users, droptable, grant, revoke</comment>
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"secret\nsecret\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createuser xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>String</name> <name>perms</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"userpermissions -u xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"secret\nsecret\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createuser xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>String</name> <name>perms</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"userpermissions -u xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>perms</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"Table permissions ("</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">"): Table.READ"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"grant -u xyzzy -s System.CREATE_TABLE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>perms</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"userpermissions -u xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grant -u xyzzy -s System.CREATE_TABLE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>perms</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"userpermissions -u xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>perms</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"grant -u root -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" Table.WRITE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"grant -u root -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" Table.GOOFY"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"grant -u root -s foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"grant -u xyzzy -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"secret\nsecret\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"user xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"xyzzy@"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert row1 cf cq 1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"row1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"droptable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deleteuser xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"delete yourself"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>ROOT_PASSWORD</name> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <name>ROOT_PASSWORD</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"user root"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -s System.CREATE_TABLE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -s System.GOOFY"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -s foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" Table.WRITE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" Table.GOOFY"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deleteuser xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grant -u root -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" Table.WRITE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grant -u root -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" Table.GOOFY"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grant -u root -s foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grant -u xyzzy -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"secret\nsecret\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"user xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"xyzzy@"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert row1 cf cq 1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"row1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"droptable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deleteuser xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"delete yourself"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>ROOT_PASSWORD</name> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <name>ROOT_PASSWORD</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"user root"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -s System.CREATE_TABLE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -s System.GOOFY"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -s foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" Table.WRITE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" Table.GOOFY"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"revoke -u xyzzy -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deleteuser xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">414</literal></expr><operator>,</operator><expr><literal type="number">47</literal> <operator>+</operator><literal type="number">423</literal></expr><operator>,</operator><expr><literal type="number">47</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>;
     
     <comment type="line">// setshelliter, listshelliter, deleteshelliter</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setshelliter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -pn sum -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setshelliter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 11 -pn sum -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setshelliter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -pn sum -n other"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setshelliter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 11 -pn sum -n xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -pn sum"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Profile : sum"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deleteshelliter -pn sum -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deleteshelliter -pn sum -a"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Profile : sum"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setshelliter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -pn sum -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setshelliter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 11 -pn sum -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setshelliter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -pn sum -n other"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setshelliter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 11 -pn sum -n xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -pn sum"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Profile : sum"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deleteshelliter -pn sum -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deleteshelliter -pn sum -a"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listshelliter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Profile : sum"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
     <comment type="line">// list iter</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 11 -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -n other"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 11 -n xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listiter -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listiter -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listiter -minc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listiter -minc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deleteiter -scan -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listiter -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listiter -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 11 -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -n other"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 11 -n xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listiter -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listiter -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listiter -minc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listiter -minc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deleteiter -scan -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listiter -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listiter -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Iterator xyzzy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
 
   }</block>
 
@@ <operator>-</operator><literal type="number">463</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">472</literal></expr><operator>,</operator><expr><literal type="number">41</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>Connector</name> <name>conn</name> <operator>=</operator> <call><name>getConnector</name><argument_list>()</argument_list></call></expr>;
     <expr><name>String</name> <name>tableName</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;
     <comment type="line">// Setting a non-optiondescriber with no name should fail</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.ColumnFamilyCounter -p 30"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.ColumnFamilyCounter -p 30"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// Name as option will work</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.ColumnFamilyCounter -p 30 -name cfcounter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.ColumnFamilyCounter -p 30 -name cfcounter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>String</name> <name>expectedKey</name> <operator>=</operator> <literal type="string">"table.iterator.scan.cfcounter"</literal></expr>;
     <expr><name>String</name> <name>expectedValue</name> <operator>=</operator> <literal type="string">"30,org.apache.accumulo.core.iterators.ColumnFamilyCounter"</literal></expr>;
     <expr><name>TableOperations</name> <name>tops</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call></expr>;
     <expr><call><name>checkTableForProperty</name><argument_list>(<argument><expr><name>tops</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>expectedKey</name></expr></argument>, <argument><expr><name>expectedValue</name></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>tableName</name> <operator>=</operator> <name>tableName</name> <operator>+</operator> <literal type="string">"1"</literal></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"customcfcounter\n\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"customcfcounter\n\n"</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// Name on the CLI should override OptionDescriber (or user input name, in this case)</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.ColumnFamilyCounter -p 30"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.ColumnFamilyCounter -p 30"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>expectedKey</name> <operator>=</operator> <literal type="string">"table.iterator.scan.customcfcounter"</literal></expr>;
     <expr><name>expectedValue</name> <operator>=</operator> <literal type="string">"30,org.apache.accumulo.core.iterators.ColumnFamilyCounter"</literal></expr>;
     <expr><call><name>checkTableForProperty</name><argument_list>(<argument><expr><name>tops</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>expectedKey</name></expr></argument>, <argument><expr><name>expectedValue</name></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>tableName</name> <operator>=</operator> <name>tableName</name> <operator>+</operator> <literal type="string">"1"</literal></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"customcfcounter\nname1 value1\nname2 value2\n\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"customcfcounter\nname1 value1\nname2 value2\n\n"</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// Name on the CLI should override OptionDescriber (or user input name, in this case)</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.ColumnFamilyCounter -p 30"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.ColumnFamilyCounter -p 30"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>expectedKey</name> <operator>=</operator> <literal type="string">"table.iterator.scan.customcfcounter"</literal></expr>;
     <expr><name>expectedValue</name> <operator>=</operator> <literal type="string">"30,org.apache.accumulo.core.iterators.ColumnFamilyCounter"</literal></expr>;
     <expr><call><name>checkTableForProperty</name><argument_list>(<argument><expr><name>tops</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>expectedKey</name></expr></argument>, <argument><expr><name>expectedValue</name></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">508</literal></expr>,<expr><literal type="number">15</literal> <operator>+</operator><literal type="number">517</literal></expr>,<expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>expectedValue</name> <operator>=</operator> <literal type="string">"value2"</literal></expr>;
     <expr><call><name>checkTableForProperty</name><argument_list>(<argument><expr><name>tops</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>expectedKey</name></expr></argument>, <argument><expr><name>expectedValue</name></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>tableName</name> <operator>=</operator> <name>tableName</name> <operator>+</operator> <literal type="string">"1"</literal></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"\nname1 value1.1,value1.2,value1.3\nname2 value2\n\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"\nname1 value1.1,value1.2,value1.3\nname2 value2\n\n"</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// Name on the CLI should override OptionDescriber (or user input name, in this case)</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.ColumnFamilyCounter -p 30 -name cfcounter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setiter -scan -class org.apache.accumulo.core.iterators.ColumnFamilyCounter -p 30 -name cfcounter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>expectedKey</name> <operator>=</operator> <literal type="string">"table.iterator.scan.cfcounter"</literal></expr>;
     <expr><name>expectedValue</name> <operator>=</operator> <literal type="string">"30,org.apache.accumulo.core.iterators.ColumnFamilyCounter"</literal></expr>;
     <expr><call><name>checkTableForProperty</name><argument_list>(<argument><expr><name>tops</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>expectedKey</name></expr></argument>, <argument><expr><name>expectedValue</name></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">547</literal></expr>,<expr><literal type="number">20</literal> <operator>+</operator><literal type="number">556</literal></expr>,<expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>;
     
     <comment type="line">// notable</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">" "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">" "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"notable"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"Not in a table context."</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">" "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">" "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">" "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"notable"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"Not in a table context."</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">" "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>sleep</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <comment type="line">// sleep</comment>
     <expr><name>long</name> <name>now</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"sleep 0.2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"sleep 0.2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>long</name> <name>diff</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>now</name></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Diff was actually "</literal> <operator>+</operator> <name>diff</name></expr></argument>, <argument><expr><name>diff</name> <operator>&gt;=</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Diff was actually "</literal> <operator>+</operator> <name>diff</name></expr></argument>, <argument><expr><name>diff</name> <operator>&lt;</operator> <literal type="number">600</literal></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">570</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">579</literal></expr>,<expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>addauths</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
     <comment type="line">// addauths</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -evc"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a b c d -l foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"does not have authorization"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>ErrorMessageCallback</name></super><argument_list>()</argument_list> <block>{
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -evc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a b c d -l foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"does not have authorization"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>ErrorMessageCallback</name></super><argument_list>()</argument_list> <block>{
       <function><type><specifier>public</specifier> <name>String</name></type> <name>getErrorMessage</name><parameter_list>()</parameter_list> <block>{<block_content>
         <try>try <block>{<block_content>
           <decl_stmt><decl><type><name>Connector</name></type> <name>c</name> <init>= <expr><call><name>getConnector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">581</literal></expr><operator>,</operator><expr><literal type="number">41</literal> <operator>+</operator><literal type="number">590</literal></expr><operator>,</operator><expr><literal type="number">41</literal> @@ <specifier>public</specifier> class <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
         }</block></expr></expr_stmt>
       }</block_content>
     }</block></try>)</block_content></block>;</function>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"addauths -s foo,bar"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getauths"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getauths"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a b c d -l foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"[foo]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -s bar"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"[foo]"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"addauths -s foo,bar"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getauths"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getauths"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a b c d -l foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"[foo]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -s bar"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"[foo]"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block>
 
   <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>byeQuitExit</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// bye, quit, exit</comment>
     <for>for <control>(<init><decl><type><name>String</name></type> <name>cmd</name> <range>: <expr><literal type="string">"bye quit exit"</literal><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>shell</name><operator>.</operator><name>getExit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>shell</name><operator>.</operator><name>getExit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>shell</name><operator>.</operator><name>setExit</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>shell</name><operator>.</operator><name>getExit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>shell</name><operator>.</operator><name>getExit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>shell</name><operator>.</operator><name>setExit</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
   }
 
   @Test(timeout = 45000</block></for>)</block_content>
   public void classpath(</block></function></class></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <comment type="line">// classpath</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"classpath"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Level 2: Java Classloader (loads everything defined by java classpath) URL classpath items are"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"classpath"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Level 2: Java Classloader (loads everything defined by java classpath) URL classpath items are"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block>
 
   <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>clearCls</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <comment type="line">// clear/cls</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>shell</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTerminal</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAnsiSupported</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"cls"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"[1;1H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"[2J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>ts</name><operator>.</operator><name>shell</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTerminal</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAnsiSupported</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"cls"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"[1;1H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"[2J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content> else <block>{<block_content>
      <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"cls"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"does not support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"does not support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"cls"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"does not support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"does not support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/>}</block_content>
   }
 
@@ -624</block></block><operator>,</operator><expr_stmt><expr><literal type="number">18</literal> <operator>+</operator><literal type="number">633</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> class <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>, <expr><name>clone</name> <operator>=</operator> <name>table</name> <operator>+</operator> <literal type="string">"_clone"</literal></expr>;
     
     <comment type="line">// clonetable</comment>
    <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -evc"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></if></if_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.split.threshold=123M"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"addsplits -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" a b c"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a b c value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"clonetable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -evc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.split.threshold=123M"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"addsplits -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" a b c"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a b c value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"clonetable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="line">// verify constraint, config, and splits were cloned</comment>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint --list -t "</literal> <operator>+</operator> <name>clone</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"VisibilityConstraint=2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>clone</name> <operator>+</operator> <literal type="string">" -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"123M"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getsplits -t "</literal> <operator>+</operator> <name>clone</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"a\nb\nc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint --list -t "</literal> <operator>+</operator> <name>clone</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"VisibilityConstraint=2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>clone</name> <operator>+</operator> <literal type="string">" -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"123M"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getsplits -t "</literal> <operator>+</operator> <name>clone</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"a\nb\nc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block_content>
   
   @Test(timeout = 45000</block></if></if_stmt>)</block_content>
@@ -643</block><operator>,</operator>39 +652<operator>,</operator>39 @@ public class ShellServerIT extends SimpleMacIT <block>{<block_content>
     <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>table</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     
     <comment type="line">// compact</comment>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <decl_stmt><decl><type><name>String</name></type> <name>tableId</name> <init>= <expr><call><name>getTableId</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     
     <comment type="line">// make two files</comment>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a b c d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert x y z v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a b c d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert x y z v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>oldCount</name> <init>= <expr><call><name>countFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <comment type="line">// merge two files into one</comment>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"compact -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>oldCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"addsplits -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"addsplits -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="line">// make two more files:</comment>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert m 1 2 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert n 1 2 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert m 1 2 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert n 1 2 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>oldFiles</name> <init>= <expr><call><name>getFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <comment type="line">// at this point there are 4 files in the default tablet</comment>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Files that were found: "</literal> <operator>+</operator> <name>oldFiles</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>oldFiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
     <comment type="line">// compact some data:</comment>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"compact -b g -e z -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -b g -e z -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"compact -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"merge --all -t "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"compact -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"merge --all -t "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block_content>
 
   @Test(timeout = 45000</block></function></class></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">683</literal></expr>,<expr><literal type="number">18</literal> <operator>+</operator><literal type="number">692</literal></expr>,<expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>;
     
     <comment type="line">// constraint</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint -l -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"MetadataConstraints=1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -evc"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint -l -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"MetadataConstraints=1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -evc"</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// Make sure the table is fully propagated through zoocache</comment>
     <expr><call><name>getTableId</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint -l -t "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"VisibilityConstraint=2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -d 2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Removed constraint 2 from table "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint -l -t "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"VisibilityConstraint=2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -d 2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Removed constraint 2 from table "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
     <comment type="line">// wait for zookeeper updates to propagate</comment>
     <expr><call><name><name>UtilWaitThread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint -l -t "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"VisibilityConstraint=2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint -l -t "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"VisibilityConstraint=2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">702</literal></expr>,<expr><literal type="number">83</literal> <operator>+</operator><literal type="number">711</literal></expr>,<expr><literal type="number">83</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>;
     
     <comment type="line">// deletemany</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name>countkeys</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletemany -f -b row8"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletemany -f -b row8"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>countkeys</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"row8"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"row8"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletemany -f -b row4 -e row5"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletemany -f -b row4 -e row5"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>countkeys</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletemany -f -c cf:col4,cf:col5"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletemany -f -c cf:col4,cf:col5"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>countkeys</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletemany -f -r row3"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletemany -f -r row3"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><call><name>countkeys</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletemany -f -r row3"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletemany -f -r row3"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><call><name>countkeys</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletemany -f -b row3 -be -e row5 -ee"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletemany -f -b row3 -be -e row5 -ee"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><call><name>countkeys</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>deleterows</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
     <expr><name>final</name> <name>String</name> <name>tableId</name> <operator>=</operator> <call><name>getTableId</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;
     
     <comment type="line">// deleterows</comment>
     <expr><name>int</name> <name>base</name> <operator>=</operator> <call><name>countFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;
     
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"addsplits row5 row7"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"addsplits row5 row7"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"flush -w -t "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -w -t "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>files</name> <operator>=</operator> <call><name>getFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Found the following files: "</literal> <operator>+</operator> <name>files</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>files</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deleterows -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -b row5 -e row7"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deleterows -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -b row5 -e row7"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>countFiles</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>groups</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
     
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setgroups -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" alpha=a,b,c num=3,2,1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getgroups -t "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"alpha=a,b,c"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getgroups -t "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"num=1,2,3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setgroups -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" alpha=a,b,c num=3,2,1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getgroups -t "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"alpha=a,b,c"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getgroups -t "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"num=1,2,3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>grep</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
     
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"grep row[123]"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"row1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"grep row5"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"row5"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grep row[123]"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"row1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grep row5"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"row5"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>help</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"help -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Help Commands"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Help Commands"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"help -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Help Commands"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Help Commands"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <for>for <control>(<init><decl><type><name>String</name></type> <name>c</name> <range>: <expr><operator>(</operator><literal type="string">"bye exit quit "</literal> <operator>+</operator> <literal type="string">"about help info ? "</literal> <operator>+</operator> <literal type="string">"deleteiter deletescaniter listiter setiter setscaniter "</literal>
         <operator>+</operator> <literal type="string">"grant revoke systempermissions tablepermissions userpermissions "</literal> <operator>+</operator> <literal type="string">"execfile history "</literal> <operator>+</operator> <literal type="string">"authenticate cls clear notable sleep table user whoami "</literal>
         <operator>+</operator> <literal type="string">"clonetable config createtable deletetable droptable du exporttable importtable offline online renametable tables "</literal>
         <operator>+</operator> <literal type="string">"addsplits compact constraint flush getgropus getsplits merge setgroups "</literal> <operator>+</operator> <literal type="string">"addauths createuser deleteuser dropuser getauths passwd setauths users "</literal>
         <operator>+</operator> <literal type="string">"delete deletemany deleterows egrep formatter interpreter grep importdirectory insert maxrow scan"</literal><operator>)</operator><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"help "</literal> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"help "</literal> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
   }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">786</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">795</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>history</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
     
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"history -c"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"history"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"history"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"history"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"history -c"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"history"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"history"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"history"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
@@ <operator>-</operator><literal type="number">811</literal></expr><operator>,</operator><expr><literal type="number">161</literal> <operator>+</operator><literal type="number">820</literal></expr><operator>,</operator><expr><literal type="number">161</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><call><name><name>evenWriter</name><operator>.</operator><name>startDefaultLocalityGroup</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name>FileSKVWriter</name> <name>oddWriter</name> <operator>=</operator> <call><name><name>FileOperations</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openWriter</name><argument_list>(<argument><expr><name>odd</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>aconf</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>oddWriter</name><operator>.</operator><name>startDefaultLocalityGroup</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>long</name> <name>ts</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>long</name> <name>timestamp</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;
     <expr><name>Text</name> <name>cf</name> <operator>=</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"cf"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>Text</name> <name>cq</name> <operator>=</operator> <operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"cq"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><name>Value</name> <name>value</name> <operator>=</operator> <operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><literal type="string">"value"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Key</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%8d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cf</name></expr></argument>, <argument><expr><name>cq</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Key</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%8d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cf</name></expr></argument>, <argument><expr><name>cq</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>evenWriter</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%8d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cf</name></expr></argument>, <argument><expr><name>cq</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>new</operator> <call><name>Key</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%8d"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cf</name></expr></argument>, <argument><expr><name>cq</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>oddWriter</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></for>}</block>
     <call><name><name>evenWriter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>oddWriter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>shell</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"importdirectory "</literal> <operator>+</operator> <name>importDir</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>errorsDir</name> <operator>+</operator> <literal type="string">" true"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -r 00000000"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -r 00000099"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"00000099"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>shell</name><operator>.</operator><name>getExitCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"importdirectory "</literal> <operator>+</operator> <name>importDir</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>errorsDir</name> <operator>+</operator> <literal type="string">" true"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -r 00000000"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"00000000"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -r 00000099"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"00000099"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
   @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>info</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>VERSION</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>VERSION</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
   @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>interpreter</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"interpreter -l"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"HexScan"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert \\x02 cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -b 02"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"interpreter -i org.apache.accumulo.core.util.interpret.HexScanInterpreter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"interpreter -l"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"HexScan"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert \\x02 cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -b 02"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"interpreter -i org.apache.accumulo.core.util.interpret.HexScanInterpreter"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="line">// Need to allow time for this to propagate through zoocache/zookeeper</comment>
     <expr_stmt><expr><call><name><name>UtilWaitThread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"interpreter -l"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"HexScan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -b 02"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"interpreter -l"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"HexScan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -b 02"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
   @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>listcompactions</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.iterator.minc.slow=30,org.apache.accumulo.test.functional.SlowIterator"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.iterator.minc.slow.opt.sleepTime=1000"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert b cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert c cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert d cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"flush -t "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"sleep 0.2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listcompactions"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"default_tablet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>lines</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.iterator.minc.slow=30,org.apache.accumulo.test.functional.SlowIterator"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.iterator.minc.slow.opt.sleepTime=1000"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert b cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert c cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert d cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -t "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"sleep 0.2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listcompactions"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"default_tablet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>lines</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>String</name></type> <name>last</name> <init>= <expr><name><name>lines</name><index>[<expr><name><name>lines</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>parts</name> <init>= <expr><call><name><name>last</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\|"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>parts</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
   @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>maxrow</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert b cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert ccc cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert zzz cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"maxrow"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"zzz"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"delete zzz cf cq"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"maxrow"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert b cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert ccc cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert zzz cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"maxrow"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"zzz"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"delete zzz cf cq"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"maxrow"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
   @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>merge</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"addsplits a m z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getsplits"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"merge --all"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getsplits"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getsplits -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getsplits -t accumulo.root"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"merge --all -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getsplits -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"addsplits a m z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getsplits"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"merge --all"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getsplits"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getsplits -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getsplits -t accumulo.root"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"merge --all -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getsplits -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
   @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>ping</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"ping"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"ping"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <comment type="line">// wait for both tservers to start up</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
         <break>break;</break></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
       <expr_stmt><expr><call><name><name>UtilWaitThread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     </block_content>}</block></for>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
   @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>renametable</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"1"</literal></expr>, <argument><expr><name>rename</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"2"</literal></expr></argument></block></expr></argument></throws></expr>;</expr_stmt>
     
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert this is a value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"renametable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>rename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>rename</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -t "</literal> <operator>+</operator> <name>rename</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>rename</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert this is a value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"renametable "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>rename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>rename</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -t "</literal> <operator>+</operator> <name>rename</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>rename</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
   @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>tables</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr>, <argument><expr><name>table1</name> <operator>=</operator> <name>table</name> <operator>+</operator> <literal type="string">"_z"</literal></expr></argument>, <argument><expr><name>table2</name> <operator>=</operator> <name>table</name> <operator>+</operator> <literal type="string">"_a"</literal></expr></argument></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"notable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>lst</name> <init>= <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"tables -l"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"notable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>lst</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"tables -l"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>lst</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>table2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>lst</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>table1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lst</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"tables -l -s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lst</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"tables -l -s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>lst</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>table1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>lst</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>table2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
   @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>systempermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"systempermissions"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"tablepermissions"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"systempermissions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"tablepermissions"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
   @<expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">45000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>listscans</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
     
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// Should be about a 3 second scan</comment>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert "</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">" cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert "</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">" cf cq value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.iterator.scan.slow=30,org.apache.accumulo.test.functional.SlowIterator"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.iterator.scan.slow.opt.sleepTime=500"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.iterator.scan.slow=30,org.apache.accumulo.test.functional.SlowIterator"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s table.iterator.scan.slow.opt.sleepTime=500"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Thread</name></type> <name>thread</name> <init>= <expr><operator>new</operator> <class><super><name>Thread</name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">983</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">992</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>scans</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
     <comment type="line">// Try to find the active scan for about 5seconds</comment>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal> <operator>&amp;&amp;</operator> <call><name><name>scans</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>currentScans</name> <init>= <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listscans"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>currentScans</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listscans"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>lines</name> <init>= <expr><call><name><name>currentScans</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>scanOffset</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lines</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><name>String</name></type> <name>currentScan</name> <init>= <expr><name><name>lines</name><index>[<expr><name>scanOffset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1010</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1019</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
       <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>client</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><name>hostPortPattern</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     }</block>
     
    <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt/>}</block_content>
 
   @Test(timeout = 45000</block></for>)</block_content>
@@ -1026</block><operator>,</operator><expr_stmt><expr><literal type="number">37</literal> <operator>+</operator><literal type="number">1035</literal></expr><operator>,</operator><expr><literal type="number">37</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <expr><call><name><name>FileUtils</name><operator>.</operator><name>copyURLToFile</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"/FooConstraint.jar"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fooConstraintJar</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>fooConstraintJar</name><operator>.</operator><name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;
 
    <expr><call><name>exec</name><argument_list>(
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(
         <argument><expr><literal type="string">"config -s "</literal> <operator>+</operator> <call><name><name>Property</name><operator>.</operator><name>VFS_CONTEXT_CLASSPATH_PROPERTY</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"cx1="</literal> <operator>+</operator> <call><name><name>fooFilterJar</name><operator>.</operator><name>toURI</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>fooConstraintJar</name><operator>.</operator><name>toURI</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
         <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
 
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s "</literal> <operator>+</operator> <call><name><name>Property</name><operator>.</operator><name>TABLE_CLASSPATH</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"=cx1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s "</literal> <operator>+</operator> <call><name><name>Property</name><operator>.</operator><name>TABLE_CLASSPATH</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"=cx1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
 
     <argument><expr><call><name><name>UtilWaitThread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></argument>;
 
     <comment type="line">// We can't use the setiter command as Filter implements OptionDescriber which</comment>
     <comment type="line">// forces us to enter more input that I don't know how to input</comment>
     <comment type="line">// Instead, we can just manually set the property on the table.</comment>
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s "</literal> <operator>+</operator> <call><name><name>Property</name><operator>.</operator><name>TABLE_ITERATOR_PREFIX</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"scan.foo=10,org.apache.accumulo.test.FooFilter"</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" -s "</literal> <operator>+</operator> <call><name><name>Property</name><operator>.</operator><name>TABLE_ITERATOR_PREFIX</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"scan.foo=10,org.apache.accumulo.test.FooFilter"</literal></expr></argument>)</argument_list></call></expr></argument>;
 
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert foo f q v"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert foo f q v"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
 
     <argument><expr><call><name><name>UtilWaitThread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>;
 
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>;
 
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint -a FooConstraint"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint -a FooConstraint"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
 
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"offline -w "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"online -w "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"offline -w "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"online -w "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr></argument>;
 
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"table "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert foo f q v"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert ok foo q v"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"table "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert foo f q v"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert ok foo q v"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
 
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -d "</literal> <operator>+</operator> <call><name><name>Property</name><operator>.</operator><name>VFS_CONTEXT_CLASSPATH_PROPERTY</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"cx1"</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -d "</literal> <operator>+</operator> <call><name><name>Property</name><operator>.</operator><name>VFS_CONTEXT_CLASSPATH_PROPERTY</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"cx1"</literal></expr></argument>)</argument_list></call></expr></argument>;
 
   }</argument_list></call>
 
@@ <operator>-</operator><literal type="number">1065</literal></expr>,<expr><literal type="number">13</literal> <operator>+</operator><literal type="number">1074</literal></expr>,<expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
     <comment type="line">// Make sure to not collide with the "trace" table</comment>
     <expr><name>final</name> <name>String</name> <name>table</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"Test"</literal></expr>;
     
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"trace on"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert a b c value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"sleep 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>String</name> <name>trace</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"trace off"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"trace on"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert a b c value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -np"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"sleep 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>String</name> <name>trace</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"trace off"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>trace</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"sendMutations"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>trace</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"startScan"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">1080</literal></expr>,<expr><literal type="number">136</literal> <operator>+</operator><literal type="number">1089</literal></expr>,<expr><literal type="number">136</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SimpleMacIT</name> <block>{
 
   @<expr><call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>badLogin</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>ROOT_PASSWORD</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>String</name> <name>err</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"user NoSuchUser"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>ROOT_PASSWORD</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>String</name> <name>err</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"user NoSuchUser"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>err</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"BAD_CREDENTIALS for user NoSuchUser"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   @<call><name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></call>
   <specifier>public</specifier> <name>void</name> <call><name>namespaces</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"\"\""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>; <comment type="line">// default namespace, displayed as quoted empty string</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>Namespaces</name><operator>.</operator><name>ACCUMULO_NAMESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createnamespace thing1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>String</name> <name>namespaces</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"\"\""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>; <comment type="line">// default namespace, displayed as quoted empty string</comment>
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>Namespaces</name><operator>.</operator><name>ACCUMULO_NAMESPACE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createnamespace thing1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>String</name> <name>namespaces</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>namespaces</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"thing1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"renamenamespace thing1 thing2"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>namespaces</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"renamenamespace thing1 thing2"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name>namespaces</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>namespaces</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"thing2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
     <expr><call><name>assertTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>namespaces</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"thing1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// can't delete a namespace that still contains tables, unless you do -f</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable thing2.thingy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletenamespace thing2"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable thing2.thingy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletenamespace thing2"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"du -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"thing2.thingy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"du -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"thing2.thingy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// all "TableOperation" commands can take a namespace</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"offline -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"online -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"flush -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"compact -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createnamespace testers3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable testers3.1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable testers3.2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -ns testers3 -f"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"testers3.1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"testers3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletenamespace testers3 -f"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setiter -ns thing2 -scan -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"listiter -ns thing2 -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Summing"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deleteiter -ns thing2 -n name -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createuser dude"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"pass"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"pass"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"grant Namespace.CREATE_TABLE -ns thing2 -u dude"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"revoke Namespace.CREATE_TABLE -ns thing2 -u dude"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"offline -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"online -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"flush -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"compact -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createnamespace testers3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable testers3.1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable testers3.2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -ns testers3 -f"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"testers3.1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"testers3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletenamespace testers3 -f"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"true\n\n\nSTRING\n"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setiter -ns thing2 -scan -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -n name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"listiter -ns thing2 -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"Summing"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deleteiter -ns thing2 -n name -scan"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createuser dude"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"pass"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"pass"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"grant Namespace.CREATE_TABLE -ns thing2 -u dude"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"revoke Namespace.CREATE_TABLE -ns thing2 -u dude"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// properties override and such</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -ns thing2 -s table.file.max=44444"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"44444"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t thing2.thingy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"44444"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t thing2.thingy -s table.file.max=55555"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -t thing2.thingy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"55555"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -ns thing2 -s table.file.max=44444"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -ns thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"44444"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t thing2.thingy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"44444"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t thing2.thingy -s table.file.max=55555"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -t thing2.thingy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"55555"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// can copy properties when creating</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createnamespace thing3 -cc thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"config -ns thing3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"44444"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createnamespace thing3 -cc thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"config -ns thing3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"44444"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
 
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletenamespace -f thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"thing2.thingy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletenamespace -f thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"namespaces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"thing2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"thing2.thingy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
 
     <comment type="line">// put constraints on a namespace</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint -ns thing3 -a org.apache.accumulo.examples.simple.constraints.NumericValueConstraint"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable thing3.constrained"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"table thing3.constrained"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint -d 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint -ns thing3 -a org.apache.accumulo.examples.simple.constraints.NumericValueConstraint"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable thing3.constrained"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"table thing3.constrained"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint -d 1"</literal></expr></argument>)</argument_list></call></expr>;
     <comment type="line">// should fail</comment>
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint -l"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"NumericValueConstraint"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert r cf cq abc"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"constraint -ns thing3 -d 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"sleep 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"insert r cf cq abc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint -l"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"NumericValueConstraint"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert r cf cq abc"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"constraint -ns thing3 -d 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"sleep 1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"insert r cf cq abc"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
   }</block>
 
   <specifier>private</specifier> <name>int</name> <call><name>countkeys</name><argument_list>(<argument><expr><name>String</name> <name>table</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
    <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -np -t "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <return>return <expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -np -t "</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></for></block></expr></expr_stmt>
    <return>return <expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>scans</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createtable t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createtable t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>make10</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -np -b row1 -e row1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -np -b row1 -e row1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -np -b row3 -e row5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -np -b row3 -e row5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -np -r row3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -np -r row3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -np -b row:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -np -b row:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -np -b row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -np -b row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -np -e row:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -np -e row:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"deletetable -f t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"deletetable -f t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>whoami</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"whoami"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"secret\nsecret\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"createuser test_user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"setauths -u test_user -s 12,3,4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>auths</name> <init>= <expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"getauths -u test_user"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"whoami"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"secret\nsecret\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"createuser test_user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"setauths -u test_user -s 12,3,4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>auths</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"getauths -u test_user"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>auths</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>auths</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"12"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>auths</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"secret\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"user test_user"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"whoami"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"test_user"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>ROOT_PASSWORD</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"user root"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"secret\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"user test_user"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"whoami"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"test_user"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>input</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>ROOT_PASSWORD</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"user root"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>private</specifier> <name>void</name></type> <name>make10</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"insert row%d cf col%d value"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"insert row%d cf col%d value"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
   </block_content>}</block></function>
   
   <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getFiles</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"scan -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" -np -c file -b "</literal> <operator>+</operator> <name>tableId</name> <operator>+</operator> <literal type="string">" -e "</literal> <operator>+</operator> <name>tableId</name> <operator>+</operator> <literal type="string">"~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"scan -t "</literal> <operator>+</operator> <name><name>MetadataTable</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">" -np -c file -b "</literal> <operator>+</operator> <name>tableId</name> <operator>+</operator> <literal type="string">" -e "</literal> <operator>+</operator> <name>tableId</name> <operator>+</operator> <literal type="string">"~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"countFiles(): "</literal> <operator>+</operator> <call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"countFiles(): "</literal> <operator>+</operator> <call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>lines</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>lines</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
     <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>lines</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
       <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt><expr><operator>-</operator> 
<literal type="number">2.19.1.windows</literal><literal type="number">.1</literal></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></function></block></class></expr></init></decl></decl_stmt>

</unit>
