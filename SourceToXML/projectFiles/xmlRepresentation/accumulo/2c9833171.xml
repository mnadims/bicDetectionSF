<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="E:/01Courses@USASK/CMPT898-HumanDrivenSoftwareEngineeringForScientificResearch/ProjectProgress/data_files/final_dataset/gen_patch_codes/filtered/accumulo/2c9833171.java"><expr_stmt><expr><name>From</name> <literal type="number">2c983317179634d6ddc10726defff303be4ae708</literal> <name>Mon</name> <name>Sep</name> <literal type="number">17</literal> <literal type="number">00</literal><operator>:</operator><literal type="number">00</literal><operator>:</operator><literal type="number">00</literal> <literal type="number">2001</literal>
<name>From</name><operator>:</operator> <name>Josh</name> <name><name>Elser</name> <argument_list type="generic">&lt;<argument><name>elserj</name><annotation>@<name><name>apache</name><operator>.</operator><name>org</name></name></annotation></argument>&gt;</argument_list></name>
<name>Date</name><operator>:</operator> <name>Fri</name></expr><operator>,</operator> <expr><literal type="number">13</literal> <name>Feb</name> <literal type="number">2015</literal> <literal type="number">12</literal><operator>:</operator><literal type="number">48</literal><operator>:</operator><literal type="number">16</literal> <operator>-</operator><literal type="number">0500</literal>
<name>Subject</name><operator>:</operator> <index>[<expr><name>PATCH</name></expr>]</index> <name>ACCUMULO</name><operator>-</operator><literal type="number">3513</literal> <name>Add</name> <name>delegation</name> <name>token</name> <name>support</name></expr></expr_stmt> <for>for kerberos
 configurations

Generate secret keys internally to Accumulo<operator>,</operator> <decl_stmt><decl><type><name>distribute</name> <name>them</name> <name>among</name>
<name>the</name> <name>nodes</name> <name>via</name></type> <name>ZK</name></decl>, <decl><type ref="prev"/><name>and</name> <name>use</name> <name>the</name> <name>secret</name> <name>keys</name> <name>to</name> <name>create</name> <name>expiring</name> <name>passwords</name>
<name>that</name> <name>users</name> <name>can</name> <name>request</name> <name>and</name> <name>servers</name> <name>can</name> <name><name>validate</name><operator>.</operator> <name>Allows</name></name> for <name>seamless</name>
<name>integration</name> <name>with</name> <name>existing</name> <name>token</name> <name>support</name> <name>in</name> <name>MapReduce</name> for <name>HDFS</name> <name>and</name> <name>YARN</name>
<name><name>access</name><operator>.</operator></name>
--
 <modifier>...</modifier>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name><name>Constants</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    5 +
 <modifier>...</modifier>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>cli</name>/<name><name>ClientOpts</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    6 +
 <modifier>...</modifier>/<name>cli</name>/<name><name>MapReduceClientOnDefaultTable</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   12 +-
 <modifier>...</modifier>/<name>cli</name>/<name><name>MapReduceClientOnRequiredTable</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   17 +-
 <modifier>...</modifier>/<name>core</name>/<name>cli</name>/<name><name>MapReduceClientOpts</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   50 +
 <modifier>...</modifier>/<name>client</name>/<name>admin</name>/<name><name>DelegationTokenConfig</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   84 ++
 <modifier>...</modifier>/<name>core</name>/<name>client</name>/<name>admin</name>/<name><name>SecurityOperations</name><operator>.</operator><name>java</name></name> <operator>|</operator>    8 +
 <modifier>...</modifier>/<name>core</name>/<name>client</name>/<name>impl</name>/<name><name>ClientContext</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   19 +-
 <modifier>...</modifier>/<name>impl</name>/<name><name>DelegationTokenConfigSerializer</name><operator>.</operator><name>java</name></name> <operator>|</operator>   54 +
 <modifier>...</modifier>/<name>client</name>/<name>impl</name>/<name><name>SecurityOperationsImpl</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   35 +
 <modifier>...</modifier>/<name>core</name>/<name>client</name>/<name>impl</name>/<name><name>ThriftTransportKey</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    4 +-
 <modifier>...</modifier>/<name>client</name>/<name>mapred</name>/<name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   51 +-
 <modifier>...</modifier>/<name>client</name>/<name>mapred</name>/<name><name>AccumuloOutputFormat</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    4 +-
 <modifier>...</modifier>/<name>client</name>/<name>mapreduce</name>/<name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name> <operator>|</operator>   53 +-
 <modifier>...</modifier>/<name>mapreduce</name>/<name><name>AccumuloOutputFormat</name><operator>.</operator><name>java</name></name>       <operator>|</operator>    4 +-
 <modifier>...</modifier>/<name>mapreduce</name>/<name>impl</name>/<name><name>DelegationTokenStub</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   80 ++
 <modifier>...</modifier>/<name>mapreduce</name>/<name>lib</name>/<name>impl</name>/<name><name>ConfiguratorBase</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   81 +-
 <modifier>...</modifier>/<name>mapreduce</name>/<name>lib</name>/<name>impl</name>/<name><name>InputConfigurator</name><operator>.</operator><name>java</name></name> <operator>|</operator>   68 +
 <modifier>...</modifier>/<name>client</name>/<name>mock</name>/<name><name>MockSecurityOperations</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    7 +
 <modifier>...</modifier>/<name>security</name>/<name>tokens</name>/<name><name>DelegationToken</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  163 +++
 <modifier>...</modifier>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>conf</name>/<name><name>Property</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    4 +
 <modifier>...</modifier>/<name>master</name>/<name>thrift</name>/<name><name>MasterClientService</name><operator>.</operator><name>java</name></name>    <operator>|</operator> 1183 +++++++++++++++++
 <modifier>...</modifier>/<name>rpc</name>/<name><name>SaslClientDigestCallbackHandler</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  114 ++
 <modifier>...</modifier>/<name>core</name>/<name>rpc</name>/<name><name>SaslConnectionParams</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  148 ++-
 <modifier>...</modifier>/<name>core</name>/<name>rpc</name>/<name><name>SaslDigestCallbackHandler</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   77 ++
 <modifier>...</modifier>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>rpc</name>/<name><name>ThriftUtil</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   12 +-
 <modifier>...</modifier>/<name><name>AuthenticationTokenIdentifier</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  210 +++
 <modifier>...</modifier>/<name>core</name>/<name>security</name>/<name><name>SystemPermission</name><operator>.</operator><name>java</name></name>       <operator>|</operator>    3 +-
 <modifier>...</modifier>/<name>security</name>/<name>thrift</name>/<name><name>TAuthenticationKey</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  705 ++++++++++
 <modifier>...</modifier>/<name><name>TAuthenticationTokenIdentifier</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  796 +++++++++++
 <modifier>...</modifier>/<name>security</name>/<name>thrift</name>/<name><name>TDelegationToken</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  520 ++++++++
 <modifier>...</modifier>/<name>thrift</name>/<name><name>TDelegationTokenConfig</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  399 ++++++
 <modifier>...</modifier>/<name>thrift</name>/<name><name>TDelegationTokenOptions</name><operator>.</operator><name>java</name></name>       <operator>|</operator>  399 ++++++
 <modifier>...</modifier>/<name>accumulo</name>/<name>core</name>/<name>util</name>/<name><name>ThriftMessageUtil</name><operator>.</operator><name>java</name></name> <operator>|</operator>  109 ++
 <name>core</name>/<name>src</name>/<name>main</name>/<name>thrift</name>/<name><name>master</name><operator>.</operator><name>thrift</name></name>            <operator>|</operator>    3 +
 <name>core</name>/<name>src</name>/<name>main</name>/<name>thrift</name>/<name><name>security</name><operator>.</operator><name>thrift</name></name>          <operator>|</operator>   23 +
 <modifier>...</modifier>/<name>admin</name>/<name><name>DelegationTokenConfigTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   63 +
 <modifier>...</modifier>/<name><name>DelegationTokenConfigSerializerTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   40 +
 <modifier>...</modifier>/<name>client</name>/<name>impl</name>/<name><name>ThriftTransportKeyTest</name><operator>.</operator><name>java</name></name>   <operator>|</operator>   97 +-
 <modifier>...</modifier>/<name>security</name>/<name>tokens</name>/<name><name>DelegationTokenTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   72 +
 <modifier>...</modifier>/<name><name>SaslClientDigestCallbackHandlerTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>   33 +
 <modifier>...</modifier>/<name>core</name>/<name>rpc</name>/<name><name>SaslConnectionParamsTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  139 +-
 <modifier>...</modifier>/<name><name>AuthenticationTokenIdentifierTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  111 ++
 <modifier>...</modifier>/<name>core</name>/<name>util</name>/<name><name>ThriftMessageUtilTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   83 ++
 <name>docs</name>/<name>src</name>/<name>main</name>/<name>asciidoc</name>/<name>chapters</name>/<name><name>kerberos</name><operator>.</operator><name>txt</name></name>  <operator>|</operator>  110 ++
 <modifier>...</modifier>/<name>accumulo</name>/<name>fate</name>/<name>zookeeper</name>/<name><name>IZooReader</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    4 +
 <modifier>...</modifier>/<name>accumulo</name>/<name>fate</name>/<name>zookeeper</name>/<name><name>ZooReader</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   28 +
 <modifier>...</modifier>/<name>accumulo</name>/<name>fate</name>/<name>zookeeper</name>/<name><name>ZooUtil</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   18 +
 <modifier>...</modifier>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>proxy</name>/<name><name>Proxy</name><operator>.</operator><name>java</name></name> <operator>|</operator>   14 +-
 <modifier>...</modifier>/<name>server</name>/<name><name>AccumuloServerContext</name><operator>.</operator><name>java</name></name>         <operator>|</operator>   56 +-
 <modifier>...</modifier>/<name>master</name>/<name>state</name>/<name><name>MetaDataStateStore</name><operator>.</operator><name>java</name></name>      <operator>|</operator>    1 -
 <modifier>...</modifier>/<name>rpc</name>/<name><name>SaslServerConnectionParams</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   69 +
 <modifier>...</modifier>/<name>rpc</name>/<name><name>SaslServerDigestCallbackHandler</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  113 ++
 <modifier>...</modifier><name><name>TCredentialsUpdatingInvocationHandler</name><operator>.</operator><name>java</name></name> <operator>|</operator>   18 +-
 <modifier>...</modifier>/<name>accumulo</name>/<name>server</name>/<name>rpc</name>/<name><name>TServerUtils</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   34 +-
 <modifier>...</modifier>/<name>server</name>/<name>rpc</name>/<name><name>UGIAssumingProcessor</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   55 +-
 <modifier>...</modifier>/<name>security</name>/<name><name>AuditedSecurityOperation</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   14 +
 <modifier>...</modifier>/<name>server</name>/<name>security</name>/<name><name>SecurityOperation</name><operator>.</operator><name>java</name></name>    <operator>|</operator>    4 +
 <modifier>...</modifier>/<name>server</name>/<name>security</name>/<name><name>SystemCredentials</name><operator>.</operator><name>java</name></name>    <operator>|</operator>    4 +-
 <modifier>...</modifier>/<name>delegation</name>/<name><name>AuthenticationKey</name><operator>.</operator><name>java</name></name>         <operator>|</operator>  150 +++
 <modifier>...</modifier>/<name><name>AuthenticationTokenKeyManager</name><operator>.</operator><name>java</name></name>        <operator>|</operator>  169 +++
 <modifier>...</modifier>/<name><name>AuthenticationTokenSecretManager</name><operator>.</operator><name>java</name></name>     <operator>|</operator>  269 ++++
 <modifier>...</modifier>/<name><name>ZooAuthenticationKeyDistributor</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  187 +++
 <modifier>...</modifier>/<name><name>ZooAuthenticationKeyWatcher</name><operator>.</operator><name>java</name></name>          <operator>|</operator>  206 +++
 <modifier>...</modifier>/<name>handler</name>/<name><name>KerberosAuthenticator</name><operator>.</operator><name>java</name></name>        <operator>|</operator>    3 +-
 <modifier>...</modifier>/<name>server</name>/<name><name>AccumuloServerContextTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   25 +-
 <modifier>...</modifier>/<name>rpc</name>/<name><name>SaslDigestCallbackHandlerTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  137 ++
 <modifier>...</modifier>/<name>rpc</name>/<name><name>SaslServerConnectionParamsTest</name><operator>.</operator><name>java</name></name>   <operator>|</operator>  101 ++
 <modifier>...</modifier>/<name>delegation</name>/<name><name>AuthenticationKeyTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   95 ++
 <modifier>...</modifier>/<name><name>AuthenticationTokenKeyManagerTest</name><operator>.</operator><name>java</name></name>    <operator>|</operator>  196 +++
 <modifier>...</modifier>/<name><name>AuthenticationTokenSecretManagerTest</name><operator>.</operator><name>java</name></name> <operator>|</operator>  393 ++++++
 <modifier>...</modifier>/<name><name>ZooAuthenticationKeyDistributorTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  270 ++++
 <modifier>...</modifier>/<name><name>ZooAuthenticationKeyWatcherTest</name><operator>.</operator><name>java</name></name>      <operator>|</operator>  323 +++++
 <modifier>...</modifier>/<name>accumulo</name>/<name>gc</name>/<name><name>SimpleGarbageCollector</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    2 +-
 <modifier>...</modifier>/<name>gc</name>/<name><name>GarbageCollectWriteAheadLogsTest</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    7 +
 <modifier>...</modifier>/<name>gc</name>/<name><name>SimpleGarbageCollectorTest</name><operator>.</operator><name>java</name></name>        <operator>|</operator>    7 +
 <modifier>...</modifier>/<name><name>CloseWriteAheadLogReferencesTest</name><operator>.</operator><name>java</name></name>     <operator>|</operator>    7 +
 <modifier>...</modifier>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>master</name>/<name><name>Master</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   57 +-
 <modifier>...</modifier>/<name>master</name>/<name><name>MasterClientServiceHandler</name><operator>.</operator><name>java</name></name>    <operator>|</operator>   30 +
 <modifier>...</modifier>/<name>apache</name>/<name>accumulo</name>/<name>tserver</name>/<name><name>TabletServer</name><operator>.</operator><name>java</name></name> <operator>|</operator>   26 +
 <modifier>...</modifier>/<name>continuous</name>/<name><name>ContinuousBatchWalker</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   10 +-
 <modifier>...</modifier>/<name>test</name>/<name>continuous</name>/<name><name>ContinuousIngest</name><operator>.</operator><name>java</name></name>     <operator>|</operator>   82 +-
 <modifier>...</modifier>/<name>test</name>/<name>continuous</name>/<name><name>ContinuousMoru</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   14 +-
 <modifier>...</modifier>/<name>test</name>/<name>continuous</name>/<name><name>ContinuousOpts</name><operator>.</operator><name>java</name></name>       <operator>|</operator>   80 ++
 <modifier>...</modifier>/<name>test</name>/<name>continuous</name>/<name><name>ContinuousQuery</name><operator>.</operator><name>java</name></name>      <operator>|</operator>   12 +-
 <modifier>...</modifier>/<name>test</name>/<name>continuous</name>/<name><name>ContinuousScanner</name><operator>.</operator><name>java</name></name>    <operator>|</operator>    8 +-
 <modifier>...</modifier>/<name>test</name>/<name>continuous</name>/<name><name>ContinuousWalk</name><operator>.</operator><name>java</name></name>       <operator>|</operator>    8 +-
 <modifier>...</modifier>/<name>accumulo</name>/<name>harness</name>/<name><name>MiniClusterHarness</name><operator>.</operator><name>java</name></name>  <operator>|</operator>    7 +-
 <modifier>...</modifier>/<name>apache</name>/<name>accumulo</name>/<name>test</name>/<name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>   <operator>|</operator>    2 +-
 <modifier>...</modifier>/<name>accumulo</name>/<name>test</name>/<name>functional</name>/<name><name>KerberosIT</name><operator>.</operator><name>java</name></name>  <operator>|</operator>  250 +++-
 90 <name>files</name> <name>changed</name></decl>, 9587 <decl><type ref="prev"/><name>insertions</name><argument_list>(<argument><expr><operator>+</operator></expr></argument>)</argument_list></decl>, 236 <decl><type ref="prev"/><name>deletions</name><argument_list>(<argument><expr><operator>-</operator></expr></argument>)</argument_list>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>admin</name>/<name><name>DelegationTokenConfig</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>impl</name>/<name><name>DelegationTokenConfigSerializer</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>mapreduce</name>/<name>impl</name>/<name><name>DelegationTokenStub</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>security</name>/<name>tokens</name>/<name><name>DelegationToken</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>rpc</name>/<name><name>SaslClientDigestCallbackHandler</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>rpc</name>/<name><name>SaslDigestCallbackHandler</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>security</name>/<name><name>AuthenticationTokenIdentifier</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>security</name>/<name>thrift</name>/<name><name>TAuthenticationKey</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>security</name>/<name>thrift</name>/<name><name>TAuthenticationTokenIdentifier</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>security</name>/<name>thrift</name>/<name><name>TDelegationToken</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>security</name>/<name>thrift</name>/<name><name>TDelegationTokenConfig</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>security</name>/<name>thrift</name>/<name><name>TDelegationTokenOptions</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>util</name>/<name><name>ThriftMessageUtil</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>admin</name>/<name><name>DelegationTokenConfigTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>impl</name>/<name><name>DelegationTokenConfigSerializerTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>client</name>/<name>security</name>/<name>tokens</name>/<name><name>DelegationTokenTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>rpc</name>/<name><name>SaslClientDigestCallbackHandlerTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>security</name>/<name><name>AuthenticationTokenIdentifierTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>core</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name>util</name>/<name><name>ThriftMessageUtilTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>rpc</name>/<name><name>SaslServerConnectionParams</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>rpc</name>/<name><name>SaslServerDigestCallbackHandler</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>security</name>/<name>delegation</name>/<name><name>AuthenticationKey</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>security</name>/<name>delegation</name>/<name><name>AuthenticationTokenKeyManager</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>security</name>/<name>delegation</name>/<name><name>AuthenticationTokenSecretManager</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>security</name>/<name>delegation</name>/<name><name>ZooAuthenticationKeyDistributor</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>security</name>/<name>delegation</name>/<name><name>ZooAuthenticationKeyWatcher</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>rpc</name>/<name><name>SaslDigestCallbackHandlerTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>rpc</name>/<name><name>SaslServerConnectionParamsTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>security</name>/<name>delegation</name>/<name><name>AuthenticationKeyTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>security</name>/<name>delegation</name>/<name><name>AuthenticationTokenKeyManagerTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>security</name>/<name>delegation</name>/<name><name>AuthenticationTokenSecretManagerTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>security</name>/<name>delegation</name>/<name><name>ZooAuthenticationKeyDistributorTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>server</name>/<name>base</name>/<name>src</name>/<name>test</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>server</name>/<name>security</name>/<name>delegation</name>/<name><name>ZooAuthenticationKeyWatcherTest</name><operator>.</operator><name>java</name></name>
 <name>create</name> <name>mode</name> 100644 <name>test</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>test</name>/<name>continuous</name>/<name><name>ContinuousOpts</name><operator>.</operator><name>java</name></name>

<name>diff</name> --<name>git</name> <name>a</name>/<name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name><name>Constants</name><operator>.</operator><name>java</name></name> <name>b</name>/<name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name><name>Constants</name><operator>.</operator><name>java</name></name>
<name>index</name> 0229d4e7f..94ada7a3d 100644
-- <name>a</name>/<name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name><name>Constants</name><operator>.</operator><name>java</name></name>
++ <name>b</name>/<name>core</name>/<name>src</name>/<name>main</name>/<name>java</name>/<name>org</name>/<name>apache</name>/<name>accumulo</name>/<name>core</name>/<name><name>Constants</name><operator>.</operator><name>java</name></name>
@@ -81</decl>,6 +81,11 @@ public <decl><type ref="prev"/><name>class</name> <name>Constants</name> <block>{<block_content>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZHDFS_RESERVATIONS</name> <init>= <expr><literal type="string">"/hdfs_reservations"</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZRECOVERY</name> <init>= <expr><literal type="string">"/recovery"</literal></expr></init></decl>;</decl_stmt>
 
  <comment type="block" format="javadoc">/**
   * Base znode for storing secret keys that back delegation tokens
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZDELEGATION_TOKEN_KEYS</name> <init>= <expr><literal type="string">"/delegation_token_keys"</literal></expr></init></decl>;</decl_stmt>

   <comment type="block" format="javadoc">/**
    * Initial tablet directory name for the default tablet in all tables
    */</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>ClientOpts</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>ClientOpts</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">216f32d36</literal><operator>..</operator><name>a7d98b38e</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>ClientOpts</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>ClientOpts</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">241</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">241</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientOpts</name> extends <name>Help</name> <block>{
         <throw>throw <argument_list>new <argument><expr><call><name>AccumuloSecurityException</name><argument_list>(<argument><expr><literal type="string">"No principal or authentication token was provided"</literal></expr></argument>, <argument><expr><name><name>SecurityErrorCode</name><operator>.</operator><name>BAD_CREDENTIALS</name></name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
       }</block></expr></expr_stmt>
 
      <comment type="line">// In MapReduce, if we create a DelegationToken, the principal is updated from the KerberosToken</comment>
      <comment type="line">// used to obtain the DelegationToken.</comment>
      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>principal</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>principal</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

       <comment type="line">// Try to extract the principal automatically from Kerberos</comment>
       <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>KerberosToken</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><name>principal</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>KerberosToken</name><operator>)</operator> <name>token</name><operator>)</operator><operator>.</operator><call><name>getPrincipal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOnDefaultTable</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOnDefaultTable</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">0cf081f2d</literal><operator>..</operator><name>d39554cc2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOnDefaultTable</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOnDefaultTable</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name></name>;</package>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloInputFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloOutputFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>Job</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>beust</name><operator>.</operator><name>jcommander</name><operator>.</operator><name>Parameter</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>MapReduceClientOnDefaultTable</name> extends <name>MapReduceClientOpts</name> <block>{
   @<expr><name>Override</name>
   <specifier>public</specifier> <name>void</name> <call><name>setAccumuloConfigs</name><argument_list>(<argument><expr><name>Job</name> <name>job</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloSecurityException</name> <block>{
     <expr><call><name><name>super</name><operator>.</operator><name>setAccumuloConfigs</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getPrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setInputTableName</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getTableName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>tableName</name> <init>= <expr><call><name>getTableName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>principal</name> <init>= <expr><call><name>getPrincipal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>AuthenticationToken</name></type> <name>token</name> <init>= <expr><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setInputTableName</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setScanAuthorizations</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>auths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getPrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setCreateTables</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setDefaultTableName</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getTableName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setDefaultTableName</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
 
 </block_content>}</block></decl></decl_stmt></for>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOnRequiredTable</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOnRequiredTable</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7719e9278</literal><operator>..</operator><name>caef02d4b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOnRequiredTable</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOnRequiredTable</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name></name>;</package>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloInputFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloOutputFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>Job</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>beust</name><operator>.</operator><name>jcommander</name><operator>.</operator><name>Parameter</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>MapReduceClientOnRequiredTable</name> <super_list><extends>extends <super><name>MapReduceClientOpts</name></super></extends></super_list> <block>{

   <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <block>{<expr><literal type="string">"-t"</literal></expr>, <argument><expr><literal type="string">"--table"</literal></expr></argument>}</block></expr></argument>, <argument><expr><name>required</name> <operator>=</operator> <literal type="boolean">true</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"table to use"</literal></expr></argument>)</argument_list></annotation>
   <type><specifier>private</specifier> <name>String</name></type> <name>tableName</name></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">20</literal> @@ <specifier>public</specifier> <name>class</name> <name>MapReduceClientOnRequiredTable</name> extends <name>MapReduceClientOpts</name> <block>{
   <expr><specifier>public</specifier> <name>void</name> <call><name>setAccumuloConfigs</name><argument_list>(<argument><expr><name>Job</name> <name>job</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloSecurityException</name> <block>{
     <expr><call><name><name>super</name><operator>.</operator><name>setAccumuloConfigs</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
 
    <expr><name>final</name> <name>String</name> <name>principal</name> <operator>=</operator> <call><name>getPrincipal</name><argument_list>()</argument_list></call></expr>, <expr><name>tableName</name> <operator>=</operator> <call><name>getTableName</name><argument_list>()</argument_list></call></expr>;

     <if_stmt><if>if <condition>(<expr><call><name><name>tokenFile</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getPrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getPrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>AuthenticationToken</name></type> <name>token</name> <init>= <expr><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getPrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tokenFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getPrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tokenFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name>tokenFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name>tokenFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setInputTableName</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getTableName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <constructor_decl><name><name>AccumuloInputFormat</name><operator>.</operator><name>setInputTableName</name></name><parameter_list>(<parameter><decl><type><name>job</name></type></decl></parameter>, <parameter><decl><type><name>tableName</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
     <constructor_decl><name><name>AccumuloInputFormat</name><operator>.</operator><name>setScanAuthorizations</name></name><parameter_list>(<parameter><decl><type><name>job</name></type></decl></parameter>, <parameter><decl><type><name>auths</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
     <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setCreateTables</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setDefaultTableName</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>getTableName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <constructor_decl><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setDefaultTableName</name></name><parameter_list>(<parameter><decl><type><name>job</name></type></decl></parameter>, <parameter><decl><type><name>tableName</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
   }</block></class>
 
   <function><type><specifier>public</specifier> <name>String</name></type> <name>getTableName</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOpts</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOpts</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4b3b7edf8</literal><operator>..</operator><literal type="number">2a5408bb7</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOpts</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>cli</name><operator>/</operator><name><name>MapReduceClientOpts</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">66</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name></name>;</package>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloInputFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloOutputFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>KerberosToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>SystemPermission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>Job</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * Adds some MR awareness to the ClientOpts
  */</comment>
 <class><specifier>public</specifier> class <name>MapReduceClientOpts</name> <super_list><extends>extends <super><name>ClientOpts</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>MapReduceClientOpts</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

   <function><type><specifier>public</specifier> <name>void</name></type> <name>setAccumuloConfigs</name><parameter_list>(<parameter><decl><type><name>Job</name></type> <name>job</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setZooKeeperInstance</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClientConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setZooKeeperInstance</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClientConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>AuthenticationToken</name></type> <name>getToken</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>AuthenticationToken</name></type> <name>authToken</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// For MapReduce, Kerberos credentials don't make it to the Mappers and Reducers,</comment>
    <comment type="line">// so we need to request a delegation token and use that instead.</comment>
    <if_stmt><if>if <condition>(<expr><name>authToken</name> <operator>instanceof</operator> <name>KerberosToken</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Received KerberosToken, fetching DelegationToken for MapReduce"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>KerberosToken</name></type> <name>krbToken</name> <init>= <expr><operator>(</operator><name>KerberosToken</name><operator>)</operator> <name>authToken</name></expr></init></decl>;</decl_stmt>

      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>UserGroupInformation</name></type> <name>user</name> <init>= <expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>getCurrentUser</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>user</name><operator>.</operator><name>hasKerberosCredentials</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Expected current user to have Kerberos credentials"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>newPrincipal</name> <init>= <expr><call><name><name>user</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Obtaining delegation token for {}"</literal></expr></argument>, <argument><expr><name>newPrincipal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setPrincipal</name><argument_list>(<argument><expr><name>newPrincipal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name>getInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConnector</name><argument_list>(<argument><expr><name>newPrincipal</name></expr></argument>, <argument><expr><name>krbToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Do the explicit check to see if the user has the permission to get a delegation token</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>conn</name><operator>.</operator><name>securityOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasSystemPermission</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>whoami</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SystemPermission</name><operator>.</operator><name>OBTAIN_DELEGATION_TOKEN</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"{} doesn't have the {} SystemPermission neccesary to obtain a delegation token. MapReduce tasks cannot automatically use the client's"</literal>
              <operator>+</operator> <literal type="string">" credentials on remote servers. Delegation tokens provide a means to run MapReduce without distributing the user's credentials."</literal></expr></argument>,
              <argument><expr><call><name><name>user</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>SystemPermission</name><operator>.</operator><name>OBTAIN_DELEGATION_TOKEN</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>conn</name><operator>.</operator><name>whoami</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" does not have permission to obtain a delegation token"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Get the delegation token from Accumulo</comment>
        <return>return <expr><call><name><name>conn</name><operator>.</operator><name>securityOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDelegationToken</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"Failed to acquire DelegationToken for use with MapReduce"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>authToken</name></expr>;</return>
  </block_content>}</block></function>
 }</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>DelegationTokenConfig</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>DelegationTokenConfig</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..2e25c3dfc</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>DelegationTokenConfig</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">84</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Configuration options for obtaining a {@link DelegationToken}
 *
 * @since 1.7.0
 */</comment>
<class><specifier>public</specifier> class <name>DelegationTokenConfig</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lifetime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Requests a specific lifetime for the token that is different than the default system lifetime. The lifetime must not exceed the secret key lifetime
   * configured on the servers.
   *
   * @param lifetime
   *          Token lifetime
   * @param unit
   *          Unit of time for the lifetime
   * @return this
   */</comment>
  <function><type><specifier>public</specifier> <name>DelegationTokenConfig</name></type> <name>setTokenLifetime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>lifetime</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkArgument</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>lifetime</name></expr></argument>, <argument><expr><literal type="string">"Lifetime must be non-negative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><literal type="string">"TimeUnit was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>lifetime</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * The current token lifetime. A value of zero corresponds to using the system configured lifetime.
   *
   * @param unit
   *          The unit of time the lifetime should be returned in
   * @return Token lifetime in requested unit of time
   */</comment>
  <function><type><specifier>public</specifier> <name>long</name></type> <name>getTokenLifetime</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>unit</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>lifetime</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>DelegationTokenConfig</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>DelegationTokenConfig</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>DelegationTokenConfig</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>lifetime</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>lifetime</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>lifetime</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"DelegationTokenConfig[lifetime="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>lifetime</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"ms]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>SecurityOperations</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>SecurityOperations</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>efeafc0b5</name><operator>..</operator><literal type="number">2682f95ed</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>SecurityOperations</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>SecurityOperations</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>PasswordToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>NamespacePermission</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">350</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">351</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> interface <name>SecurityOperations</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <call><name>listLocalUsers</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws></expr>;
 
  <comment type="block" format="javadoc">/**
   * Obtain a {@link DelegationToken} for use when Kerberos credentials are unavailable (e.g. YARN Jobs)
   *
   * @return a {@link DelegationToken} for this user
   * @since 1.7.0
   */</comment>
  <expr><name>DelegationToken</name> <call><name>getDelegationToken</name><argument_list>(<argument><expr><name>DelegationTokenConfig</name> <name>cfg</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws></expr>;
 }</block>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ClientContext</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ClientContext</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">8470da45c</literal><operator>..</operator><literal type="number">7c2fb1b0d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ClientContext</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ClientContext</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ClientContext</name> <block>{
 
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>Logger</name> <name>log</name> <operator>=</operator> <call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ClientContext</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
  <expr><specifier>private</specifier> <name>final</name> <name>Instance</name> <name>inst</name></expr>;
  <expr><specifier>protected</specifier> <name>final</name> <name>Instance</name> <name>inst</name></expr>;
   <expr><specifier>private</specifier> <name>Credentials</name> <name>creds</name></expr>;
   <expr><specifier>private</specifier> <name>ClientConfiguration</name> <name>clientConf</name></expr>;
   <expr><specifier>private</specifier> <name>final</name> <name>AccumuloConfiguration</name> <name>rpcConf</name></expr>;
  <expr><specifier>private</specifier> <name>Connector</name> <name>conn</name></expr>;
  <expr><specifier>protected</specifier> <name>Connector</name> <name>conn</name></expr>;
 
   <comment type="block" format="javadoc">/**
    * Instantiate a client context
@@ -122,12 +122,21 @@ public class ClientContext {
   /**
    * Retrieve SASL configuration to initiate an RPC connection to a server
    */</comment>
  <expr><specifier>public</specifier> <name>SaslConnectionParams</name> <call><name>getClientSaslParams</name><argument_list>()</argument_list></call> <block>{
  <expr><specifier>public</specifier> <name>SaslConnectionParams</name> <call><name>getSaslParams</name><argument_list>()</argument_list></call> <block>{
    <expr><name>final</name> <name>boolean</name> <name>defaultVal</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name><operator>.</operator><name>getDefaultValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

     <comment type="line">// Use the clientConf if we have it</comment>
     <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>clientConf</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>SaslConnectionParams</name><operator>.</operator><name>forConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr>;</return>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>clientConf</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>defaultVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr>
      <return>return <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>, <argument><expr><call><name><name>creds</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
    }</block>
    <name>AccumuloConfiguration</name> <name>conf</name> <operator>=</operator> <call><name>getConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>conf</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>SaslConnectionParams</name><operator>.</operator><name>forConfig</name></name><argument_list>(<argument><expr><call><name>getConfiguration</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name><name>creds</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
diff --git a/core/src/main/java/org/apache/accumulo/core/client/impl/DelegationTokenConfigSerializer.java b/core/src/main/java/org/apache/accumulo/core/client/impl/DelegationTokenConfigSerializer.java
new file mode 100644
index 000000000..934079d98
-- /dev/null
++ b/core/src/main/java/org/apache/accumulo/core/client/impl/DelegationTokenConfigSerializer.java
@@ -0,0 +1,54 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Handles serialization of {@link DelegationTokenConfig}
 */</comment>
<class><specifier>public</specifier> class <name>DelegationTokenConfigSerializer</name> <block>{

  <comment type="block" format="javadoc">/**
   * Serialize the delegation token config into the thrift variant
   *
   * @param config
   *          The configuration
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TDelegationTokenConfig</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>DelegationTokenConfig</name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TDelegationTokenConfig</name></type> <name>tconfig</name> <init>= <expr><operator>new</operator> <call><name>TDelegationTokenConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tconfig</name><operator>.</operator><name>setLifetime</name></name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>getTokenLifetime</name></name><argument_list>(<argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>tconfig</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Deserialize the Thrift delegation token config into the non-thrift variant
   *
   * @param tconfig
   *          The thrift configuration
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DelegationTokenConfig</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>TDelegationTokenConfig</name></type> <name>tconfig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DelegationTokenConfig</name></type> <name>config</name> <init>= <expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>tconfig</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setTokenLifetime</name></name><argument_list>(<argument><expr><call><name><name>tconfig</name><operator>.</operator><name>getLifetime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>config</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SecurityOperationsImpl</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SecurityOperationsImpl</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>feb1ee7c5</name><operator>..</operator><name>dbaa9d1e2</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SecurityOperationsImpl</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>SecurityOperationsImpl</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SecurityOperations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ClientService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>SecurityErrorCode</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">30</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">32</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TableOperationExceptionType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftTableOperationException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>PasswordToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>master</name><operator>.</operator><name>thrift</name><operator>.</operator><name>MasterClientService</name><operator>.</operator><name>Client</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Credentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>NamespacePermission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>SystemPermission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>TablePermission</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>Tracer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">344</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">351</literal></expr><operator>,</operator><expr><literal type="number">32</literal> @@ <specifier>public</specifier> <name>class</name> <name>SecurityOperationsImpl</name> implements <name>SecurityOperations</name> <block>{
     }</block></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
   }
 
  @<function><type><name>Override</name>
  <specifier>public</specifier> <name>DelegationToken</name></type> <name>getDelegationToken</name><parameter_list>(<parameter><decl><type><name>DelegationTokenConfig</name></type> <name>cfg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>TDelegationTokenConfig</name></type> <name>tConfig</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>cfg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tConfig</name> <operator>=</operator> <call><name><name>DelegationTokenConfigSerializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>tConfig</name> <operator>=</operator> <operator>new</operator> <call><name>TDelegationTokenConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>TDelegationToken</name></type> <name>thriftToken</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>thriftToken</name> <operator>=</operator> <call><name><name>MasterClient</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>ClientExecReturn</name><argument_list type="generic">&lt;<argument><name>TDelegationToken</name></argument>,<argument><name>Client</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>TDelegationToken</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Client</name></type> <name>client</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
          <return>return <expr><call><name><name>client</name><operator>.</operator><name>getDelegationToken</name></name><argument_list>(<argument><expr><call><name><name>Tracer</name><operator>.</operator><name>traceInfo</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>rpcCreds</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tConfig</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>TableNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// should never happen</comment>
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Received TableNotFoundException on method which should not throw that exception"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>

    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><call><name><name>thriftToken</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Get the password out of the thrift delegation token</comment>
    <return>return <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>(<argument><expr><call><name><name>thriftToken</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftTransportKey</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftTransportKey</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a84311139</name><operator>..</operator><literal type="number">891d6e1dd</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftTransportKey</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftTransportKey</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftTransportKey</name> <block>{
     <expr><name><name>this</name><operator>.</operator><name>server</name></name> <operator>=</operator> <name>server</name></expr>;
     <expr><name><name>this</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;
     <expr><name><name>this</name><operator>.</operator><name>sslParams</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getClientSslParams</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>this</name><operator>.</operator><name>saslParams</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getClientSaslParams</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>this</name><operator>.</operator><name>saslParams</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getSaslParams</name></name><argument_list>()</argument_list></call></expr>;
     <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>saslParams</name></expr>)</condition> <block>{<block_content>
       <comment type="line">// TSasl and TSSL transport factories don't play nicely together</comment>
       <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>sslParams</name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftTransportKey</name> <block>{
     <if_stmt><if>if <condition>(<expr><call><name>isSsl</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"ssl:"</literal></expr>;</expr_stmt>
     <expr_stmt/></block_content></block></if></if_stmt></block></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><call><name>isSasl</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"sasl:"</literal> <operator>+</operator> <call><name><name>saslParams</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"@"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name><name>saslParams</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
     <return>return <expr><name>prefix</name> <operator>+</operator> <name>server</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
   }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b83a02403</name><operator>..</operator><literal type="number">0ce05d719</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapred</name><operator>/</operator><name><name>AbstractInputFormat</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">39</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableDeletedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableOfflineException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ClientContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>OfflineScanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ScannerImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>Tables</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>TabletLocator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>InputTableConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>ConfiguratorBase</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name><operator>.</operator><name>InputConfigurator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mock</name><operator>.</operator><name>MockInstance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>KerberosToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>PasswordToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>KeyExtent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>tables</name><operator>.</operator><name>TableState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Credentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">62</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapred</name><operator>.</operator><name>InputFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapred</name><operator>.</operator><name>InputSplit</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapred</name><operator>.</operator><name>JobConf</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapred</name><operator>.</operator><name>RecordReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>Token</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Level</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>AbstractInputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> implements <name><name>InputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> <block>{
    <expr><operator>*</operator> <name>Sets</name> <name>the</name> <name>connector</name> <name>information</name> <name>needed</name> <name>to</name> <name>communicate</name> <name>with</name> <name>Accumulo</name> <name>in</name> <name>this</name> <name><name>job</name><operator>.</operator></name>
    *
    <operator>*</operator> <operator>&lt;</operator><name>p</name><operator>&gt;</operator>
   <operator>*</operator> <operator>&lt;</operator><name>b</name><operator>&gt;</operator><name>WARNING</name><operator>:</operator><operator>&lt;</operator><operator>/</operator><name>b</name><operator>&gt;</operator> <name>The</name> <name>serialized</name> <name>token</name> <name>is</name> <name>stored</name> <name>in</name> <name>the</name> <name>configuration</name> <name>and</name> <name>shared</name> <name>with</name> <name>all</name> <name>MapReduce</name> <name><name>tasks</name><operator>.</operator> <name>It</name></name> <name>is</name> <name>BASE64</name> <name>encoded</name> <name>to</name> <name>provide</name> <name>a</name> <name>charset</name> <name>safe</name>
   <operator>*</operator> <name>conversion</name> <name>to</name> <name>a</name> <name>string</name></expr>, <expr><name>and</name> <name>is</name> <name>not</name> <name>intended</name> <name>to</name> <name>be</name> <name><name>secure</name><operator>.</operator></name>
   * <operator>&lt;</operator><name>b</name><operator>&gt;</operator><name>WARNING</name><operator>:</operator><operator>&lt;</operator><operator>/</operator><name>b</name><operator>&gt;</operator> <name>Some</name> <name>tokens</name></expr>, <expr><name>when</name> <name>serialized</name></expr>, <expr><name>divulge</name> <name>sensitive</name> <name>information</name> <name>in</name> <name>the</name> <name>configuration</name> <name>as</name> <name>a</name> <name>means</name> <name>to</name> <name>pass</name> <name>the</name> <name>token</name> <name>to</name> <name>MapReduce</name> <name><name>tasks</name><operator>.</operator> <name>This</name></name>
   <operator>*</operator> <name>information</name> <name>is</name> <name>BASE64</name> <name>encoded</name> <name>to</name> <name>provide</name> <name>a</name> <name>charset</name> <name>safe</name> <name>conversion</name> <name>to</name> <name>a</name> <name>string</name></expr>, <expr><name>but</name> <name>this</name> <name>conversion</name> <name>is</name> <name>not</name> <name>intended</name> <name>to</name> <name>be</name> <name><name>secure</name><operator>.</operator></name> {@<name>link</name> <name>PasswordToken</name></expr>}</block> <name>is</name>
   <operator>*</operator> <name>one</name> <name>example</name> <name>that</name> <name>is</name> <name>insecure</name> <name>in</name> <name>this</name> <name>way</name></expr>;</expr_stmt> <expr_stmt><expr><name>however</name> <block>{@<expr><name>link</name> <name>DelegationToken</name></expr>}</block><name>s</name></expr><operator>,</operator> <expr><name>acquired</name> <name>using</name> <name>a</name> <block>{@<expr><name>link</name> <name>KerberosToken</name></expr>}</block></expr><operator>,</operator> <expr><name>is</name> <name>not</name> <name>subject</name> <name>to</name> <name>this</name> <name><name>concern</name><operator>.</operator></name>
    *
    <operator>*</operator> @<name>param</name> <name>job</name>
    <operator>*</operator>          <name>the</name> <name>Hadoop</name> <name>job</name> <name>instance</name> <name>to</name> <name>be</name> <name>configured</name>
@@ <operator>-</operator><literal type="number">89</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">97</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>AbstractInputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> implements <name><name>InputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> <block>{
    <expr><operator>*</operator> @<name>since</name> <literal type="number">1.5.0</literal>
    <operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>setConnectorInfo</name><argument_list>(<argument><expr><name>JobConf</name> <name>job</name></expr></argument>, <argument><expr><name>String</name> <name>principal</name></expr></argument>, <argument><expr><name>AuthenticationToken</name> <name>token</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>AccumuloSecurityException</name> <block>{</block></expr></argument></throws></expr>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>KerberosToken</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Received KerberosToken, attempting to fetch DelegationToken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>Instance</name></type> <name>instance</name> <init>= <expr><call><name>getInstance</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>getConnector</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>securityOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDelegationToken</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></try></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Failed to automatically obtain DelegationToken, Mappers/Reducers will likely fail to communicate with Accumulo"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch>
    }
    <comment type="line">// DelegationTokens can be passed securely from user to task without serializing insecurely in the configuration</comment>
    if <expr_stmt><expr><operator>(</operator><name>token</name> <operator>instanceof</operator> <name>DelegationToken</name><operator>)</operator> <block>{
      <expr><name>DelegationToken</name> <name>delegationToken</name> <operator>=</operator> <operator>(</operator><name>DelegationToken</name><operator>)</operator> <name>token</name></expr>;

      <comment type="line">// Convert it into a Hadoop Token</comment>
      <expr><name>AuthenticationTokenIdentifier</name> <name>identifier</name> <operator>=</operator> <call><name><name>delegationToken</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr>;
      <expr><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name> <name>hadoopToken</name> <operator>=</operator> <operator>new</operator> <call><name><name>Token</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>identifier</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>delegationToken</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>identifier</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>delegationToken</name><operator>.</operator><name>getServiceName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

      <comment type="line">// Add the Hadoop Token to the Job so it gets serialized and passed along.</comment>
      <expr><call><name><name>job</name><operator>.</operator><name>getCredentials</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addToken</name><argument_list>(<argument><expr><call><name><name>hadoopToken</name><operator>.</operator><name>getService</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hadoopToken</name></expr></argument>)</argument_list></call></expr>;
    }</block>

     <call><name><name>InputConfigurator</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }
 
@<annotation>@</annotation> -<expr_stmt><expr><literal type="number">147</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">178</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>AbstractInputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> implements <name><name>InputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> <block>{
    <expr><operator>*</operator> @<name>see</name> <operator>#</operator><call><name>setConnectorInfo</name><argument_list>(<argument><expr><name>JobConf</name></expr></argument>, <argument><expr><name>String</name></expr></argument>, <argument><expr><name>String</name></expr></argument>)</argument_list></call>
    <operator>*</operator><operator>/</operator>
   <specifier>protected</specifier> <specifier>static</specifier> <name>AuthenticationToken</name> <call><name>getAuthenticationToken</name><argument_list>(<argument><expr><name>JobConf</name> <name>job</name></expr></argument>)</argument_list></call> <block>{
    <return>return <expr><call><name><name>InputConfigurator</name><operator>.</operator><name>getAuthenticationToken</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</return>
    <name>AuthenticationToken</name> <name>token</name> <operator>=</operator> <call><name><name>InputConfigurator</name><operator>.</operator><name>getAuthenticationToken</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></block></expr>;
    <return>return <expr><call><name><name>ConfiguratorBase</name><operator>.</operator><name>unwrapAuthenticationToken</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
   <comment type="block" format="javadoc">/**
@@ -284,7 +316,18 @@ public abstract class AbstractInputFormat&lt;K,V&gt; implements InputFormat&lt;K,V&gt; {
    * @since 1.5.0
    */</comment>
   <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateOptions</name><parameter_list>(<parameter><decl><type><name>JobConf</name></type> <name>job</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>InputConfigurator</name><operator>.</operator><name>validateOptions</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Instance</name></type> <name>inst</name> <init>= <expr><call><name><name>InputConfigurator</name><operator>.</operator><name>validateInstance</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><call><name><name>InputConfigurator</name><operator>.</operator><name>getPrincipal</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationToken</name></type> <name>token</name> <init>= <expr><call><name><name>InputConfigurator</name><operator>.</operator><name>getAuthenticationToken</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// In secure mode, we need to convert the DelegationTokenStub into a real DelegationToken</comment>
    <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name><name>ConfiguratorBase</name><operator>.</operator><name>unwrapAuthenticationToken</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name><name>inst</name><operator>.</operator><name>getConnector</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name><name>InputConfigurator</name><operator>.</operator><name>validatePermissions</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java b/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java
index f877ec60d..4e95a4a8d 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java
++ b/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java
@@ -34,6 +34,7 @@ import org.apache.accumulo.core.client.MutationsRejectedException;
 import org.apache.accumulo.core.client.TableExistsException;
 import org.apache.accumulo.core.client.TableNotFoundException;
 import org.apache.accumulo.core.client.ZooKeeperInstance;
import org.apache.accumulo.core.client.mapreduce.lib.impl.ConfiguratorBase;
 import org.apache.accumulo.core.client.mapreduce.lib.impl.OutputConfigurator;
 import org.apache.accumulo.core.client.mock.MockInstance;
 import org.apache.accumulo.core.client.security.SecurityErrorCode;
@@ -168,7 +169,8 @@ public class AccumuloOutputFormat implements OutputFormat&lt;Text,Mutation&gt; {
    * @see #setConnectorInfo(JobConf, String, String)
    */</comment>
   <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>AuthenticationToken</name></type> <name>getAuthenticationToken</name><parameter_list>(<parameter><decl><type><name>JobConf</name></type> <name>job</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>OutputConfigurator</name><operator>.</operator><name>getAuthenticationToken</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>AuthenticationToken</name></type> <name>token</name> <init>= <expr><call><name><name>OutputConfigurator</name><operator>.</operator><name>getAuthenticationToken</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>ConfiguratorBase</name><operator>.</operator><name>unwrapAuthenticationToken</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java
index 5c7b78056..e1b35b282 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java
++ b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java
@@ -39,23 +39,30 @@ import org.apache.accumulo.core.client.Scanner;
 import org.apache.accumulo.core.client.TableDeletedException;
 import org.apache.accumulo.core.client.TableNotFoundException;
 import org.apache.accumulo.core.client.TableOfflineException;
import org.apache.accumulo.core.client.admin.DelegationTokenConfig;
 import org.apache.accumulo.core.client.impl.ClientContext;
 import org.apache.accumulo.core.client.impl.OfflineScanner;
 import org.apache.accumulo.core.client.impl.ScannerImpl;
 import org.apache.accumulo.core.client.impl.Tables;
 import org.apache.accumulo.core.client.impl.TabletLocator;
import org.apache.accumulo.core.client.mapreduce.lib.impl.ConfiguratorBase;
 import org.apache.accumulo.core.client.mapreduce.lib.impl.InputConfigurator;
 import org.apache.accumulo.core.client.mock.MockInstance;
 import org.apache.accumulo.core.client.security.tokens.AuthenticationToken;
import org.apache.accumulo.core.client.security.tokens.DelegationToken;
import org.apache.accumulo.core.client.security.tokens.KerberosToken;
import org.apache.accumulo.core.client.security.tokens.PasswordToken;
 import org.apache.accumulo.core.data.Key;
 import org.apache.accumulo.core.data.KeyExtent;
 import org.apache.accumulo.core.data.Range;
 import org.apache.accumulo.core.data.Value;
 import org.apache.accumulo.core.master.state.tables.TableState;
import org.apache.accumulo.core.security.AuthenticationTokenIdentifier;
 import org.apache.accumulo.core.security.Authorizations;
 import org.apache.accumulo.core.security.Credentials;
 import org.apache.accumulo.core.util.Pair;
 import org.apache.accumulo.core.util.UtilWaitThread;
import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapreduce.InputFormat;
 import org.apache.hadoop.mapreduce.InputSplit;
@@ -63,6 +70,7 @@ import org.apache.hadoop.mapreduce.Job;
 import org.apache.hadoop.mapreduce.JobContext;
 import org.apache.hadoop.mapreduce.RecordReader;
 import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.security.token.Token;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
 
@@ -79,8 +87,9 @@ public abstract class AbstractInputFormat&lt;K,V&gt; extends InputFormat&lt;K,V&gt; {
    * Sets the connector information needed to communicate with Accumulo in this job.
    *
    * &lt;p&gt;
   * &lt;b&gt;WARNING:&lt;/b&gt; The serialized token is stored in the configuration and shared with all MapReduce tasks. It is BASE64 encoded to provide a charset safe
   * conversion to a string, and is not intended to be secure.
   * &lt;b&gt;WARNING:&lt;/b&gt; For {@link PasswordToken}, the serialized token is stored in the configuration and shared with all MapReduce tasks. It is BASE64 encoded to
   * provide a charset safe conversion to a string, and is not intended to be secure. This is not the case for {@link KerberosToken} and the corresponding
   * {@link DelegationToken} acquired using the KerberosToken.
    *
    * @param job
    *          the Hadoop job instance to be configured
@@ -91,6 +100,29 @@ public abstract class AbstractInputFormat&lt;K,V&gt; extends InputFormat&lt;K,V&gt; {
    * @since 1.5.0
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConnectorInfo</name><parameter_list>(<parameter><decl><type><name>Job</name></type> <name>job</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>principal</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>KerberosToken</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Received KerberosToken, attempting to fetch DelegationToken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>Instance</name></type> <name>instance</name> <init>= <expr><call><name>getInstance</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>getConnector</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>securityOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDelegationToken</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Failed to automatically obtain DelegationToken, Mappers/Reducers will likely fail to communicate with Accumulo"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// DelegationTokens can be passed securely from user to task without serializing insecurely in the configuration</comment>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>DelegationToken</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>DelegationToken</name></type> <name>delegationToken</name> <init>= <expr><operator>(</operator><name>DelegationToken</name><operator>)</operator> <name>token</name></expr></init></decl>;</decl_stmt>

      <comment type="line">// Convert it into a Hadoop Token</comment>
      <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name> <init>= <expr><call><name><name>delegationToken</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>hadoopToken</name> <init>= <expr><operator>new</operator> <call><name><name>Token</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>identifier</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>delegationToken</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>identifier</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>delegationToken</name><operator>.</operator><name>getServiceName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Add the Hadoop Token to the Job so it gets serialized and passed along.</comment>
      <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>getCredentials</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addToken</name><argument_list>(<argument><expr><call><name><name>hadoopToken</name><operator>.</operator><name>getService</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hadoopToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

     <expr_stmt><expr><call><name><name>InputConfigurator</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><call><name><name>job</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">203</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <specifier>abstract</specifier> <name>class</name> <name><name>AbstractInputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> extends <name><name>InputFormat</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name> <block>{
    <expr><operator>*</operator> @<name>see</name> <operator>#</operator><call><name>setConnectorInfo</name><argument_list>(<argument><expr><name>Job</name></expr></argument>, <argument><expr><name>String</name></expr></argument>, <argument><expr><name>String</name></expr></argument>)</argument_list></call>
    <operator>*</operator><operator>/</operator>
   <specifier>protected</specifier> <specifier>static</specifier> <name>AuthenticationToken</name> <call><name>getAuthenticationToken</name><argument_list>(<argument><expr><name>JobContext</name> <name>context</name></expr></argument>)</argument_list></call> <block>{
    <return>return <expr><call><name><name>InputConfigurator</name><operator>.</operator><name>getAuthenticationToken</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <name>AuthenticationToken</name> <name>token</name> <operator>=</operator> <call><name><name>InputConfigurator</name><operator>.</operator><name>getAuthenticationToken</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
    <return>return <expr><call><name><name>ConfiguratorBase</name><operator>.</operator><name>unwrapAuthenticationToken</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
   <comment type="block" format="javadoc">/**
@@ -339,7 +372,19 @@ public abstract class AbstractInputFormat&lt;K,V&gt; extends InputFormat&lt;K,V&gt; {
    * @since 1.5.0
    */</comment>
   <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateOptions</name><parameter_list>(<parameter><decl><type><name>JobContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>InputConfigurator</name><operator>.</operator><name>validateOptions</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Configuration</name></type> <name>conf</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Instance</name></type> <name>inst</name> <init>= <expr><call><name><name>InputConfigurator</name><operator>.</operator><name>validateInstance</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><call><name><name>InputConfigurator</name><operator>.</operator><name>getPrincipal</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationToken</name></type> <name>token</name> <init>= <expr><call><name><name>InputConfigurator</name><operator>.</operator><name>getAuthenticationToken</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// In secure mode, we need to convert the DelegationTokenStub into a real DelegationToken</comment>
    <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name><name>ConfiguratorBase</name><operator>.</operator><name>unwrapAuthenticationToken</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name><name>inst</name><operator>.</operator><name>getConnector</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name><name>InputConfigurator</name><operator>.</operator><name>validatePermissions</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java
index 5e0aa73ab..3164e4a07 100644
-- a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java
++ b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java
@@ -34,6 +34,7 @@ import org.apache.accumulo.core.client.MutationsRejectedException;
 import org.apache.accumulo.core.client.TableExistsException;
 import org.apache.accumulo.core.client.TableNotFoundException;
 import org.apache.accumulo.core.client.ZooKeeperInstance;
import org.apache.accumulo.core.client.mapreduce.lib.impl.ConfiguratorBase;
 import org.apache.accumulo.core.client.mapreduce.lib.impl.OutputConfigurator;
 import org.apache.accumulo.core.client.mock.MockInstance;
 import org.apache.accumulo.core.client.security.SecurityErrorCode;
@@ -169,7 +170,8 @@ public class AccumuloOutputFormat extends OutputFormat&lt;Text,Mutation&gt; {
    * @see #setConnectorInfo(Job, String, String)
    */</comment>
   <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>AuthenticationToken</name></type> <name>getAuthenticationToken</name><parameter_list>(<parameter><decl><type><name>JobContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>OutputConfigurator</name><operator>.</operator><name>getAuthenticationToken</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <decl_stmt><decl><type><name>AuthenticationToken</name></type> <name>token</name> <init>= <expr><call><name><name>OutputConfigurator</name><operator>.</operator><name>getAuthenticationToken</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>ConfiguratorBase</name><operator>.</operator><name>unwrapAuthenticationToken</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/impl/DelegationTokenStub.java b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/impl/DelegationTokenStub.java
new file mode 100644
index 000000000..5ad91b5f0
-- /dev/null
++ b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/impl/DelegationTokenStub.java
@@ -0,0 +1,80 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>impl</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>DestroyFailedException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An internal stub class for passing DelegationToken information out of the Configuration back up to the appropriate implementation for mapreduce or mapred.
 */</comment>
<class><specifier>public</specifier> class <name>DelegationTokenStub</name> <super_list><implements>implements <super><name>AuthenticationToken</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>serviceName</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>DelegationTokenStub</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>serviceName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>serviceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>serviceName</name></name> <operator>=</operator> <name>serviceName</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getServiceName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>serviceName</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>DestroyFailedException</name></expr></argument></throws> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>isDestroyed</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Properties</name></type> <name>properties</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>TokenProperty</name></argument>&gt;</argument_list></name></type> <name>getProperties</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>AuthenticationToken</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ConfiguratorBase</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ConfiguratorBase</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b2b5150aa</name><operator>..</operator><literal type="number">3b5fa3a4c</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ConfiguratorBase</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ConfiguratorBase</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>lib</name><operator>.</operator><name>impl</name></name>;</package>
 
 <import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>
 <import>import static <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URISyntaxException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">31</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ZooKeeperInstance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>impl</name><operator>.</operator><name>DelegationTokenStub</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mock</name><operator>.</operator><name>MockInstance</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name><operator>.</operator><name>AuthenticationTokenSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Credentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FSDataInputStream</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapred</name><operator>.</operator><name>JobConf</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>JobContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>TokenIdentifier</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Level</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">56</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">67</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ConfiguratorBase</name> <block>{
   }</block>
 
   <specifier>public</specifier> <specifier>static</specifier> enum <name>TokenSource</name> <block>{
    <expr><name>FILE</name></expr>, <expr><name>INLINE</name></expr>;
    <expr><name>FILE</name></expr>, <expr><name>INLINE</name></expr>, <expr><name>JOB</name></expr>;
 
     <expr><specifier>private</specifier> <name>String</name> <name>prefix</name></expr>;
 
@@ <expr><operator>-</operator><literal type="number">138</literal></expr>,<expr><literal type="number">8</literal> <operator>+</operator><literal type="number">149</literal></expr>,<expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>ConfiguratorBase</name> <block>{
     <expr><call><name>checkArgument</name><argument_list>(<argument><expr><name>token</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"token is null"</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>conf</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><call><name>enumToConfKey</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name><name>ConnectorInfo</name><operator>.</operator><name>IS_CONFIGURED</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name>enumToConfKey</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name><name>ConnectorInfo</name><operator>.</operator><name>PRINCIPAL</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name>enumToConfKey</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name><name>ConnectorInfo</name><operator>.</operator><name>TOKEN</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>TokenSource</name><operator>.</operator><name>INLINE</name><operator>.</operator><name>prefix</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>token</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>Base64</name><operator>.</operator><name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>AuthenticationTokenSerializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>DelegationToken</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// Avoid serializing the DelegationToken secret in the configuration -- the Job will do that work for us securely</comment>
      <decl_stmt><decl><type><name>DelegationToken</name></type> <name>delToken</name> <init>= <expr><operator>(</operator><name>DelegationToken</name><operator>)</operator> <name>token</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name>enumToConfKey</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name><name>ConnectorInfo</name><operator>.</operator><name>TOKEN</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>TokenSource</name><operator>.</operator><name>JOB</name><operator>.</operator><name>prefix</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>token</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal>
          <operator>+</operator> <call><name><name>delToken</name><operator>.</operator><name>getServiceName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr> <if_stmt><else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name>enumToConfKey</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name><name>ConnectorInfo</name><operator>.</operator><name>TOKEN</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>TokenSource</name><operator>.</operator><name>INLINE</name><operator>.</operator><name>prefix</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>token</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>Base64</name><operator>.</operator><name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>AuthenticationTokenSerializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></else></if_stmt>}</block></expr></expr_stmt>
   }
 
   <comment type="block" format="javadoc">/**
@@ -230,6 +248,14 @@ public class ConfiguratorBase {
     } else if (token.startsWith(TokenSource.FILE.prefix())) {
       String tokenFileName = token.substring(TokenSource.FILE.prefix().length());
       return getTokenFromFile(conf, getPrincipal(implementingClass, conf), tokenFileName);
    } else if (token.startsWith(TokenSource.JOB.prefix())) {
      String[] args = token.substring(TokenSource.JOB.prefix().length()).split(":", 2);
      if (args.length == 2) {
        String className = args[0], serviceName = args[1];
        if (DelegationToken.class.getName().equals(className)) {
          return new DelegationTokenStub(serviceName);
        }
      }
     }
 
     throw new IllegalStateException("Token was not properly serialized into the configuration");
@@ -401,4 +427,53 @@ public class ConfiguratorBase {
     return conf.getInt(enumToConfKey(GeneralOpts.VISIBILITY_CACHE_SIZE), Constants.DEFAULT_VISIBILITY_CACHE_SIZE);
   }
 
  /**
   * Unwraps the provided {@link AuthenticationToken} if it is an instance of {@link DelegationTokenStub}, reconstituting it from the provided {@link JobConf}.
   *
   * @param job
   *          The job
   * @param token
   *          The authentication token
   */</comment>
  public <function><type><specifier>static</specifier> <name>AuthenticationToken</name></type> <name>unwrapAuthenticationToken</name><parameter_list>(<parameter><decl><type><name>JobConf</name></type> <name>job</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>DelegationTokenStub</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>DelegationTokenStub</name></type> <name>delTokenStub</name> <init>= <expr><operator>(</operator><name>DelegationTokenStub</name><operator>)</operator> <name>token</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>TokenIdentifier</name></extends></argument>&gt;</argument_list></name></type> <name>hadoopToken</name> <init>= <expr><call><name><name>job</name><operator>.</operator><name>getCredentials</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>delTokenStub</name><operator>.</operator><name>getServiceName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>hadoopToken</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>(<argument><expr><call><name><name>hadoopToken</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Could not construct DelegationToken from JobConf Credentials"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>token</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Unwraps the provided {@link AuthenticationToken} if it is an instance of {@link DelegationTokenStub}, reconstituting it from the provided {@link JobConf}.
   *
   * @param job
   *          The job
   * @param token
   *          The authentication token
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AuthenticationToken</name></type> <name>unwrapAuthenticationToken</name><parameter_list>(<parameter><decl><type><name>JobContext</name></type> <name>job</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>DelegationTokenStub</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>DelegationTokenStub</name></type> <name>delTokenStub</name> <init>= <expr><operator>(</operator><name>DelegationTokenStub</name><operator>)</operator> <name>token</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>TokenIdentifier</name></extends></argument>&gt;</argument_list></name></type> <name>hadoopToken</name> <init>= <expr><call><name><name>job</name><operator>.</operator><name>getCredentials</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>delTokenStub</name><operator>.</operator><name>getServiceName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>hadoopToken</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>(<argument><expr><call><name><name>hadoopToken</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Could not construct DelegationToken from JobConf Credentials"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>token</name></expr>;</return>
  </block_content>}</block></function>
 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>InputConfigurator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>InputConfigurator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">5405ac031</literal><operator>..</operator><literal type="number">6a6416651</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>InputConfigurator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mapreduce</name><operator>/</operator><name>lib</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>InputConfigurator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">51</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>TabletLocator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>InputTableConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mock</name><operator>.</operator><name>impl</name><operator>.</operator><name>MockTabletLocator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>KeyExtent</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>PartialKey</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">616</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">617</literal></expr><operator>,</operator><expr><literal type="number">73</literal> @@ <specifier>public</specifier> <name>class</name> <name>InputConfigurator</name> extends <name>ConfiguratorBase</name> <block>{
     <return>return <expr><call><name><name>TabletLocator</name><operator>.</operator><name>getLocator</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * Validates and extracts an {@link Instance} from the configuration
   *
   * @param implementingClass
   *          the class whose name will be used as a prefix for the property configuration key
   * @param conf
   *          the Hadoop configuration object to configure
   * @since 1.7.0
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Instance</name></type> <name>validateInstance</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>implementingClass</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isConnectorInfoSet</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Input info has not been set."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>instanceKey</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>enumToConfKey</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name><name>InstanceOpts</name><operator>.</operator><name>TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><literal type="string">"MockInstance"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>instanceKey</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><literal type="string">"ZooKeeperInstance"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>instanceKey</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Instance info has not been set."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><call><name>getInstance</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Validates that the user has permissions on the requested tables
   *
   * @param implementingClass
   *          the class whose name will be used as a prefix for the property configuration key
   * @param conf
   *          the Hadoop configuration object to configure
   * @param conn
   *          the Connector
   * @see 1.7.0
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validatePermissions</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>implementingClass</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>Connector</name></type> <name>conn</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>InputTableConfig</name></argument>&gt;</argument_list></name></type> <name>inputTableConfigs</name> <init>= <expr><call><name>getInputTableConfigs</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>getInputTableConfigs</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No table set."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>InputTableConfig</name></argument>&gt;</argument_list></name></name></type> <name>tableConfig</name> <range>: <expr><call><name><name>inputTableConfigs</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>conn</name><operator>.</operator><name>securityOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasTablePermission</name><argument_list>(<argument><expr><call><name>getPrincipal</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tableConfig</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TablePermission</name><operator>.</operator><name>READ</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unable to access table"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>InputTableConfig</name></argument>&gt;</argument_list></name></name></type> <name>tableConfigEntry</name> <range>: <expr><call><name><name>inputTableConfigs</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>InputTableConfig</name></type> <name>tableConfig</name> <init>= <expr><call><name><name>tableConfigEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tableConfig</name><operator>.</operator><name>shouldUseLocalIterators</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>tableConfig</name><operator>.</operator><name>getIterators</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>IteratorSetting</name></type> <name>iter</name> <range>: <expr><call><name><name>tableConfig</name><operator>.</operator><name>getIterators</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>testClassLoad</name><argument_list>(<argument><expr><call><name><name>tableConfigEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>iter</name><operator>.</operator><name>getIteratorClass</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>SortedKeyValueIterator</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AccumuloException</name><argument_list>(<argument><expr><literal type="string">"Servers are unable to load "</literal> <operator>+</operator> <call><name><name>iter</name><operator>.</operator><name>getIteratorClass</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" as a "</literal> <operator>+</operator> <call><name><name>SortedKeyValueIterator</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            </block_content>}</block></for>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AccumuloException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>AccumuloSecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>TableNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

   <comment type="line">// InputFormat doesn't have the equivalent of OutputFormat's checkOutputSpecs(JobContext job)</comment>
   <comment type="block" format="javadoc">/**
    * Check whether a configuration is fully configured to be used with an Accumulo {@link org.apache.hadoop.mapreduce.InputFormat}.
    *
   * &lt;p&gt;
   * The implementation (JobContext or JobConf which created the Configuration) needs to be used to extract the proper {@link AuthenticationToken} for
   * {@link DelegationToken} support.
   *
    * @param implementingClass
    *          the class whose name will be used as a prefix for the property configuration key
    * @param conf
@@ -627,7 +691,11 @@ public class InputConfigurator extends ConfiguratorBase {
    * @throws IOException
    *           if the context is improperly configured
    * @since 1.6.0
   *
   * @see #validateInstance(Class, Configuration)
   * @see #validatePermissions(Class, Configuration, Connector)
    */</comment>
  <function><annotation>@<name>Deprecated</name></annotation>
   <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateOptions</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>implementingClass</name></decl></parameter>, <parameter><decl><type><name>Configuration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
 
     <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>InputTableConfig</name></argument>&gt;</argument_list></name></type> <name>inputTableConfigs</name> <init>= <expr><call><name>getInputTableConfigs</name><argument_list>(<argument><expr><name>implementingClass</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mock</name><operator>/</operator><name><name>MockSecurityOperations</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mock</name><operator>/</operator><name><name>MockSecurityOperations</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>db88cfb05</name><operator>..</operator><name>cc51a4792</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mock</name><operator>/</operator><name><name>MockSecurityOperations</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>mock</name><operator>/</operator><name><name>MockSecurityOperations</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>SecurityOperations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>SecurityErrorCode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>PasswordToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>NamespacePermission</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">222</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">224</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <name>class</name> <name>MockSecurityOperations</name> implements <name>SecurityOperations</name> <block>{
     <return>return <expr><call><name><name>acu</name><operator>.</operator><name>users</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>DelegationToken</name></type> <name>getDelegationToken</name><parameter_list>(<parameter><decl><type><name>DelegationTokenConfig</name></type> <name>cfg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AccumuloException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>security</name><operator>/</operator><name>tokens</name><operator>/</operator><name><name>DelegationToken</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>security</name><operator>/</operator><name>tokens</name><operator>/</operator><name><name>DelegationToken</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..bc0251f1d</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>security</name><operator>/</operator><name>tokens</name><operator>/</operator><name><name>DelegationToken</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">163</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>Credentials</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>TokenIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An {@link AuthenticationToken} that wraps a "Hadoop style" delegation token created by Accumulo. The only intended scope of this implementation is when a
 * KerberosToken cannot be used instead. The most common reason for this is within YARN jobs. The Kerberos credentials of the user are not passed over the wire
 * to the job itself. The delegation token serves as a mechanism to obtain a shared secret with Accumulo using a {@link KerberosToken} and then run some task
 * authenticating with that shared secret, this {@link DelegationToken}.
 *
 * @since 1.7.0
 */</comment>
<class><specifier>public</specifier> class <name>DelegationToken</name> <super_list><extends>extends <super><name>PasswordToken</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DelegationToken</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SERVICE_NAME</name> <init>= <expr><literal type="string">"AccumuloDelegationToken"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>AuthenticationTokenIdentifier</name></type> <name>identifier</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>DelegationToken</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>DelegationToken</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>delegationTokenPassword</name></decl></parameter>, <parameter><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>delegationTokenPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setPassword</name><argument_list>(<argument><expr><name>delegationTokenPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <name>identifier</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>DelegationToken</name><parameter_list>(<parameter><decl><type><name>Instance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>UserGroupInformation</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Credentials</name></type> <name>creds</name> <init>= <expr><call><name><name>user</name><operator>.</operator><name>getCredentials</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>TokenIdentifier</name></extends></argument>&gt;</argument_list></name></type> <name>token</name> <init>= <expr><call><name><name>creds</name><operator>.</operator><name>getToken</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>SERVICE_NAME</name> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <call><name><name>instance</name><operator>.</operator><name>getInstanceID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>token</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Did not find Accumulo delegation token in provided UserGroupInformation"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setPasswordFromToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>DelegationToken</name><parameter_list>(<parameter><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>TokenIdentifier</name></extends></argument>&gt;</argument_list></name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setPasswordFromToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setPasswordFromToken</name><parameter_list>(<parameter><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>TokenIdentifier</name></extends></argument>&gt;</argument_list></name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>AuthenticationTokenIdentifier</name><operator>.</operator><name>TOKEN_KIND</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">"Expected an AuthenticationTokenIdentifier but got a "</literal> <operator>+</operator> <call><name><name>token</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>setPassword</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <name>identifier</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * The identifier for this token, may be null.
   */</comment>
  <function><type><specifier>public</specifier> <name>AuthenticationTokenIdentifier</name></type> <name>getIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>identifier</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * The service name used to identify this {@link Token}
   *
   * @see Token#Constructor(byte[], byte[], Text, Text)
   */</comment>
  <function><type><specifier>public</specifier> <name>Text</name></type> <name>getServiceName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><name>SERVICE_NAME</name> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <call><name><name>identifier</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Properties</name></type> <name>properties</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Encourage use of UserGroupInformation as entry point</comment>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>TokenProperty</name></argument>&gt;</argument_list></name></type> <name>getProperties</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Encourage use of UserGroupInformation as entry point</comment>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>identifier</name> <operator>=</operator> <operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>DelegationToken</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DelegationToken</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>copy</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><call><name>getPassword</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>copy</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>^</operator> <call><name><name>identifier</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>instanceof</operator> <name>DelegationToken</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>DelegationToken</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>DelegationToken</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getPassword</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>identifier</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>identifier</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Property</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Property</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">68fac7329</literal><operator>..</operator><literal type="number">01f03cfff</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Property</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>conf</name><operator>/</operator><name><name>Property</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> enum <name>Property</name> <block>{
       <expr><literal type="string">"Comma-separated list of paths to CredentialProviders"</literal></expr>)<operator>,</operator>
   <call><name>GENERAL_LEGACY_METRICS</name><argument_list>(<argument><expr><literal type="string">"general.legacy.metrics"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>BOOLEAN</name></name></expr></argument>,
       <argument><expr><literal type="string">"Use the old metric infrastructure configured by accumulo-metrics.xml, instead of Hadoop Metrics2"</literal></expr></argument>)</argument_list></call><operator>,</operator>
  <call><name>GENERAL_DELEGATION_TOKEN_LIFETIME</name><argument_list>(<argument><expr><literal type="string">"general.delegation.token.lifetime"</literal></expr></argument>, <argument><expr><literal type="string">"7d"</literal></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>TIMEDURATION</name></name></expr></argument>,
      <argument><expr><literal type="string">"The length of time that delegation tokens and secret keys are valid"</literal></expr></argument>)</argument_list></call><operator>,</operator>
  <call><name>GENERAL_DELEGATION_TOKEN_UPDATE_INTERVAL</name><argument_list>(<argument><expr><literal type="string">"general.delegation.token.update.interval"</literal></expr></argument>, <argument><expr><literal type="string">"1d"</literal></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>TIMEDURATION</name></name></expr></argument>,
      <argument><expr><literal type="string">"The length of time between generation of new secret keys"</literal></expr></argument>)</argument_list></call><operator>,</operator>
 
   <comment type="line">// properties that are specific to master server behavior</comment>
   <call><name>MASTER_PREFIX</name><argument_list>(<argument><expr><literal type="string">"master."</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>PropertyType</name><operator>.</operator><name>PREFIX</name></name></expr></argument>, <argument><expr><literal type="string">"Properties in this category affect the behavior of the master server"</literal></expr></argument>)</argument_list></call><operator>,</operator>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>master</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>MasterClientService</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>master</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>MasterClientService</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4b90a342c</literal><operator>..</operator><literal type="number">9cd1084ac</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>master</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>MasterClientService</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>master</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>MasterClientService</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">84</literal><operator>,</operator><literal type="number">6</literal> <operator>+</operator><literal type="number">84</literal><operator>,</operator><literal type="number">8</literal> @@</block></expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
     <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getActiveTservers</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>
 
    <function_decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></type> <name>getDelegationToken</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>cfg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>

   }
 
   public <interface>interface <name>AsyncIface</name> <super_list><extends>extends <super><name><name>FateService</name> <operator>.</operator><name>AsyncIface</name></name></super></extends></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">120</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">122</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
     <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>getActiveTservers</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>
 
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>getDelegationToken</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>;</function_decl>

   }</block></interface>
 
   <class><specifier>public</specifier> <specifier>static</specifier> class <name>Client</name> <super_list><extends>extends <super><name><name>FateService</name><operator>.</operator><name>Client</name></name></super></extends> <implements>implements <super><name>Iface</name></super></implements></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">555</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">559</literal></expr><operator>,</operator><expr><literal type="number">34</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <throw>throw <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name><operator>.</operator><name>MISSING_RESULT</name></name></expr></argument>, <argument><expr><literal type="string">"getActiveTservers failed: unknown result"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     }</block></class>
 
    <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></type> <name>getDelegationToken</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>cfg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>
    <block>{<block_content>
      <expr_stmt><expr><call><name>send_getDelegationToken</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>recv_getDelegationToken</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>send_getDelegationToken</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>cfg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>
    <block>{<block_content>
      <decl_stmt><decl><type><name>getDelegationToken_args</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>getDelegationToken_args</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setTinfo</name></name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setCredentials</name></name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setCfg</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sendBase</name><argument_list>(<argument><expr><literal type="string">"getDelegationToken"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></type> <name>recv_getDelegationToken</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws>
    <block>{<block_content>
      <decl_stmt><decl><type><name>getDelegationToken_result</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>getDelegationToken_result</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>receiveBase</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getDelegationToken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>result</name><operator>.</operator><name>success</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>sec</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><name><name>result</name><operator>.</operator><name>sec</name></name></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <throw>throw <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name><operator>.</operator><name>MISSING_RESULT</name></name></expr></argument>, <argument><expr><literal type="string">"getDelegationToken failed: unknown result"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

   }
   public <class><specifier>static</specifier> class <name>AsyncClient</name> <super_list><extends>extends <super><name><name>FateService</name><operator>.</operator><name>AsyncClient</name></name></super></extends> <implements>implements <super><name>AsyncIface</name></super></implements></super_list> <block>{
     <class><specifier>public</specifier> <specifier>static</specifier> class <name>Factory</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name><name>TAsyncClientFactory</name><argument_list type="generic">&lt;<argument><name>AsyncClient</name></argument>&gt;</argument_list></name></name></super></implements></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1212</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1244</literal></expr><operator>,</operator><expr><literal type="number">44</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       }</block></class>
     }</block></class>
 
    <function><type><specifier>public</specifier> <name>void</name></type> <name>getDelegationToken</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name>checkReady</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>getDelegationToken_call</name></type> <name>method_call</name> <init>= <expr><operator>new</operator> <call><name>getDelegationToken_call</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>___protocolFactory</name></expr></argument>, <argument><expr><name>___transport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>___currentMethod</name></name> <operator>=</operator> <name>method_call</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>___manager</name><operator>.</operator><name>call</name></name><argument_list>(<argument><expr><name>method_call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>getDelegationToken_call</name> <super_list><extends>extends <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncMethodCall</name></name></super></extends></super_list> <block>{
      <decl_stmt><decl><type><specifier>private</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>private</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>private</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>cfg</name></decl>;</decl_stmt>
      <constructor><specifier>public</specifier> <name>getDelegationToken_call</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>cfg</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name></type> <name>resultHandler</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncClient</name></name></type> <name>client</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolFactory</name></name></type> <name>protocolFactory</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TNonblockingTransport</name></name></type> <name>transport</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>protocolFactory</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>, <argument><expr><name>resultHandler</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <name>tinfo</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <name>credentials</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>
      </block_content>}</block></constructor>

      <function><type><specifier>public</specifier> <name>void</name></type> <name>write_args</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>prot</name><operator>.</operator><name>writeMessageBegin</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMessage</name></name><argument_list>(<argument><expr><literal type="string">"getDelegationToken"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMessageType</name><operator>.</operator><name>CALL</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>getDelegationToken_args</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>getDelegationToken_args</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setTinfo</name></name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setCredentials</name></name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>setCfg</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prot</name><operator>.</operator><name>writeMessageEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></type> <name>getResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getState</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>TAsyncMethodCall</name><operator>.</operator><name>State</name><operator>.</operator><name>RESPONSE_READ</name></name></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Method call not finished!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TMemoryInputTransport</name></name></type> <name>memoryTransport</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TMemoryInputTransport</name></name><argument_list>(<argument><expr><call><name>getFrameBuffer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>array</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name> <init>= <expr><call><name><name>client</name><operator>.</operator><name>getProtocolFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProtocol</name><argument_list>(<argument><expr><name>memoryTransport</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><operator>new</operator> <call><name>Client</name><argument_list>(<argument><expr><name>prot</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>recv_getDelegationToken</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class>

   }
 
   public <class><specifier>static</specifier> class <name><name>Processor</name><parameter_list>&lt;<parameter><name>I</name> <extends>extends <name>Iface</name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>FateService</name><operator>.</operator><name><name>Processor</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name></name></super></extends> <implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TProcessor</name></name></super></implements></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1241</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1311</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name><name>processMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"reportSplitExtent"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>reportSplitExtent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>processMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"reportTabletStatus"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>reportTabletStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>processMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"getActiveTservers"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>getActiveTservers</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>processMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"getDelegationToken"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>getDelegationToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><name>processMap</name></expr>;</return>
     }</block></class>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1627</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1698</literal></expr><operator>,</operator><expr><literal type="number">30</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       }
     }
 
    <class><specifier>public</specifier> <specifier>static</specifier> class <name><name>getDelegationToken</name><parameter_list>&lt;<parameter><name>I</name> <extends>extends <name>Iface</name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>ProcessFunction</name><argument_list type="generic">&lt;<argument><name>I</name></argument>, <argument><name>getDelegationToken_args</name></argument>&gt;</argument_list></name></name></super></extends></super_list> <block>{
      <constructor><specifier>public</specifier> <name>getDelegationToken</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"getDelegationToken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></constructor>

      <function><type><specifier>public</specifier> <name>getDelegationToken_args</name></type> <name>getEmptyArgsInstance</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>getDelegationToken_args</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isOneway</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>getDelegationToken_result</name></type> <name>getResult</name><parameter_list>(<parameter><decl><type><name>I</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>getDelegationToken_args</name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>getDelegationToken_result</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>getDelegationToken_result</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>success</name></name> <operator>=</operator> <call><name><name>iface</name><operator>.</operator><name>getDelegationToken</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></type> <name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><name>result</name></expr>;</return>
      </block_content>}</block></function>
    }</block></class>

   }
 
   public <class><specifier>static</specifier> class <name><name>AsyncProcessor</name><parameter_list>&lt;<parameter><name>I</name> <extends>extends <name>AsyncIface</name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>FateService</name><operator>.</operator><name><name>AsyncProcessor</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name></name></super></extends></super_list> <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1656</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1751</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       <expr_stmt><expr><call><name><name>processMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"reportSplitExtent"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>reportSplitExtent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>processMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"reportTabletStatus"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>reportTabletStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>processMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"getActiveTservers"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>getActiveTservers</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>processMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"getDelegationToken"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>getDelegationToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><name>processMap</name></expr>;</return>
     }</block></class>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2527</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2623</literal></expr><operator>,</operator><expr><literal type="number">63</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
       }
     }
 
    <class><specifier>public</specifier> <specifier>static</specifier> class <name><name>getDelegationToken</name><parameter_list>&lt;<parameter><name>I</name> <extends>extends <name>AsyncIface</name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>AsyncProcessFunction</name><argument_list type="generic">&lt;<argument><name>I</name></argument>, <argument><name>getDelegationToken_args</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></argument>&gt;</argument_list></name></name></super></extends></super_list> <block>{
      <constructor><specifier>public</specifier> <name>getDelegationToken</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"getDelegationToken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></constructor>

      <function><type><specifier>public</specifier> <name>getDelegationToken_args</name></type> <name>getEmptyArgsInstance</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>getDelegationToken_args</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name><name>AsyncMethodCallback</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></argument>&gt;</argument_list></name></type> <name>getResultHandler</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AsyncFrameBuffer</name></type> <name>fb</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>seqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>AsyncProcessFunction</name></name></type> <name>fcall</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <class><super><name><name>AsyncMethodCallback</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{ 
          <function><type><specifier>public</specifier> <name>void</name></type> <name>onComplete</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>getDelegationToken_result</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>getDelegationToken_result</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>success</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
            <try>try <block>{<block_content>
              <expr_stmt><expr><call><name><name>fcall</name><operator>.</operator><name>sendResponse</name></name><argument_list>(<argument><expr><name>fb</name></expr></argument>,<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMessageType</name><operator>.</operator><name>REPLY</name></name></expr></argument>,<argument><expr><name>seqid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
              <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Exception writing to internal frame buffer"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><call><name><name>fb</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></function>
          <function><type><specifier>public</specifier> <name>void</name></type> <name>onError</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>byte</name></type> <name>msgType</name> <init>= <expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMessageType</name><operator>.</operator><name>REPLY</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBase</name></name></type> <name>msg</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>getDelegationToken_result</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>getDelegationToken_result</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name><operator>)</operator> <name>e</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setSecIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
            </block_content>}</block></if>
             <else>else 
            <block>{<block_content>
              <expr_stmt><expr><name>msgType</name> <operator>=</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TMessageType</name><operator>.</operator><name>EXCEPTION</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBase</name></name><operator>)</operator><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TApplicationException</name><operator>.</operator><name>INTERNAL_ERROR</name></name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <try>try <block>{<block_content>
              <expr_stmt><expr><call><name><name>fcall</name><operator>.</operator><name>sendResponse</name></name><argument_list>(<argument><expr><name>fb</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>,<argument><expr><name>msgType</name></expr></argument>,<argument><expr><name>seqid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
              <expr_stmt><expr><call><name><name>LOGGER</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Exception writing to internal frame buffer"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><call><name><name>fb</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></function>
        }</block></class></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isOneway</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>I</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>getDelegationToken_args</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name><name>AsyncMethodCallback</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></argument>&gt;</argument_list></name></name></type> <name>resultHandler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>iface</name><operator>.</operator><name>getDelegationToken</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>cfg</name></name></expr></argument>,<argument><expr><name>resultHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class>

   }
 
   public <class><specifier>static</specifier> class <name>initiateFlush_args</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>initiateFlush_args</name></argument>, <argument><name><name>initiateFlush_args</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>initiateFlush_args</name></argument>&gt;</argument_list></name></super></implements></super_list>   <block>{
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">18540</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">18693</literal></expr><operator>,</operator><expr><literal type="number">1034</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
   }</block></class>
 
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>getDelegationToken_args</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>getDelegationToken_args</name></argument>, <argument><name><name>getDelegationToken_args</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>getDelegationToken_args</name></argument>&gt;</argument_list></name></super></implements></super_list>   <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"getDelegationToken_args"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>TINFO_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"tinfo"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>CREDENTIALS_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"credentials"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>CFG_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"cfg"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <static>static <block>{<block_content>
      <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>getDelegationToken_argsStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>getDelegationToken_argsTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>cfg</name></decl>;</decl_stmt> <comment type="line">// required</comment>

    <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
    <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
      <decl><name>TINFO</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"tinfo"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>CREDENTIALS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"credentials"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>CFG</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"cfg"</literal></expr></argument>)</argument_list></decl>;

      <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <static>static <block>{<block_content>
        <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></static>

      <comment type="block" format="javadoc">/**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */</comment>
      <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// TINFO</comment>
            <return>return <expr><name>TINFO</name></expr>;</return>
          <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// CREDENTIALS</comment>
            <return>return <expr><name>CREDENTIALS</name></expr>;</return>
          <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// CFG</comment>
            <return>return <expr><name>CFG</name></expr>;</return>
          <default>default:</default>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></switch>
      </block_content>}</block></function>

      <comment type="block" format="javadoc">/**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */</comment>
      <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>fields</name></expr>;</return>
      </block_content>}</block></function>

      <comment type="block" format="javadoc">/**
       * Find the _Fields constant that matches name, or null if its not found.
       */</comment>
      <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

      <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
      </block_content>}</block></constructor>

      <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>_thriftId</name></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>_fieldName</name></expr>;</return>
      </block_content>}</block></function>
    }</block></enum>

    <comment type="line">// isset id assignments</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
    <static>static <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>TINFO</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"tinfo"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>CREDENTIALS</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"credentials"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>CFG</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"cfg"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>getDelegationToken_args</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <constructor><specifier>public</specifier> <name>getDelegationToken_args</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>getDelegationToken_args</name><parameter_list>(
      <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>,
      <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>,
      <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>cfg</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <name>tinfo</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <name>credentials</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>getDelegationToken_args</name><parameter_list>(<parameter><decl><type><name>getDelegationToken_args</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetTinfo</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetCredentials</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>credentials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetCfg</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>getDelegationToken_args</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>getDelegationToken_args</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>getTinfo</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>tinfo</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>getDelegationToken_args</name></type> <name>setTinfo</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name></type> <name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <name>tinfo</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetTinfo</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns true if field tinfo is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetTinfo</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTinfoIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>getCredentials</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>credentials</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>getDelegationToken_args</name></type> <name>setCredentials</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name></type> <name>credentials</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <name>credentials</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetCredentials</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns true if field credentials is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetCredentials</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCredentialsIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>getCfg</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>cfg</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>getDelegationToken_args</name></type> <name>setCfg</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name></type> <name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetCfg</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns true if field cfg is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetCfg</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCfgIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TINFO</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetTinfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setTinfo</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

      <case>case <expr><name>CREDENTIALS</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetCredentials</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setCredentials</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

      <case>case <expr><name>CFG</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetCfg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setCfg</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

      </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TINFO</name></expr>:</case>
        <return>return <expr><call><name>getTinfo</name><argument_list>()</argument_list></call></expr>;</return>

      <case>case <expr><name>CREDENTIALS</name></expr>:</case>
        <return>return <expr><call><name>getCredentials</name><argument_list>()</argument_list></call></expr>;</return>

      <case>case <expr><name>CFG</name></expr>:</case>
        <return>return <expr><call><name>getCfg</name><argument_list>()</argument_list></call></expr>;</return>

      </block_content>}</block></switch>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TINFO</name></expr>:</case>
        <return>return <expr><call><name>isSetTinfo</name><argument_list>()</argument_list></call></expr>;</return>
      <case>case <expr><name>CREDENTIALS</name></expr>:</case>
        <return>return <expr><call><name>isSetCredentials</name><argument_list>()</argument_list></call></expr>;</return>
      <case>case <expr><name>CFG</name></expr>:</case>
        <return>return <expr><call><name>isSetCfg</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></switch>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>getDelegationToken_args</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>getDelegationToken_args</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>getDelegationToken_args</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_tinfo</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetTinfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_tinfo</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetTinfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_tinfo</name> <operator>||</operator> <name>that_present_tinfo</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_tinfo</name> <operator>&amp;&amp;</operator> <name>that_present_tinfo</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>tinfo</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_credentials</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetCredentials</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_credentials</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetCredentials</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_credentials</name> <operator>||</operator> <name>that_present_credentials</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_credentials</name> <operator>&amp;&amp;</operator> <name>that_present_credentials</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>credentials</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>credentials</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_cfg</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetCfg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_cfg</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetCfg</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_cfg</name> <operator>||</operator> <name>that_present_cfg</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_cfg</name> <operator>&amp;&amp;</operator> <name>that_present_cfg</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>cfg</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>getDelegationToken_args</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetTinfo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetTinfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetTinfo</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetCredentials</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetCredentials</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetCredentials</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>credentials</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>credentials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetCfg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetCfg</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetCfg</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>cfg</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"getDelegationToken_args("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"tinfo:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>tinfo</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"credentials:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>credentials</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>credentials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"cfg:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <comment type="line">// check for required fields</comment>
      <comment type="line">// check for sub-struct validity</comment>
      <if_stmt><if>if <condition>(<expr><name>tinfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tinfo</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>credentials</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>credentials</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>getDelegationToken_argsStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
      <function><type><specifier>public</specifier> <name>getDelegationToken_argsStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>getDelegationToken_argsStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>getDelegationToken_argsStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>getDelegationToken_args</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

      <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>getDelegationToken_args</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// TINFO</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tinfo</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTinfoIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// CREDENTIALS</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>credentials</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setCredentialsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// CFG</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cfg</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setCfgIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            <default>default:</default>
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></switch>
          <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>getDelegationToken_args</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>tinfo</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>TINFO_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tinfo</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>credentials</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>CREDENTIALS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>credentials</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>cfg</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>CFG_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cfg</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>

    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>getDelegationToken_argsTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
      <function><type><specifier>public</specifier> <name>getDelegationToken_argsTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>getDelegationToken_argsTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>getDelegationToken_argsTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>getDelegationToken_args</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>getDelegationToken_args</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTinfo</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCredentials</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCfg</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetTinfo</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tinfo</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCredentials</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>credentials</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCfg</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cfg</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>getDelegationToken_args</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>tinfo</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>tinfo</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setTinfoIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>credentials</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>credentials</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setCredentialsIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>cfg</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setCfgIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>
    }</block></class>

  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>getDelegationToken_result</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>getDelegationToken_result</name></argument>, <argument><name><name>getDelegationToken_result</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>getDelegationToken_result</name></argument>&gt;</argument_list></name></super></implements></super_list>   <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"getDelegationToken_result"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>SUCCESS_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>SEC_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <static>static <block>{<block_content>
      <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>getDelegationToken_resultStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>getDelegationToken_resultTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></type> <name>success</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></type> <name>sec</name></decl>;</decl_stmt> <comment type="line">// required</comment>

    <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
    <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
      <decl><name>SUCCESS</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></decl>,
      <decl><name>SEC</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></decl>;

      <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <static>static <block>{<block_content>
        <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></static>

      <comment type="block" format="javadoc">/**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */</comment>
      <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
            <return>return <expr><name>SUCCESS</name></expr>;</return>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// SEC</comment>
            <return>return <expr><name>SEC</name></expr>;</return>
          <default>default:</default>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></switch>
      </block_content>}</block></function>

      <comment type="block" format="javadoc">/**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */</comment>
      <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>fields</name></expr>;</return>
      </block_content>}</block></function>

      <comment type="block" format="javadoc">/**
       * Find the _Fields constant that matches name, or null if its not found.
       */</comment>
      <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>

      <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

      <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
      </block_content>}</block></constructor>

      <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>_thriftId</name></expr>;</return>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>_fieldName</name></expr>;</return>
      </block_content>}</block></function>
    }</block></enum>

    <comment type="line">// isset id assignments</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
    <static>static <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>SUCCESS</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>SEC</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
          <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>getDelegationToken_result</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <constructor><specifier>public</specifier> <name>getDelegationToken_result</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>getDelegationToken_result</name><parameter_list>(
      <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></type> <name>success</name></decl></parameter>,
      <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></type> <name>sec</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <name>success</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>getDelegationToken_result</name><parameter_list>(<parameter><decl><type><name>getDelegationToken_result</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetSec</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>getDelegationToken_result</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>getDelegationToken_result</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></type> <name>getSuccess</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>success</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>getDelegationToken_result</name></type> <name>setSuccess</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name></type> <name>success</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <name>success</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetSuccess</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns true if field success is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetSuccess</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSuccessIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></type> <name>getSec</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>sec</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>getDelegationToken_result</name></type> <name>setSec</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name></type> <name>sec</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetSec</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns true if field sec is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetSec</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>sec</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSecIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>SUCCESS</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetSuccess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setSuccess</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

      <case>case <expr><name>SEC</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unsetSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>setSec</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

      </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>SUCCESS</name></expr>:</case>
        <return>return <expr><call><name>getSuccess</name><argument_list>()</argument_list></call></expr>;</return>

      <case>case <expr><name>SEC</name></expr>:</case>
        <return>return <expr><call><name>getSec</name><argument_list>()</argument_list></call></expr>;</return>

      </block_content>}</block></switch>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>

      <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>SUCCESS</name></expr>:</case>
        <return>return <expr><call><name>isSetSuccess</name><argument_list>()</argument_list></call></expr>;</return>
      <case>case <expr><name>SEC</name></expr>:</case>
        <return>return <expr><call><name>isSetSec</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></switch>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>getDelegationToken_result</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>getDelegationToken_result</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>getDelegationToken_result</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_success</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_success</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_success</name> <operator>||</operator> <name>that_present_success</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_success</name> <operator>&amp;&amp;</operator> <name>that_present_success</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>success</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_sec</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetSec</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_sec</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetSec</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>this_present_sec</name> <operator>||</operator> <name>that_present_sec</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_sec</name> <operator>&amp;&amp;</operator> <name>that_present_sec</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>sec</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>getDelegationToken_result</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetSuccess</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetSuccess</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>success</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetSec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetSec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isSetSec</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sec</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>lastComparison</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"getDelegationToken_result("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"success:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"sec:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>sec</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <comment type="line">// check for required fields</comment>
      <comment type="line">// check for sub-struct validity</comment>
      <if_stmt><if>if <condition>(<expr><name>success</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>success</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>getDelegationToken_resultStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
      <function><type><specifier>public</specifier> <name>getDelegationToken_resultStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>getDelegationToken_resultStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>getDelegationToken_resultStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>getDelegationToken_result</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

      <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>getDelegationToken_result</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// SUCCESS</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// SEC</comment>
              <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>sec</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSecIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content> 
                <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            <default>default:</default>
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></switch>
          <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>getDelegationToken_result</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SUCCESS_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>sec</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SEC_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>sec</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>

    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>getDelegationToken_resultTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
      <function><type><specifier>public</specifier> <name>getDelegationToken_resultTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>getDelegationToken_resultTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>getDelegationToken_resultTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>getDelegationToken_result</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>getDelegationToken_result</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSec</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSec</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>sec</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>getDelegationToken_result</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>success</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>success</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSuccessIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>sec</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSecIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>
    }</block></class>

  }</block></class>

 }
diff <expr_stmt><expr><operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslClientDigestCallbackHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslClientDigestCallbackHandler</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..18dd7e13f</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslClientDigestCallbackHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">114</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>Callback</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>NameCallback</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>PasswordCallback</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>UnsupportedCallbackException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>sasl</name><operator>.</operator><name>RealmCallback</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>sasl</name><operator>.</operator><name>RealmChoiceCallback</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>builder</name><operator>.</operator><name>HashCodeBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Client-side callbackhandler for sasl authentication which is the client-side sibling to the server-side {@link SaslDigestCallbackHandler}. Encoding of name,
 * password and realm information must be consistent across the pair.
 */</comment>
<class><specifier>public</specifier> class <name>SaslClientDigestCallbackHandler</name> <super_list><extends>extends <super><name>SaslDigestCallbackHandler</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SaslClientDigestCallbackHandler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NAME</name> <init>= <expr><call><name><name>SaslClientDigestCallbackHandler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>userName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>userPassword</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SaslClientDigestCallbackHandler</name><parameter_list>(<parameter><decl><type><name>DelegationToken</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userName</name></name> <operator>=</operator> <call><name>encodeIdentifier</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userPassword</name></name> <operator>=</operator> <call><name>encodePassword</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SaslClientDigestCallbackHandler</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userName</name></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>userPassword</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>userPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userName</name></name> <operator>=</operator> <name>userName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userPassword</name></name> <operator>=</operator> <name>userPassword</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>handle</name><parameter_list>(<parameter><decl><type><name><name>Callback</name><index>[]</index></name></type> <name>callbacks</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnsupportedCallbackException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>NameCallback</name></type> <name>nc</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PasswordCallback</name></type> <name>pc</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RealmCallback</name></type> <name>rc</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Callback</name></type> <name>callback</name> <range>: <expr><name>callbacks</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>callback</name> <operator>instanceof</operator> <name>RealmChoiceCallback</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>callback</name> <operator>instanceof</operator> <name>NameCallback</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nc</name> <operator>=</operator> <operator>(</operator><name>NameCallback</name><operator>)</operator> <name>callback</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>callback</name> <operator>instanceof</operator> <name>PasswordCallback</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>(</operator><name>PasswordCallback</name><operator>)</operator> <name>callback</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>callback</name> <operator>instanceof</operator> <name>RealmCallback</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><name>RealmCallback</name><operator>)</operator> <name>callback</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedCallbackException</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized SASL client callback"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>nc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"SASL client callback: setting username: {}"</literal></expr></argument>, <argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>nc</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"SASL client callback: setting userPassword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>pc</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><name>userPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"SASL client callback: setting realm: {}"</literal></expr></argument>, <argument><expr><call><name><name>rc</name><operator>.</operator><name>getDefaultText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>rc</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>rc</name><operator>.</operator><name>getDefaultText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>NAME</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>HashCodeBuilder</name></type> <name>hcb</name> <init>= <expr><operator>new</operator> <call><name>HashCodeBuilder</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hcb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>userPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>hcb</name><operator>.</operator><name>toHashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>o</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>SaslClientDigestCallbackHandler</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SaslClientDigestCallbackHandler</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>SaslClientDigestCallbackHandler</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>userName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>userName</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>userPassword</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>userPassword</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslConnectionParams</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslConnectionParams</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>e067e23cb</name><operator>..</operator><literal type="number">10438dec8</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslConnectionParams</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslConnectionParams</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name></name>;</package>
 
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">23</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">25</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>CallbackHandler</name></name>;</import>
 <import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>sasl</name><operator>.</operator><name>Sasl</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name><operator>.</operator><name>ClientProperty</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>KerberosToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>configuration</name><operator>.</operator><name>MapConfiguration</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">79</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">85</literal></expr><operator>,</operator><expr><literal type="number">34</literal> @@ <specifier>public</specifier> <name>class</name> <name>SaslConnectionParams</name> <block>{
     }</block></expr></expr_stmt>
   }
 
  <comment type="block" format="javadoc">/**
   * The SASL mechanism to use for authentication
   */</comment>
  public <enum>enum <name>SaslMechanism</name> <block>{
    <decl><name>GSSAPI</name><argument_list>(<argument><expr><literal type="string">"GSSAPI"</literal></expr></argument>)</argument_list></decl>, <comment type="line">// Kerberos</comment>
    <decl><name>DIGEST_MD5</name><argument_list>(<argument><expr><literal type="string">"DIGEST-MD5"</literal></expr></argument>)</argument_list></decl>; <comment type="line">// Delegation Tokens</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>mechanismName</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>SaslMechanism</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mechanismName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mechanismName</name></name> <operator>=</operator> <name>mechanismName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMechanismName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>mechanismName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SaslMechanism</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mechanismName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>GSSAPI</name><operator>.</operator><name>mechanismName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>mechanismName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>GSSAPI</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>DIGEST_MD5</name><operator>.</operator><name>mechanismName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>mechanismName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DIGEST_MD5</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"No value for "</literal> <operator>+</operator> <name>mechanismName</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
  }</block></enum>

   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>defaultRealm</name></decl>;</decl_stmt>
 
   <static>static <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">90</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">47</literal> @@ <specifier>public</specifier> <name>class</name> <name>SaslConnectionParams</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></static>
 
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>principal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>QualityOfProtection</name></type> <name>qop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>kerberosServerPrimary</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>saslProperties</name></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>SaslConnectionParams</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>saslProperties</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>principal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>QualityOfProtection</name></type> <name>qop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>kerberosServerPrimary</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>SaslMechanism</name></type> <name>mechanism</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>CallbackHandler</name></type> <name>callbackHandler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>saslProperties</name></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/**
    * Generate an {@link SaslConnectionParams} instance given the provided {@link AccumuloConfiguration}. The provided configuration is converted into a
    * {@link ClientConfiguration}, ignoring any properties which are not {@link ClientProperty}s. If SASL is not being used, a null object will be returned.
    * Callers should strive to use {@link #forConfig(ClientConfiguration)}; server processes are the only intended consumers of this method.
    *
   * @param conf
   *          The configuration for clients to communicate with Accumulo
   * @return An {@link SaslConnectionParams} instance or null if SASL is not enabled
    */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SaslConnectionParams</name></type> <name>forConfig</name><parameter_list>(<parameter><decl><type><name>AccumuloConfiguration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <constructor><specifier>public</specifier> <name>SaslConnectionParams</name><parameter_list>(<parameter><decl><type><name>AccumuloConfiguration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ClientConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MapConfiguration</name><argument_list>(<argument><expr><call><name>getProperties</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SaslConnectionParams</name><parameter_list>(<parameter><decl><type><name>ClientConfiguration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"Configuration was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"AuthenticationToken was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>saslProperties</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updatePrincipalFromUgi</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateFromConfiguration</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateFromToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>updateFromToken</name><parameter_list>(<parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>KerberosToken</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mechanism</name> <operator>=</operator> <name><name>SaslMechanism</name><operator>.</operator><name>GSSAPI</name></name></expr>;</expr_stmt>
      <comment type="line">// No callbackhandlers necessary for GSSAPI</comment>
      <expr_stmt><expr><name>callbackHandler</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>DelegationToken</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mechanism</name> <operator>=</operator> <name><name>SaslMechanism</name><operator>.</operator><name>DIGEST_MD5</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>callbackHandler</name> <operator>=</operator> <operator>new</operator> <call><name>SaslClientDigestCallbackHandler</name><argument_list>(<argument><expr><operator>(</operator><name>DelegationToken</name><operator>)</operator> <name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Cannot determine SASL mechanism for token class: "</literal> <operator>+</operator> <call><name><name>token</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getProperties</name><parameter_list>(<parameter><decl><type><name>AccumuloConfiguration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>clientProperties</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <comment type="line">// Servers will only have the full principal in their configuration -- parse the</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">136</literal></expr><operator>,</operator><expr><literal type="number">25</literal> <operator>+</operator><literal type="number">192</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> <name>class</name> <name>SaslConnectionParams</name> <block>{
       }</block></expr></expr_stmt>
     </block_content>}</block></function>
 
    <decl_stmt><decl><type><name>ClientConfiguration</name></type> <name>clientConf</name> <init>= <expr><operator>new</operator> <call><name>ClientConfiguration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MapConfiguration</name><argument_list>(<argument><expr><name>clientProperties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>forConfig</name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><name>clientProperties</name></expr>;</return>
   </block_content>}</block></function>
 
  <comment type="block" format="javadoc">/**
   * Generate an {@link SaslConnectionParams} instance given the provided {@link ClientConfiguration}. If SASL is not being used, a null object will be
   * returned.
   *
   * @param conf
   *          The configuration for clients to communicate with Accumulo
   * @return An {@link SaslConnectionParams} instance or null if SASL is not enabled
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SaslConnectionParams</name></type> <name>forConfig</name><parameter_list>(<parameter><decl><type><name>ClientConfiguration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SaslConnectionParams</name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>updatePrincipalFromUgi</name><parameter_list>()</parameter_list> <block>{<block_content>
     <comment type="line">// Ensure we're using Kerberos auth for Hadoop UGI</comment>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>UserGroupInformation</name><operator>.</operator><name>isSecurityEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Cannot use SASL if Hadoop security is not enabled"</literal></expr></argument>)</argument_list></call></expr>;</throw>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">169</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">210</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>SaslConnectionParams</name> <block>{
     }</block>
 
     <comment type="line">// The full name is our principal</comment>
    <name><name>params</name><operator>.</operator><name>principal</name></name> <operator>=</operator> <call><name><name>currentUser</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name><name>params</name><operator>.</operator><name>principal</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>principal</name></name> <operator>=</operator> <call><name><name>currentUser</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name><name>this</name><operator>.</operator><name>principal</name></name></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Got null username from "</literal> <operator>+</operator> <name>currentUser</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
 
  </block_content>}</block></if></if_stmt>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>updateFromConfiguration</name><parameter_list>(<parameter><decl><type><name>ClientConfiguration</name></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <comment type="line">// Get the quality of protection to use</comment>
     <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>qopValue</name> <init>= <expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>RPC_SASL_QOP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>params</name><operator>.</operator><name>qop</name></name> <operator>=</operator> <call><name><name>QualityOfProtection</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>qopValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>qop</name></name> <operator>=</operator> <call><name><name>QualityOfProtection</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>qopValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// Add in the SASL properties to a map so we don't have to repeatedly construct this map</comment>
    <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>saslProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Sasl</name><operator>.</operator><name>QOP</name></name></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>qop</name><operator>.</operator><name>getQuality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>saslProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Sasl</name><operator>.</operator><name>QOP</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>qop</name><operator>.</operator><name>getQuality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// The primary from the KRB principal on each server (e.g. primary/instance@realm)</comment>
    <expr_stmt><expr><name><name>params</name><operator>.</operator><name>kerberosServerPrimary</name></name> <operator>=</operator> <call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>KERBEROS_SERVER_PRIMARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>params</name></expr>;</return>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>kerberosServerPrimary</name></name> <operator>=</operator> <call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>KERBEROS_SERVER_PRIMARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getSaslProperties</name><parameter_list>()</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">211</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">253</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <specifier>public</specifier> <name>class</name> <name>SaslConnectionParams</name> <block>{
     <return>return <expr><name>principal</name></expr>;</return>
   }</block></expr></expr_stmt>
 
  <comment type="block" format="javadoc">/**
   * The SASL mechanism to use for authentication
   */</comment>
  <function><type><specifier>public</specifier> <name>SaslMechanism</name></type> <name>getMechanism</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>mechanism</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * The SASL callback handler for this mechanism, may be null.
   */</comment>
  <function><type><specifier>public</specifier> <name>CallbackHandler</name></type> <name>getCallbackHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>callbackHandler</name></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>HashCodeBuilder</name></type> <name>hcb</name> <init>= <expr><operator>new</operator> <call><name>HashCodeBuilder</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hcb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>kerberosServerPrimary</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>saslProperties</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>qop</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hcb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>kerberosServerPrimary</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>saslProperties</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>qop</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>mechanism</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>callbackHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><call><name><name>hcb</name><operator>.</operator><name>toHashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">231</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">287</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>SaslConnectionParams</name> <block>{
       <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>principal</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>principal</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
         <return>return <expr><literal type="boolean">false</literal></expr>;</return>
       </block_content>}</block></if></if_stmt></block></expr></expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mechanism</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>mechanism</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>callbackHandler</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>callbackHandler</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>callbackHandler</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>callbackHandler</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
 
       <return>return <expr><call><name><name>saslProperties</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>saslProperties</name></name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">238</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">304</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>SaslConnectionParams</name> <block>{
     <return>return <expr><literal type="boolean">false</literal></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"SaslConnectionParams["</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"kerberosServerPrimary="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>kerberosServerPrimary</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", qualityOfProtection="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>qop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", principal="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", mechanism="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>mechanism</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", callbackHandler="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>callbackHandler</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDefaultRealm</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>defaultRealm</name></expr>;</return>
   </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslDigestCallbackHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslDigestCallbackHandler</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..901bec132</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslDigestCallbackHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">77</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>CallbackHandler</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>codec</name><operator>.</operator><name>binary</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>SecretManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>SecretManager</name><operator>.</operator><name>InvalidToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>TokenIdentifier</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Common serialization methods across the client and server callback handlers for SASL. Serialization and deserialization methods must be kept in sync.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SaslDigestCallbackHandler</name> <super_list><implements>implements <super><name>CallbackHandler</name></super></implements></super_list> <block>{

  <comment type="block" format="javadoc">/**
   * Encode the serialized {@link TokenIdentifier} into a {@link String}.
   *
   * @param identifier
   *          The serialized identifier
   * @see #decodeIdentifier(String)
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>encodeIdentifier</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>identifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBase64</name></name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Encode the token password into a character array.
   *
   * @param password
   *          The token password
   * @see #getPassword(SecretManager, TokenIdentifier)
   */</comment>
  <function><type><specifier>public</specifier> <name><name>char</name><index>[]</index></name></type> <name>encodePassword</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBase64</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toCharArray</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Generate the password from the provided {@link SecretManager} and {@link TokenIdentifier}.
   *
   * @param secretManager
   *          The server SecretManager
   * @param tokenid
   *          The TokenIdentifier from the client
   * @see #encodePassword(byte[])
   */</comment>
  <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>TokenIdentifier</name></extends></parameter>&gt;</parameter_list> <name><name>char</name><index>[]</index></name></type> <name>getPassword</name><parameter_list>(<parameter><decl><type><name><name>SecretManager</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>secretManager</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>tokenid</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidToken</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>encodePassword</name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>retrievePassword</name></name><argument_list>(<argument><expr><name>tokenid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Decode the encoded {@link TokenIdentifier} into bytes suitable to reconstitute the identifier.
   *
   * @param identifier
   *          The encoded, serialized {@link TokenIdentifier}
   * @see #encodeIdentifier(byte[])
   */</comment>
  <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>decodeIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>identifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Base64</name><operator>.</operator><name>decodeBase64</name></name><argument_list>(<argument><expr><call><name><name>identifier</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>ThriftUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>ThriftUtil</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>d880fb3fb</name><operator>..</operator><literal type="number">51dd5ba8b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>ThriftUtil</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>ThriftUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">36</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ClientExec</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ClientExecReturn</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ThriftTransportPool</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name><operator>.</operator><name>SaslMechanism</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>tabletserver</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TabletClientService</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>UtilWaitThread</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">66</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftUtil</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name><name>TFramedTransport</name><operator>.</operator><name>Factory</name></name> <name>transportFactory</name> <operator>=</operator> <operator>new</operator> <call><name><name>TFramedTransport</name><operator>.</operator><name>Factory</name></name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;
   <specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>TTransportFactory</name></argument>&gt;</argument_list></name> <name>factoryCache</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>TTransportFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
 
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GSSAPI</name> <init>= <expr><literal type="string">"GSSAPI"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GSSAPI</name> <init>= <expr><literal type="string">"GSSAPI"</literal></expr></init></decl>, <decl><type ref="prev"/><name>DIGEST_MD5</name> <init>= <expr><literal type="string">"DIGEST-MD5"</literal></expr></init></decl>;</decl_stmt>
 
   <comment type="block" format="javadoc">/**
    * An instance of {@link TraceProtocolFactory}
@@ -252,7 +253,7 @@ public class ThriftUtil {
    *          RPC options
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TTransport</name></type> <name>createTransport</name><parameter_list>(<parameter><decl><type><name>HostAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>ClientContext</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>createClientTransport</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getClientTimeoutInMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getClientSslParams</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getClientSaslParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name>createClientTransport</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getClientTimeoutInMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getClientSslParams</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getSaslParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
@@ -345,11 +346,14 @@ public class ThriftUtil {
           // Is this pricey enough that we want to cache it?
           final String hostname = InetAddress.getByName(address.getHostText()).getCanonicalHostName();
 
          log.trace("Opening transport to server as {} to {}/{}", currentUser, saslParams.getKerberosServerPrimary(), hostname);
          final SaslMechanism mechanism = saslParams.getMechanism();

          log.trace("Opening transport to server as {} to {}/{} using {}", currentUser, saslParams.getKerberosServerPrimary(), hostname, mechanism);
 
           // Create the client SASL transport using the information for the server
           // Despite the 'protocol' argument seeming to be useless, it *must* be the primary of the server being connected to
          transport = new TSaslClientTransport(GSSAPI, null, saslParams.getKerberosServerPrimary(), hostname, saslParams.getSaslProperties(), null, transport);
          transport = new TSaslClientTransport(mechanism.getMechanismName(), null, saslParams.getKerberosServerPrimary(), hostname,
              saslParams.getSaslProperties(), saslParams.getCallbackHandler(), transport);
 
           // Wrap it all in a processor which will run with a doAs the current user
           transport = new UGIAssumingTransport(transport, currentUser);
diff --git a/core/src/main/java/org/apache/accumulo/core/security/AuthenticationTokenIdentifier.java b/core/src/main/java/org/apache/accumulo/core/security/AuthenticationTokenIdentifier.java
new file mode 100644
index 000000000..0b671d871
-- /dev/null
++ b/core/src/main/java/org/apache/accumulo/core/security/AuthenticationTokenIdentifier.java
@@ -0,0 +1,210 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TAuthenticationTokenIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>ThriftMessageUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>builder</name><operator>.</operator><name>HashCodeBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>TokenIdentifier</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implementation that identifies the underlying {@link Token} for Accumulo.
 */</comment>
<class><specifier>public</specifier> class <name>AuthenticationTokenIdentifier</name> <super_list><extends>extends <super><name>TokenIdentifier</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Text</name></type> <name>TOKEN_KIND</name> <init>= <expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><literal type="string">"ACCUMULO_AUTH_TOKEN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>impl</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>DelegationTokenConfig</name></type> <name>cfg</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AuthenticationTokenIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// noop for Writable</comment>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>AuthenticationTokenIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>principal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>AuthenticationTokenIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>principal</name></decl></parameter>, <parameter><decl><type><name>DelegationTokenConfig</name></type> <name>cfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>impl</name> <operator>=</operator> <operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>AuthenticationTokenIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>principal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>issueDate</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expirationDate</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>instanceId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>impl</name> <operator>=</operator> <operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setKeyId</name></name><argument_list>(<argument><expr><name>keyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setIssueDate</name></name><argument_list>(<argument><expr><name>issueDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setExpirationDate</name></name><argument_list>(<argument><expr><name>expirationDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setInstanceId</name></name><argument_list>(<argument><expr><name>instanceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>AuthenticationTokenIdentifier</name><parameter_list>(<parameter><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>impl</name> <operator>=</operator> <operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>(<argument><expr><call><name><name>identifier</name><operator>.</operator><name>getThriftIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>AuthenticationTokenIdentifier</name><parameter_list>(<parameter><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>impl</name> <operator>=</operator> <operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeyId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setKeyId</name></name><argument_list>(<argument><expr><name>keyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>getKeyId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"Identifier not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setIssueDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>issueDate</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"Identifier not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setIssueDate</name></name><argument_list>(<argument><expr><name>issueDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getIssueDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"Identifier not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getIssueDate</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setExpirationDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>expirationDate</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"Identifier not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setExpirationDate</name></name><argument_list>(<argument><expr><name>expirationDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getExpirationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"Identifier not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setInstanceId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>instanceId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"Identifier not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>impl</name><operator>.</operator><name>setInstanceId</name></name><argument_list>(<argument><expr><name>instanceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getInstanceId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><literal type="string">"Identifier not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>impl</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>getThriftIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>impl</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * A configuration from the requesting user, may be null.
   */</comment>
  <function><type><specifier>public</specifier> <name>DelegationTokenConfig</name></type> <name>getConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>cfg</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>impl</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>ThriftMessageUtil</name></type> <name>msgUtil</name> <init>= <expr><operator>new</operator> <call><name>ThriftMessageUtil</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>serialized</name> <init>= <expr><call><name><name>msgUtil</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>serialized</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>serialized</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>serialized</name><operator>.</operator><name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>serialized</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>ThriftMessageUtil</name></type> <name>msgUtil</name> <init>= <expr><operator>new</operator> <call><name>ThriftMessageUtil</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serialized</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>impl</name> <operator>=</operator> <operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>msgUtil</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>Text</name></type> <name>getKind</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>TOKEN_KIND</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>UserGroupInformation</name></type> <name>getUser</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>impl</name> <operator>&amp;&amp;</operator> <call><name><name>impl</name><operator>.</operator><name>isSetPrincipal</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createRemoteUser</name></name><argument_list>(<argument><expr><call><name><name>impl</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>impl</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>HashCodeBuilder</name></type> <name>hcb</name> <init>= <expr><operator>new</operator> <call><name>HashCodeBuilder</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>impl</name><operator>.</operator><name>isSetPrincipal</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>hcb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>impl</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>impl</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>hcb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>impl</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>impl</name><operator>.</operator><name>isSetIssueDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>hcb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>impl</name><operator>.</operator><name>getIssueDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>impl</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>hcb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>impl</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>impl</name><operator>.</operator><name>isSetInstanceId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>hcb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>impl</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>hcb</name><operator>.</operator><name>toHashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"AuthenticationTokenIdentifier("</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>o</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>AuthenticationTokenIdentifier</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>AuthenticationTokenIdentifier</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>impl</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal> <operator>==</operator> <name><name>other</name><operator>.</operator><name>impl</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name><name>impl</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SystemPermission</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SystemPermission</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>b998179e7</name><operator>..</operator><name>a1df5dc40</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SystemPermission</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SystemPermission</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">37</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> enum <name>SystemPermission</name> <block>{
   <expr><call><name>SYSTEM</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>,
   <expr><call><name>CREATE_NAMESPACE</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
   <expr><call><name>DROP_NAMESPACE</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>ALTER_NAMESPACE</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;
  <call><name>ALTER_NAMESPACE</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call><operator>,</operator>
  <call><name>OBTAIN_DELEGATION_TOKEN</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name></type> <name>permID</name></decl>;</decl_stmt>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TAuthenticationKey</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TAuthenticationKey</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..4da2bb2dc</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TAuthenticationKey</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">705</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<comment type="block" format="javadoc">/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>IScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>SchemeFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>StandardScheme</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>TupleScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TTupleProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>EncodingUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>server</name><operator>.</operator><name>AbstractNonblockingServer</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{<expr><literal type="string">"unchecked"</literal></expr>, <argument><expr><literal type="string">"serial"</literal></expr></argument>, <argument><expr><literal type="string">"rawtypes"</literal></expr></argument>, <argument><expr><literal type="string">"unused"</literal></expr></argument>}</block></expr></argument>)</argument_list></annotation> <specifier>public</specifier> class <name>TAuthenticationKey</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>TAuthenticationKey</name></argument>, <argument><name><name>TAuthenticationKey</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>TAuthenticationKey</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"TAuthenticationKey"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>SECRET_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"secret"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>KEY_ID_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"keyId"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>EXPIRATION_DATE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"expirationDate"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>CREATION_DATE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"creationDate"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TAuthenticationKeyStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TAuthenticationKeyTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>secret</name></decl>;</decl_stmt> <comment type="line">// required</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>keyId</name></decl>;</decl_stmt> <comment type="line">// optional</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>expirationDate</name></decl>;</decl_stmt> <comment type="line">// optional</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>creationDate</name></decl>;</decl_stmt> <comment type="line">// optional</comment>

  <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
  <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
    <decl><name>SECRET</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"secret"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>KEY_ID</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"keyId"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>EXPIRATION_DATE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"expirationDate"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>CREATION_DATE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"creationDate"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
      <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// SECRET</comment>
          <return>return <expr><name>SECRET</name></expr>;</return>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// KEY_ID</comment>
          <return>return <expr><name>KEY_ID</name></expr>;</return>
        <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// EXPIRATION_DATE</comment>
          <return>return <expr><name>EXPIRATION_DATE</name></expr>;</return>
        <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// CREATION_DATE</comment>
          <return>return <expr><name>CREATION_DATE</name></expr>;</return>
        <default>default:</default>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches name, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

    <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_thriftId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_fieldName</name></expr>;</return>
    </block_content>}</block></function>
  }</block></enum>

  <comment type="line">// isset id assignments</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>__KEYID_ISSET_ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>__EXPIRATIONDATE_ISSET_ID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>__CREATIONDATE_ISSET_ID</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name></type> <name>__isset_bitfield</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>_Fields</name></type> <name><name>optionals</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>_Fields</name><operator>.</operator><name>KEY_ID</name></name></expr>,<expr><name><name>_Fields</name><operator>.</operator><name>EXPIRATION_DATE</name></name></expr>,<expr><name><name>_Fields</name><operator>.</operator><name>CREATION_DATE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>SECRET</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"secret"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>        , <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>KEY_ID</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"keyId"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>OPTIONAL</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>EXPIRATION_DATE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"expirationDate"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>OPTIONAL</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>CREATION_DATE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"creationDate"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>OPTIONAL</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>TAuthenticationKey</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <constructor><specifier>public</specifier> <name>TAuthenticationKey</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>TAuthenticationKey</name><parameter_list>(
    <parameter><decl><type><name>ByteBuffer</name></type> <name>secret</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <name>secret</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
   */</comment>
  <constructor><specifier>public</specifier> <name>TAuthenticationKey</name><parameter_list>(<parameter><decl><type><name>TAuthenticationKey</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>__isset_bitfield</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetSecret</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>copyBinary</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>secret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<empty_stmt>;</empty_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyId</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>keyId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>expirationDate</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>creationDate</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>creationDate</name></name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>TAuthenticationKey</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>TAuthenticationKey</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setKeyIdIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setExpirationDateIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCreationDateIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>creationDate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getSecret</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setSecret</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>rightSize</name></name><argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>secret</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>secret</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>bufferForSecret</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>secret</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationKey</name></type> <name>setSecret</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>secret</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setSecret</name><argument_list>(<argument><expr><ternary><condition><expr><name>secret</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>(</operator><name>ByteBuffer</name><operator>)</operator><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationKey</name></type> <name>setSecret</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>secret</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <name>secret</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetSecret</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field secret is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetSecret</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setSecretIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>getKeyId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>keyId</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationKey</name></type> <name>setKeyId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyId</name></name> <operator>=</operator> <name>keyId</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setKeyIdIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetKeyId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>clearBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__KEYID_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field keyId is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetKeyId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>EncodingUtils</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__KEYID_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeyIdIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__KEYID_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getExpirationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationKey</name></type> <name>setExpirationDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>expirationDate</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name> <operator>=</operator> <name>expirationDate</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setExpirationDateIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetExpirationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>clearBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__EXPIRATIONDATE_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field expirationDate is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetExpirationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>EncodingUtils</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__EXPIRATIONDATE_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setExpirationDateIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__EXPIRATIONDATE_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getCreationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>creationDate</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationKey</name></type> <name>setCreationDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>creationDate</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>creationDate</name></name> <operator>=</operator> <name>creationDate</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCreationDateIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetCreationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>clearBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__CREATIONDATE_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field creationDate is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetCreationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>EncodingUtils</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__CREATIONDATE_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setCreationDateIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__CREATIONDATE_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SECRET</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetSecret</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setSecret</name><argument_list>(<argument><expr><operator>(</operator><name>ByteBuffer</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>KEY_ID</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetKeyId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setKeyId</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>EXPIRATION_DATE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetExpirationDate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setExpirationDate</name><argument_list>(<argument><expr><operator>(</operator><name>Long</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>CREATION_DATE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetCreationDate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setCreationDate</name><argument_list>(<argument><expr><operator>(</operator><name>Long</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SECRET</name></expr>:</case>
      <return>return <expr><call><name>getSecret</name><argument_list>()</argument_list></call></expr>;</return>

    <case>case <expr><name>KEY_ID</name></expr>:</case>
      <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getKeyId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    <case>case <expr><name>EXPIRATION_DATE</name></expr>:</case>
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getExpirationDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    <case>case <expr><name>CREATION_DATE</name></expr>:</case>
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getCreationDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SECRET</name></expr>:</case>
      <return>return <expr><call><name>isSetSecret</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>KEY_ID</name></expr>:</case>
      <return>return <expr><call><name>isSetKeyId</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>EXPIRATION_DATE</name></expr>:</case>
      <return>return <expr><call><name>isSetExpirationDate</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>CREATION_DATE</name></expr>:</case>
      <return>return <expr><call><name>isSetCreationDate</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>TAuthenticationKey</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>TAuthenticationKey</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>TAuthenticationKey</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_secret</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetSecret</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_secret</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetSecret</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_secret</name> <operator>||</operator> <name>that_present_secret</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_secret</name> <operator>&amp;&amp;</operator> <name>that_present_secret</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>secret</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>secret</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_keyId</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_keyId</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_keyId</name> <operator>||</operator> <name>that_present_keyId</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_keyId</name> <operator>&amp;&amp;</operator> <name>that_present_keyId</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>keyId</name></name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>keyId</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_expirationDate</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_expirationDate</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_expirationDate</name> <operator>||</operator> <name>that_present_expirationDate</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_expirationDate</name> <operator>&amp;&amp;</operator> <name>that_present_expirationDate</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>expirationDate</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_creationDate</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetCreationDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_creationDate</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetCreationDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_creationDate</name> <operator>||</operator> <name>that_present_creationDate</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_creationDate</name> <operator>&amp;&amp;</operator> <name>that_present_creationDate</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>creationDate</name></name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>creationDate</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>TAuthenticationKey</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetSecret</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetSecret</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetSecret</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>secret</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>secret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetKeyId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetKeyId</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>keyId</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>keyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetExpirationDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetExpirationDate</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>expirationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetCreationDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetCreationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetCreationDate</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>creationDate</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>creationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"TAuthenticationKey("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"secret:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>secret</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetKeyId</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"keyId:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>keyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetExpirationDate</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"expirationDate:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetCreationDate</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"creationDate:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>creationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// check for required fields</comment>
    <comment type="line">// check for sub-struct validity</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <comment type="line">// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.</comment>
      <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TAuthenticationKeyStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TAuthenticationKeyStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TAuthenticationKeyStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TAuthenticationKeyStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>TAuthenticationKey</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>TAuthenticationKey</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// SECRET</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSecretIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// KEY_ID</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>keyId</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setKeyIdIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// EXPIRATION_DATE</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>expirationDate</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setExpirationDateIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// CREATION_DATE</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>creationDate</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setCreationDateIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>TAuthenticationKey</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>secret</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>SECRET_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>secret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>KEY_ID_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>keyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>EXPIRATION_DATE_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>expirationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCreationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>CREATION_DATE_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>creationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TAuthenticationKeyTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TAuthenticationKeyTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TAuthenticationKeyTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TAuthenticationKeyTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>TAuthenticationKey</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TAuthenticationKey</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSecret</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCreationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetSecret</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>secret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>keyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>expirationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetCreationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>creationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TAuthenticationKey</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setSecretIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>keyId</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setKeyIdIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>expirationDate</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setExpirationDateIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>creationDate</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setCreationDateIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TAuthenticationTokenIdentifier</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TAuthenticationTokenIdentifier</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..d4e75f097</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TAuthenticationTokenIdentifier</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">796</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<comment type="block" format="javadoc">/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>IScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>SchemeFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>StandardScheme</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>TupleScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TTupleProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>EncodingUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>server</name><operator>.</operator><name>AbstractNonblockingServer</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{<expr><literal type="string">"unchecked"</literal></expr>, <argument><expr><literal type="string">"serial"</literal></expr></argument>, <argument><expr><literal type="string">"rawtypes"</literal></expr></argument>, <argument><expr><literal type="string">"unused"</literal></expr></argument>}</block></expr></argument>)</argument_list></annotation> <specifier>public</specifier> class <name>TAuthenticationTokenIdentifier</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>TAuthenticationTokenIdentifier</name></argument>, <argument><name><name>TAuthenticationTokenIdentifier</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>TAuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"TAuthenticationTokenIdentifier"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>PRINCIPAL_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"principal"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>KEY_ID_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"keyId"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>ISSUE_DATE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"issueDate"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>EXPIRATION_DATE_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"expirationDate"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>INSTANCE_ID_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"instanceId"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TAuthenticationTokenIdentifierStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TAuthenticationTokenIdentifierTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>principal</name></decl>;</decl_stmt> <comment type="line">// required</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>keyId</name></decl>;</decl_stmt> <comment type="line">// optional</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>issueDate</name></decl>;</decl_stmt> <comment type="line">// optional</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>expirationDate</name></decl>;</decl_stmt> <comment type="line">// optional</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>instanceId</name></decl>;</decl_stmt> <comment type="line">// optional</comment>

  <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
  <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
    <decl><name>PRINCIPAL</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"principal"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>KEY_ID</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"keyId"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>ISSUE_DATE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"issueDate"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>EXPIRATION_DATE</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"expirationDate"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>INSTANCE_ID</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"instanceId"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
      <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// PRINCIPAL</comment>
          <return>return <expr><name>PRINCIPAL</name></expr>;</return>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// KEY_ID</comment>
          <return>return <expr><name>KEY_ID</name></expr>;</return>
        <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// ISSUE_DATE</comment>
          <return>return <expr><name>ISSUE_DATE</name></expr>;</return>
        <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// EXPIRATION_DATE</comment>
          <return>return <expr><name>EXPIRATION_DATE</name></expr>;</return>
        <case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="line">// INSTANCE_ID</comment>
          <return>return <expr><name>INSTANCE_ID</name></expr>;</return>
        <default>default:</default>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches name, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

    <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_thriftId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_fieldName</name></expr>;</return>
    </block_content>}</block></function>
  }</block></enum>

  <comment type="line">// isset id assignments</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>__KEYID_ISSET_ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>__ISSUEDATE_ISSET_ID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>__EXPIRATIONDATE_ISSET_ID</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name></type> <name>__isset_bitfield</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>_Fields</name></type> <name><name>optionals</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>_Fields</name><operator>.</operator><name>KEY_ID</name></name></expr>,<expr><name><name>_Fields</name><operator>.</operator><name>ISSUE_DATE</name></name></expr>,<expr><name><name>_Fields</name><operator>.</operator><name>EXPIRATION_DATE</name></name></expr>,<expr><name><name>_Fields</name><operator>.</operator><name>INSTANCE_ID</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>PRINCIPAL</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"principal"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>KEY_ID</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"keyId"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>OPTIONAL</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>ISSUE_DATE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"issueDate"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>OPTIONAL</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>EXPIRATION_DATE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"expirationDate"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>OPTIONAL</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>INSTANCE_ID</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"instanceId"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>OPTIONAL</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>TAuthenticationTokenIdentifier</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <constructor><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name><parameter_list>(
    <parameter><decl><type><name>String</name></type> <name>principal</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>principal</name></name> <operator>=</operator> <name>principal</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
   */</comment>
  <constructor><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name><parameter_list>(<parameter><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>__isset_bitfield</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetPrincipal</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>principal</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>principal</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyId</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>keyId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>issueDate</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>issueDate</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>expirationDate</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetInstanceId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>instanceId</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>instanceId</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>principal</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setKeyIdIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setIssueDateIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>issueDate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setExpirationDateIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>instanceId</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getPrincipal</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>principal</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>setPrincipal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>principal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>principal</name></name> <operator>=</operator> <name>principal</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetPrincipal</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>principal</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field principal is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetPrincipal</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>principal</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrincipalIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>principal</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>getKeyId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>keyId</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>setKeyId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyId</name></name> <operator>=</operator> <name>keyId</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setKeyIdIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetKeyId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>clearBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__KEYID_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field keyId is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetKeyId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>EncodingUtils</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__KEYID_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeyIdIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__KEYID_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getIssueDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>issueDate</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>setIssueDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>issueDate</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>issueDate</name></name> <operator>=</operator> <name>issueDate</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setIssueDateIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetIssueDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>clearBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__ISSUEDATE_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field issueDate is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetIssueDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>EncodingUtils</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__ISSUEDATE_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setIssueDateIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__ISSUEDATE_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getExpirationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>setExpirationDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>expirationDate</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name> <operator>=</operator> <name>expirationDate</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setExpirationDateIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetExpirationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>clearBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__EXPIRATIONDATE_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field expirationDate is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetExpirationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>EncodingUtils</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__EXPIRATIONDATE_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setExpirationDateIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__EXPIRATIONDATE_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getInstanceId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>instanceId</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>setInstanceId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>instanceId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>instanceId</name></name> <operator>=</operator> <name>instanceId</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetInstanceId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>instanceId</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field instanceId is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetInstanceId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>instanceId</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setInstanceIdIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>instanceId</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PRINCIPAL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetPrincipal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setPrincipal</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>KEY_ID</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetKeyId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setKeyId</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>ISSUE_DATE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetIssueDate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setIssueDate</name><argument_list>(<argument><expr><operator>(</operator><name>Long</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>EXPIRATION_DATE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetExpirationDate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setExpirationDate</name><argument_list>(<argument><expr><operator>(</operator><name>Long</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>INSTANCE_ID</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetInstanceId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setInstanceId</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PRINCIPAL</name></expr>:</case>
      <return>return <expr><call><name>getPrincipal</name><argument_list>()</argument_list></call></expr>;</return>

    <case>case <expr><name>KEY_ID</name></expr>:</case>
      <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getKeyId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    <case>case <expr><name>ISSUE_DATE</name></expr>:</case>
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getIssueDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    <case>case <expr><name>EXPIRATION_DATE</name></expr>:</case>
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getExpirationDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    <case>case <expr><name>INSTANCE_ID</name></expr>:</case>
      <return>return <expr><call><name>getInstanceId</name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PRINCIPAL</name></expr>:</case>
      <return>return <expr><call><name>isSetPrincipal</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>KEY_ID</name></expr>:</case>
      <return>return <expr><call><name>isSetKeyId</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>ISSUE_DATE</name></expr>:</case>
      <return>return <expr><call><name>isSetIssueDate</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>EXPIRATION_DATE</name></expr>:</case>
      <return>return <expr><call><name>isSetExpirationDate</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>INSTANCE_ID</name></expr>:</case>
      <return>return <expr><call><name>isSetInstanceId</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>TAuthenticationTokenIdentifier</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>TAuthenticationTokenIdentifier</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_principal</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetPrincipal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_principal</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetPrincipal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_principal</name> <operator>||</operator> <name>that_present_principal</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_principal</name> <operator>&amp;&amp;</operator> <name>that_present_principal</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>principal</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>principal</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_keyId</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_keyId</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_keyId</name> <operator>||</operator> <name>that_present_keyId</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_keyId</name> <operator>&amp;&amp;</operator> <name>that_present_keyId</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>keyId</name></name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>keyId</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_issueDate</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetIssueDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_issueDate</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetIssueDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_issueDate</name> <operator>||</operator> <name>that_present_issueDate</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_issueDate</name> <operator>&amp;&amp;</operator> <name>that_present_issueDate</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>issueDate</name></name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>issueDate</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_expirationDate</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_expirationDate</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_expirationDate</name> <operator>||</operator> <name>that_present_expirationDate</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_expirationDate</name> <operator>&amp;&amp;</operator> <name>that_present_expirationDate</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>expirationDate</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_instanceId</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetInstanceId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_instanceId</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetInstanceId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_instanceId</name> <operator>||</operator> <name>that_present_instanceId</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_instanceId</name> <operator>&amp;&amp;</operator> <name>that_present_instanceId</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>instanceId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>instanceId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetPrincipal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetPrincipal</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>principal</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>principal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetKeyId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetKeyId</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>keyId</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>keyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetIssueDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetIssueDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetIssueDate</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>issueDate</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>issueDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetExpirationDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetExpirationDate</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>expirationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetInstanceId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetInstanceId</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>instanceId</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>instanceId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"TAuthenticationTokenIdentifier("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"principal:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>principal</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>principal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetKeyId</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"keyId:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>keyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetIssueDate</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"issueDate:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>issueDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetExpirationDate</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"expirationDate:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>expirationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetInstanceId</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"instanceId:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>instanceId</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>instanceId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// check for required fields</comment>
    <comment type="line">// check for sub-struct validity</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <comment type="line">// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.</comment>
      <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TAuthenticationTokenIdentifierStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifierStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TAuthenticationTokenIdentifierStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TAuthenticationTokenIdentifierStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>TAuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// PRINCIPAL</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>principal</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setPrincipalIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// KEY_ID</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I32</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>keyId</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setKeyIdIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// ISSUE_DATE</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>issueDate</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setIssueDateIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="line">// EXPIRATION_DATE</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>expirationDate</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setExpirationDateIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="line">// INSTANCE_ID</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>instanceId</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setInstanceIdIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>principal</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>PRINCIPAL_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>principal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>KEY_ID_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>keyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetIssueDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>ISSUE_DATE_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>issueDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>EXPIRATION_DATE_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>expirationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>instanceId</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetInstanceId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>INSTANCE_ID_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>instanceId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TAuthenticationTokenIdentifierTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifierTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TAuthenticationTokenIdentifierTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TAuthenticationTokenIdentifierTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>TAuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetPrincipal</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetIssueDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetInstanceId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetPrincipal</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>principal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetKeyId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI32</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>keyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetIssueDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>issueDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetExpirationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>expirationDate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetInstanceId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>instanceId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>principal</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setPrincipalIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>keyId</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setKeyIdIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>issueDate</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setIssueDateIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>expirationDate</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setExpirationDateIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>instanceId</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setInstanceIdIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TDelegationToken</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TDelegationToken</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..904d19567</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TDelegationToken</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">520</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<comment type="block" format="javadoc">/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>IScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>SchemeFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>StandardScheme</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>TupleScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TTupleProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>EncodingUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>server</name><operator>.</operator><name>AbstractNonblockingServer</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{<expr><literal type="string">"unchecked"</literal></expr>, <argument><expr><literal type="string">"serial"</literal></expr></argument>, <argument><expr><literal type="string">"rawtypes"</literal></expr></argument>, <argument><expr><literal type="string">"unused"</literal></expr></argument>}</block></expr></argument>)</argument_list></annotation> <specifier>public</specifier> class <name>TDelegationToken</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>TDelegationToken</name></argument>, <argument><name><name>TDelegationToken</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>TDelegationToken</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"TDelegationToken"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>PASSWORD_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>IDENTIFIER_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"identifier"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TDelegationTokenStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TDelegationTokenTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>password</name></decl>;</decl_stmt> <comment type="line">// required</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>identifier</name></decl>;</decl_stmt> <comment type="line">// required</comment>

  <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
  <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
    <decl><name>PASSWORD</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"password"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>IDENTIFIER</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
      <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// PASSWORD</comment>
          <return>return <expr><name>PASSWORD</name></expr>;</return>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// IDENTIFIER</comment>
          <return>return <expr><name>IDENTIFIER</name></expr>;</return>
        <default>default:</default>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches name, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

    <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_thriftId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_fieldName</name></expr>;</return>
    </block_content>}</block></function>
  }</block></enum>

  <comment type="line">// isset id assignments</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>PASSWORD</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr></argument>        , <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>IDENTIFIER</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"identifier"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>StructMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr></argument>, <argument><expr><name><name>TAuthenticationTokenIdentifier</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>TDelegationToken</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <constructor><specifier>public</specifier> <name>TDelegationToken</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>TDelegationToken</name><parameter_list>(
    <parameter><decl><type><name>ByteBuffer</name></type> <name>password</name></decl></parameter>,
    <parameter><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <name>identifier</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
   */</comment>
  <constructor><specifier>public</specifier> <name>TDelegationToken</name><parameter_list>(<parameter><decl><type><name>TDelegationToken</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetPassword</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>copyBinary</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<empty_stmt>;</empty_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>isSetIdentifier</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>TDelegationToken</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>TDelegationToken</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getPassword</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setPassword</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>rightSize</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>password</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>password</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>bufferForPassword</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>password</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TDelegationToken</name></type> <name>setPassword</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setPassword</name><argument_list>(<argument><expr><ternary><condition><expr><name>password</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>(</operator><name>ByteBuffer</name><operator>)</operator><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TDelegationToken</name></type> <name>setPassword</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetPassword</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field password is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetPassword</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setPasswordIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>getIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>identifier</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TDelegationToken</name></type> <name>setIdentifier</name><parameter_list>(<parameter><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <name>identifier</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field identifier is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>identifier</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setIdentifierIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PASSWORD</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetPassword</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setPassword</name><argument_list>(<argument><expr><operator>(</operator><name>ByteBuffer</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><name>IDENTIFIER</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setIdentifier</name><argument_list>(<argument><expr><operator>(</operator><name>TAuthenticationTokenIdentifier</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PASSWORD</name></expr>:</case>
      <return>return <expr><call><name>getPassword</name><argument_list>()</argument_list></call></expr>;</return>

    <case>case <expr><name>IDENTIFIER</name></expr>:</case>
      <return>return <expr><call><name>getIdentifier</name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>PASSWORD</name></expr>:</case>
      <return>return <expr><call><name>isSetPassword</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>IDENTIFIER</name></expr>:</case>
      <return>return <expr><call><name>isSetIdentifier</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>TDelegationToken</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>TDelegationToken</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>TDelegationToken</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_password</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetPassword</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_password</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetPassword</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_password</name> <operator>||</operator> <name>that_present_password</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_password</name> <operator>&amp;&amp;</operator> <name>that_present_password</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>password</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_identifier</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetIdentifier</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_identifier</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetIdentifier</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_identifier</name> <operator>||</operator> <name>that_present_identifier</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_identifier</name> <operator>&amp;&amp;</operator> <name>that_present_identifier</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>identifier</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>identifier</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>TDelegationToken</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetPassword</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetPassword</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetIdentifier</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>identifier</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"TDelegationToken("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"password:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"identifier:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>identifier</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// check for required fields</comment>
    <comment type="line">// check for sub-struct validity</comment>
    <if_stmt><if>if <condition>(<expr><name>identifier</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TDelegationTokenStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TDelegationTokenStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>TDelegationToken</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>TDelegationToken</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// PASSWORD</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRING</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>password</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setPasswordIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// IDENTIFIER</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STRUCT</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>identifier</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setIdentifierIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>TDelegationToken</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>password</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>PASSWORD_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>struct</name><operator>.</operator><name>identifier</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>IDENTIFIER_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>identifier</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TDelegationTokenTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TDelegationTokenTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>TDelegationToken</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TDelegationToken</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetPassword</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetIdentifier</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetPassword</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBinary</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetIdentifier</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>identifier</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TDelegationToken</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>password</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setPasswordIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>identifier</name></name> <operator>=</operator> <operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>identifier</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setIdentifierIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TDelegationTokenConfig</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TDelegationTokenConfig</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..cdde83ef6</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TDelegationTokenConfig</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">399</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<comment type="block" format="javadoc">/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>IScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>SchemeFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>StandardScheme</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>TupleScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TTupleProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>EncodingUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>server</name><operator>.</operator><name>AbstractNonblockingServer</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{<expr><literal type="string">"unchecked"</literal></expr>, <argument><expr><literal type="string">"serial"</literal></expr></argument>, <argument><expr><literal type="string">"rawtypes"</literal></expr></argument>, <argument><expr><literal type="string">"unused"</literal></expr></argument>}</block></expr></argument>)</argument_list></annotation> <specifier>public</specifier> class <name>TDelegationTokenConfig</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>TDelegationTokenConfig</name></argument>, <argument><name><name>TDelegationTokenConfig</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>TDelegationTokenConfig</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"TDelegationTokenConfig"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>LIFETIME_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"lifetime"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TDelegationTokenConfigStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TDelegationTokenConfigTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>lifetime</name></decl>;</decl_stmt> <comment type="line">// optional</comment>

  <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
  <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
    <decl><name>LIFETIME</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"lifetime"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
      <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// LIFETIME</comment>
          <return>return <expr><name>LIFETIME</name></expr>;</return>
        <default>default:</default>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches name, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

    <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_thriftId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_fieldName</name></expr>;</return>
    </block_content>}</block></function>
  }</block></enum>

  <comment type="line">// isset id assignments</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>__LIFETIME_ISSET_ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name></type> <name>__isset_bitfield</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>_Fields</name></type> <name><name>optionals</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>_Fields</name><operator>.</operator><name>LIFETIME</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>LIFETIME</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"lifetime"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>OPTIONAL</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>TDelegationTokenConfig</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <constructor><specifier>public</specifier> <name>TDelegationTokenConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
   */</comment>
  <constructor><specifier>public</specifier> <name>TDelegationTokenConfig</name><parameter_list>(<parameter><decl><type><name>TDelegationTokenConfig</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>__isset_bitfield</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>lifetime</name></name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>TDelegationTokenConfig</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>TDelegationTokenConfig</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setLifetimeIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getLifetime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>lifetime</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TDelegationTokenConfig</name></type> <name>setLifetime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>lifetime</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <name>lifetime</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setLifetimeIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetLifetime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>clearBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__LIFETIME_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field lifetime is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetLifetime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>EncodingUtils</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__LIFETIME_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setLifetimeIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__LIFETIME_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LIFETIME</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetLifetime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setLifetime</name><argument_list>(<argument><expr><operator>(</operator><name>Long</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LIFETIME</name></expr>:</case>
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getLifetime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LIFETIME</name></expr>:</case>
      <return>return <expr><call><name>isSetLifetime</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>TDelegationTokenConfig</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>TDelegationTokenConfig</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>TDelegationTokenConfig</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_lifetime</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_lifetime</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_lifetime</name> <operator>||</operator> <name>that_present_lifetime</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_lifetime</name> <operator>&amp;&amp;</operator> <name>that_present_lifetime</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>lifetime</name></name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>lifetime</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>TDelegationTokenConfig</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetLifetime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetLifetime</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>lifetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"TDelegationTokenConfig("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isSetLifetime</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"lifetime:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// check for required fields</comment>
    <comment type="line">// check for sub-struct validity</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <comment type="line">// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.</comment>
      <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenConfigStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TDelegationTokenConfigStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TDelegationTokenConfigStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenConfigStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>TDelegationTokenConfig</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>TDelegationTokenConfig</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// LIFETIME</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setLifetimeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>TDelegationTokenConfig</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>LIFETIME_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>lifetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenConfigTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TDelegationTokenConfigTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TDelegationTokenConfigTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenConfigTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>TDelegationTokenConfig</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TDelegationTokenConfig</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>lifetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TDelegationTokenConfig</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setLifetimeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TDelegationTokenOptions</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TDelegationTokenOptions</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..c19eb7563</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>TDelegationTokenOptions</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">399</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<comment type="block" format="javadoc">/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>IScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>SchemeFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>StandardScheme</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>scheme</name><operator>.</operator><name>TupleScheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TTupleProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>EncodingUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>async</name><operator>.</operator><name>AsyncMethodCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>server</name><operator>.</operator><name>AbstractNonblockingServer</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{<expr><literal type="string">"unchecked"</literal></expr>, <argument><expr><literal type="string">"serial"</literal></expr></argument>, <argument><expr><literal type="string">"rawtypes"</literal></expr></argument>, <argument><expr><literal type="string">"unused"</literal></expr></argument>}</block></expr></argument>)</argument_list></annotation> <specifier>public</specifier> class <name>TDelegationTokenOptions</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>TDelegationTokenOptions</name></argument>, <argument><name><name>TDelegationTokenOptions</name><operator>.</operator><name>_Fields</name></name></argument>&gt;</argument_list></name></name></super>, <super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></super>, <super><name>Cloneable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>TDelegationTokenOptions</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name></type> <name>STRUCT_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TStruct</name></name><argument_list>(<argument><expr><literal type="string">"TDelegationTokenOptions"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>LIFETIME_FIELD_DESC</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name><argument_list>(<argument><expr><literal type="string">"lifetime"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name></type> <name>schemes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IScheme</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name>SchemeFactory</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StandardScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TDelegationTokenOptionsStandardSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TupleScheme</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TDelegationTokenOptionsTupleSchemeFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>lifetime</name></decl>;</decl_stmt> <comment type="line">// optional</comment>

  <comment type="block" format="javadoc">/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */</comment>
  <enum><specifier>public</specifier> enum <name>_Fields</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldIdEnum</name></name></super></implements></super_list> <block>{
    <decl><name>LIFETIME</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"lifetime"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name></type> <name>byName</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>_Fields</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
      <for>for <control>(<init><decl><type><name>_Fields</name></type> <name>field</name> <range>: <expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>byName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getFieldName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// LIFETIME</comment>
          <return>return <expr><name>LIFETIME</name></expr>;</return>
        <default>default:</default>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByThriftIdOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>_Fields</name></type> <name>fields</name> <init>= <expr><call><name>findByThriftId</name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Field "</literal> <operator>+</operator> <name>fieldId</name> <operator>+</operator> <literal type="string">" doesn't exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the _Fields constant that matches name, or null if its not found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>_Fields</name></type> <name>findByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>byName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>_thriftId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>_fieldName</name></decl>;</decl_stmt>

    <constructor><name>_Fields</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>thriftId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>_thriftId</name> <operator>=</operator> <name>thriftId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>_fieldName</name> <operator>=</operator> <name>fieldName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>short</name></type> <name>getThriftFieldId</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_thriftId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFieldName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>_fieldName</name></expr>;</return>
    </block_content>}</block></function>
  }</block></enum>

  <comment type="line">// isset id assignments</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>__LIFETIME_ISSET_ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name></type> <name>__isset_bitfield</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>_Fields</name></type> <name><name>optionals</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>_Fields</name><operator>.</operator><name>LIFETIME</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>metaDataMap</name></decl>;</decl_stmt>
  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name></type> <name>tmpMap</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>_Fields</name></argument>, <argument><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tmpMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>_Fields</name><operator>.</operator><name>LIFETIME</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name></name><argument_list>(<argument><expr><literal type="string">"lifetime"</literal></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TFieldRequirementType</name><operator>.</operator><name>OPTIONAL</name></name></expr></argument>, 
        <argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldValueMetaData</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaDataMap</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>tmpMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>meta_data</name><operator>.</operator><name>FieldMetaData</name><operator>.</operator><name>addStructMetaDataMap</name></name><argument_list>(<argument><expr><name><name>TDelegationTokenOptions</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>metaDataMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <constructor><specifier>public</specifier> <name>TDelegationTokenOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Performs a deep copy on &lt;i&gt;other&lt;/i&gt;.
   */</comment>
  <constructor><specifier>public</specifier> <name>TDelegationTokenOptions</name><parameter_list>(<parameter><decl><type><name>TDelegationTokenOptions</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>__isset_bitfield</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>lifetime</name></name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>TDelegationTokenOptions</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>TDelegationTokenOptions</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setLifetimeIsSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getLifetime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>lifetime</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TDelegationTokenOptions</name></type> <name>setLifetime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>lifetime</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <name>lifetime</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setLifetimeIsSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetLifetime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>clearBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__LIFETIME_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field lifetime is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSetLifetime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>EncodingUtils</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__LIFETIME_ISSET_ID</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setLifetimeIsSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <call><name><name>EncodingUtils</name><operator>.</operator><name>setBit</name></name><argument_list>(<argument><expr><name>__isset_bitfield</name></expr></argument>, <argument><expr><name>__LIFETIME_ISSET_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LIFETIME</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unsetLifetime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setLifetime</name><argument_list>(<argument><expr><operator>(</operator><name>Long</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>getFieldValue</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LIFETIME</name></expr>:</case>
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getLifetime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><name>_Fields</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LIFETIME</name></expr>:</case>
      <return>return <expr><call><name>isSetLifetime</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>instanceof</operator> <name>TDelegationTokenOptions</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><name>TDelegationTokenOptions</name><operator>)</operator><name>that</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>TDelegationTokenOptions</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>this_present_lifetime</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>that_present_lifetime</name> <init>= <expr><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>this_present_lifetime</name> <operator>||</operator> <name>that_present_lifetime</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>this_present_lifetime</name> <operator>&amp;&amp;</operator> <name>that_present_lifetime</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>lifetime</name></name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>lifetime</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>TDelegationTokenOptions</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastComparison</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>isSetLifetime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>lastComparison</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSetLifetime</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastComparison</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBaseHelper</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>lifetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastComparison</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>lastComparison</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>_Fields</name></type> <name>fieldForId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fieldId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>_Fields</name><operator>.</operator><name>findByThriftId</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>schemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>oprot</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>oprot</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"TDelegationTokenOptions("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isSetLifetime</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"lifetime:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lifetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// check for required fields</comment>
    <comment type="line">// check for sub-struct validity</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <comment type="line">// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.</comment>
      <expr_stmt><expr><name>__isset_bitfield</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TIOStreamTransport</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenOptionsStandardSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TDelegationTokenOptionsStandardScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TDelegationTokenOptionsStandardScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenOptionsStandardScheme</name> <super_list><extends>extends <super><name><name>StandardScheme</name><argument_list type="generic">&lt;<argument><name>TDelegationTokenOptions</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>iprot</name></decl></parameter>, <parameter><decl><type><name>TDelegationTokenOptions</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TField</name></name></type> <name>schemeField</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>schemeField</name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readFieldBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>STOP</name></name></expr>)</condition> <block>{<block_content> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// LIFETIME</comment>
            <if_stmt><if>if <condition>(<expr><name><name>schemeField</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TType</name><operator>.</operator><name>I64</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setLifetimeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> 
              <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocolUtil</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>iprot</name></expr></argument>, <argument><expr><name><name>schemeField</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>iprot</name><operator>.</operator><name>readStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// check for required fields of primitive type, which can't be checked in the validate method</comment>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>oprot</name></decl></parameter>, <parameter><decl><type><name>TDelegationTokenOptions</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructBegin</name></name><argument_list>(<argument><expr><name>STRUCT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldBegin</name></name><argument_list>(<argument><expr><name>LIFETIME_FIELD_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>lifetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeFieldStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeStructEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenOptionsTupleSchemeFactory</name> <super_list><implements>implements <super><name>SchemeFactory</name></super></implements></super_list> <block>{
    <function><type><specifier>public</specifier> <name>TDelegationTokenOptionsTupleScheme</name></type> <name>getScheme</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>TDelegationTokenOptionsTupleScheme</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TDelegationTokenOptionsTupleScheme</name> <super_list><extends>extends <super><name><name>TupleScheme</name><argument_list type="generic">&lt;<argument><name>TDelegationTokenOptions</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TDelegationTokenOptions</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>oprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>optionals</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeBitSet</name></name><argument_list>(<argument><expr><name>optionals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>struct</name><operator>.</operator><name>isSetLifetime</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>oprot</name><operator>.</operator><name>writeI64</name></name><argument_list>(<argument><expr><name><name>struct</name><operator>.</operator><name>lifetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>TDelegationTokenOptions</name></type> <name>struct</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>TTupleProtocol</name></type> <name>iprot</name> <init>= <expr><operator>(</operator><name>TTupleProtocol</name><operator>)</operator> <name>prot</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BitSet</name></type> <name>incoming</name> <init>= <expr><call><name><name>iprot</name><operator>.</operator><name>readBitSet</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>struct</name><operator>.</operator><name>lifetime</name></name> <operator>=</operator> <call><name><name>iprot</name><operator>.</operator><name>readI64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>struct</name><operator>.</operator><name>setLifetimeIsSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

}</block></class>

<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftMessageUtil</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftMessageUtil</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..c79aac015</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftMessageUtil</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">109</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TCompactProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>protocol</name><operator>.</operator><name>TProtocol</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>AutoExpandingBufferWriteTransport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>transport</name><operator>.</operator><name>TMemoryInputTransport</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Serializes and deserializes Thrift messages to and from byte arrays. This class is not thread-safe, external synchronization is necessary if it is used
 * concurrently.
 */</comment>
<class><specifier>public</specifier> class <name>ThriftMessageUtil</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AutoExpandingBufferWriteTransport</name></type> <name>transport</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TProtocol</name></type> <name>protocol</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ThriftMessageUtil</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>ThriftMessageUtil</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>initialCapacity</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>growthCoefficient</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// TODO does this make sense? better to push this down to the serialize method (accept the transport as an argument)?</comment>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>transport</name></name> <operator>=</operator> <operator>new</operator> <call><name>AutoExpandingBufferWriteTransport</name><argument_list>(<argument><expr><name>initialCapacity</name></expr></argument>, <argument><expr><name>growthCoefficient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>protocol</name></name> <operator>=</operator> <operator>new</operator> <call><name>TCompactProtocol</name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Convert the {@link msg} to a byte array representation
   *
   * @param msg
   *          The message to serialize
   * @return The serialized message
   * @throws IOException
   *           When serialization fails
   */</comment>
  <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name><name>TBase</name><argument_list type="generic">&lt;<argument><name>?</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>msg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>transport</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// We should flush(), but we know its a noop</comment>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>TException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <return>return <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>transport</name><operator>.</operator><name>getBuf</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>array</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>transport</name><operator>.</operator><name>getPos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @see #deserialize(byte[], int, int, T)
   */</comment>
  <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>TBase</name><argument_list type="generic">&lt;<argument><name>?</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>T</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>serialized</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>instance</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>deserialize</name><argument_list>(<argument><expr><call><name><name>serialized</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>serialized</name><operator>.</operator><name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>serialized</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Assumes the entire contents of the byte array compose the serialized {@link instance}
   *
   * @see #deserialize(byte[], int, int, TBase)
   */</comment>
  <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>TBase</name><argument_list type="generic">&lt;<argument><name>?</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>T</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serialized</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>instance</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>deserialize</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>serialized</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Deserializes a message into the provided {@link instance} from {@link serialized}
   *
   * @param serialized
   *          The serialized representation of the object
   * @param instance
   *          An instance of the object to reconstitute
   * @return The reconstituted instance provided
   * @throws IOException
   *           When deserialization fails
   */</comment>
  <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>TBase</name><argument_list type="generic">&lt;<argument><name>?</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>T</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serialized</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>instance</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TCompactProtocol</name></type> <name>proto</name> <init>= <expr><operator>new</operator> <call><name>TCompactProtocol</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TMemoryInputTransport</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>instance</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>TException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <return>return <expr><name>instance</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>master</name><operator>.</operator><name>thrift</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>master</name><operator>.</operator><name>thrift</name></name>
<name>index</name> <name>d89e3818d</name><operator>..</operator><literal type="number">8a83438c2</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>master</name><operator>.</operator><name>thrift</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>master</name><operator>.</operator><name>thrift</name></name>
@@ <operator>-</operator><literal type="number">173</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">173</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <name>service</name> <name>MasterClientService</name> extends <name>FateService</name> <block>{
   <expr><name>oneway</name> <name>void</name> <call><name>reportTabletStatus</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>:</operator><name><name>trace</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>:</operator><name><name>security</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>:</operator><name>string</name> <name>serverName</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>:</operator><name>TabletLoadState</name> <name>status</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>:</operator><name><name>data</name><operator>.</operator><name>TKeyExtent</name></name> <name>tablet</name></expr></argument>)</argument_list></call>
 
   <name><name>list</name><argument_list type="generic">&lt;<argument><name>string</name></argument>&gt;</argument_list></name> <call><name>getActiveTservers</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>:</operator><name><name>trace</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>:</operator><name><name>security</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><operator>:</operator><name><name>client</name><operator>.</operator><name>ThriftSecurityException</name></name> <name>sec</name></expr>)

  <comment type="line">// Delegation token request</comment>
  <name><name>security</name><operator>.</operator><name>TDelegationToken</name></name> <call><name>getDelegationToken</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>:</operator><name><name>trace</name><operator>.</operator><name>TInfo</name></name> <name>tinfo</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>:</operator><name><name>security</name><operator>.</operator><name>TCredentials</name></name> <name>credentials</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>:</operator><name><name>security</name><operator>.</operator><name>TDelegationTokenConfig</name></name> <name>cfg</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><operator>(</operator><literal type="number">1</literal></expr></argument></throws><operator>:</operator><name><name>client</name><operator>.</operator><name>ThriftSecurityException</name></name> <name>sec</name>)</block></expr></expr_stmt>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>security</name><operator>.</operator><name>thrift</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>security</name><operator>.</operator><name>thrift</name></name>
<name>index</name> <literal type="number">66235a8e9</literal><operator>..</operator><literal type="number">74b7f128b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>security</name><operator>.</operator><name>thrift</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>thrift</name><operator>/</operator><name><name>security</name><operator>.</operator><name>thrift</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">3</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">26</literal> @@ <name>struct</name> <name>TCredentials</name> <block>{
     <expr><literal type="number">4</literal><operator>:</operator><name>string</name> <name>instanceId</name></expr>
 }</block>
 
<name>struct</name> <name>TAuthenticationTokenIdentifier</name> <block>{
    <expr><literal type="number">1</literal><operator>:</operator><name>string</name> <name>principal</name></expr>,
    <expr><literal type="number">2</literal><operator>:</operator><name>optional</name> <name>i32</name> <name>keyId</name></expr>,
    <expr><literal type="number">3</literal><operator>:</operator><name>optional</name> <name>i64</name> <name>issueDate</name></expr>,
    <expr><literal type="number">4</literal><operator>:</operator><name>optional</name> <name>i64</name> <name>expirationDate</name></expr>,
    <expr><literal type="number">5</literal><operator>:</operator><name>optional</name> <name>string</name> <name>instanceId</name></expr>
}</block>

<name>struct</name> <name>TAuthenticationKey</name> <block>{
    <expr><literal type="number">1</literal><operator>:</operator><name>binary</name> <name>secret</name></expr>,
    <expr><literal type="number">2</literal><operator>:</operator><name>optional</name> <name>i32</name> <name>keyId</name></expr>,
    <expr><literal type="number">3</literal><operator>:</operator><name>optional</name> <name>i64</name> <name>expirationDate</name></expr>,
    <expr><literal type="number">4</literal><operator>:</operator><name>optional</name> <name>i64</name> <name>creationDate</name></expr>
}</block>

<name>struct</name> <name>TDelegationToken</name> <block>{
    <expr><literal type="number">1</literal><operator>:</operator><name>binary</name> <name>password</name></expr>,
    <expr><literal type="number">2</literal><operator>:</operator><name>TAuthenticationTokenIdentifier</name> <name>identifier</name></expr>
}</block>

<name>struct</name> <name>TDelegationTokenConfig</name> <block>{
    <expr><literal type="number">1</literal><operator>:</operator><name>optional</name> <name>i64</name> <name>lifetime</name></expr>
}</block>
<operator>\</operator> <name>No</name> <name>newline</name> <name>at</name> <name>end</name> <name>of</name> <name>file</name>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>DelegationTokenConfigTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>DelegationTokenConfigTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..f1553dce7</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>admin</name><operator>/</operator><name><name>DelegationTokenConfigTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">63</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>DelegationTokenConfigTest</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTimeUnit</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DelegationTokenConfig</name></type> <name>config1</name> <init>= <expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>config2</name> <init>= <expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>config1</name><operator>.</operator><name>setTokenLifetime</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>config2</name><operator>.</operator><name>setTokenLifetime</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>config1</name><operator>.</operator><name>getTokenLifetime</name></name><argument_list>(<argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>config2</name><operator>.</operator><name>getTokenLifetime</name></name><argument_list>(<argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>config1</name></expr></argument>, <argument><expr><name>config2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>config1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>config2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testNoTimeout</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DelegationTokenConfig</name></type> <name>config</name> <init>= <expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>setTokenLifetime</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>config</name><operator>.</operator><name>getTokenLifetime</name></name><argument_list>(<argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>IllegalArgumentException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testInvalidLifetime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTokenLifetime</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>NullPointerException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSetInvalidTimeUnit</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTokenLifetime</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>NullPointerException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testGetInvalidTimeUnit</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTokenLifetime</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>DelegationTokenConfigSerializerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>DelegationTokenConfigSerializerTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..4499a5846</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>DelegationTokenConfigSerializerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">40</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>DelegationTokenConfigSerializerTest</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DelegationTokenConfig</name></type> <name>cfg</name> <init>= <expr><operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>setTokenLifetime</name></name><argument_list>(<argument><expr><literal type="number">8323</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TDelegationTokenConfig</name></type> <name>tCfg</name> <init>= <expr><call><name><name>DelegationTokenConfigSerializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>tCfg</name><operator>.</operator><name>getLifetime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfg</name><operator>.</operator><name>getTokenLifetime</name></name><argument_list>(<argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><call><name><name>DelegationTokenConfigSerializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>tCfg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftTransportKeyTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftTransportKeyTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">2723273e3</literal><operator>..</operator><literal type="number">04b9ae8e5</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftTransportKeyTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>impl</name><operator>/</operator><name><name>ThriftTransportKeyTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">20</literal></expr><operator>,</operator><expr><literal type="number">38</literal> @@</expr></expr_stmt> <import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>createMock</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>verify</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotEquals</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>PrivilegedExceptionAction</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name><operator>.</operator><name>ClientProperty</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>KerberosToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SslConnectionParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>CommonConfigurationKeysPublic</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>net</name><operator>.</operator><name>HostAndPort</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>ThriftTransportKeyTest</name> <block>{
 
  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.security.krb5.realm"</literal></expr></argument>, <argument><expr><literal type="string">"accumulo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.security.krb5.kdc"</literal></expr></argument>, <argument><expr><literal type="string">"fake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>HADOOP_SECURITY_AUTHENTICATION</name></name></expr></argument>, <argument><expr><literal type="string">"kerberos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>setConfiguration</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

   <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>RuntimeException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>testSslAndSaslErrors</name><parameter_list>()</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>ClientContext</name></type> <name>clientCtx</name> <init>= <expr><call><name>createMock</name><argument_list>(<argument><expr><name><name>ClientContext</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">38</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftTransportKeyTest</name> <block>{
     <expr><name>SaslConnectionParams</name> <name>saslParams</name> <operator>=</operator> <call><name>createMock</name><argument_list>(<argument><expr><name><name>SaslConnectionParams</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clientCtx</name><operator>.</operator><name>getClientSslParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>sslParams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clientCtx</name><operator>.</operator><name>getClientSaslParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>saslParams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clientCtx</name><operator>.</operator><name>getSaslParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>saslParams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;
 
     <comment type="line">// We don't care to verify the sslparam or saslparam mocks</comment>
     <expr><call><name>replay</name><argument_list>(<argument><expr><name>clientCtx</name></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">51</literal></expr>,<expr><literal type="number">20</literal> <operator>+</operator><literal type="number">72</literal></expr>,<expr><literal type="number">78</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftTransportKeyTest</name> <block>{
   }</block>
 
   @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testSaslPrincipalIsSignificant</name><argument_list>()</argument_list></call> <block>{
    <expr><name>SaslConnectionParams</name> <name>saslParams1</name> <operator>=</operator> <call><name>createMock</name><argument_list>(<argument><expr><name><name>SaslConnectionParams</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>saslParams2</name> <operator>=</operator> <call><name>createMock</name><argument_list>(<argument><expr><name><name>SaslConnectionParams</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>saslParams1</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="string">"user1"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>saslParams2</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="string">"user2"</literal></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>public</specifier> <name>void</name> <call><name>testConnectionCaching</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name> <block>{
    <expr><name>UserGroupInformation</name> <name>user1</name> <operator>=</operator> <call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><literal type="string">"user1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><name>final</name> <name>KerberosToken</name> <name>token</name> <operator>=</operator> <call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>KerberosToken</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><name>final</name> <name>ClientConfiguration</name> <name>clientConf</name> <operator>=</operator> <call><name><name>ClientConfiguration</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr>;
    <comment type="line">// The primary is the first component of the principal</comment>
    <expr><name>final</name> <name>String</name> <name>primary</name> <operator>=</operator> <literal type="string">"accumulo"</literal></expr>;
    <expr><call><name><name>clientConf</name><operator>.</operator><name>withSasl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// A first instance of the SASL cnxn params</comment>
    <expr><name>SaslConnectionParams</name> <name>saslParams1</name> <operator>=</operator> <call><name><name>user1</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>SaslConnectionParams</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SaslConnectionParams</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
      <expr_stmt/>}</block_content>
    }</block></function>)</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call></expr>

    <comment type="line">// A second instance of what should be the same SaslConnectionParams</comment>
    <name>SaslConnectionParams</name> <name>saslParams2</name> <operator>=</operator> <call><name><name>user1</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>SaslConnectionParams</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SaslConnectionParams</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
      <expr_stmt/>}</block_content>
    }</block></function>)</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call>
 
    <call><name>replay</name><argument_list>(<argument><expr><name>saslParams1</name></expr></argument>, <argument><expr><name>saslParams2</name></expr></argument>)</argument_list></call></block></expr>;
    <expr><name>ThriftTransportKey</name> <name>ttk1</name> <operator>=</operator> <operator>new</operator> <call><name>ThriftTransportKey</name><argument_list>(<argument><expr><call><name><name>HostAndPort</name><operator>.</operator><name>fromParts</name></name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="number">9997</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1l</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>saslParams1</name></expr></argument>)</argument_list></call></expr>, <expr><name>ttk2</name> <operator>=</operator> <operator>new</operator> <call><name>ThriftTransportKey</name><argument_list>(
        <argument><expr><call><name><name>HostAndPort</name><operator>.</operator><name>fromParts</name></name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="number">9997</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1l</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>saslParams2</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// Should equals() and hashCode() to make sure we don't throw away thrift cnxns</comment>
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>ttk1</name></expr></argument>, <argument><expr><name>ttk2</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>ttk1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ttk2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
  }</block>

  @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testSaslPrincipalIsSignificant</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name> <block>{
    <expr><name>UserGroupInformation</name> <name>user1</name> <operator>=</operator> <call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><literal type="string">"user1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>KerberosToken</name></type> <name>token</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>KerberosToken</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SaslConnectionParams</name></type> <name>saslParams1</name> <init>= <expr><call><name><name>user1</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>SaslConnectionParams</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SaslConnectionParams</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClientConfiguration</name></type> <name>clientConf</name> <init>= <expr><call><name><name>ClientConfiguration</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The primary is the first component of the principal</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>primary</name> <init>= <expr><literal type="string">"accumulo"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clientConf</name><operator>.</operator><name>withSasl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UserGroupInformation</name></type> <name>user2</name> <init>= <expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><literal type="string">"user2"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SaslConnectionParams</name></type> <name>saslParams2</name> <init>= <expr><call><name><name>user2</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>SaslConnectionParams</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SaslConnectionParams</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClientConfiguration</name></type> <name>clientConf</name> <init>= <expr><call><name><name>ClientConfiguration</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The primary is the first component of the principal</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>primary</name> <init>= <expr><literal type="string">"accumulo"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clientConf</name><operator>.</operator><name>withSasl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>ThriftTransportKey</name></type> <name>ttk1</name> <init>= <expr><operator>new</operator> <call><name>ThriftTransportKey</name><argument_list>(<argument><expr><call><name><name>HostAndPort</name><operator>.</operator><name>fromParts</name></name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="number">9997</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1l</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>saslParams1</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ttk2</name> <init>= <expr><operator>new</operator> <call><name>ThriftTransportKey</name><argument_list>(
         <argument><expr><call><name><name>HostAndPort</name><operator>.</operator><name>fromParts</name></name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="number">9997</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1l</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>saslParams2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>ttk1</name></expr></argument>, <argument><expr><name>ttk2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><call><name><name>ttk1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ttk2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>saslParams1</name></expr></argument>, <argument><expr><name>saslParams2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
 
   <annotation>@<name>Test</name></annotation>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">72</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">151</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ThriftTransportKeyTest</name> <block>{
     <expr><name>ClientContext</name> <name>clientCtx</name> <operator>=</operator> <call><name>createMock</name><argument_list>(<argument><expr><name><name>ClientContext</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
     <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clientCtx</name><operator>.</operator><name>getClientSslParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clientCtx</name><operator>.</operator><name>getClientSaslParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>clientCtx</name><operator>.</operator><name>getSaslParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;
 
     <expr><call><name>replay</name><argument_list>(<argument><expr><name>clientCtx</name></expr></argument>)</argument_list></call></expr>;
 
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>security</name><operator>/</operator><name>tokens</name><operator>/</operator><name><name>DelegationTokenTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>security</name><operator>/</operator><name>tokens</name><operator>/</operator><name><name>DelegationTokenTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..f66a1eef1</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>client</name><operator>/</operator><name>security</name><operator>/</operator><name>tokens</name><operator>/</operator><name><name>DelegationTokenTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr>,<expr><literal type="number">72</literal> @@</expr>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name></name>;</package></block></expr></expr_stmt>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>DelegationTokenTest</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000l</literal></expr></argument>, <argument><expr><literal type="number">2000l</literal></expr></argument>, <argument><expr><literal type="string">"instanceid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// We don't need a real serialized Token for the password</comment>
    <decl_stmt><decl><type><name>DelegationToken</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{<expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'e'</literal></expr>}</block></expr></argument>, <argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>DelegationToken</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>copy</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>copy</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testEquality</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000l</literal></expr></argument>, <argument><expr><literal type="number">2000l</literal></expr></argument>, <argument><expr><literal type="string">"instanceid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// We don't need a real serialized Token for the password</comment>
    <decl_stmt><decl><type><name>DelegationToken</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{<expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'e'</literal></expr>}</block></expr></argument>, <argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><literal type="string">"user1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000l</literal></expr></argument>, <argument><expr><literal type="number">2000l</literal></expr></argument>, <argument><expr><literal type="string">"instanceid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// We don't need a real serialized Token for the password</comment>
    <decl_stmt><decl><type><name>DelegationToken</name></type> <name>token2</name> <init>= <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{<expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'e'</literal></expr>}</block></expr></argument>, <argument><expr><name>identifier2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>token2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>token2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// We don't need a real serialized Token for the password</comment>
    <decl_stmt><decl><type><name>DelegationToken</name></type> <name>token3</name> <init>= <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{<expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'0'</literal></expr>}</block></expr></argument>, <argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>token3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>token3</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>token2</name></expr></argument>, <argument><expr><name>token3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><call><name><name>token2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>token3</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslClientDigestCallbackHandlerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslClientDigestCallbackHandlerTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..f38e2e349</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslClientDigestCallbackHandlerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">33</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>SaslClientDigestCallbackHandlerTest</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testEquality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SaslClientDigestCallbackHandler</name></type> <name>handler1</name> <init>= <expr><operator>new</operator> <call><name>SaslClientDigestCallbackHandler</name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="string">"mypass"</literal><operator>.</operator><call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>handler2</name> <init>= <expr><operator>new</operator> <call><name>SaslClientDigestCallbackHandler</name><argument_list>(
        <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="string">"mypass"</literal><operator>.</operator><call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>handler1</name></expr></argument>, <argument><expr><name>handler2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>handler1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>handler2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslConnectionParamsTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslConnectionParamsTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3910f34af</literal><operator>..</operator><literal type="number">9b77d25c8</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslConnectionParamsTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslConnectionParamsTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">17</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name></name>;</package>
 
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>PrivilegedExceptionAction</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>sasl</name><operator>.</operator><name>Sasl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name><operator>.</operator><name>ClientProperty</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ClientContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>KerberosToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name><operator>.</operator><name>QualityOfProtection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name><operator>.</operator><name>SaslMechanism</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>CommonConfigurationKeysPublic</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">59</literal></expr><operator>,</operator><expr><literal type="number">37</literal> @@ <specifier>public</specifier> <name>class</name> <name>SaslConnectionParamsTest</name> <block>{
   }</block>
 
   @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testNullParams</name><argument_list>()</argument_list></call> <block>{
    <expr><name>ClientConfiguration</name> <name>clientConf</name> <operator>=</operator> <operator>new</operator> <call><name>ClientConfiguration</name><argument_list>()</argument_list></call></expr>;
    <expr><name>AccumuloConfiguration</name> <name>rpcConf</name> <operator>=</operator> <call><name><name>ClientContext</name><operator>.</operator><name>convertClientConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>SaslConnectionParams</name><operator>.</operator><name>forConfig</name></name><argument_list>(<argument><expr><name>rpcConf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>public</specifier> <name>void</name> <call><name>testDefaultParamsAsClient</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>final</name> <name>KerberosToken</name> <name>token</name> <operator>=</operator> <call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>KerberosToken</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <expr><call><name><name>testUser</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClientConfiguration</name></type> <name>clientConf</name> <init>= <expr><call><name><name>ClientConfiguration</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The primary is the first component of the principal</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>primary</name> <init>= <expr><literal type="string">"accumulo"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clientConf</name><operator>.</operator><name>withSasl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>SaslConnectionParams</name></type> <name>saslParams</name> <init>= <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getKerberosServerPrimary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>QualityOfProtection</name></type> <name>defaultQop</name> <init>= <expr><call><name><name>QualityOfProtection</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>RPC_SASL_QOP</name><operator>.</operator><name>getDefaultValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>defaultQop</name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getQualityOfProtection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><call><name><name>saslParams</name><operator>.</operator><name>getSaslProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>defaultQop</name><operator>.</operator><name>getQuality</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Sasl</name><operator>.</operator><name>QOP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      <expr_stmt/>}</block_content>
    }</block></function>)</block><empty_stmt>;</empty_stmt></class></expr></argument></argument_list></call></expr>
   }</block></expr></expr_stmt>
 
   <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDefaultParamsAsClient</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultParams</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>KerberosToken</name></type> <name>token</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>KerberosToken</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>testUser</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>Void</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">71</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@ <specifier>public</specifier> class <name>SaslConnectionParamsTest</name> <block>{
         <expr><name>final</name> <name>String</name> <name>primary</name> <operator>=</operator> <literal type="string">"accumulo"</literal></expr>;
         <expr><call><name><name>clientConf</name><operator>.</operator><name>withSasl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;
 
        <expr><name>final</name> <name>AccumuloConfiguration</name> <name>rpcConf</name> <operator>=</operator> <call><name><name>ClientContext</name><operator>.</operator><name>convertClientConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
        <expr><name>final</name> <name>SaslConnectionParams</name> <name>saslParams</name> <operator>=</operator> <call><name><name>SaslConnectionParams</name><operator>.</operator><name>forConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr>;
        <expr><name>final</name> <name>SaslConnectionParams</name> <name>saslParams</name> <operator>=</operator> <operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>rpcConf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getKerberosServerPrimary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
         <expr><name>final</name> <name>QualityOfProtection</name> <name>defaultQop</name> <operator>=</operator> <call><name><name>QualityOfProtection</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>RPC_SASL_QOP</name><operator>.</operator><name>getDefaultValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">89</literal></expr>,<expr><literal type="number">7</literal> <operator>+</operator><literal type="number">118</literal></expr>,<expr><literal type="number">8</literal> @@ <specifier>public</specifier> class <name>SaslConnectionParamsTest</name> <block>{
   }</block>
 
   @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testDefaultParamsAsServer</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
  <expr><specifier>public</specifier> <name>void</name> <call><name>testDelegationToken</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>final</name> <name>DelegationToken</name> <name>token</name> <operator>=</operator> <operator>new</operator> <call><name>DelegationToken</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><literal type="number">20l</literal></expr></argument>, <argument><expr><literal type="string">"instanceid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
     <expr><call><name><name>testUser</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
       <function><annotation>@<name>Override</name></annotation>
       <type><specifier>public</specifier> <name>Void</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">102</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> class <name>SaslConnectionParamsTest</name> <block>{
         <expr><name>final</name> <name>AccumuloConfiguration</name> <name>rpcConf</name> <operator>=</operator> <call><name><name>ClientContext</name><operator>.</operator><name>convertClientConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
        <expr><name>final</name> <name>SaslConnectionParams</name> <name>saslParams</name> <operator>=</operator> <call><name><name>SaslConnectionParams</name><operator>.</operator><name>forConfig</name></name><argument_list>(<argument><expr><name>rpcConf</name></expr></argument>)</argument_list></call></expr>;
        <expr><name>final</name> <name>SaslConnectionParams</name> <name>saslParams</name> <operator>=</operator> <operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>rpcConf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getKerberosServerPrimary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
         <expr><name>final</name> <name>QualityOfProtection</name> <name>defaultQop</name> <operator>=</operator> <call><name><name>QualityOfProtection</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>RPC_SASL_QOP</name><operator>.</operator><name>getDefaultValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>defaultQop</name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getQualityOfProtection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SaslMechanism</name><operator>.</operator><name>DIGEST_MD5</name></name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getMechanism</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getCallbackHandler</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SaslClientDigestCallbackHandler</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getCallbackHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

         <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name> <name>properties</name> <operator>=</operator> <call><name><name>saslParams</name><operator>.</operator><name>getSaslProperties</name></name><argument_list>()</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
         <expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>defaultQop</name><operator>.</operator><name>getQuality</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Sasl</name><operator>.</operator><name>QOP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
@@ <expr><operator>-</operator><literal type="number">117</literal></expr>,<expr><literal type="number">4</literal> <operator>+</operator><literal type="number">151</literal></expr>,<expr><literal type="number">89</literal> @@ <specifier>public</specifier> class <name>SaslConnectionParamsTest</name> <block>{
     }</block></expr></block></expr></expr_stmt></block_content></block></function></block></class></expr></argument>)</argument_list></call></expr>;
   }</block>
 
  @<name>Test</name>
  <specifier>public</specifier> <name>void</name> <call><name>testEquality</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
    <expr><name>final</name> <name>KerberosToken</name> <name>token</name> <operator>=</operator> <call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>KerberosToken</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SaslConnectionParams</name></type> <name>params1</name> <init>= <expr><call><name><name>testUser</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>SaslConnectionParams</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SaslConnectionParams</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClientConfiguration</name></type> <name>clientConf</name> <init>= <expr><call><name><name>ClientConfiguration</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The primary is the first component of the principal</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>primary</name> <init>= <expr><literal type="string">"accumulo"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clientConf</name><operator>.</operator><name>withSasl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AccumuloConfiguration</name></type> <name>rpcConf</name> <init>= <expr><call><name><name>ClientContext</name><operator>.</operator><name>convertClientConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>rpcConf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SaslConnectionParams</name></type> <name>params2</name> <init>= <expr><call><name><name>testUser</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>SaslConnectionParams</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SaslConnectionParams</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClientConfiguration</name></type> <name>clientConf</name> <init>= <expr><call><name><name>ClientConfiguration</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The primary is the first component of the principal</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>primary</name> <init>= <expr><literal type="string">"accumulo"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clientConf</name><operator>.</operator><name>withSasl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AccumuloConfiguration</name></type> <name>rpcConf</name> <init>= <expr><call><name><name>ClientContext</name><operator>.</operator><name>convertClientConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>rpcConf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>params1</name></expr></argument>, <argument><expr><name>params2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>params1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>params2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DelegationToken</name></type> <name>delToken1</name> <init>= <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><literal type="number">20l</literal></expr></argument>, <argument><expr><literal type="string">"instanceid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SaslConnectionParams</name></type> <name>params3</name> <init>= <expr><call><name><name>testUser</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>SaslConnectionParams</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SaslConnectionParams</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClientConfiguration</name></type> <name>clientConf</name> <init>= <expr><call><name><name>ClientConfiguration</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The primary is the first component of the principal</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>primary</name> <init>= <expr><literal type="string">"accumulo"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clientConf</name><operator>.</operator><name>withSasl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AccumuloConfiguration</name></type> <name>rpcConf</name> <init>= <expr><call><name><name>ClientContext</name><operator>.</operator><name>convertClientConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>rpcConf</name></expr></argument>, <argument><expr><name>delToken1</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>params1</name></expr></argument>, <argument><expr><name>params3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><call><name><name>params1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>params3</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>params2</name></expr></argument>, <argument><expr><name>params3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><call><name><name>params2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>params3</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DelegationToken</name></type> <name>delToken2</name> <init>= <expr><operator>new</operator> <call><name>DelegationToken</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><literal type="number">20l</literal></expr></argument>, <argument><expr><literal type="string">"instanceid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SaslConnectionParams</name></type> <name>params4</name> <init>= <expr><call><name><name>testUser</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>SaslConnectionParams</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>SaslConnectionParams</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClientConfiguration</name></type> <name>clientConf</name> <init>= <expr><call><name><name>ClientConfiguration</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The primary is the first component of the principal</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>primary</name> <init>= <expr><literal type="string">"accumulo"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clientConf</name><operator>.</operator><name>withSasl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AccumuloConfiguration</name></type> <name>rpcConf</name> <init>= <expr><call><name><name>ClientContext</name><operator>.</operator><name>convertClientConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>SaslConnectionParams</name><argument_list>(<argument><expr><name>rpcConf</name></expr></argument>, <argument><expr><name>delToken2</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>params1</name></expr></argument>, <argument><expr><name>params4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><call><name><name>params1</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>params4</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>params2</name></expr></argument>, <argument><expr><name>params4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><call><name><name>params2</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>params4</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>params3</name></expr></argument>, <argument><expr><name>params4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>params3</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>params4</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 }</block></class>
<name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name><name>AuthenticationTokenIdentifierTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name><name>AuthenticationTokenIdentifierTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..d3c1f20f3</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>security</name><operator>/</operator><name><name>AuthenticationTokenIdentifierTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">111</literal> @@</expr></argument>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name></name>;</package></argument_list></call></expr></expr_stmt>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>AuthenticationTokenIdentifierTest</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testUgi</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"user"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UserGroupInformation</name></type> <name>actual</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>expected</name> <init>= <expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createRemoteUser</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>expected</name><operator>.</operator><name>getAuthenticationMethod</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>actual</name><operator>.</operator><name>getAuthenticationMethod</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>expected</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testEquality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"user"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>newToken</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>newToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>newToken</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testExtendedEquality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"user"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>newToken</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5l</literal></expr></argument>, <argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>newToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>newToken</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>dblNewToken</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dblNewToken</name><operator>.</operator><name>setKeyId</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dblNewToken</name><operator>.</operator><name>setIssueDate</name></name><argument_list>(<argument><expr><literal type="number">5l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dblNewToken</name><operator>.</operator><name>setExpirationDate</name></name><argument_list>(<argument><expr><literal type="number">10l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dblNewToken</name><operator>.</operator><name>setInstanceId</name></name><argument_list>(<argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testToString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"my_special_principal"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"my_special_principal"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>DataInputStream</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>deserializedToken</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>deserializedToken</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>deserializedToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>deserializedToken</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>deserializedToken</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTokenKind</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"my_special_principal"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>AuthenticationTokenIdentifier</name><operator>.</operator><name>TOKEN_KIND</name></name></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testNullMsg</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>DataInputStream</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>deserializedToken</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>deserializedToken</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>deserializedToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>deserializedToken</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>deserializedToken</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftMessageUtilTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftMessageUtilTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..765d9ca9b</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>core</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>core</name><operator>/</operator><name>util</name><operator>/</operator><name><name>ThriftMessageUtilTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">83</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TAuthenticationTokenIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>ThriftMessageUtilTest</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>TAuthenticationTokenIdentifier</name></type> <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>ThriftMessageUtil</name></type> <name>util</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>(<argument><expr><literal type="string">"principal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>util</name> <operator>=</operator> <operator>new</operator> <call><name>ThriftMessageUtil</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSerialization</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buff</name> <init>= <expr><call><name><name>util</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>bbMsg</name> <init>= <expr><operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>util</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>bbMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>bbMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSerializationAsByteArray</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buff</name> <init>= <expr><call><name><name>util</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>array</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>util</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSerializationAsByteArrayWithLimits</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buff</name> <init>= <expr><call><name><name>util</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAuthenticationTokenIdentifier</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>TAuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>array</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">14</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// Throw some garbage in front and behind the actual message</comment>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'G'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'G'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'G'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'G'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>util</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><call><name><name>buff</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>kerberos</name><operator>.</operator><name>txt</name></name> <name>b</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>kerberos</name><operator>.</operator><name>txt</name></name>
<name>index</name> <literal type="number">05d7384ea</literal><operator>..</operator><name>dc2484b92</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>kerberos</name><operator>.</operator><name>txt</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>docs</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>asciidoc</name><operator>/</operator><name>chapters</name><operator>/</operator><name><name>kerberos</name><operator>.</operator><name>txt</name></name>
@@ <operator>-</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">73</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <name>password</name></expr><operator>,</operator> <expr><name>at</name> <name>the</name> <name>cost</name> <name>of</name> <name>needing</name> <name>to</name> <name>protect</name> <name>the</name> <name>keytab</name> <name><name>file</name><operator>.</operator> <name>These</name></name> <name>principals</name>
 <name>will</name> <name>apply</name> <name>directly</name> <name>to</name> <name>authentication</name></expr></expr_stmt> <for>for clients accessing Accumulo and the
 Accumulo processes accessing HDFS.
 
=== Delegation Tokens

MapReduce<operator>,</operator> <decl_stmt><decl><type><name>a</name> <name>common</name> <name>way</name> <name>that</name> <name>clients</name> <name>interact</name> <name>with</name></type> <name>Accumulo</name></decl>, <decl><type ref="prev"/><name>does</name> <name>not</name> <name>map</name> <name>well</name> <name>to</name> <name>the</name>
<name>client</name>-<name>server</name> <name>model</name> <name>that</name> <name>Kerberos</name> <name>was</name> <name>originally</name> <name>designed</name> <name>to</name> <name><name>support</name><operator>.</operator> <name>Specifically</name></name></decl>, <decl><type ref="prev"/><name>the</name> <name>parallelization</name>
<name>of</name> <name>tasks</name> <name>across</name> <name>many</name> <name>nodes</name> <name>introduces</name> <name>the</name> <name>problem</name> <name>of</name> <name>securely</name> <name>sharing</name> <name>the</name> <name>user</name> <name>credentials</name> <name>across</name>
<name>these</name> <name>tasks</name> <name>in</name> <name>as</name> <name>safe</name> <name>a</name> <name>manner</name> <name>as</name> <name><name>possible</name><operator>.</operator> <name>To</name></name> <name>address</name> <name>this</name> <name>problem</name></decl>, <decl><type ref="prev"/><name>Hadoop</name> <name>introduced</name> <name>the</name> <name>notion</name>
<name>of</name> <name>a</name> <name>delegation</name> <name>token</name> <name>to</name> <name>be</name> <name>used</name> <name>in</name> <name>distributed</name> <name>execution</name> <name><name>settings</name><operator>.</operator>

<name>A</name></name> <name>delegation</name> <name>token</name> <name>is</name> <name>nothing</name> <name>more</name> <name>than</name> <name>a</name> <name>short</name>-<name>term</name></decl>, <decl><type ref="prev"/><name>on</name>-<name>the</name>-<name>fly</name> <name>password</name> <name>generated</name> <name>after</name> <name>authenticating</name> <name>with</name> <name>the</name> <name>user</name>'s
credentials.  In Hadoop itself, the Namenode and ResourceManager, for HDFS and YARN respectively, act as the gateway for
delegation tokens requests. For example, before a YARN job is submitted, the implementation will request delegation
tokens from the NameNode and ResourceManager so the YARN tasks can communicate with HDFS and YARN. In the same manner,
support has been added in the Accumulo Master to generate delegation tokens to enable interaction with Accumulo via
MapReduce when Kerberos authentication is enabled in a manner similar to HDFS and YARN.

Generating an expiring password is, arguably, more secure than distributing the user'<name>s</name>
<name>credentials</name> <name>across</name> <name>the</name> <name>cluster</name> <name>as</name> <name>only</name> <name>access</name> <name>to</name> <name>HDFS</name></decl>, <decl><type ref="prev"/><name>YARN</name> <name>and</name> <name>Accumulo</name> <name>would</name> <name>be</name>
<name>compromised</name> <name>in</name> <name>the</name> <name>case of the token being compromised as opposed to the entire
Kerberos credential. Additional details for clients and servers will be covered
in subsequent sections.

 === Configuring Accumulo
 
 To configure Accumulo for use with Kerberos, both client-facing and server-facing
@@ -<literal type="number">149</literal>,<literal type="number">6</literal> +<literal type="number">170</literal>,<literal type="number">12</literal> @@ serializing traces to the trace table.
 still use a normal KerberosToken and the same keytab/principal to serialize traces. Like
 non-Kerberized instances, the table must be created and permissions granted to the trace.user.
 ** The same +_HOST+ replacement is performed on this value, substituted the FQDN for +_HOST+.
* *general.delegation.token.lifetime*=_7d_
** The length of time that the server-side secret used to create delegation tokens is valid.
   After a server-side secret expires, a delegation token created with that secret is no longer valid.
* *general.delegation.token.update.interval*=_1d_
** The frequency in which new server-side secrets should be generated to create delegation
   tokens for clients. Generating new secrets reduces the likelihood of cryptographic attacks.
 
 Although it should be a prerequisite, it is ever important that you have DNS properly
 configured for your nodes and that Accumulo is configured to use the FQDN. It
@@ -<literal type="number">220</literal>,<literal type="number">6</literal> +<literal type="number">247</literal>,<literal type="number">34</literal> @@ requests from.
 Both the hosts and users configuration properties also accept a value of +*+ to denote that any user or host
 is acceptable for +$PROXY_USER+.
 
===== Delegation Tokens

Within Accumulo services, the primary task to implement delegation tokens is the generation and distribution
of a shared secret among all Accumulo tabletservers and the master. The secret key allows for generation
of delegation tokens for users and verification of delegation tokens presented by clients. If a server
process is unaware of the secret key used to create a delegation token, the client cannot be authenticated.
As ZooKeeper distribution is an asynchronous operation (typically on the order of seconds), the 
value for `general.delegation.token.update.interval` should be on the order of hours to days to reduce the
likelihood of servers rejecting valid clients because the server did not yet see a new secret key.

Supporting authentication with both Kerberos credentials and delegation tokens, the SASL thrift
server accepts connections with either `GSSAPI` and `DIGEST-MD5` mechanisms set. The `DIGEST-MD5` mechanism
enables authentication as a normal username and password exchange which `DelegationToken`s leverages.

Since delegation tokens are a weaker form of authentication than Kerberos credentials, user access
to obtain delegation tokens from Accumulo is protected with the `DELEGATION_TOKEN` system permission. Only
users with the system permission are allowed to obtain delegation tokens. It is also recommended
to configure confidentiality with SASL, using the `rpc.sasl.qop=auth-conf` configuration property, to
ensure that prying eyes cannot view the `DelegationToken` as it passes over the network.

----
# Check a user<literal type="char">'s permissions</literal>
admin@REALM@accumulo&gt; userpermissions -u user@REALM

# Grant the DELEGATION_TOKEN system permission to a user
admin@REALM@accumulo&gt; grant System.DELEGATION_TOKEN -s -u user@REALM
----

 ==== Clients
 
 ===== Create client principal
@@ -<literal type="number">265</literal>,<literal type="number">6</literal> +<literal type="number">320</literal>,<literal type="number">61</literal> @@ Three items need to be set to enable access to Accumulo:
 The second and third properties *must* match the configuration of the accumulo servers</name></decl>;</decl_stmt></for> <expr_stmt><expr><name>this</name> <name>is</name>
 <name>required</name> <name>to</name> <name>set</name> <name>up</name> <name>the</name> <name>SASL</name> <name><name>transport</name><operator>.</operator></name>
 
==<operator>==</operator><operator>=</operator> <name>DelegationTokens</name> <name>with</name> <name>MapReduce</name>

<name>To</name> <name>use</name> <name>DelegationTokens</name> <name>in</name> <name>a</name> <name>custom</name> <name>MapReduce</name> <name>job</name></expr><operator>,</operator> <expr><name>the</name> <name>call</name> <name>to</name> <operator>`</operator><call><name>setConnectorInfo</name><argument_list>()</argument_list></call><operator>`</operator> <name>method</name>
<name>on</name> <operator>`</operator><name>AccumuloInputFormat</name><operator>`</operator> <name>or</name> <operator>`</operator><name>AccumuloOutputFormat</name><operator>`</operator> <name>should</name> <name>be</name> <name>the</name> <name>only</name> <name>necessary</name> <name><name>change</name><operator>.</operator> <name>Instead</name></name>
<name>of</name> <name>providing</name> <name>an</name> <name>instance</name> <name>of</name> <name>a</name> <operator>`</operator><name>KerberosToken</name><operator>`</operator></expr><operator>,</operator> <expr><name>the</name> <name>user</name> <name>must</name> <name>call</name> <operator>`</operator><name><name>SecurityOperations</name><operator>.</operator><name>getDelegationToken</name></name><operator>`</operator>
<name>using</name> <name>a</name> <operator>`</operator><name>Connector</name><operator>`</operator> <name>obtained</name> <name>with</name> <name>that</name> <operator>`</operator><name>KerberosToken</name><operator>`</operator></expr><operator>,</operator> <expr><name>and</name> <name>pass</name> <name>the</name> <operator>`</operator><name>DelegationToken</name><operator>`</operator> <name>to</name>
<operator>`</operator><name>setConnectorInfo</name><operator>`</operator> <name>instead</name> <name>of</name> <name>the</name> <operator>`</operator><name>KerberosToken</name><operator>`</operator><operator>.</operator> <name>It</name> <name>is</name> <name>expected</name> <name>that</name> <name>the</name> <name>user</name> <name>launching</name>
<name>the</name> <name>MapReduce</name> <name>job</name> <name>is</name> <name>already</name> <name>logged</name> <name>in</name> <name>via</name> <name>Kerberos</name> <name>via</name> <name>a</name> <name>keytab</name> <name>or</name> <name>via</name> <name>a</name> <name>locally</name><operator>-</operator><name>cached</name>
<name>Kerberos</name> <name>ticket</name><operator>-</operator><name>granting</name><operator>-</operator><call><name>ticket</name> <argument_list>(<argument><expr><name>TGT</name></expr></argument>)</argument_list></call><operator>.</operator>

<index>[<expr><name>source</name></expr><operator>,</operator><name>java</name>]</index>
<operator>--</operator><operator>--</operator>
<name>Instance</name> <name>instance</name> <operator>=</operator> <call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>KerberosToken</name></type> <name>kt</name> <init>= <expr><operator>new</operator> <call><name>KerberosToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>getConnector</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>kt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DelegationToken</name></type> <name>dt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>securityOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDelegationToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// Reading from Accumulo</comment>
<expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Writing to Accumulo</comment>
<expr_stmt><expr><call><name><name>AccumuloOutputFormat</name><operator>.</operator><name>setConnectorInfo</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><operator>--</operator>

<name>If</name> <name>the</name> <name>user</name> <name>passes</name> <name>a</name> <operator>`</operator><name>KerberosToken</name><operator>`</operator> <name>to</name> <name>the</name> <operator>`</operator><name>setConnectorInfo</name><operator>`</operator> <name>method</name></expr><operator>,</operator> <expr><name>the</name> <name>implementation</name> <name>will</name>
<name>attempt</name> <name>to</name> <name>obtain</name> <name>a</name> <operator>`</operator><name>DelegationToken</name><operator>`</operator> <name>automatically</name></expr><operator>,</operator> <expr><name>but</name> <name>this</name> <name>does</name> <name>have</name> <name>limitations</name>
<name>based</name> <name>on</name> <name>the</name> <name>other</name> <name>MapReduce</name> <name>configuration</name> <name>methods</name> <name>already</name> <name>called</name> <name>and</name> <name>permissions</name> <name>granted</name>
<name>to</name> <name>the</name> <name>calling</name> <name><name>user</name><operator>.</operator> <name>It</name></name> <name>is</name> <name>best</name></expr></expr_stmt> <for>for the user to acquire the DelegationToken on their own
and provide it directly to `setConnectorInfo`.

Users must have the `DELEGATION_TOKEN` system permission to call the `getDelegationToken`
method. The obtained delegation token is only valid for the requesting user for a period
of time dependent on Accumulo's configuration (`general.delegation.token.lifetime`).

It is also possible to obtain and use `DelegationToken`s outside of the context
of MapReduce.

[source,java]
----
String principal = "user@REALM";
Instance instance = getInstance();
Connector connector = instance.getConnector(principal, new KerberosToken());
DelegationToken delegationToken = connector.securityOperations().getDelegationToken();

Connector dtConnector = instance.getConnector(principal, delegationToken);
----

Use of the `dtConnector` will perform each operation as the original user, but without
their Kerberos credentials.

For the duration of validity of the `DelegationToken`, the user *must* take the necessary precautions
to protect the `DelegationToken` from prying eyes as it can be used by any user on any host to impersonate
the user who requested the `DelegationToken`. YARN ensures that passing the delegation token from the client
JVM to each YARN task is secure, even in multi-tenant instances.

 ==== Debugging
 
 *Q*: I have valid Kerberos credentials and a correct client configuration file but 
diff --git a/fate/src/main/java/org/apache/accumulo/fate/zookeeper/IZooReader.java b/fate/src/main/java/org/apache/accumulo/fate/zookeeper/IZooReader.java
index 610b1bd22..19235827c 100644
-- a/fate/src/main/java/org/apache/accumulo/fate/zookeeper/IZooReader.java
++ b/fate/src/main/java/org/apache/accumulo/fate/zookeeper/IZooReader.java
@@ -20,6 +20,7 @@ import java.util.List;
 
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.data.ACL;
 import org.apache.zookeeper.data.Stat;
 
 public interface IZooReader {
@@ -28,6 +29,8 @@ public interface IZooReader {
 
   byte[] getData(String zPath, boolean watch, Stat stat) throws KeeperException, InterruptedException;
 
  byte[] getData(String zPath, Watcher watcher, Stat stat) throws KeeperException, InterruptedException;

   Stat getStatus(String zPath) throws KeeperException, InterruptedException;
 
   Stat getStatus(String zPath, Watcher watcher) throws KeeperException, InterruptedException;
@@ -42,4 +45,5 @@ public interface IZooReader {
 
   void sync(final String path) throws KeeperException, InterruptedException;
 
  List&lt;ACL&gt; getACL(String zPath, Stat stat) throws KeeperException, InterruptedException;
 }
diff --git a/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReader.java b/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReader.java
index 5706cf374..707959cc4 100644
-- a/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReader.java
++ b/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReader.java
@@ -20,12 +20,14 @@ import java.util.List;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
import org.apache.accumulo.fate.zookeeper.ZooUtil.ZooKeeperConnectionInfo;
 import org.apache.log4j.Logger;
 import org.apache.zookeeper.AsyncCallback.VoidCallback;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.KeeperException.Code;
 import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.ZooKeeper;
import org.apache.zookeeper.data.ACL;
 import org.apache.zookeeper.data.Stat;
 
 public class ZooReader implements IZooReader {
@@ -34,6 +36,7 @@ public class ZooReader implements IZooReader {
   protected String keepers;
   protected int timeout;
   private final RetryFactory retryFactory;
  private final ZooKeeperConnectionInfo info;
 
   protected ZooKeeper getSession(String keepers, int timeout, String scheme, byte[] auth) {
     return ZooSession.getSession(keepers, timeout, scheme, auth);
@@ -82,6 +85,25 @@ public class ZooReader implements IZooReader {
     }
   }
 
  @Override
  public byte[] getData(String zPath, Watcher watcher, Stat stat) throws KeeperException, InterruptedException {
    final Retry retry = getRetryFactory().create();
    while (true) {
      try {
        return getZooKeeper().getData(zPath, watcher, stat);
      } catch (KeeperException e) {
        final Code code = e.code();
        if (code == Code.CONNECTIONLOSS || code == Code.OPERATIONTIMEOUT || code == Code.SESSIONEXPIRED) {
          retryOrThrow(retry, e);
        } else {
          throw e;
        }
      }

      retry.waitForNextAttempt();
    }
  }

   @Override
   public Stat getStatus(String zPath) throws KeeperException, InterruptedException {
     final Retry retry = getRetryFactory().create();
@@ -220,9 +242,15 @@ public class ZooReader implements IZooReader {
     }
   }
 
  @Override
  public List&lt;ACL&gt; getACL(String zPath, Stat stat) throws KeeperException, InterruptedException {
    return ZooUtil.getACL(info, zPath, stat);
  }

   public ZooReader(String keepers, int timeout) {
     this.keepers = keepers;
     this.timeout = timeout;
     this.retryFactory = RetryFactory.DEFAULT_INSTANCE;
    this.info = new ZooKeeperConnectionInfo(keepers, timeout, null, null);
   }
 }
diff --git a/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooUtil.java b/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooUtil.java
index 805bfffef..abb1aeb01 100644
-- a/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooUtil.java
++ b/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooUtil.java
@@ -518,4 +518,22 @@ public class ZooUtil {
     }
   }
 
  public static List&lt;ACL&gt; getACL(ZooKeeperConnectionInfo info, String zPath, Stat stat) throws KeeperException, InterruptedException {
    final Retry retry = RETRY_FACTORY.create();
    while (true) {
      try {
        return getZooKeeper(info).getACL(zPath, stat);
      } catch (KeeperException e) {
        final Code c = e.code();
        if (c == Code.CONNECTIONLOSS || c == Code.OPERATIONTIMEOUT || c == Code.SESSIONEXPIRED) {
          retryOrThrow(retry, e);
        } else {
          throw e;
        }
      }

      retry.waitForNextAttempt();
    }
  }

 }
diff --git a/proxy/src/main/java/org/apache/accumulo/proxy/Proxy.java b/proxy/src/main/java/org/apache/accumulo/proxy/Proxy.java
index f9039be94..e97481c83 100644
-- a/proxy/src/main/java/org/apache/accumulo/proxy/Proxy.java
++ b/proxy/src/main/java/org/apache/accumulo/proxy/Proxy.java
@@ -25,15 +25,17 @@ import java.util.Properties;
 
 import org.apache.accumulo.core.cli.Help;
 import org.apache.accumulo.core.client.ClientConfiguration;
import org.apache.accumulo.core.client.ClientConfiguration.ClientProperty;
 import org.apache.accumulo.core.client.impl.ClientContext;
import org.apache.accumulo.core.client.security.tokens.KerberosToken;
 import org.apache.accumulo.core.conf.AccumuloConfiguration;
 import org.apache.accumulo.core.conf.Property;
import org.apache.accumulo.core.rpc.SaslConnectionParams;
 import org.apache.accumulo.core.rpc.SslConnectionParams;
 import org.apache.accumulo.minicluster.MiniAccumuloCluster;
 import org.apache.accumulo.proxy.thrift.AccumuloProxy;
 import org.apache.accumulo.server.metrics.MetricsFactory;
 import org.apache.accumulo.server.rpc.RpcWrapper;
import org.apache.accumulo.server.rpc.SaslServerConnectionParams;
 import org.apache.accumulo.server.rpc.ServerAddress;
 import org.apache.accumulo.server.rpc.TServerUtils;
 import org.apache.accumulo.server.rpc.ThriftServerType;
@@ -204,16 +206,15 @@ public class Proxy implements KeywordExecutable {
 
     ClientConfiguration clientConf = ClientConfiguration.loadDefault();
     SslConnectionParams sslParams = null;
    SaslConnectionParams saslParams = null;
    SaslServerConnectionParams saslParams = null;
     switch (serverType) {
       case SSL:
         sslParams = SslConnectionParams.forClient(ClientContext.convertClientConfig(clientConf));
         break;
       case SASL:
        saslParams = SaslConnectionParams.forConfig(clientConf);
        if (null == saslParams) {
        if (!clientConf.getBoolean(ClientProperty.INSTANCE_RPC_SASL_ENABLED.getKey())) {
           log.fatal("SASL thrift server was requested but it is disabled in client configuration");
          throw new RuntimeException();
          throw new RuntimeException("SASL is not enabled in configuration");
         }
 
         // Kerberos needs to be enabled to use it
@@ -233,6 +234,9 @@ public class Proxy implements KeywordExecutable {
         UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
         log.info("Logged in as " + ugi.getUserName());
 
        KerberosToken token = new KerberosToken();
        saslParams = new SaslServerConnectionParams(clientConf, token, null);

         processor = new UGIAssumingProcessor(processor);
 
         break;
diff --git a/server/base/src/main/java/org/apache/accumulo/server/AccumuloServerContext.java b/server/base/src/main/java/org/apache/accumulo/server/AccumuloServerContext.java
index 84c38530a..6a59822bd 100644
-- a/server/base/src/main/java/org/apache/accumulo/server/AccumuloServerContext.java
++ b/server/base/src/main/java/org/apache/accumulo/server/AccumuloServerContext.java
@@ -18,19 +18,26 @@ package org.apache.accumulo.server;
 
 import java.io.IOException;
 
import org.apache.accumulo.core.client.AccumuloException;
import org.apache.accumulo.core.client.AccumuloSecurityException;
import org.apache.accumulo.core.client.Connector;
 import org.apache.accumulo.core.client.Instance;
import org.apache.accumulo.core.client.ZooKeeperInstance;
 import org.apache.accumulo.core.client.impl.ClientContext;
import org.apache.accumulo.core.client.impl.ConnectorImpl;
 import org.apache.accumulo.core.client.mock.MockInstance;
 import org.apache.accumulo.core.client.security.tokens.PasswordToken;
 import org.apache.accumulo.core.conf.AccumuloConfiguration;
 import org.apache.accumulo.core.conf.Property;
import org.apache.accumulo.core.rpc.SaslConnectionParams;
 import org.apache.accumulo.core.rpc.SslConnectionParams;
 import org.apache.accumulo.core.security.Credentials;
import org.apache.accumulo.server.client.HdfsZooInstance;
 import org.apache.accumulo.server.conf.ServerConfigurationFactory;
import org.apache.accumulo.server.rpc.SaslServerConnectionParams;
 import org.apache.accumulo.server.rpc.ThriftServerType;
 import org.apache.accumulo.server.security.SecurityUtil;
 import org.apache.accumulo.server.security.SystemCredentials;
import org.apache.accumulo.server.security.delegation.AuthenticationTokenSecretManager;
 import org.apache.hadoop.security.UserGroupInformation;
 
 import com.google.common.base.Preconditions;
@@ -41,14 +48,23 @@ import com.google.common.base.Preconditions;
 public class AccumuloServerContext extends ClientContext {
 
   private final ServerConfigurationFactory confFactory;
  private AuthenticationTokenSecretManager secretManager;
 
   /**
    * Construct a server context from the server's configuration
    */
   public AccumuloServerContext<control>(<init><expr><name>ServerConfigurationFactory</name> <name>confFactory</name></expr></init>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>confFactory</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block" format="javadoc">/**
   * Construct a server context from the server's configuration
   */</comment>
  <constructor><specifier>public</specifier> <name>AccumuloServerContext</name><parameter_list>(<parameter><decl><type><name>ServerConfigurationFactory</name></type> <name>confFactory</name></decl></parameter>, <parameter><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>confFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getCredentials</name><argument_list>(<argument><expr><call><name><name>confFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>confFactory</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>confFactory</name></name> <operator>=</operator> <name>confFactory</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name>getServerSaslParams</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secretManager</name></name> <operator>=</operator> <name>secretManager</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name>getSaslParams</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <comment type="line">// Server-side "client" check to make sure we're logged in as a user we expect to be</comment>
       <expr_stmt><expr><call><name>enforceKerberosLogin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">65</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloServerContext</name> extends <name>ClientContext</name> <block>{
     <expr><name>UserGroupInformation</name> <name>loginUser</name></expr>;</block></expr></expr_stmt>
     <try>try <block>{<block_content>
       <comment type="line">// The system user should be logged in via keytab when the process is started, not the currentUser() like KerberosToken</comment>
      <expr_stmt><expr><name>loginUser</name> <operator>=</operator> <call><name><name>UserGroupInformation</name><operator>.</operator><name>getLoginUser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>loginUser</name> <operator>=</operator> <call><name><name>UserGroupInformation</name><operator>.</operator><name>getCurrentUser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Could not get login user"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></catch></try>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">99</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">115</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloServerContext</name> extends <name>ClientContext</name> <block>{
     <return>return <expr><call><name><name>SslConnectionParams</name><operator>.</operator><name>forServer</name></name><argument_list>(<argument><expr><call><name>getConfiguration</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <name>SaslConnectionParams</name></type> <name>getServerSaslParams</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Not functionally different than the client SASL params, just uses the site configuration</comment>
    <return>return <expr><call><name><name>SaslConnectionParams</name><operator>.</operator><name>forConfig</name></name><argument_list>(<argument><expr><call><name>getServerConfigurationFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSiteConfiguration</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>SaslServerConnectionParams</name></type> <name>getSaslParams</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>AccumuloConfiguration</name></type> <name>conf</name> <init>= <expr><call><name>getServerConfigurationFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSiteConfiguration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>conf</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>SaslServerConnectionParams</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name>getCredentials</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>secretManager</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <comment type="block" format="javadoc">/**
@@ -130,4 +150,28 @@ public class AccumuloServerContext extends ClientContext {
     }
   }
 
  public void setSecretManager(AuthenticationTokenSecretManager secretManager) {
    this.secretManager = secretManager;
  }

  public AuthenticationTokenSecretManager getSecretManager() {
    return secretManager;
  }

  // Need to override this from ClientContext to ensure that HdfsZooInstance doesn't "downcast"
  // the AccumuloServerContext into a ClientContext (via the copy-constructor on ClientContext)
  @Override
  public Connector getConnector() throws AccumuloException, AccumuloSecurityException {
    // avoid making more connectors than necessary
    if (conn == null) {
      if (inst instanceof ZooKeeperInstance || inst instanceof HdfsZooInstance) {
        // reuse existing context
        conn = new ConnectorImpl(this);
      } else {
        Credentials c = getCredentials();
        conn = getInstance().getConnector(c.getPrincipal(), c.getToken());
      }
    }
    return conn;
  }
 }
diff --git a/server/base/src/main/java/org/apache/accumulo/server/master/state/MetaDataStateStore.java b/server/base/src/main/java/org/apache/accumulo/server/master/state/MetaDataStateStore.java
index bf56a7a22..7ee6f0ccf 100644
-- a/server/base/src/main/java/org/apache/accumulo/server/master/state/MetaDataStateStore.java
++ b/server/base/src/main/java/org/apache/accumulo/server/master/state/MetaDataStateStore.java
@@ -30,7 +30,6 @@ import org.apache.accumulo.core.metadata.schema.MetadataSchema;
 import org.apache.accumulo.server.AccumuloServerContext;
 
 public class MetaDataStateStore extends TabletStateStore {
  // private static final Logger log = Logger.getLogger(MetaDataStateStore.class);
 
   private static final int THREADS = 4;
   private static final int LATENCY = 1000;
diff --git a/server/base/src/main/java/org/apache/accumulo/server/rpc/SaslServerConnectionParams.java b/server/base/src/main/java/org/apache/accumulo/server/rpc/SaslServerConnectionParams.java
new file mode 100644
index 000000000..dc0b81a33
-- /dev/null
++ b/server/base/src/main/java/org/apache/accumulo/server/rpc/SaslServerConnectionParams.java
@@ -0,0 +1,69 @@
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>rpc</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>KerberosToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>SystemCredentials</name><operator>.</operator><name>SystemToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name><operator>.</operator><name>AuthenticationTokenSecretManager</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Server-side SASL connection information
 */</comment>
<class><specifier>public</specifier> class <name>SaslServerConnectionParams</name> <super_list><extends>extends <super><name>SaslConnectionParams</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SaslServerConnectionParams</name><parameter_list>(<parameter><decl><type><name>AccumuloConfiguration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SaslServerConnectionParams</name><parameter_list>(<parameter><decl><type><name>AccumuloConfiguration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSecretManager</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SaslServerConnectionParams</name><parameter_list>(<parameter><decl><type><name>ClientConfiguration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SaslServerConnectionParams</name><parameter_list>(<parameter><decl><type><name>ClientConfiguration</name></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSecretManager</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>void</name></type> <name>updateFromToken</name><parameter_list>(<parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Servers should never have a delegation token -- only a strong kerberos identity</comment>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>KerberosToken</name> <operator>||</operator> <name>token</name> <operator>instanceof</operator> <name>SystemToken</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mechanism</name> <operator>=</operator> <name><name>SaslMechanism</name><operator>.</operator><name>GSSAPI</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Cannot determine SASL mechanism for token class: "</literal> <operator>+</operator> <call><name><name>token</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>AuthenticationTokenSecretManager</name></type> <name>getSecretManager</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>secretManager</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setSecretManager</name><parameter_list>(<parameter><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secretManager</name></name> <operator>=</operator> <name>secretManager</name></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslServerDigestCallbackHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslServerDigestCallbackHandler</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..c43f7edbd</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslServerDigestCallbackHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">113</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>rpc</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>Callback</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>NameCallback</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>PasswordCallback</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>UnsupportedCallbackException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>sasl</name><operator>.</operator><name>AuthorizeCallback</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>sasl</name><operator>.</operator><name>RealmCallback</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslDigestCallbackHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name><operator>.</operator><name>AuthenticationTokenSecretManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>SecretManager</name><operator>.</operator><name>InvalidToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * CallbackHandler for SASL DIGEST-MD5 mechanism. Modified copy from Hadoop, uses our TokenIdentifier and SecretManager implementations
 */</comment>
<class><specifier>public</specifier> class <name>SaslServerDigestCallbackHandler</name> <super_list><extends>extends <super><name>SaslDigestCallbackHandler</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SaslServerDigestCallbackHandler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NAME</name> <init>= <expr><call><name><name>SaslServerDigestCallbackHandler</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SaslServerDigestCallbackHandler</name><parameter_list>(<parameter><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secretManager</name></name> <operator>=</operator> <name>secretManager</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>private</specifier> <name>AuthenticationTokenIdentifier</name></type> <name>getIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidToken</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>tokenId</name> <init>= <expr><call><name>decodeIdentifier</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>tokenIdentifier</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>createIdentifier</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>tokenIdentifier</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>tokenId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>(</operator><name>InvalidToken</name><operator>)</operator> <operator>new</operator> <call><name>InvalidToken</name><argument_list>(<argument><expr><literal type="string">"Can't de-serialize tokenIdentifier"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>initCause</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <return>return <expr><name>tokenIdentifier</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>handle</name><parameter_list>(<parameter><decl><type><name><name>Callback</name><index>[]</index></name></type> <name>callbacks</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidToken</name></expr></argument>, <argument><expr><name>UnsupportedCallbackException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>NameCallback</name></type> <name>nc</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PasswordCallback</name></type> <name>pc</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthorizeCallback</name></type> <name>ac</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Callback</name></type> <name>callback</name> <range>: <expr><name>callbacks</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>callback</name> <operator>instanceof</operator> <name>AuthorizeCallback</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ac</name> <operator>=</operator> <operator>(</operator><name>AuthorizeCallback</name><operator>)</operator> <name>callback</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>callback</name> <operator>instanceof</operator> <name>NameCallback</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nc</name> <operator>=</operator> <operator>(</operator><name>NameCallback</name><operator>)</operator> <name>callback</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>callback</name> <operator>instanceof</operator> <name>PasswordCallback</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>(</operator><name>PasswordCallback</name><operator>)</operator> <name>callback</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>callback</name> <operator>instanceof</operator> <name>RealmCallback</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue> <comment type="line">// realm is ignored</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedCallbackException</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized SASL DIGEST-MD5 Callback"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>tokenIdentifier</name> <init>= <expr><call><name>getIdentifier</name><argument_list>(<argument><expr><call><name><name>nc</name><operator>.</operator><name>getDefaultName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>secretManager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>password</name> <init>= <expr><call><name>getPassword</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>tokenIdentifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>UserGroupInformation</name></type> <name>user</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>user</name> <operator>=</operator> <call><name><name>tokenIdentifier</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Set the principal since we already deserialized the token identifier</comment>
      <expr_stmt><expr><call><name><name>UGIAssumingProcessor</name><operator>.</operator><name>getRpcPrincipalThreadLocal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"SASL server DIGEST-MD5 callback: setting password for client: {}"</literal></expr></argument>, <argument><expr><call><name><name>tokenIdentifier</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>pc</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ac</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>authid</name> <init>= <expr><call><name><name>ac</name><operator>.</operator><name>getAuthenticationID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>authzid</name> <init>= <expr><call><name><name>ac</name><operator>.</operator><name>getAuthorizationID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>authid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>authzid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ac</name><operator>.</operator><name>setAuthorized</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>ac</name><operator>.</operator><name>setAuthorized</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>ac</name><operator>.</operator><name>isAuthorized</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>username</name> <init>= <expr><call><name>getIdentifier</name><argument_list>(<argument><expr><name>authzid</name></expr></argument>, <argument><expr><name>secretManager</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUser</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUserName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"SASL server DIGEST-MD5 callback: setting canonicalized client ID: {}"</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ac</name><operator>.</operator><name>setAuthorizedID</name></name><argument_list>(<argument><expr><name>authzid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>NAME</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>TCredentialsUpdatingInvocationHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>TCredentialsUpdatingInvocationHandler</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f85505d2e</name><operator>..</operator><literal type="number">150f0d35d</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>TCredentialsUpdatingInvocationHandler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>TCredentialsUpdatingInvocationHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>SecurityErrorCode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>KerberosToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name><operator>.</operator><name>SaslMechanism</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>SystemCredentials</name><operator>.</operator><name>SystemToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>UserImpersonation</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">81</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">83</literal></expr><operator>,</operator><expr><literal type="number">19</literal> @@ <specifier>public</specifier> <name>class</name> <name><name>TCredentialsUpdatingInvocationHandler</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name> implements <name>InvocationHandl</name></expr></expr_stmt>
     </block_content>}</block></function>
 
     <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AuthenticationToken</name></extends></argument>&gt;</argument_list></name></type> <name>tokenClass</name> <init>= <expr><call><name>getTokenClassFromName</name><argument_list>(<argument><expr><name><name>tcreds</name><operator>.</operator><name>tokenClassName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// The Accumulo principal extracted from the SASL transport</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>principal</name> <init>= <expr><call><name><name>UGIAssumingProcessor</name><operator>.</operator><name>rpcPrincipal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// If we authenticated the user over DIGEST-MD5 and they have a DelegationToken, the principals should match</comment>
    <if_stmt><if>if <condition>(<expr><name><name>SaslMechanism</name><operator>.</operator><name>DIGEST_MD5</name></name> <operator>==</operator> <call><name><name>UGIAssumingProcessor</name><operator>.</operator><name>rpcMechanism</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>DelegationToken</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>tokenClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>principal</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tcreds</name><operator>.</operator><name>principal</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"{} issued RPC with delegation token over DIGEST-MD5 as the Accumulo principal {}. Disallowing RPC"</literal></expr></argument>, <argument><expr><name>principal</name></expr></argument>, <argument><expr><name><name>tcreds</name><operator>.</operator><name>principal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>ThriftSecurityException</name><argument_list>(<argument><expr><literal type="string">"RPC principal did not match provided Accumulo principal"</literal></expr></argument>, <argument><expr><name><name>SecurityErrorCode</name><operator>.</operator><name>BAD_CREDENTIALS</name></name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

     <comment type="line">// If the authentication token isn't a KerberosToken</comment>
     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>KerberosToken</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>tokenClass</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SystemToken</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>tokenClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <comment type="line">// Don't include messages about SystemToken since it's internal</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">88</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">103</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@ <specifier>public</specifier> <name>class</name> <name><name>TCredentialsUpdatingInvocationHandler</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name> implements <name>InvocationHandl</name>
       <throw>throw <argument_list>new <argument><expr><call><name>ThriftSecurityException</name><argument_list>(<argument><expr><literal type="string">"Did not receive a valid token"</literal></expr></argument>, <argument><expr><name><name>SecurityErrorCode</name><operator>.</operator><name>BAD_CREDENTIALS</name></name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
 
    <comment type="line">// The Accumulo principal extracted from the SASL transport</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>principal</name> <init>= <expr><call><name><name>UGIAssumingProcessor</name><operator>.</operator><name>rpcPrincipal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

     <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>principal</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Found KerberosToken in TCredentials, but did not receive principal from SASL processor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <throw>throw <expr><operator>new</operator> <call><name>ThriftSecurityException</name><argument_list>(<argument><expr><literal type="string">"Did not extract principal from Thrift SASL processor"</literal></expr></argument>, <argument><expr><name><name>SecurityErrorCode</name><operator>.</operator><name>BAD_CREDENTIALS</name></name></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>TServerUtils</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>TServerUtils</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f1f896383</name><operator>..</operator><literal type="number">558b02e19</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>TServerUtils</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>TServerUtils</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLServerSocket</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SslConnectionParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>ThriftUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>UGIAssumingTransportFactory</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">150</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">149</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TServerUtils</name> <block>{
         <try>try <block>{<block_content>
           <decl_stmt><decl><type><name>HostAndPort</name></type> <name>addr</name> <init>= <expr><call><name><name>HostAndPort</name><operator>.</operator><name>fromParts</name></name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <return>return <expr><call><name><name>TServerUtils</name><operator>.</operator><name>startTServer</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>serverType</name></expr></argument>, <argument><expr><name>timedProcessor</name></expr></argument>, <argument><expr><name>serverName</name></expr></argument>, <argument><expr><name>threadName</name></expr></argument>, <argument><expr><name>minThreads</name></expr></argument>, <argument><expr><name>simpleTimerThreadpoolSize</name></expr></argument>,
              <argument><expr><name>timeBetweenThreadChecks</name></expr></argument>, <argument><expr><name>maxMessageSize</name></expr></argument>, <argument><expr><call><name><name>service</name><operator>.</operator><name>getServerSslParams</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>service</name><operator>.</operator><name>getServerSaslParams</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>service</name><operator>.</operator><name>getClientTimeoutInMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
              <expr_stmt><expr><name>timeBetweenThreadChecks</name></expr><operator>,</operator> <expr><name>maxMessageSize</name></expr><operator>,</operator> <expr><call><name><name>service</name><operator>.</operator><name>getServerSslParams</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name><name>service</name><operator>.</operator><name>getSaslParams</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name><name>service</name><operator>.</operator><name>getClientTimeoutInMillis</name></name><argument_list>()</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></try>
         }</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>TTransportException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Unable to start TServer"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if <condition>(<expr><call><name><name>ex</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>ex</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>BindException</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">380</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">379</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TServerUtils</name> <block>{
   }</block>
 
   <specifier>public</specifier> <specifier>static</specifier> <name>ServerAddress</name> <call><name>createSaslThreadPoolServer</name><argument_list>(<argument><expr><name>HostAndPort</name> <name>address</name></expr></argument>, <argument><expr><name>TProcessor</name> <name>processor</name></expr></argument>, <argument><expr><name>TProtocolFactory</name> <name>protocolFactory</name></expr></argument>, <argument><expr><name>long</name> <name>socketTimeout</name></expr></argument>,
      <argument><expr><name>SaslConnectionParams</name> <name>params</name></expr></argument>, <argument><expr><name>final</name> <name>String</name> <name>serverName</name></expr></argument>, <argument><expr><name>String</name> <name>threadName</name></expr></argument>, <argument><expr><name>final</name> <name>int</name> <name>numThreads</name></expr></argument>, <argument><expr><name>final</name> <name>int</name> <name>numSTThreads</name></expr></argument>, <argument><expr><name>long</name> <name>timeBetweenThreadChecks</name></expr></argument>)</argument_list></call>
      <name>SaslServerConnectionParams</name> <name>params</name></expr><operator>,</operator> <expr><name>final</name> <name>String</name> <name>serverName</name></expr><operator>,</operator> <expr><name>String</name> <name>threadName</name></expr><operator>,</operator> <expr><name>final</name> <name>int</name> <name>numThreads</name></expr><operator>,</operator> <expr><name>final</name> <name>int</name> <name>numSTThreads</name></expr><operator>,</operator> <expr><name>long</name> <name>timeBetweenThreadChecks</name></expr></expr_stmt>)</block_content>
       <throws>throws <argument><expr><name>TTransportException</name> <block>{</block></expr></argument>
     <comment type="line">// We'd really prefer to use THsHaServer (or similar) to avoid 1 RPC == 1 Thread that the TThreadPoolServer does,</comment>
     <comment type="line">// but sadly this isn't the case. Because TSaslTransport needs to issue a handshake when it open()'s which will fail</comment>
@<argument>@ <expr><operator>-</operator><literal type="number">388</literal></expr></argument>,<argument><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">387</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TServerUtils</name></expr></argument></throws> <block>{<block_content>
     <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Creating SASL thread pool thrift server on listening on {}:{}"</literal></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getHostText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>TServerSocket</name></type> <name>transport</name> <init>= <expr><operator>new</operator> <call><name>TServerSocket</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>socketTimeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>hostname</name></decl>, <decl><type ref="prev"/><name>fqdn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>hostname</name></decl>, <decl><type ref="prev"/><name>fqdn</name></decl>;</decl_stmt>
     <try>try <block>{<block_content>
       <expr_stmt><expr><name>hostname</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getHostText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCanonicalHostName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>fqdn</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getLocalHost</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalHostName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">396</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">395</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@ <specifier>public</specifier> <name>class</name> <name>TServerUtils</name> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>TTransportException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
     }</block></expr></expr_stmt>
 
    <comment type="line">// If we can't get a real hostname from the provided host test, use the hostname from DNS for localhost</comment>
    <if_stmt><if>if <condition>(<expr><literal type="string">"0.0.0.0"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>fqdn</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

     <comment type="line">// ACCUMULO-3497 an easy sanity check we can perform for the user when SASL is enabled. Clients and servers have to agree upon the FQDN</comment>
     <comment type="line">// so that the SASL handshake can occur. If the provided hostname doesn't match the FQDN for this host, fail quickly and inform them to update</comment>
     <comment type="line">// their configuration.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><literal type="string">"0.0.0.0"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>hostname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>fqdn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>hostname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>fqdn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(
           <argument><expr><literal type="string">"Expected hostname of '{}' but got '{}'. Ensure the entries in the Accumulo hosts files (e.g. masters, slaves) are the FQDN for each host when using SASL."</literal></expr></argument>,
           <argument><expr><name>fqdn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">413</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">417</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TServerUtils</name> <block>{
       <throw>throw <argument_list>new <argument><expr><call><name>TTransportException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;
     }</block></expr></expr_stmt>
 
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Logged in as {}, creating TSsaslServerTransport factory as {}/{}"</literal></expr></argument>, <argument><expr><name>serverUser</name></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>getKerberosServerPrimary</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Logged in as {}, creating TSaslServerTransport factory with {}/{}"</literal></expr></argument>, <argument><expr><name>serverUser</name></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>getKerberosServerPrimary</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// Make the SASL transport factory with the instance and primary from the kerberos server principal, SASL properties</comment>
     <comment type="line">// and the SASL callback handler from Hadoop to ensure authorization ID is the authentication ID. Despite the 'protocol' argument seeming to be useless, it</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">422</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">426</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>TServerUtils</name> <block>{
     <expr><call><name><name>saslTransportFactory</name><operator>.</operator><name>addServerDefinition</name></name><argument_list>(<argument><expr><name><name>ThriftUtil</name><operator>.</operator><name>GSSAPI</name></name></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>getKerberosServerPrimary</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>getSaslProperties</name></name><argument_list>()</argument_list></call></expr></argument>,
         <argument><expr><operator>new</operator> <call><name><name>SaslRpcServer</name><operator>.</operator><name>SaslGssCallbackHandler</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt>
 
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>params</name><operator>.</operator><name>getSecretManager</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Adding DIGEST-MD5 server definition for delegation tokens"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>saslTransportFactory</name><operator>.</operator><name>addServerDefinition</name></name><argument_list>(<argument><expr><name><name>ThriftUtil</name><operator>.</operator><name>DIGEST_MD5</name></name></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>getKerberosServerPrimary</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>getSaslProperties</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><operator>new</operator> <call><name>SaslServerDigestCallbackHandler</name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>getSecretManager</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"SecretManager is null, not adding support for delegation token authentication"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

     <comment type="line">// Make sure the TTransportFactory is performing a UGI.doAs</comment>
     <decl_stmt><decl><type><name>TTransportFactory</name></type> <name>ugiTransportFactory</name> <init>= <expr><operator>new</operator> <call><name>UGIAssumingTransportFactory</name><argument_list>(<argument><expr><name>saslTransportFactory</name></expr></argument>, <argument><expr><name>serverUser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">440</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">452</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TServerUtils</name> <block>{
 
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>ServerAddress</name> <call><name>startTServer</name><argument_list>(<argument><expr><name>AccumuloConfiguration</name> <name>conf</name></expr></argument>, <argument><expr><name>HostAndPort</name> <name>address</name></expr></argument>, <argument><expr><name>ThriftServerType</name> <name>serverType</name></expr></argument>, <argument><expr><name>TProcessor</name> <name>processor</name></expr></argument>,
       <argument><expr><name>String</name> <name>serverName</name></expr></argument>, <argument><expr><name>String</name> <name>threadName</name></expr></argument>, <argument><expr><name>int</name> <name>numThreads</name></expr></argument>, <argument><expr><name>int</name> <name>numSTThreads</name></expr></argument>, <argument><expr><name>long</name> <name>timeBetweenThreadChecks</name></expr></argument>, <argument><expr><name>long</name> <name>maxMessageSize</name></expr></argument>, <argument><expr><name>SslConnectionParams</name> <name>sslParams</name></expr></argument>,
      <argument><expr><name>SaslConnectionParams</name> <name>saslParams</name></expr></argument>, <argument><expr><name>long</name> <name>serverSocketTimeout</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>TTransportException</name> <block>{
      <expr><name>SaslServerConnectionParams</name> <name>saslParams</name></expr>, <argument><expr><name>long</name> <name>serverSocketTimeout</name></expr></argument></block></expr></argument></throws></expr>) <throws>throws <argument><expr><name>TTransportException</name> <block>{</block></expr></argument></throws></block></expr></expr_stmt>
 
     <if_stmt><if>if <condition>(<expr><name><name>ThriftServerType</name><operator>.</operator><name>SASL</name></name> <operator>==</operator> <name>serverType</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>processor</name> <operator>=</operator> <call><name>updateSaslProcessor</name><argument_list>(<argument><expr><name>serverType</name></expr></argument>, <argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">452</literal></expr><operator>,</operator><expr><literal type="number">11</literal> <operator>+</operator><literal type="number">464</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>TServerUtils</name> <block>{
 
   <comment type="block" format="javadoc">/**
    * @see #startTServer(HostAndPort, ThriftServerType, TimedProcessor, TProtocolFactory, String, String, int, int, long, long, SslConnectionParams,
   *      SaslConnectionParams, long)
   *      org.apache.accumulo.core.rpc.SaslConnectionParams, long)
    */</comment>
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>ServerAddress</name> <call><name>startTServer</name><argument_list>(<argument><expr><name>HostAndPort</name> <name>address</name></expr></argument>, <argument><expr><name>ThriftServerType</name> <name>serverType</name></expr></argument>, <argument><expr><name>TimedProcessor</name> <name>processor</name></expr></argument>, <argument><expr><name>String</name> <name>serverName</name></expr></argument>, <argument><expr><name>String</name> <name>threadName</name></expr></argument>,
      <argument><expr><name>int</name> <name>numThreads</name></expr></argument>, <argument><expr><name>int</name> <name>numSTThreads</name></expr></argument>, <argument><expr><name>long</name> <name>timeBetweenThreadChecks</name></expr></argument>, <argument><expr><name>long</name> <name>maxMessageSize</name></expr></argument>, <argument><expr><name>SslConnectionParams</name> <name>sslParams</name></expr></argument>, <argument><expr><name>SaslConnectionParams</name> <name>saslParams</name></expr></argument>,
      <argument><expr><name>long</name> <name>serverSocketTimeout</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>TTransportException</name> <block>{
      <expr><name>int</name> <name>numThreads</name></expr>, <argument><expr><name>int</name> <name>numSTThreads</name></expr></argument>, <argument><expr><name>long</name> <name>timeBetweenThreadChecks</name></expr></argument>, <argument><expr><name>long</name> <name>maxMessageSize</name></expr></argument>, <argument><expr><name>SslConnectionParams</name> <name>sslParams</name></expr></argument>,
      <argument><expr><name>SaslServerConnectionParams</name> <name>saslParams</name></expr></argument>, <argument><expr><name>long</name> <name>serverSocketTimeout</name></expr></argument></block></expr></argument></throws></expr>) <throws>throws <argument><expr><name>TTransportException</name> <block>{</block></expr></argument></throws></block></expr></expr_stmt>
     <return>return <expr><call><name>startTServer</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>serverType</name></expr></argument>, <argument><expr><name>processor</name></expr></argument>, <argument><expr><call><name><name>ThriftUtil</name><operator>.</operator><name>protocolFactory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>serverName</name></expr></argument>, <argument><expr><name>threadName</name></expr></argument>, <argument><expr><name>numThreads</name></expr></argument>, <argument><expr><name>numSTThreads</name></expr></argument>,
         <argument><expr><name>timeBetweenThreadChecks</name></expr></argument>, <argument><expr><name>maxMessageSize</name></expr></argument>, <argument><expr><name>sslParams</name></expr></argument>, <argument><expr><name>saslParams</name></expr></argument>, <argument><expr><name>serverSocketTimeout</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">468</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">480</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>TServerUtils</name> <block>{
    <expr><operator>*</operator><operator>/</operator>
   <specifier>public</specifier> <specifier>static</specifier> <name>ServerAddress</name> <call><name>startTServer</name><argument_list>(<argument><expr><name>HostAndPort</name> <name>address</name></expr></argument>, <argument><expr><name>ThriftServerType</name> <name>serverType</name></expr></argument>, <argument><expr><name>TimedProcessor</name> <name>processor</name></expr></argument>, <argument><expr><name>TProtocolFactory</name> <name>protocolFactory</name></expr></argument>,
       <argument><expr><name>String</name> <name>serverName</name></expr></argument>, <argument><expr><name>String</name> <name>threadName</name></expr></argument>, <argument><expr><name>int</name> <name>numThreads</name></expr></argument>, <argument><expr><name>int</name> <name>numSTThreads</name></expr></argument>, <argument><expr><name>long</name> <name>timeBetweenThreadChecks</name></expr></argument>, <argument><expr><name>long</name> <name>maxMessageSize</name></expr></argument>, <argument><expr><name>SslConnectionParams</name> <name>sslParams</name></expr></argument>,
      <argument><expr><name>SaslConnectionParams</name> <name>saslParams</name></expr></argument>, <argument><expr><name>long</name> <name>serverSocketTimeout</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>TTransportException</name> <block>{
      <expr><name>SaslServerConnectionParams</name> <name>saslParams</name></expr>, <argument><expr><name>long</name> <name>serverSocketTimeout</name></expr></argument></block></expr></argument></throws></expr>) <throws>throws <argument><expr><name>TTransportException</name> <block>{
 
     <comment type="line">// This is presently not supported. It's hypothetically possible, I believe, to work, but it would require changes in how the transports</comment>
     <comment type="line">// work at the Thrift layer to ensure that both the SSL and SASL handshakes function. SASL's quality of protection addresses privacy issues.</comment>
<expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>UGIAssumingProcessor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>UGIAssumingProcessor</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>ab106a6a3</name><operator>..</operator><literal type="number">48d18f4bc</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>UGIAssumingProcessor</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>UGIAssumingProcessor</name><operator>.</operator><name>java</name></name></expr></block></expr></argument>
@<argument>@ <expr><operator>-</operator><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">7</literal> @@</expr></argument></throws></block></expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 
 <import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>sasl</name><operator>.</operator><name>SaslServer</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name><operator>.</operator><name>SaslMechanism</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TProcessor</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">40</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">41</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>UGIAssumingProcessor</name> implements <name>TProcessor</name> <block>{
   <expr><specifier>private</specifier> <specifier>static</specifier> <name>final</name> <name>Logger</name> <name>log</name> <operator>=</operator> <call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>UGIAssumingProcessor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;
 
   <specifier>public</specifier> <specifier>static</specifier> <name>final</name> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name> <name>rpcPrincipal</name> <operator>=</operator> <operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>SaslMechanism</name></argument>&gt;</argument_list></name></type> <name>rpcMechanism</name> <init>= <expr><operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>SaslMechanism</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TProcessor</name></type> <name>wrapped</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>UserGroupInformation</name></type> <name>loginUser</name></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">60</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@ <specifier>public</specifier> <name>class</name> <name>UGIAssumingProcessor</name> implements <name>TProcessor</name> <block>{
     <return>return <expr><call><name><name>rpcPrincipal</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getRpcPrincipalThreadLocal</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>rpcPrincipal</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SaslMechanism</name></type> <name>rpcMechanism</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>rpcMechanism</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>boolean</name></type> <name>process</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TProtocol</name></type> <name>inProt</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>TProtocol</name></type> <name>outProt</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name>TTransport</name></type> <name>trans</name> <init>= <expr><call><name><name>inProt</name><operator>.</operator><name>getTransport</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">71</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">82</literal></expr><operator>,</operator><expr><literal type="number">42</literal> @@ <specifier>public</specifier> <name>class</name> <name>UGIAssumingProcessor</name> implements <name>TProcessor</name> <block>{
     <expr><name>String</name> <name>authId</name> <operator>=</operator> <call><name><name>saslServer</name><operator>.</operator><name>getAuthorizationID</name></name><argument_list>()</argument_list></call></expr>;
     <name>String</name> <name>endUser</name> <operator>=</operator> <name>authId</name></block></expr>;</expr_stmt>
 
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Received SASL RPC from {}"</literal></expr></argument>, <argument><expr><name>endUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SaslMechanism</name></type> <name>mechanism</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>mechanism</name> <operator>=</operator> <call><name><name>SaslMechanism</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>saslServer</name><operator>.</operator><name>getMechanismName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to process RPC with SASL mechanism {}"</literal></expr></argument>, <argument><expr><call><name><name>saslServer</name><operator>.</operator><name>getMechanismName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><name>e</name></expr>;</throw>
    </block_content>}</block></catch></try>
 
    <decl_stmt><decl><type><name>UserGroupInformation</name></type> <name>clientUgi</name> <init>= <expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createProxyUser</name></name><argument_list>(<argument><expr><name>endUser</name></expr></argument>, <argument><expr><name>loginUser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>remoteUser</name> <init>= <expr><call><name><name>clientUgi</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>mechanism</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>GSSAPI</name></expr>:</case>
        <decl_stmt><decl><type><name>UserGroupInformation</name></type> <name>clientUgi</name> <init>= <expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>createProxyUser</name></name><argument_list>(<argument><expr><name>endUser</name></expr></argument>, <argument><expr><name>loginUser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>remoteUser</name> <init>= <expr><call><name><name>clientUgi</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <try>try <block>{<block_content>
      <comment type="line">// Set the principal in the ThreadLocal for access to get authorizations</comment>
      <expr_stmt><expr><call><name><name>rpcPrincipal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>remoteUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
          <comment type="line">// Set the principal in the ThreadLocal for access to get authorizations</comment>
          <expr_stmt><expr><call><name><name>rpcPrincipal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>remoteUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
      <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>inProt</name></expr></argument>, <argument><expr><name>outProt</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <comment type="line">// Unset the principal after we're done using it just to be sure that it's not incorrectly</comment>
      <comment type="line">// used in the same thread down the line.</comment>
      <expr_stmt><expr><call><name><name>rpcPrincipal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>inProt</name></expr></argument>, <argument><expr><name>outProt</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></finally> <finally>finally <block>{<block_content>
          <comment type="line">// Unset the principal after we're done using it just to be sure that it's not incorrectly</comment>
          <comment type="line">// used in the same thread down the line.</comment>
          <expr_stmt><expr><call><name><name>rpcPrincipal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
      <case>case <expr><name>DIGEST_MD5</name></expr>:</case>
        <comment type="line">// The CallbackHandler, after deserializing the TokenIdentifier in the name, has already updated</comment>
        <comment type="line">// the rpcPrincipal for us. We don't need to do it again here.</comment>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>rpcMechanism</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>mechanism</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>inProt</name></expr></argument>, <argument><expr><name>outProt</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <finally>finally <block>{<block_content>
          <comment type="line">// Unset the mechanism after we're done using it just to be sure that it's not incorrectly</comment>
          <comment type="line">// used in the same thread down the line.</comment>
          <expr_stmt><expr><call><name><name>rpcMechanism</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
      <default>default:</default>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Cannot process SASL mechanism "</literal> <operator>+</operator> <name>mechanism</name></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></try>
   </block_content>}</block></switch>
 </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>AuditedSecurityOperation</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>AuditedSecurityOperation</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>cc7a7cdc7</name><operator>..</operator><literal type="number">283cba3e8</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>AuditedSecurityOperation</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>AuditedSecurityOperation</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">454</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">454</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>AuditedSecurityOperation</name> extends <name>SecurityOperation</name> <block>{
       <throw>throw <argument_list>e</argument_list></throw>;
     }</block></expr></expr_stmt>
   </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DELEGATION_TOKEN_AUDIT_TEMPLATE</name> <init>= <expr><literal type="string">"requested delegation token"</literal></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>canObtainDelegationToken</name><parameter_list>(<parameter><decl><type><name>TCredentials</name></type> <name>credentials</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ThriftSecurityException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>canObtainDelegationToken</name></name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>audit</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>DELEGATION_TOKEN_AUDIT_TEMPLATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ThriftSecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>audit</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>DELEGATION_TOKEN_AUDIT_TEMPLATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><name>e</name></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SecurityOperation</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SecurityOperation</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">7adb46ec8</literal><operator>..</operator><literal type="number">0b0f212f1</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SecurityOperation</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SecurityOperation</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">830</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">830</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>SecurityOperation</name> <block>{
     <return>return <expr><call><name>hasSystemPermissionWithNamespaceId</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>, <argument><expr><name><name>SystemPermission</name><operator>.</operator><name>ALTER_NAMESPACE</name></name></expr></argument>, <argument><expr><name>namespaceId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
   }</block></expr></expr_stmt>
 
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canObtainDelegationToken</name><parameter_list>(<parameter><decl><type><name>TCredentials</name></type> <name>credentials</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ThriftSecurityException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>authenticate</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>hasSystemPermission</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>, <argument><expr><name><name>SystemPermission</name><operator>.</operator><name>OBTAIN_DELEGATION_TOKEN</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></try>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SystemCredentials</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SystemCredentials</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">51d50a1f9</literal><operator>..</operator><literal type="number">6a915c6e2</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SystemCredentials</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name><name>SystemCredentials</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>PasswordToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>SiteConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Credentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">68</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>final</name> <name>class</name> <name>SystemCredentials</name> extends <name>Credentials</name> <block>{
     <expr><call><name>check_permission</name><argument_list>()</argument_list></call></expr>;
     <name>String</name> <name>principal</name> <operator>=</operator> <name>SYSTEM_PRINCIPAL</name></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>AccumuloConfiguration</name></type> <name>conf</name> <init>= <expr><call><name><name>SiteConfiguration</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SaslConnectionParams</name></type> <name>saslParams</name> <init>= <expr><call><name><name>SaslConnectionParams</name><operator>.</operator><name>forConfig</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>saslParams</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>conf</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
       <comment type="line">// Use the server's kerberos principal as the Accumulo principal. We could also unwrap the principal server-side, but the principal for SystemCredentials</comment>
       <comment type="line">// isnt' actually used anywhere, so it really doesn't matter. We can't include the kerberos principal in the SystemToken as it would break equality when</comment>
       <comment type="line">// different Accumulo servers are using different kerberos principals are their accumulo principal</comment>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationKey</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationKey</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..134502a20</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationKey</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">150</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>SecretKey</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TAuthenticationKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>ThriftMessageUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang</name><operator>.</operator><name>builder</name><operator>.</operator><name>HashCodeBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Writable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>WritableUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a secret key used for signing and verifying authentication tokens by {@link AuthenticationTokenSecretManager}.
 */</comment>
<class><specifier>public</specifier> class <name>AuthenticationKey</name> <super_list><implements>implements <super><name>Writable</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>TAuthenticationKey</name></type> <name>authKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>SecretKey</name></type> <name>secret</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AuthenticationKey</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// for Writable</comment>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>AuthenticationKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>creationDate</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expirationDate</name></decl></parameter>, <parameter><decl><type><name>SecretKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>authKey</name> <operator>=</operator> <operator>new</operator> <call><name>TAuthenticationKey</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getEncoded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>authKey</name><operator>.</operator><name>setCreationDate</name></name><argument_list>(<argument><expr><name>creationDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>authKey</name><operator>.</operator><name>setKeyId</name></name><argument_list>(<argument><expr><name>keyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>authKey</name><operator>.</operator><name>setExpirationDate</name></name><argument_list>(<argument><expr><name>expirationDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>getKeyId</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>authKey</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getCreationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>authKey</name><operator>.</operator><name>getCreationDate</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setCreationDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>creationDate</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>authKey</name><operator>.</operator><name>setCreationDate</name></name><argument_list>(<argument><expr><name>creationDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>long</name></type> <name>getExpirationDate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>authKey</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setExpirationDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>expirationDate</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>authKey</name><operator>.</operator><name>setExpirationDate</name></name><argument_list>(<argument><expr><name>expirationDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name>SecretKey</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>secret</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>setKey</name><parameter_list>(<parameter><decl><type><name>SecretKey</name></type> <name>secret</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <name>secret</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>authKey</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>HashCodeBuilder</name></type> <name>hcb</name> <init>= <expr><operator>new</operator> <call><name>HashCodeBuilder</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hcb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>getCreationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>secret</name><operator>.</operator><name>getEncoded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>hcb</name><operator>.</operator><name>toHashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>obj</name> <operator>instanceof</operator> <name>AuthenticationKey</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>AuthenticationKey</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// authKey might be null due to writable nature</comment>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>authKey</name> <operator>&amp;&amp;</operator> <literal type="null">null</literal> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>authKey</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>authKey</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>authKey</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buf</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"AuthenticationKey["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>authKey</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"null]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"id="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", expiration="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", creation="</literal></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>getCreationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><call><name><name>buf</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>DataOutput</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>authKey</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>WritableUtils</name><operator>.</operator><name>writeVInt</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>ThriftMessageUtil</name></type> <name>util</name> <init>= <expr><operator>new</operator> <call><name>ThriftMessageUtil</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>serialized</name> <init>= <expr><call><name><name>util</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>WritableUtils</name><operator>.</operator><name>writeVInt</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name><name>serialized</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>serialized</name><operator>.</operator><name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>serialized</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>serialized</name><operator>.</operator><name>arrayOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>serialized</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>readFields</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>WritableUtils</name><operator>.</operator><name>readVInt</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>length</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>ThriftMessageUtil</name></type> <name>util</name> <init>= <expr><operator>new</operator> <call><name>ThriftMessageUtil</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>authKey</name> <operator>=</operator> <call><name><name>util</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TAuthenticationKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>secret</name> <operator>=</operator> <call><name><name>AuthenticationTokenSecretManager</name><operator>.</operator><name>createSecretKey</name></name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>getSecret</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenKeyManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenKeyManager</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..3582cfd74</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenKeyManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">169</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>Daemon</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Service that handles generation of the secret key used to create delegation tokens.
 */</comment>
<class><specifier>public</specifier> class <name>AuthenticationTokenKeyManager</name> <super_list><extends>extends <super><name>Daemon</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AuthenticationTokenKeyManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ZooAuthenticationKeyDistributor</name></type> <name>keyDistributor</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastKeyUpdate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>keyUpdateInterval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>tokenMaxLifetime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>idSeq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>keepRunning</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>, <decl><type ref="prev"/><name>initialized</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Construct the key manager which will generate new AuthenticationKeys to generate and verify delegation tokens
   *
   * @param mgr
   *          The SecretManager in use
   * @param dist
   *          The implementation to distribute AuthenticationKeys to ZooKeeper
   * @param keyUpdateInterval
   *          The frequency, in milliseconds, that new AuthenticationKeys are created
   * @param tokenMaxLifetime
   *          The lifetime, in milliseconds, of generated AuthenticationKeys (and subsequently delegation tokens).
   */</comment>
  <constructor><specifier>public</specifier> <name>AuthenticationTokenKeyManager</name><parameter_list>(<parameter><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>mgr</name></decl></parameter>, <parameter><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>dist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keyUpdateInterval</name></decl></parameter>,
      <parameter><decl><type><name>long</name></type> <name>tokenMaxLifetime</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"Delegation Token Key Manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secretManager</name></name> <operator>=</operator> <name>mgr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyDistributor</name></name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyUpdateInterval</name></name> <operator>=</operator> <name>keyUpdateInterval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tokenMaxLifetime</name></name> <operator>=</operator> <name>tokenMaxLifetime</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>VisibleForTesting</name></annotation>
  <type><name>void</name></type> <name>setKeepRunning</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>keepRunning</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keepRunning</name></name> <operator>=</operator> <name>keepRunning</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>initialized</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>gracefulStop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>keepRunning</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Make sure to initialize the secret manager with keys already in ZK</comment>
    <expr_stmt><expr><call><name>updateStateFromCurrentKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>keepRunning</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>_run</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Interrupted waiting for next update"</literal></expr></argument>, <argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></while>
  </block_content>}</block></function>

  <function><annotation>@<name>VisibleForTesting</name></annotation>
  <type><name>void</name></type> <name>updateStateFromCurrentKeys</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name></type> <name>currentKeys</name> <init>= <expr><call><name><name>keyDistributor</name><operator>.</operator><name>getCurrentKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>currentKeys</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>AuthenticationKey</name></type> <name>key</name> <range>: <expr><name>currentKeys</name></expr></range></decl></init>)</control> <block>{<block_content>
          <comment type="line">// Ensure that we don't create new Keys with duplicate keyIds for keys that already exist</comment>
          <comment type="line">// It's not a big concern if we happen to duplicate keyIds for already expired keys.</comment>
          <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>idSeq</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>idSeq</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Added {} existing AuthenticationKeys into the local cache from ZooKeeper"</literal></expr></argument>, <argument><expr><call><name><name>currentKeys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Try to use the last key instead of creating a new one right away. This will present more expected</comment>
        <comment type="line">// functionality if the active master happens to die for some reasonn</comment>
        <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>currentKey</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>getCurrentKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>currentKey</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Updating last key update to {} from current secret manager key"</literal></expr></argument>, <argument><expr><call><name><name>currentKey</name><operator>.</operator><name>getCreationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>lastKeyUpdate</name> <operator>=</operator> <call><name><name>currentKey</name><operator>.</operator><name>getCreationDate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>KeeperException</name></type> | <type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Failed to fetch existing AuthenticationKeys from ZooKeeper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><annotation>@<name>VisibleForTesting</name></annotation>
  <type><name>long</name></type> <name>getLastKeyUpdate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>lastKeyUpdate</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>VisibleForTesting</name></annotation>
  <type><name>int</name></type> <name>getIdSeq</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>idSeq</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Internal "run" method which performs the actual work.
   *
   * @param now
   *          The current time in millis since epoch.
   */</comment>
  <function><type><name>void</name></type> <name>_run</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>now</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// clear any expired keys</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>removedKeys</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>removeExpiredKeys</name></name><argument_list>(<argument><expr><name>keyDistributor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>removedKeys</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Removed {} expired keys from the local cache"</literal></expr></argument>, <argument><expr><name>removedKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>lastKeyUpdate</name> <operator>+</operator> <name>keyUpdateInterval</name> <operator>&lt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Key update interval passed, creating new authentication key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Increment the idSeq and use the new value as the unique ID</comment>
      <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>newKey</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><operator>++</operator><name>idSeq</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <name>tokenMaxLifetime</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>generateSecret</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Created new {}"</literal></expr></argument>, <argument><expr><call><name><name>newKey</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Will set to be the current key given the idSeq</comment>
      <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>newKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// advertise it to tabletservers</comment>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>keyDistributor</name><operator>.</operator><name>advertise</name></name><argument_list>(<argument><expr><name>newKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>KeeperException</name></type> | <type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to advertise AuthenticationKey in ZooKeeper. Exiting."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>

      <expr_stmt><expr><name>lastKeyUpdate</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenSecretManager</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenSecretManager</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..99173d237</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenSecretManager</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">269</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>SecretKey</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>SecretManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Manages an internal list of secret keys used to sign new authentication tokens as they are generated, and to validate existing tokens used for
 * authentication.
 *
 * Each TabletServer, in addition to the Master, has an instance of this {@link SecretManager} so that each can authenticate requests from clients presenting
 * delegation tokens. The Master will also run an instance of {@link AuthenticationTokenKeyManager} which handles generation of new keys and removal of old
 * keys. That class will call the methods here to ensure the in-memory cache is consistent with what is advertised in ZooKeeper.
 */</comment>
<class><specifier>public</specifier> class <name>AuthenticationTokenSecretManager</name> <super_list><extends>extends <super><name><name>SecretManager</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AuthenticationTokenSecretManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Instance</name></type> <name>instance</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>tokenMaxLifetime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name></type> <name>allKeys</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>AuthenticationKey</name></type> <name>currentKey</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Create a new secret manager instance for generating keys.
   *
   * @param instance
   *          Accumulo instance
   * @param tokenMaxLifetime
   *          Maximum age (in milliseconds) before a token expires and is no longer valid
   */</comment>
  <constructor><specifier>public</specifier> <name>AuthenticationTokenSecretManager</name><parameter_list>(<parameter><decl><type><name>Instance</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>tokenMaxLifetime</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkArgument</name><argument_list>(<argument><expr><name>tokenMaxLifetime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Max lifetime must be positive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <name>instance</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tokenMaxLifetime</name></name> <operator>=</operator> <name>tokenMaxLifetime</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name><name>byte</name><index>[]</index></name></type> <name>createPassword</name><parameter_list>(<parameter><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DelegationTokenConfig</name></type> <name>cfg</name> <init>= <expr><call><name><name>identifier</name><operator>.</operator><name>getConfig</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>AuthenticationKey</name></type> <name>secretKey</name> <init>= <expr><name>currentKey</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>setKeyId</name></name><argument_list>(<argument><expr><call><name><name>secretKey</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>setIssueDate</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>expiration</name> <init>= <expr><name>now</name> <operator>+</operator> <name>tokenMaxLifetime</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// Catch overflow</comment>
    <if_stmt><if>if <condition>(<expr><name>expiration</name> <operator>&lt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>expiration</name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>setExpirationDate</name></name><argument_list>(<argument><expr><name>expiration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Limit the lifetime if the user requests it</comment>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>cfg</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>requestedLifetime</name> <init>= <expr><call><name><name>cfg</name><operator>.</operator><name>getTokenLifetime</name></name><argument_list>(<argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>requestedLifetime</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>requestedExpirationDate</name> <init>= <expr><call><name><name>identifier</name><operator>.</operator><name>getIssueDate</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>requestedLifetime</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// Catch overflow again</comment>
        <if_stmt><if>if <condition>(<expr><name>requestedExpirationDate</name> <operator>&lt;</operator> <call><name><name>identifier</name><operator>.</operator><name>getIssueDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>requestedExpirationDate</name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Ensure that the user doesn't try to extend the expiration date -- they may only limit it</comment>
        <if_stmt><if>if <condition>(<expr><name>requestedExpirationDate</name> <operator>&gt;</operator> <call><name><name>identifier</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Requested token lifetime exceeds configured maximum"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Overriding token expiration date from {} to {}"</literal></expr></argument>, <argument><expr><call><name><name>identifier</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>requestedExpirationDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>setExpirationDate</name></name><argument_list>(<argument><expr><name>requestedExpirationDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>setInstanceId</name></name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getInstanceID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>createPassword</name><argument_list>(<argument><expr><call><name><name>identifier</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>secretKey</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>retrievePassword</name><parameter_list>(<parameter><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidToken</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>identifier</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>InvalidToken</name><argument_list>(<argument><expr><literal type="string">"Token has expired"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>identifier</name><operator>.</operator><name>getIssueDate</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>InvalidToken</name><argument_list>(<argument><expr><literal type="string">"Token issued in the future"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>masterKey</name> <init>= <expr><call><name><name>allKeys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>identifier</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>masterKey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>InvalidToken</name><argument_list>(<argument><expr><literal type="string">"Unknown master key for token (id="</literal> <operator>+</operator> <call><name><name>identifier</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// regenerate the password</comment>
    <return>return <expr><call><name>createPassword</name><argument_list>(<argument><expr><call><name><name>identifier</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>masterKey</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>AuthenticationTokenIdentifier</name></type> <name>createIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Return our TokenIdentifier implementation</comment>
    <return>return <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Generates a delegation token for the user with the provided {@code username}.
   *
   * @param username
   *          The client to generate the delegation token for.
   * @param cfg
   *          A configuration object for obtaining the delegation token
   * @return A delegation token for {@code username} created using the {@link #currentKey}.
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>generateToken</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>username</name></decl></parameter>, <parameter><decl><type><name>DelegationTokenConfig</name></type> <name>cfg</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>AccumuloException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>AuthenticationTokenIdentifier</name></type> <name>id</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>svcName</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name><name>DelegationToken</name><operator>.</operator><name>SERVICE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>id</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>svcName</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Create password will update the state on the identifier given currentKey. Need to call this before serializing the identifier</comment>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>password</name> <operator>=</operator> <call><name>createPassword</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>AccumuloException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <comment type="line">// The use of the ServiceLoader inside Token doesn't work to automatically get the Identifier</comment>
    <comment type="line">// Explicitly returning the identifier also saves an extra deserialization</comment>
    <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><call><name><name>id</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Text</name><argument_list>(<argument><expr><call><name><name>svcName</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Maps</name><operator>.</operator><name>immutableEntry</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Add the provided {@code key} to the in-memory copy of all {@link AuthenticationKey}s.
   *
   * @param key
   *          The key to add.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addKey</name><parameter_list>(<parameter><decl><type><name>AuthenticationKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Adding AuthenticationKey with keyId {}"</literal></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>allKeys</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>currentKey</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>currentKey</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>currentKey</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Removes the {@link AuthenticationKey} from the local cache of keys using the provided {@link keyId}.
   *
   * @param keyId
   *          The unique ID for the {@link AuthenticationKey} to remove.
   * @return True if the key was removed, otherwise false.
   */</comment>
  <function><type><specifier>synchronized</specifier> <name>boolean</name></type> <name>removeKey</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>keyId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>keyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Removing AuthenticatioKey with keyId {}"</literal></expr></argument>, <argument><expr><name>keyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>allKeys</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>keyId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * The current {@link AuthenticationKey}, may be null.
   *
   * @return The current key, or null.
   */</comment>
  <function><annotation>@<name>VisibleForTesting</name></annotation>
  <type><name>AuthenticationKey</name></type> <name>getCurrentKey</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>currentKey</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>VisibleForTesting</name></annotation>
  <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name></type> <name>getKeys</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>allKeys</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Inspect each key cached in {@link #allKeys} and remove it if the expiration date has passed. For each removed local {@link AuthenticationKey}, the key is
   * also removed from ZooKeeper using the provided {@code keyDistributor} instance.
   *
   * @param keyDistributor
   *          ZooKeeper key distribution class
   */</comment>
  <function><type><specifier>synchronized</specifier> <name>int</name></type> <name>removeExpiredKeys</name><parameter_list>(<parameter><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>keyDistributor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>keysRemoved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>allKeys</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Removing expired delegation token key {}"</literal></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>keysRemoved</name><operator>++</operator></expr>;</expr_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>keyDistributor</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>KeeperException</name></type> | <type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to remove AuthenticationKey from ZooKeeper. Exiting"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>keysRemoved</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>synchronized</specifier> <name>boolean</name></type> <name>isCurrentKeySet</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal> <operator>!=</operator> <name>currentKey</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Atomic operation to remove all AuthenticationKeys
   */</comment>
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeAllKeys</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>allKeys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>currentKey</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>SecretKey</name></type> <name>generateSecret</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Method in the parent is a different package, provide the explicit override so we can use it directly in our package.</comment>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>generateSecret</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SecretKey</name></type> <name>createSecretKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>raw</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>SecretManager</name><operator>.</operator><name>createSecretKey</name></name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyDistributor</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyDistributor</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..515b03673</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyDistributor</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">187</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkState</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooUtil</name><operator>.</operator><name>NodeExistsPolicy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReaderWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>data</name><operator>.</operator><name>ACL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>data</name><operator>.</operator><name>Id</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>data</name><operator>.</operator><name>Stat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Class that manages distribution of {@link AuthenticationKey}s, Accumulo's secret in the delegation token model, to other Accumulo nodes via ZooKeeper.
 */</comment>
<class><specifier>public</specifier> class <name>ZooAuthenticationKeyDistributor</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ZooAuthenticationKeyDistributor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ZooReaderWriter</name></type> <name>zk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>baseNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>initialized</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ZooAuthenticationKeyDistributor</name><parameter_list>(<parameter><decl><type><name>ZooReaderWriter</name></type> <name>zk</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>baseNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zk</name></name> <operator>=</operator> <name>zk</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseNode</name></name> <operator>=</operator> <name>baseNode</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Ensures that ZooKeeper is in a correct state to perform distribution of {@link AuthenticationKey}s.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>zk</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>zk</name><operator>.</operator><name>putPrivatePersistentData</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>NodeExistsPolicy</name><operator>.</operator><name>FAIL</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Got false from putPrivatePersistentData method"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ACL</name></argument>&gt;</argument_list></name></type> <name>acls</name> <init>= <expr><call><name><name>zk</name><operator>.</operator><name>getACL</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Stat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name><name>acls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>ACL</name></type> <name>actualAcl</name> <init>= <expr><call><name><name>acls</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>expectedAcl</name> <init>= <expr><call><name><name>ZooUtil</name><operator>.</operator><name>PRIVATE</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Id</name></type> <name>actualId</name> <init>= <expr><call><name><name>actualAcl</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// The expected outcome from ZooUtil.PRIVATE</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>actualAcl</name><operator>.</operator><name>getPerms</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>expectedAcl</name><operator>.</operator><name>getPerms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>actualId</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"digest"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>actualId</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><literal type="string">"accumulo:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Saw more than one ACL on the node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Expected {} to have ACLs {} but was {}"</literal></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name><name>ZooUtil</name><operator>.</operator><name>PRIVATE</name></name></expr></argument>, <argument><expr><name>acls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Delegation token secret key node in ZooKeeper is not protected."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Fetch all {@link AuthenticationKey}s currently stored in ZooKeeper beneath the configured {@code baseNode}.
   *
   * @return A list of {@link AuthenticationKey}s
   */</comment>
  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name></type> <name>getCurrentKeys</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkState</name><argument_list>(<argument><expr><name>initialized</name></expr></argument>, <argument><expr><literal type="string">"Not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><call><name><name>zk</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Shortcircuit to avoid a list creation</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>children</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>AuthenticationKey</name><operator>&gt;</operator> <call><name>emptyList</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Deserialize each byte[] into an AuthenticationKey</comment>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>child</name> <range>: <expr><name>children</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><call><name>qualifyPath</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>data</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Error reading from in-memory buffer which should not happen"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>keys</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Add the given {@link AuthenticationKey} to ZooKeeper.
   *
   * @param newKey
   *          The key to add to ZooKeeper
   */</comment>
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>advertise</name><parameter_list>(<parameter><decl><type><name>AuthenticationKey</name></type> <name>newKey</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkState</name><argument_list>(<argument><expr><name>initialized</name></expr></argument>, <argument><expr><literal type="string">"Not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>newKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the node doesn't already exist</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name>qualifyPath</name><argument_list>(<argument><expr><name>newKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>zk</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"AuthenticationKey with ID '{}' already exists in ZooKeeper"</literal></expr></argument>, <argument><expr><call><name><name>newKey</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Serialize it</comment>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>newKey</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Should not get exception writing to in-memory buffer"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serializedKey</name> <init>= <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Advertising AuthenticationKey with keyId {} in ZooKeeper at {}"</literal></expr></argument>, <argument><expr><call><name><name>newKey</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Put it into ZK with the private ACL</comment>
    <expr_stmt><expr><call><name><name>zk</name><operator>.</operator><name>putPrivatePersistentData</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>serializedKey</name></expr></argument>, <argument><expr><name><name>NodeExistsPolicy</name><operator>.</operator><name>FAIL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Remove the given {@link AuthenticationKey} from ZooKeeper. If the node for the provided {@code key} doesn't exist in ZooKeeper, a warning is printed but an
   * error is not thrown. Since there is only a single process managing ZooKeeper at one time, any inconsistencies should be client error.
   *
   * @param key
   *          The key to remove from ZooKeeper
   */</comment>
  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>AuthenticationKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>checkState</name><argument_list>(<argument><expr><name>initialized</name></expr></argument>, <argument><expr><literal type="string">"Not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name>qualifyPath</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>zk</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"AuthenticationKey with ID '{}' doesn't exist in ZooKeeper"</literal></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Removing AuthenticationKey with keyId {} from ZooKeeper at {}"</literal></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Delete the node, any version</comment>
    <expr_stmt><expr><call><name><name>zk</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name>String</name></type> <name>qualifyPath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>keyId</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>String</name></type> <name>qualifyPath</name><parameter_list>(<parameter><decl><type><name>AuthenticationKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>qualifyPath</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyWatcher</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyWatcher</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..2913343f9</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyWatcher</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">206</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>WatchedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>Watcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>Watcher</name><operator>.</operator><name>Event</name><operator>.</operator><name>EventType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Watch ZooKeeper to notice changes in the published keys so that authenticate can properly occur using delegation tokens.
 */</comment>
<class><specifier>public</specifier> class <name>ZooAuthenticationKeyWatcher</name> <super_list><implements>implements <super><name>Watcher</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ZooAuthenticationKeyWatcher</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ZooReader</name></type> <name>zk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>baseNode</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ZooAuthenticationKeyWatcher</name><parameter_list>(<parameter><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl></parameter>, <parameter><decl><type><name>ZooReader</name></type> <name>zk</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>baseNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secretManager</name></name> <operator>=</operator> <name>secretManager</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zk</name></name> <operator>=</operator> <name>zk</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseNode</name></name> <operator>=</operator> <name>baseNode</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name>WatchedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>EventType</name><operator>.</operator><name>None</name></name> <operator>==</operator> <call><name><name>event</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>Disconnected</name></expr>:</case> <comment type="line">// Intentional fall through of case</comment>
        <case>case <expr><name>Expired</name></expr>:</case> <comment type="line">// ZooReader is handling the Expiration of the original ZooKeeper object for us</comment>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"ZooKeeper connection disconnected, clearing secret manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>removeAllKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>SyncConnected</name></expr>:</case>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"ZooKeeper reconnected, updating secret manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>updateAuthKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>KeeperException</name></type> | <type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to update secret manager after ZooKeeper reconnect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unhandled: "</literal> <operator>+</operator> <name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></switch>

      <comment type="line">// Nothing more to do for EventType.None</comment>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>path</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>path</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring event for path: {}"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>processBaseNode</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>processChildNode</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>KeeperException</name></type> | <type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to communicate with ZooKeeper"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Process the {@link WatchedEvent} for the base znode that the {@link AuthenticationKey}s are stored in.
   */</comment>
  <function><type><name>void</name></type> <name>processBaseNode</name><parameter_list>(<parameter><decl><type><name>WatchedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <switch>switch <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>NodeDeleted</name></expr>:</case>
        <comment type="line">// The parent node was deleted, no children are possible, remove all keys</comment>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Parent ZNode was deleted, removing all AuthenticationKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>removeAllKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>None</name></expr>:</case>
        <comment type="line">// Not connected, don't care</comment>
        <break>break;</break>
      <case>case <expr><name>NodeCreated</name></expr>:</case> <comment type="line">// intentional fall-through to NodeChildrenChanged</comment>
      <case>case <expr><name>NodeChildrenChanged</name></expr>:</case>
        <comment type="line">// Process each child, and reset the watcher on the parent node. We know that the node exists</comment>
        <expr_stmt><expr><call><name>updateAuthKeys</name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>NodeDataChanged</name></expr>:</case>
        <comment type="line">// The data on the parent changed. We aren't storing anything there so it's a noop</comment>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unsupported event type: {}"</literal></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Entry point to seed the local {@link AuthenticationKey} cache from ZooKeeper and set the first watcher for future updates in ZooKeeper.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>updateAuthKeys</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// Might cause two watchers on baseNode, but only at startup for each tserver.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>zk</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Added {} existing AuthenticationKeys to local cache from ZooKeeper"</literal></expr></argument>, <argument><expr><call><name>updateAuthKeys</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>updateAuthKeys</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>keysAdded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>child</name> <range>: <expr><call><name><name>zk</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>childPath</name> <init>= <expr><name>path</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>child</name></expr></init></decl>;</decl_stmt>
      <comment type="line">// Get the node data and reset the watcher</comment>
      <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key</name> <init>= <expr><call><name>deserializeKey</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>childPath</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>keysAdded</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>keysAdded</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Process the {@link WatchedEvent} for a node which represents an {@link AuthenticationKey}
   */</comment>
  <function><type><name>void</name></type> <name>processChildNode</name><parameter_list>(<parameter><decl><type><name>WatchedEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>KeeperException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>path</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>NodeDeleted</name></expr>:</case>
        <comment type="line">// Key expired</comment>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>path</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Got null path for NodeDeleted event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Pull off the base ZK path and the '/' separator</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>childName</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>baseNode</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>removeKey</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>childName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>None</name></expr>:</case>
        <comment type="line">// Not connected, don't care. We'll update when we're reconnected</comment>
        <break>break;</break>
      <case>case <expr><name>NodeCreated</name></expr>:</case>
        <comment type="line">// New key created</comment>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>path</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Got null path for NodeCreated event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Get the data and reset the watcher</comment>
        <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key</name> <init>= <expr><call><name>deserializeKey</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Adding AuthenticationKey with keyId {}"</literal></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>NodeDataChanged</name></expr>:</case>
        <comment type="line">// Key changed, could happen on restart after not running Accumulo.</comment>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>path</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Got null path for NodeDataChanged event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Get the data and reset the watcher</comment>
        <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>newKey</name> <init>= <expr><call><name>deserializeKey</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Will overwrite the old key if one exists</comment>
        <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>newKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>NodeChildrenChanged</name></expr>:</case>
        <comment type="line">// no children for the children..</comment>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unexpected NodeChildrenChanged event for authentication key node {}"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unsupported event type: {}"</literal></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Deserialize the bytes into an {@link AuthenticationKey}
   */</comment>
  <function><type><name>AuthenticationKey</name></type> <name>deserializeKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serializedKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>serializedKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Failed to read from an in-memory buffer"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <return>return <expr><name>key</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>KerberosAuthenticator</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>KerberosAuthenticator</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">08fa55bc7</literal><operator>..</operator><literal type="number">369fa89a6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>KerberosAuthenticator</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>handler</name><operator>/</operator><name><name>KerberosAuthenticator</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">27</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>SecurityErrorCode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>ThriftSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>AuthenticationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>KerberosToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>SiteConfiguration</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">131</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">132</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>KerberosAuthenticator</name> implements <name>Authenticator</name> <block>{
     }</block></expr></expr_stmt>
 
     <comment type="line">// User is authenticated at the transport layer -- nothing extra is necessary</comment>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>KerberosToken</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>instanceof</operator> <name>KerberosToken</name> <operator>||</operator> <name>token</name> <operator>instanceof</operator> <name>DelegationToken</name></expr>)</condition> <block>{<block_content>
       <return>return <expr><literal type="boolean">true</literal></expr>;</return>
     </block_content>}</block></if></if_stmt>
     <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name><name>AccumuloServerContextTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name><name>AccumuloServerContextTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">49a60a656</literal><operator>..</operator><literal type="number">92b6be8ef</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name><name>AccumuloServerContextTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name><name>AccumuloServerContextTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">16</literal></expr><operator>,</operator><expr><literal type="number">10</literal> @@
  <operator>*</operator><operator>/</operator></expr></expr_stmt>
 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name></name>;</package>
 
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>PrivilegedExceptionAction</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">15</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name><operator>.</operator><name>ClientProperty</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ClientContext</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mock</name><operator>.</operator><name>MockInstance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>PasswordToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>SiteConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Credentials</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>conf</name><operator>.</operator><name>ServerConfigurationFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslServerConnectionParams</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>rpc</name><operator>.</operator><name>ThriftServerType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>SystemCredentials</name><operator>.</operator><name>SystemToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>CommonConfigurationKeys</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">76</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloServerContextTest</name> <block>{
         <expr><name>final</name> <name>AccumuloConfiguration</name> <name>conf</name> <operator>=</operator> <call><name><name>ClientContext</name><operator>.</operator><name>convertClientConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr>;
         <name>SiteConfiguration</name> <name>siteConfig</name> <operator>=</operator> <call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>SiteConfiguration</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
 
        <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>siteConfig</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Deal with SystemToken being private</comment>
        <decl_stmt><decl><type><name>PasswordToken</name></type> <name>pw</name> <init>= <expr><operator>new</operator> <call><name>PasswordToken</name><argument_list>(<argument><expr><literal type="string">"fake"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pw</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SystemToken</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>SystemToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <decl_stmt><decl><type><name>ServerConfigurationFactory</name></type> <name>factory</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMock</name></name><argument_list>(<argument><expr><name><name>ServerConfigurationFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>getSiteConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>siteConfig</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
         <decl_stmt><decl><type><name>AccumuloServerContext</name></type> <name>context</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMockBuilder</name></name><argument_list>(<argument><expr><name><name>AccumuloServerContext</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addMockedMethod</name><argument_list>(<argument><expr><literal type="string">"enforceKerberosLogin"</literal></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>addMockedMethod</name><argument_list>(<argument><expr><literal type="string">"getConfiguration"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addMockedMethod</name><argument_list>(<argument><expr><literal type="string">"getServerConfigurationFactory"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>createMock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>.</operator><call><name>addMockedMethod</name><argument_list>(<argument><expr><literal type="string">"getConfiguration"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addMockedMethod</name><argument_list>(<argument><expr><literal type="string">"getServerConfigurationFactory"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addMockedMethod</name><argument_list>(<argument><expr><literal type="string">"getCredentials"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>createMock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>enforceKerberosLogin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getServerConfigurationFactory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>factory</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getCredentials</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Credentials</name><argument_list>(<argument><expr><literal type="string">"accumulo/hostname@FAKE.COM"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
         <comment type="line">// Just make the SiteConfiguration delegate to our ClientConfiguration (by way of the AccumuloConfiguration)</comment>
         <comment type="line">// Presently, we only need get(Property) and iterator().</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">101</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">118</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>AccumuloServerContextTest</name> <block>{
         <expr><call><name><name>EasyMock</name><operator>.</operator><name>replay</name></name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>siteConfig</name></expr></argument>)</argument_list></call></expr>;
 
         <call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name><name>ThriftServerType</name><operator>.</operator><name>SASL</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getThriftServerType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SaslConnectionParams</name></type> <name>saslParams</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getServerSaslParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>SaslConnectionParams</name><operator>.</operator><name>forConfig</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>saslParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SaslServerConnectionParams</name></type> <name>saslParams</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSaslParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SaslServerConnectionParams</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>saslParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
         <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>siteConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslDigestCallbackHandlerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslDigestCallbackHandlerTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..6c965ffbe</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslDigestCallbackHandlerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">137</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>rpc</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>createMock</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>verify</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyGenerator</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>Callback</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>callback</name><operator>.</operator><name>UnsupportedCallbackException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslDigestCallbackHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name><operator>.</operator><name>AuthenticationKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name><operator>.</operator><name>AuthenticationTokenSecretManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>SaslDigestCallbackHandlerTest</name> <block>{

  <comment type="block" format="javadoc">/**
   * Allows access to the methods on SaslDigestCallbackHandler
   */</comment>
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SaslTestDigestCallbackHandler</name> <super_list><extends>extends <super><name>SaslDigestCallbackHandler</name></super></extends></super_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>handle</name><parameter_list>(<parameter><decl><type><name><name>Callback</name><index>[]</index></name></type> <name>callbacks</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UnsupportedCallbackException</name></expr></argument></throws> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
  }</block></class>

  <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_HMAC_ALGORITHM</name> <init>= <expr><literal type="string">"HmacSHA1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>KEY_LENGTH</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>KeyGenerator</name></type> <name>keyGen</name></decl>;</decl_stmt>

  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setupKeyGenerator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
    <expr_stmt><expr><name>keyGen</name> <operator>=</operator> <call><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>DEFAULT_HMAC_ALGORITHM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keyGen</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <name>SaslTestDigestCallbackHandler</name></type> <name>handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>DelegationTokenConfig</name></type> <name>cfg</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>new</operator> <call><name>SaslTestDigestCallbackHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cfg</name> <operator>=</operator> <operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIdentifierSerialization</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100l</literal></expr></argument>, <argument><expr><literal type="number">1000l</literal></expr></argument>, <argument><expr><literal type="string">"instanceid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serialized</name> <init>= <expr><call><name><name>identifier</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>handler</name><operator>.</operator><name>encodeIdentifier</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>reserialized</name> <init>= <expr><call><name><name>handler</name><operator>.</operator><name>decodeIdentifier</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>reserialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>copy</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>reserialized</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTokenSerialization</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Instance</name></type> <name>instance</name> <init>= <expr><call><name>createMock</name><argument_list>(<argument><expr><name><name>Instance</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="number">1000l</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getInstanceID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="string">"instanceid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">100l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPassword</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>encodedPassword</name> <init>= <expr><call><name><name>handler</name><operator>.</operator><name>encodePassword</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>computedPassword</name> <init>= <expr><call><name><name>handler</name><operator>.</operator><name>getPassword</name></name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>computedPassword</name></expr></argument>, <argument><expr><name>encodedPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTokenAndIdentifierSerialization</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Instance</name></type> <name>instance</name> <init>= <expr><call><name>createMock</name><argument_list>(<argument><expr><name><name>Instance</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="number">1000l</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getInstanceID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="string">"instanceid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">100l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPassword</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>encodedPassword</name> <init>= <expr><call><name><name>handler</name><operator>.</operator><name>encodePassword</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>handler</name><operator>.</operator><name>encodeIdentifier</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>decodedIdentifier</name> <init>= <expr><call><name><name>handler</name><operator>.</operator><name>decodeIdentifier</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>identifier</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>identifier</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>decodedIdentifier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>computedPassword</name> <init>= <expr><call><name><name>handler</name><operator>.</operator><name>getPassword</name></name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>computedPassword</name></expr></argument>, <argument><expr><name>encodedPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslServerConnectionParamsTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslServerConnectionParamsTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..39bf9e46a</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>rpc</name><operator>/</operator><name><name>SaslServerConnectionParamsTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">101</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>rpc</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>PrivilegedExceptionAction</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>sasl</name><operator>.</operator><name>Sasl</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>ClientConfiguration</name><operator>.</operator><name>ClientProperty</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>ClientContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>PasswordToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>AccumuloConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name><operator>.</operator><name>QualityOfProtection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>rpc</name><operator>.</operator><name>SaslConnectionParams</name><operator>.</operator><name>SaslMechanism</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>SystemCredentials</name><operator>.</operator><name>SystemToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>CommonConfigurationKeysPublic</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>UserGroupInformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>SaslServerConnectionParamsTest</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>UserGroupInformation</name></type> <name>testUser</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>username</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.security.krb5.realm"</literal></expr></argument>, <argument><expr><literal type="string">"accumulo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.security.krb5.kdc"</literal></expr></argument>, <argument><expr><literal type="string">"fake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Configuration</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>Configuration</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>CommonConfigurationKeysPublic</name><operator>.</operator><name>HADOOP_SECURITY_AUTHENTICATION</name></name></expr></argument>, <argument><expr><literal type="string">"kerberos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UserGroupInformation</name><operator>.</operator><name>setConfiguration</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>testUser</name> <operator>=</operator> <call><name><name>UserGroupInformation</name><operator>.</operator><name>createUserForTesting</name></name><argument_list>(<argument><expr><literal type="string">"test_user"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>username</name> <operator>=</operator> <call><name><name>testUser</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDefaultParamsAsServer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>testUser</name><operator>.</operator><name>doAs</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>PrivilegedExceptionAction</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Void</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ClientConfiguration</name></type> <name>clientConf</name> <init>= <expr><call><name><name>ClientConfiguration</name><operator>.</operator><name>loadDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The primary is the first component of the principal</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>primary</name> <init>= <expr><literal type="string">"accumulo"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clientConf</name><operator>.</operator><name>withSasl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>AccumuloConfiguration</name></type> <name>rpcConf</name> <init>= <expr><call><name><name>ClientContext</name><operator>.</operator><name>convertClientConfig</name></name><argument_list>(<argument><expr><name>clientConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><call><name><name>clientConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ClientProperty</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Deal with SystemToken being private</comment>
        <decl_stmt><decl><type><name>PasswordToken</name></type> <name>pw</name> <init>= <expr><operator>new</operator> <call><name>PasswordToken</name><argument_list>(<argument><expr><literal type="string">"fake"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pw</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SystemToken</name></type> <name>token</name> <init>= <expr><operator>new</operator> <call><name>SystemToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>SaslConnectionParams</name></type> <name>saslParams</name> <init>= <expr><operator>new</operator> <call><name>SaslServerConnectionParams</name><argument_list>(<argument><expr><name>rpcConf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getKerberosServerPrimary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>SaslMechanism</name><operator>.</operator><name>GSSAPI</name></name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getMechanism</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getCallbackHandler</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>QualityOfProtection</name></type> <name>defaultQop</name> <init>= <expr><call><name><name>QualityOfProtection</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Property</name><operator>.</operator><name>RPC_SASL_QOP</name><operator>.</operator><name>getDefaultValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>defaultQop</name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getQualityOfProtection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><call><name><name>saslParams</name><operator>.</operator><name>getSaslProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>defaultQop</name><operator>.</operator><name>getQuality</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Sasl</name><operator>.</operator><name>QOP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><call><name><name>saslParams</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationKeyTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationKeyTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..02e22aa6d</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationKeyTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">95</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyGenerator</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>SecretKey</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>AuthenticationKeyTest</name> <block>{
  <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_HMAC_ALGORITHM</name> <init>= <expr><literal type="string">"HmacSHA1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>KEY_LENGTH</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>KeyGenerator</name></type> <name>keyGen</name></decl>;</decl_stmt>

  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setupKeyGenerator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
    <expr_stmt><expr><name>keyGen</name> <operator>=</operator> <call><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>DEFAULT_HMAC_ALGORITHM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keyGen</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>NullPointerException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testNullSecretKey</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testAuthKey</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SecretKey</name></type> <name>secretKey</name> <init>= <expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>keyId</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>creationDate</name> <init>= <expr><literal type="number">38383838l</literal></expr></init></decl>, <decl><type ref="prev"/><name>expirationDate</name> <init>= <expr><literal type="number">83838383l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>authKey</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><name>keyId</name></expr></argument>, <argument><expr><name>creationDate</name></expr></argument>, <argument><expr><name>expirationDate</name></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>secretKey</name></expr></argument>, <argument><expr><call><name><name>authKey</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>keyId</name></expr></argument>, <argument><expr><call><name><name>authKey</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expirationDate</name></expr></argument>, <argument><expr><call><name><name>authKey</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Empty instance</comment>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>badCopy</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><name>badCopy</name></expr></argument>, <argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><call><name><name>badCopy</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>authKey</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Different object, same arguments</comment>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>goodCopy</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><name>keyId</name></expr></argument>, <argument><expr><name>creationDate</name></expr></argument>, <argument><expr><name>expirationDate</name></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>authKey</name></expr></argument>, <argument><expr><name>goodCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>goodCopy</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testWritable</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SecretKey</name></type> <name>secretKey</name> <init>= <expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>keyId</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>creationDate</name> <init>= <expr><literal type="number">38383838l</literal></expr></init></decl>, <decl><type ref="prev"/><name>expirationDate</name> <init>= <expr><literal type="number">83838383l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>authKey</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><name>keyId</name></expr></argument>, <argument><expr><name>creationDate</name></expr></argument>, <argument><expr><name>expirationDate</name></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>authKey</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serialized</name> <init>= <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>DataInputStream</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>copy</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>authKey</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>copy</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>secretKey</name></expr></argument>, <argument><expr><call><name><name>copy</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>keyId</name></expr></argument>, <argument><expr><call><name><name>copy</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expirationDate</name></expr></argument>, <argument><expr><call><name><name>copy</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenKeyManagerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenKeyManagerTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..bc2968a08</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenKeyManagerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">196</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>createMock</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>verify</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CountDownLatch</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyGenerator</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>SecretKey</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>AuthenticationTokenKeyManagerTest</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AuthenticationTokenKeyManagerTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_HMAC_ALGORITHM</name> <init>= <expr><literal type="string">"HmacSHA1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>KEY_LENGTH</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>KeyGenerator</name></type> <name>keyGen</name></decl>;</decl_stmt>

  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setupKeyGenerator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
    <expr_stmt><expr><name>keyGen</name> <operator>=</operator> <call><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>DEFAULT_HMAC_ALGORITHM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keyGen</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>ZooAuthenticationKeyDistributor</name></type> <name>zooDistributor</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setupMocks</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>secretManager</name> <operator>=</operator> <call><name>createMock</name><argument_list>(<argument><expr><name><name>AuthenticationTokenSecretManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zooDistributor</name> <operator>=</operator> <call><name>createMock</name><argument_list>(<argument><expr><name><name>ZooAuthenticationKeyDistributor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIntervalNotPassed</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>updateInterval</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">1000l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <literal type="number">1000l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenKeyManager</name></type> <name>keyManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenKeyManager</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>zooDistributor</name></expr></argument>, <argument><expr><name>updateInterval</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Have never updated the key</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><call><name><name>keyManager</name><operator>.</operator><name>getLastKeyUpdate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Always check for expired keys to remove</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>removeExpiredKeys</name></name><argument_list>(<argument><expr><name>zooDistributor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>zooDistributor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Run at time 0. Last run time is still 0. 0 + 5000 &gt; 0, so we won't generate a new key</comment>
    <expr_stmt><expr><call><name><name>keyManager</name><operator>.</operator><name>_run</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>zooDistributor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIntervalHasPassed</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>updateInterval</name> <init>= <expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">1000l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <literal type="number">1000l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>runTime</name> <init>= <expr><literal type="number">10l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SecretKey</name></type> <name>secretKey</name> <init>= <expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>authKey</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>runTime</name></expr></argument>, <argument><expr><name>runTime</name> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenKeyManager</name></type> <name>keyManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenKeyManager</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>zooDistributor</name></expr></argument>, <argument><expr><name>updateInterval</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Have never updated the key</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><call><name><name>keyManager</name><operator>.</operator><name>getLastKeyUpdate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Always check for expired keys to remove</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>removeExpiredKeys</name></name><argument_list>(<argument><expr><name>zooDistributor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>generateSecret</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>secretKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>zooDistributor</name><operator>.</operator><name>advertise</name></name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>zooDistributor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Run at time 10. Last run time is still 0. 0 + 10 &gt; 0, so we will generate a new key</comment>
    <expr_stmt><expr><call><name><name>keyManager</name><operator>.</operator><name>_run</name></name><argument_list>(<argument><expr><name>runTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>zooDistributor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Last key update time should match when we ran</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>runTime</name></expr></argument>, <argument><expr><call><name><name>keyManager</name><operator>.</operator><name>getLastKeyUpdate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// KeyManager uses the incremented value for the new AuthKey (the current idSeq will match the keyId for the last generated key)</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keyManager</name><operator>.</operator><name>getIdSeq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">30</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testStopLoop</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>AuthenticationTokenKeyManager</name></type> <name>keyManager</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>createMockBuilder</name></name><argument_list>(<argument><expr><name><name>AuthenticationTokenKeyManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addMockedMethod</name><argument_list>(<argument><expr><literal type="string">"_run"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>addMockedMethod</name><argument_list>(<argument><expr><literal type="string">"updateStateFromCurrentKeys"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>createMock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>CountDownLatch</name></type> <name>latch</name> <init>= <expr><operator>new</operator> <call><name>CountDownLatch</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Mock out the _run and updateStateFromCurrentKeys method so we just get the logic from "run()"</comment>
    <expr_stmt><expr><call><name><name>keyManager</name><operator>.</operator><name>_run</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keyManager</name><operator>.</operator><name>updateStateFromCurrentKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>keyManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyManager</name><operator>.</operator><name>setKeepRunning</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Wrap another Runnable around our KeyManager so we know when the thread is actually run as it's "async" when the method will actually be run after we call</comment>
    <comment type="line">// thread.start()</comment>
    <decl_stmt><decl><type><name>Thread</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Thread running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>latch</name><operator>.</operator><name>countDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyManager</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Starting thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Wait for the thread to start</comment>
    <expr_stmt><expr><call><name><name>latch</name><operator>.</operator><name>await</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Latch fired"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Wait a little bit to let the first call to _run() happen (avoid exiting the loop before any calls to _run())</comment>
    <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Finished waiting, stopping keymanager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyManager</name><operator>.</operator><name>gracefulStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Waiting for thread to exit naturally"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>keyManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testExistingKeysAreAddedAtStartup</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>updateInterval</name> <init>= <expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">1000l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <literal type="number">1000l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SecretKey</name></type> <name>secretKey1</name> <init>= <expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>secretKey2</name> <init>= <expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>authKey1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>, <argument><expr><name>secretKey1</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>authKey2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>, <argument><expr><name>tokenLifetime</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
        <argument><expr><name>secretKey2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenKeyManager</name></type> <name>keyManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenKeyManager</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>zooDistributor</name></expr></argument>, <argument><expr><name>updateInterval</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Have never updated the key</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><call><name><name>keyManager</name><operator>.</operator><name>getLastKeyUpdate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Always check for expired keys to remove</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zooDistributor</name><operator>.</operator><name>getCurrentKeys</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>authKey1</name></expr></argument>, <argument><expr><name>authKey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>authKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>authKey2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getCurrentKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>authKey2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>zooDistributor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize the state from zookeeper</comment>
    <expr_stmt><expr><call><name><name>keyManager</name><operator>.</operator><name>updateStateFromCurrentKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>zooDistributor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>authKey2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keyManager</name><operator>.</operator><name>getIdSeq</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>authKey2</name><operator>.</operator><name>getCreationDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keyManager</name><operator>.</operator><name>getLastKeyUpdate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenSecretManagerTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenSecretManagerTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..b6148191c</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>AuthenticationTokenSecretManagerTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">393</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>createMock</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>verify</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyGenerator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>SecretManager</name><operator>.</operator><name>InvalidToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>

<class><specifier>public</specifier> class <name>AuthenticationTokenSecretManagerTest</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AuthenticationTokenSecretManagerTest</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_HMAC_ALGORITHM</name> <init>= <expr><literal type="string">"HmacSHA1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>KEY_LENGTH</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>KeyGenerator</name></type> <name>keyGen</name></decl>;</decl_stmt>

  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setupKeyGenerator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
    <expr_stmt><expr><name>keyGen</name> <operator>=</operator> <call><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>DEFAULT_HMAC_ALGORITHM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keyGen</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <name>Instance</name></type> <name>instance</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>instanceId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>DelegationTokenConfig</name></type> <name>cfg</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setupMocks</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>instance</name> <operator>=</operator> <call><name>createMock</name><argument_list>(<argument><expr><name><name>Instance</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>instanceId</name> <operator>=</operator> <call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cfg</name> <operator>=</operator> <operator>new</operator> <call><name>DelegationTokenConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getInstanceID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>instanceId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>After</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>verifyMocks</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testAddKey</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// 1 minute</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add a single key</comment>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>authKey</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ensure it's in the cache</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>authKey</name></expr></argument>, <argument><expr><call><name><name>Iterables</name><operator>.</operator><name>getOnlyElement</name></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add the same key</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ensure we still have only one key</comment>
    <expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>authKey</name></expr></argument>, <argument><expr><call><name><name>Iterables</name><operator>.</operator><name>getOnlyElement</name></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRemoveKey</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// 1 minute</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add a single key</comment>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>authKey</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>authKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ensure it's in the cache</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>authKey</name></expr></argument>, <argument><expr><call><name><name>Iterables</name><operator>.</operator><name>getOnlyElement</name></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>removeKey</name></name><argument_list>(<argument><expr><call><name><name>authKey</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testGenerateToken</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// start of the test</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>then</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// 1 minute</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add a current key</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>then</name></expr></argument>, <argument><expr><name>then</name> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"user@EXAMPLE.COM"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>token</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>AuthenticationTokenIdentifier</name><operator>.</operator><name>TOKEN_KIND</name></name></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Reconstitute the token identifier (will happen when clients are involved)</comment>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>id</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Issue date should be after the test started, but before we deserialized the token</comment>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Issue date did not fall within the expected upper bound. Expected less than "</literal> <operator>+</operator> <name>now</name> <operator>+</operator> <literal type="string">", but was "</literal> <operator>+</operator> <call><name><name>id</name><operator>.</operator><name>getIssueDate</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>id</name><operator>.</operator><name>getIssueDate</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Issue date did not fall within the expected lower bound. Expected greater than "</literal> <operator>+</operator> <name>then</name> <operator>+</operator> <literal type="string">", but was "</literal> <operator>+</operator> <call><name><name>id</name><operator>.</operator><name>getIssueDate</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>id</name><operator>.</operator><name>getIssueDate</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>then</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Expiration is the token lifetime plus the issue date</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>getIssueDate</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>id</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Verify instance ID</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>instanceId</name></expr></argument>, <argument><expr><call><name><name>id</name><operator>.</operator><name>getInstanceId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The returned id should be the same as the reconstructed id</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testVerifyPassword</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// start of the test</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>then</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// 1 minute</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add a current key</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>then</name></expr></argument>, <argument><expr><name>then</name> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"user@EXAMPLE.COM"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>token</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>id</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>retrievePassword</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// The passwords line up against multiple calls with the same ID</comment>
    <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>retrievePassword</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make a second token for the same user</comment>
    <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>pair2</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>token2</name> <init>= <expr><call><name><name>pair2</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Reconstitute the token identifier (will happen when clients are involved)</comment>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>id2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>id2</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>token2</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get the password</comment>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password2</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>retrievePassword</name></name><argument_list>(<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// It should be different than the password for the first user.</comment>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><literal type="string">"Different tokens for the same user shouldn't have the same password"</literal></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>password2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>InvalidToken</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testExpiredPasswordsThrowError</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// start of the test</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>then</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// 500ms lifetime</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add a current key</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>then</name></expr></argument>, <argument><expr><name>then</name> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"user@EXAMPLE.COM"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>token</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add a small buffer to make sure we move past the expiration of 0 for the token.</comment>
    <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Reconstitute the token identifier (will happen when clients are involved)</comment>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>id</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>retrievePassword</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>InvalidToken</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testTokenIssuedInFuture</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// start of the test</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>then</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add a current key</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>then</name></expr></argument>, <argument><expr><name>then</name> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"user@EXAMPLE.COM"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>token</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Reconstitute the token identifier (will happen when clients are involved)</comment>
    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>id</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Increase the value of issueDate</comment>
    <expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>setIssueDate</name></name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>retrievePassword</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>InvalidToken</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRolledMasterKey</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// start of the test</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>then</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add a current key</comment>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>authKey1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>then</name></expr></argument>, <argument><expr><name>then</name> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>authKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"user@EXAMPLE.COM"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>token</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AuthenticationTokenIdentifier</name></type> <name>id</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>readFields</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getIdentifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>now</name> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Should succeed -- the SecretManager still has authKey1</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>retrievePassword</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Remove authKey1</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>removeKey</name></name><argument_list>(<argument><expr><call><name><name>authKey1</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Should fail -- authKey1 (presumably) expired, cannot authenticate</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>retrievePassword</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>timeout</name> <operator>=</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testMasterKeyExpiration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>keyDistributor</name> <init>= <expr><call><name>createMock</name><argument_list>(<argument><expr><name><name>ZooAuthenticationKeyDistributor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// start of the test</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>then</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// 10s lifetime</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1000l</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Make 2 keys, and add only one. The second has double the expiration of the first</comment>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>authKey1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>then</name></expr></argument>, <argument><expr><name>then</name> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>authKey2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>then</name>
        <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><name>then</name> <operator>+</operator> <name>tokenLifetime</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>authKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyDistributor</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>authKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>keyDistributor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure expiration doesn't trigger anything yet</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>removeExpiredKeys</name></name><argument_list>(<argument><expr><name>keyDistributor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add the second key, still no expiration</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>authKey2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>removeExpiredKeys</name></name><argument_list>(<argument><expr><name>keyDistributor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>authKey2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getCurrentKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Wait for the expiration</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>now</name> <operator>-</operator> <operator>(</operator><name>then</name> <operator>+</operator> <name>tokenLifetime</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// Expire the first</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>removeExpiredKeys</name></name><argument_list>(<argument><expr><name>keyDistributor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ensure the second still exists</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>authKey2</name></expr></argument>, <argument><expr><call><name><name>Iterables</name><operator>.</operator><name>getOnlyElement</name></name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>authKey2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getCurrentKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>keyDistributor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRestrictExpirationDate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// start of the test</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>then</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// 1 hr</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add a current key</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>then</name></expr></argument>, <argument><expr><name>then</name> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 1 minute</comment>
    <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>setTokenLifetime</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>principal</name> <init>= <expr><literal type="string">"user@EXAMPLE.COM"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><name>principal</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>actualExpiration</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getExpirationDate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>approximateLifetime</name> <init>= <expr><name>actualExpiration</name> <operator>-</operator> <name>now</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"actualExpiration={}, approximateLifetime={}"</literal></expr></argument>, <argument><expr><name>actualExpiration</name></expr></argument>, <argument><expr><name>approximateLifetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// We don't know the exact lifetime, but we know that it can be no more than what was requested</comment>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Expected lifetime to be on thet order of the token lifetime, but was "</literal> <operator>+</operator> <name>approximateLifetime</name></expr></argument>,
        <argument><expr><name>approximateLifetime</name> <operator>&lt;=</operator> <call><name><name>cfg</name><operator>.</operator><name>getTokenLifetime</name></name><argument_list>(<argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AccumuloException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testInvalidRequestedExpirationDate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// start of the test</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>then</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// 1 hr</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add a current key</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>then</name></expr></argument>, <argument><expr><name>then</name> <operator>+</operator> <name>tokenLifetime</name></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// A longer timeout than the secret key has</comment>
    <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>setTokenLifetime</name></name><argument_list>(<argument><expr><name>tokenLifetime</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Should throw an exception</comment>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><literal type="string">"user@EXAMPLE.COM"</literal></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyDistributorTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyDistributorTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..ed40a109e</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyDistributorTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">270</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>anyObject</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>aryEq</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>createMock</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>eq</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expectLastCall</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>verify</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyGenerator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooUtil</name><operator>.</operator><name>NodeExistsPolicy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReaderWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name><operator>.</operator><name>AuthFailedException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>data</name><operator>.</operator><name>ACL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>data</name><operator>.</operator><name>Id</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>data</name><operator>.</operator><name>Stat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>ZooAuthenticationKeyDistributorTest</name> <block>{

  <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_HMAC_ALGORITHM</name> <init>= <expr><literal type="string">"HmacSHA1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>KEY_LENGTH</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>KeyGenerator</name></type> <name>keyGen</name></decl>;</decl_stmt>

  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setupKeyGenerator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
    <expr_stmt><expr><name>keyGen</name> <operator>=</operator> <call><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>DEFAULT_HMAC_ALGORITHM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keyGen</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <name>ZooReaderWriter</name></type> <name>zrw</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>baseNode</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>ZDELEGATION_TOKEN_KEYS</name></name></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setupMocks</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>zrw</name> <operator>=</operator> <call><name>createMock</name><argument_list>(<argument><expr><name><name>ZooReaderWriter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>AuthFailedException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testInitialize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Attempt to create the directory and fail</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>putPrivatePersistentData</name></name><argument_list>(<argument><expr><call><name>eq</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aryEq</name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>eq</name><argument_list>(<argument><expr><name><name>NodeExistsPolicy</name><operator>.</operator><name>FAIL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andThrow</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthFailedException</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testInitializeCreatesParentNode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Attempt to create the directory and fail</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>putPrivatePersistentData</name></name><argument_list>(<argument><expr><call><name>eq</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator> <call><name>anyObject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>eq</name><argument_list>(<argument><expr><name><name>NodeExistsPolicy</name><operator>.</operator><name>FAIL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>IllegalStateException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testInitializedNotCalledAdvertise</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>advertise</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">5l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>IllegalStateException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testInitializedNotCalledCurrentKeys</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>getCurrentKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>IllegalStateException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testInitializedNotCalledRemove</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">5l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>IllegalStateException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testMissingAcl</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Attempt to create the directory and fail</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>getACL</name></name><argument_list>(<argument><expr><call><name>eq</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>Stat</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>ACL</name><operator>&gt;</operator> <call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name><argument_list>(<argument><expr><name>expected</name> <operator>=</operator> <name><name>IllegalStateException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBadAcl</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Attempt to create the directory and fail</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>getACL</name></name><argument_list>(<argument><expr><call><name>eq</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>Stat</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(
        <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ACL</name><argument_list>(<argument><expr><call><name><name>ZooUtil</name><operator>.</operator><name>PRIVATE</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPerms</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Id</name><argument_list>(<argument><expr><literal type="string">"digest"</literal></expr></argument>, <argument><expr><literal type="string">"somethingweird"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testAdvertiseKey</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serialized</name> <init>= <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Attempt to create the directory and fail</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>getACL</name></name><argument_list>(<argument><expr><call><name>eq</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>Stat</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(
        <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ACL</name><argument_list>(<argument><expr><call><name><name>ZooUtil</name><operator>.</operator><name>PRIVATE</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPerms</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Id</name><argument_list>(<argument><expr><literal type="string">"digest"</literal></expr></argument>, <argument><expr><literal type="string">"accumulo:DEFAULT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>putPrivatePersistentData</name></name><argument_list>(<argument><expr><call><name>eq</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aryEq</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>eq</name><argument_list>(<argument><expr><name><name>NodeExistsPolicy</name><operator>.</operator><name>FAIL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>advertise</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testAlreadyAdvertisedKey</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Attempt to create the directory and fail</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>getACL</name></name><argument_list>(<argument><expr><call><name>eq</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>Stat</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(
        <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ACL</name><argument_list>(<argument><expr><call><name><name>ZooUtil</name><operator>.</operator><name>PRIVATE</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPerms</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Id</name><argument_list>(<argument><expr><literal type="string">"digest"</literal></expr></argument>, <argument><expr><literal type="string">"accumulo:DEFAULT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>advertise</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRemoveKey</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Attempt to create the directory and fail</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>getACL</name></name><argument_list>(<argument><expr><call><name>eq</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>Stat</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(
        <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ACL</name><argument_list>(<argument><expr><call><name><name>ZooUtil</name><operator>.</operator><name>PRIVATE</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPerms</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Id</name><argument_list>(<argument><expr><literal type="string">"digest"</literal></expr></argument>, <argument><expr><literal type="string">"accumulo:DEFAULT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>zrw</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expectLastCall</name><argument_list>()</argument_list></call><operator>.</operator><call><name>once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRemoveMissingKey</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>key</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Attempt to create the directory and fail</comment>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>getACL</name></name><argument_list>(<argument><expr><call><name>eq</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>Stat</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(
        <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ACL</name><argument_list>(<argument><expr><call><name><name>ZooUtil</name><operator>.</operator><name>PRIVATE</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPerms</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Id</name><argument_list>(<argument><expr><literal type="string">"digest"</literal></expr></argument>, <argument><expr><literal type="string">"accumulo:DEFAULT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testGetCurrentKeys</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ZooAuthenticationKeyDistributor</name></type> <name>distributor</name> <init>= <expr><operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AuthenticationKey</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>serializedKeys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>serializedKeys</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>getACL</name></name><argument_list>(<argument><expr><call><name>eq</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyObject</name><argument_list>(<argument><expr><name><name>Stat</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(
        <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ACL</name><argument_list>(<argument><expr><call><name><name>ZooUtil</name><operator>.</operator><name>PRIVATE</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPerms</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Id</name><argument_list>(<argument><expr><literal type="string">"digest"</literal></expr></argument>, <argument><expr><literal type="string">"accumulo:DEFAULT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zrw</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name><name>serializedKeys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>distributor</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name><name>distributor</name><operator>.</operator><name>getCurrentKeys</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyWatcherTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyWatcherTest</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..a60c9bc38</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>base</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>server</name><operator>/</operator><name>security</name><operator>/</operator><name>delegation</name><operator>/</operator><name><name>ZooAuthenticationKeyWatcherTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">323</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>createMock</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>expect</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>replay</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>reset</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>easymock</name><operator>.</operator><name>EasyMock</name><operator>.</operator><name>verify</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyGenerator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>fate</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>WatchedEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>Watcher</name><operator>.</operator><name>Event</name><operator>.</operator><name>EventType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>Watcher</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeeperState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>BeforeClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>ZooAuthenticationKeyWatcherTest</name> <block>{

  <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_HMAC_ALGORITHM</name> <init>= <expr><literal type="string">"HmacSHA1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>KEY_LENGTH</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>KeyGenerator</name></type> <name>keyGen</name></decl>;</decl_stmt>

  <function><annotation>@<name>BeforeClass</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setupKeyGenerator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// From org.apache.hadoop.security.token.SecretManager</comment>
    <expr_stmt><expr><name>keyGen</name> <operator>=</operator> <call><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>DEFAULT_HMAC_ALGORITHM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keyGen</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <name>ZooReader</name></type> <name>zk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Instance</name></type> <name>instance</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>instanceId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>baseNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>tokenLifetime</name> <init>= <expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 7days</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>ZooAuthenticationKeyWatcher</name></type> <name>keyWatcher</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setupMocks</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>zk</name> <operator>=</operator> <call><name>createMock</name><argument_list>(<argument><expr><name><name>ZooReader</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>instance</name> <operator>=</operator> <call><name>createMock</name><argument_list>(<argument><expr><name><name>Instance</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>instanceId</name> <operator>=</operator> <call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>baseNode</name> <operator>=</operator> <literal type="string">"/accumulo/"</literal> <operator>+</operator> <name>instanceId</name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZDELEGATION_TOKEN_KEYS</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getInstanceID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>instanceId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>secretManager</name> <operator>=</operator> <operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>keyWatcher</name> <operator>=</operator> <operator>new</operator> <call><name>ZooAuthenticationKeyWatcher</name><argument_list>(<argument><expr><name>secretManager</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBaseNodeCreated</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>WatchedEvent</name></type> <name>event</name> <init>= <expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>NodeCreated</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name><operator>&gt;</operator> <call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBaseNodeCreatedWithChildren</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>WatchedEvent</name></type> <name>event</name> <init>= <expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>NodeCreated</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10000l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>key2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>key1</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20000l</literal></expr></argument>,
        <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serializedKey1</name> <init>= <expr><call><name>serialize</name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>serializedKey2</name> <init>= <expr><call><name>serialize</name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/1"</literal></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>serializedKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/2"</literal></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>serializedKey2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBaseNodeChildrenChanged</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>WatchedEvent</name></type> <name>event</name> <init>= <expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>NodeChildrenChanged</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10000l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>key2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>key1</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20000l</literal></expr></argument>,
        <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serializedKey1</name> <init>= <expr><call><name>serialize</name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>serializedKey2</name> <init>= <expr><call><name>serialize</name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/1"</literal></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>serializedKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/2"</literal></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>serializedKey2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBaseNodeDeleted</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>WatchedEvent</name></type> <name>event</name> <init>= <expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>NodeDeleted</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10000l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>key2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>key1</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20000l</literal></expr></argument>,
        <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>isCurrentKeySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBaseNodeDataChanged</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>WatchedEvent</name></type> <name>event</name> <init>= <expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>NodeDataChanged</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>isCurrentKeySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testChildChanged</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>WatchedEvent</name></type> <name>event</name> <init>= <expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>NodeCreated</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10000l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>key2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>key1</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20000l</literal></expr></argument>,
        <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serializedKey2</name> <init>= <expr><call><name>serialize</name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>serializedKey2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getCurrentKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testChildDeleted</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>WatchedEvent</name></type> <name>event</name> <init>= <expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>NodeDeleted</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10000l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>key2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>key1</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20000l</literal></expr></argument>,
        <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getCurrentKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testChildChildrenChanged</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>WatchedEvent</name></type> <name>event</name> <init>= <expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>NodeChildrenChanged</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10000l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>key2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>key1</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20000l</literal></expr></argument>,
        <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>secretManager</name><operator>.</operator><name>addKey</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Does nothing</comment>
    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>zk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getCurrentKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testInitialUpdateNoNode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zk</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>updateAuthKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zk</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getCurrentKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testInitialUpdateWithKeys</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10000l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>key2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>key1</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20000l</literal></expr></argument>,
        <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>key1</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name>serialize</name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>key2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name>serialize</name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zk</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>updateAuthKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zk</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testDisconnectAndReconnect</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>lostZooKeeperBase</name><argument_list>(<argument><expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>None</name></name></expr></argument>, <argument><expr><name><name>KeeperState</name><operator>.</operator><name>Disconnected</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>None</name></name></expr></argument>, <argument><expr><name><name>KeeperState</name><operator>.</operator><name>SyncConnected</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testExpiredAndReconnect</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>lostZooKeeperBase</name><argument_list>(<argument><expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>None</name></name></expr></argument>, <argument><expr><name><name>KeeperState</name><operator>.</operator><name>Expired</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>WatchedEvent</name><argument_list>(<argument><expr><name><name>EventType</name><operator>.</operator><name>None</name></name></expr></argument>, <argument><expr><name><name>KeeperState</name><operator>.</operator><name>SyncConnected</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>lostZooKeeperBase</name><parameter_list>(<parameter><decl><type><name>WatchedEvent</name></type> <name>disconnectEvent</name></decl></parameter>, <parameter><decl><type><name>WatchedEvent</name></type> <name>reconnectEvent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuthenticationKey</name></type> <name>key1</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>, <argument><expr><literal type="number">10000l</literal></expr></argument>, <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>key2</name> <init>= <expr><operator>new</operator> <call><name>AuthenticationKey</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>key1</name><operator>.</operator><name>getExpirationDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20000l</literal></expr></argument>,
        <argument><expr><call><name><name>keyGen</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>key1</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name>serialize</name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>key2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name>serialize</name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zk</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize and then get disconnected</comment>
    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>updateAuthKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>disconnectEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zk</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// We should have no auth keys when we're disconnected</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Secret manager should be empty after a disconnect"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"Current key should be null"</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getCurrentKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>reset</name><argument_list>(<argument><expr><name>zk</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getChildren</name></name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>key1</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name>serialize</name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expect</name><argument_list>(<argument><expr><call><name><name>zk</name><operator>.</operator><name>getData</name></name><argument_list>(<argument><expr><name>baseNode</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <call><name><name>key2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyWatcher</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andReturn</name><argument_list>(<argument><expr><call><name>serialize</name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>replay</name><argument_list>(<argument><expr><name>zk</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Reconnect again, get all the keys</comment>
    <expr_stmt><expr><call><name><name>keyWatcher</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>reconnectEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zk</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Verify we have both keys</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name><name>secretManager</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>getKeyId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>AuthenticationKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollector</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollector</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>da0b07caa</name><operator>..</operator><literal type="number">35005d810</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollector</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollector</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">723</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">723</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>SimpleGarbageCollector</name> extends <name>AccumuloServerContext</name> implements <name>Ifa</name>
     <call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Starting garbage collector listening on "</literal> <operator>+</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <try>try <block>{<block_content>
       <return>return <expr><call><name><name>TServerUtils</name><operator>.</operator><name>startTServer</name></name><argument_list>(<argument><expr><call><name>getConfiguration</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>getThriftServerType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>processor</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"GC Monitor Service"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
          <argument><expr><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCount</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>GENERAL_SIMPLETIMER_THREADPOOL_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>maxMessageSize</name></expr></argument>, <argument><expr><call><name>getServerSslParams</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getServerSaslParams</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>address</name></expr>;</return>
          <expr_stmt><expr><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCount</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>GENERAL_SIMPLETIMER_THREADPOOL_SIZE</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">1000</literal></expr><operator>,</operator> <expr><name>maxMessageSize</name></expr><operator>,</operator> <expr><call><name>getServerSslParams</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>getSaslParams</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr></expr_stmt>)</block_content>.address</block><empty_stmt>;</empty_stmt></try>
     </block_content>}</block></if></if_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>fatal</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>GarbageCollectWriteAheadLogsTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>GarbageCollectWriteAheadLogsTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">1d7f90fb0</literal><operator>..</operator><literal type="number">5224f28c6</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>GarbageCollectWriteAheadLogsTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>GarbageCollectWriteAheadLogsTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">117</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">117</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> <name>class</name> <name>GarbageCollectWriteAheadLogsTest</name> <block>{
         <return>return <expr><call><name><name>systemConfig</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Property</name><operator>)</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></expr></expr_stmt>
     </block_content>}</block></catch>)</block_content>.anyTimes(</block></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>siteConfig</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andAnswer</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>IAnswer</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>answer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>getCurrentArguments</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>systemConfig</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><operator>(</operator><name>Property</name><operator>)</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>siteConfig</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andAnswer</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>IAnswer</name><argument_list type="generic">&lt;<argument><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
       <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollectorTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollectorTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">6fcdd37e3</literal><operator>..</operator><name>d30f00b2c</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollectorTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name><name>SimpleGarbageCollectorTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">84</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> class <name>SimpleGarbageCollectorTest</name> <block>{
         <return>return <expr><call><name><name>systemConfig</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Property</name><operator>)</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></expr></expr_stmt>
     }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>siteConfig</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andAnswer</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>IAnswer</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>answer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>getCurrentArguments</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>systemConfig</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><operator>(</operator><name>Property</name><operator>)</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>siteConfig</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andAnswer</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>IAnswer</name><argument_list type="generic">&lt;<argument><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
       <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>CloseWriteAheadLogReferencesTest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>CloseWriteAheadLogReferencesTest</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">120692a4a</literal><operator>..</operator><name>ba688903b</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>CloseWriteAheadLogReferencesTest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>gc</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>gc</name><operator>/</operator><name>replication</name><operator>/</operator><name><name>CloseWriteAheadLogReferencesTest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">107</literal></expr><operator>,</operator><expr><literal type="number">13</literal> @@ <specifier>public</specifier> class <name>CloseWriteAheadLogReferencesTest</name> <block>{
         <return>return <expr><call><name><name>systemConf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Property</name><operator>)</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
       }</block></expr></expr_stmt>
     }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>siteConfig</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>EasyMock</name><operator>.</operator><name>anyObject</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andAnswer</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>IAnswer</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>Boolean</name></type> <name>answer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name> <init>= <expr><call><name><name>EasyMock</name><operator>.</operator><name>getCurrentArguments</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>systemConf</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><operator>(</operator><name>Property</name><operator>)</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyTimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name><name>EasyMock</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><call><name><name>siteConfig</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>andAnswer</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>IAnswer</name><argument_list type="generic">&lt;<argument><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
       <annotation>@<name>Override</name></annotation>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>Master</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>Master</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>be476de2e</name><operator>..</operator><name>cc6a6ceda</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>Master</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>Master</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">124</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>rpc</name><operator>.</operator><name>ThriftServerType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>AuditedSecurityOperation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>SecurityOperation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>SecurityUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name><operator>.</operator><name>AuthenticationTokenKeyManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name><operator>.</operator><name>AuthenticationTokenSecretManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name><operator>.</operator><name>ZooAuthenticationKeyDistributor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>handler</name><operator>.</operator><name>ZKPermHandler</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>tables</name><operator>.</operator><name>TableManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>tables</name><operator>.</operator><name>TableObserver</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">188</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">191</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> class <name>Master</name> extends <name>AccumuloServerContext</name> implements <name><name>LiveTServerSet</name><operator>.</operator><name>List</name></name>
   <specifier>private</specifier> <name>WorkDriver</name> <name>replicationWorkAssigner</name></expr>;</expr_stmt>
   <decl_stmt><decl><type><name>RecoveryManager</name></type> <name>recoveryManager</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
  <comment type="line">// Delegation Token classes</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>delegationTokensAvailable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>ZooAuthenticationKeyDistributor</name></type> <name>keyDistributor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>AuthenticationTokenKeyManager</name></type> <name>authenticationTokenKeyManager</name></decl>;</decl_stmt>

   <decl_stmt><decl><type><name>ZooLock</name></type> <name>masterLock</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><specifier>private</specifier> <name>TServer</name></type> <name>clientService</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>TabletBalancer</name></type> <name>tabletBalancer</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">560</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">568</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> class <name>Master</name> extends <name>AccumuloServerContext</name> implements <name><name>LiveTServerSet</name><operator>.</operator><name>List</name></name>
       <throw>throw <argument_list>new <argument><expr><call><name>ThriftTableOperationException</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>TableOperation</name><operator>.</operator><name>MERGE</name></name></expr></argument>, <argument><expr><name><name>TableOperationExceptionType</name><operator>.</operator><name>OFFLINE</name></name></expr></argument>, <argument><expr><literal type="string">"table is not online"</literal></expr></argument>)</argument_list></call></expr></argument></argument_list></throw></expr>;</expr_stmt>
   }</block></class>
 
  <specifier>private</specifier> <call><name>Master</name><argument_list>(<argument><expr><name>ServerConfigurationFactory</name> <name>config</name></expr></argument>, <argument><expr><name>VolumeManager</name> <name>fs</name></expr></argument>, <argument><expr><name>String</name> <name>hostname</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name> <block>{
  <expr><specifier>public</specifier> <call><name>Master</name><argument_list>(<argument><expr><name>ServerConfigurationFactory</name> <name>config</name></expr></argument>, <argument><expr><name>VolumeManager</name> <name>fs</name></expr></argument>, <argument><expr><name>String</name> <name>hostname</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws> <throws>throws <argument><expr><name>IOException</name> <block>{
     <expr><call><name>super</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr></argument>;</argument_list></call></expr></expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>serverConfig</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fs</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">587</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">595</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@ <specifier>public</specifier> <name>class</name> <name>Master</name> extends <name>AccumuloServerContext</name> implements <name><name>LiveTServerSet</name><operator>.</operator><name>List</name></name></expr></expr_stmt>
     </block_content>}</block></block></if></if_stmt>
 
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>security</name></name> <operator>=</operator> <call><name><name>AuditedSecurityOperation</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create the secret manager (can generate and verify delegation tokens)</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>tokenLifetime</name> <init>= <expr><call><name><name>aconf</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>GENERAL_DELEGATION_TOKEN_LIFETIME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setSecretManager</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><call><name>getInstance</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>authenticationTokenKeyManager</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>keyDistributor</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// SASL is enabled, create the key distributor (ZooKeeper) and manager (generates/rolls secret keys)</comment>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"SASL is enabled, creating delegation token key manager and distributor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>tokenUpdateInterval</name> <init>= <expr><call><name><name>aconf</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>GENERAL_DELEGATION_TOKEN_UPDATE_INTERVAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>keyDistributor</name> <operator>=</operator> <operator>new</operator> <call><name>ZooAuthenticationKeyDistributor</name><argument_list>(<argument><expr><call><name><name>ZooReaderWriter</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ZooUtil</name><operator>.</operator><name>getRoot</name></name><argument_list>(<argument><expr><call><name>getInstance</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZDELEGATION_TOKEN_KEYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>authenticationTokenKeyManager</name> <operator>=</operator> <operator>new</operator> <call><name>AuthenticationTokenKeyManager</name><argument_list>(<argument><expr><call><name>getSecretManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyDistributor</name></expr></argument>, <argument><expr><name>tokenUpdateInterval</name></expr></argument>, <argument><expr><name>tokenLifetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>delegationTokensAvailable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"SASL is not enabled, delegation tokens will not be available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>delegationTokensAvailable</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></catch>
 
   <function><type><specifier>public</specifier> <name>TServerConnection</name></type> <name>getConnection</name><parameter_list>(<parameter><decl><type><name>TServerInstance</name></type> <name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1096</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1122</literal></expr><operator>,</operator><expr><literal type="number">25</literal> @@ <specifier>public</specifier> <name>class</name> <name>Master</name> extends <name>AccumuloServerContext</name> implements <name><name>LiveTServerSet</name><operator>.</operator><name>List</name></name>
 
     <call><name><name>ZooKeeperInitialization</name><operator>.</operator><name>ensureZooKeeperInitialized</name></name><argument_list>(<argument><expr><name>zReaderWriter</name></expr></argument>, <argument><expr><name>zroot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <comment type="line">// Make sure that we have a secret key (either a new one or an old one from ZK) before we start</comment>
    <comment type="line">// the master client service.</comment>
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>authenticationTokenKeyManager</name> <operator>&amp;&amp;</operator> <literal type="null">null</literal> <operator>!=</operator> <name>keyDistributor</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Starting delegation-token key manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>keyDistributor</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>authenticationTokenKeyManager</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>logged</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>!</operator><call><name><name>authenticationTokenKeyManager</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Print out a status message when we start waiting for the key manager to get initialized</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>logged</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Waiting for AuthenticationTokenKeyManager to be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>logged</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>UtilWaitThread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <comment type="line">// And log when we are initialized</comment>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"AuthenticationTokenSecretManager is initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

     <expr_stmt><expr><name>clientHandler</name> <operator>=</operator> <operator>new</operator> <call><name>MasterClientServiceHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>Iface</name></type> <name>rpcProxy</name> <init>= <expr><call><name><name>RpcWrapper</name><operator>.</operator><name>service</name></name><argument_list>(<argument><expr><name>clientHandler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><specifier>final</specifier> <name><name>Processor</name><argument_list type="generic">&lt;<argument><name>Iface</name></argument>&gt;</argument_list></name></type> <name>processor</name></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1162</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">1207</literal></expr><operator>,</operator><expr><literal type="number">9</literal> @@ <specifier>public</specifier> <name>class</name> <name>Master</name> extends <name>AccumuloServerContext</name> implements <name><name>LiveTServerSet</name><operator>.</operator><name>List</name></name>
     <call><name><name>replicationWorkAssigner</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name>remaining</name><argument_list>(<argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>replicationWorkDriver</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name>remaining</name><argument_list>(<argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>replAddress</name><operator>.</operator><name>server</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Signal that we want it to stop, and wait for it to do so.</comment>
    <expr_stmt><expr><call><name><name>authenticationTokenKeyManager</name><operator>.</operator><name>gracefulStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>authenticationTokenKeyManager</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name>remaining</name><argument_list>(<argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <comment type="line">// quit, even if the tablet servers somehow jam up and the watchers</comment>
     <comment type="line">// don't stop</comment>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">1476</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">1524</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>Master</name> extends <name>AccumuloServerContext</name> implements <name><name>LiveTServerSet</name><operator>.</operator><name>List</name></name>
     <name><name>result</name><operator>.</operator><name>deadTabletServers</name></name> <operator>=</operator> <call><name><name>obit</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><name>result</name></expr>;</return>
   </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Can delegation tokens be generated for users
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>delegationTokensAvailable</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>delegationTokensAvailable</name></expr>;</return>
  </block_content>}</block></function>
 </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>MasterClientServiceHandler</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>MasterClientServiceHandler</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">72cba26a7</literal><operator>..</operator><literal type="number">3809a2981</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>MasterClientServiceHandler</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>master</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>master</name><operator>/</operator><name><name>MasterClientServiceHandler</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>IsolatedScanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>RowIterator</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>DelegationTokenConfigSerializer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>Tables</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>SecurityErrorCode</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>impl</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TableOperation</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">55</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">57</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>RootTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>schema</name><operator>.</operator><name>MetadataSchema</name><operator>.</operator><name>TabletsSection</name><operator>.</operator><name>LogColumnFamily</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TCredentials</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TDelegationTokenConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>trace</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TInfo</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>UtilWaitThread</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">69</literal></expr><operator>,</operator><expr><literal type="number">12</literal> <operator>+</operator><literal type="number">74</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>LiveTServerSet</name><operator>.</operator><name>TServerConnection</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>balancer</name><operator>.</operator><name>DefaultLoadBalancer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>balancer</name><operator>.</operator><name>TabletBalancer</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>master</name><operator>.</operator><name>state</name><operator>.</operator><name>TServerInstance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name><operator>.</operator><name>AuthenticationTokenSecretManager</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>NamespacePropUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>SystemPropUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>TablePropUtil</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>TabletIterator</name><operator>.</operator><name>TabletDeletedException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>ZooReaderWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>security</name><operator>.</operator><name>token</name><operator>.</operator><name>Token</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>thrift</name><operator>.</operator><name>TException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>zookeeper</name><operator>.</operator><name>KeeperException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">445</literal></expr><operator>,</operator><expr><literal type="number">4</literal> <operator>+</operator><literal type="number">452</literal></expr><operator>,</operator><expr><literal type="number">27</literal> @@ <name>class</name> <name>MasterClientServiceHandler</name> extends <name>FateServiceHandler</name> implements <name>MasterCli</name></expr></expr_stmt>
 
     <return>return <expr><name>servers</name></expr>;</return>
   </block_content>}</block></if></if_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>TDelegationToken</name></type> <name>getDelegationToken</name><parameter_list>(<parameter><decl><type><name>TInfo</name></type> <name>tinfo</name></decl></parameter>, <parameter><decl><type><name>TCredentials</name></type> <name>credentials</name></decl></parameter>, <parameter><decl><type><name>TDelegationTokenConfig</name></type> <name>tConfig</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ThriftSecurityException</name></expr></argument>, <argument><expr><name>TException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>master</name><operator>.</operator><name>security</name><operator>.</operator><name>canObtainDelegationToken</name></name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>ThriftSecurityException</name><argument_list>(<argument><expr><call><name><name>credentials</name><operator>.</operator><name>getPrincipal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SecurityErrorCode</name><operator>.</operator><name>PERMISSION_DENIED</name></name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Make sure we're actually generating the secrets to make delegation tokens</comment>
    <comment type="line">// Round-about way to verify that SASL is also enabled.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>master</name><operator>.</operator><name>delegationTokensAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>TException</name><argument_list>(<argument><expr><literal type="string">"Delegation tokens are not available for use"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DelegationTokenConfig</name></type> <name>config</name> <init>= <expr><call><name><name>DelegationTokenConfigSerializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>tConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>AuthenticationTokenSecretManager</name></type> <name>secretManager</name> <init>= <expr><call><name><name>master</name><operator>.</operator><name>getSecretManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Token</name><argument_list type="generic">&lt;<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></argument>,<argument><name>AuthenticationTokenIdentifier</name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>secretManager</name><operator>.</operator><name>generateToken</name></name><argument_list>(<argument><expr><name><name>credentials</name><operator>.</operator><name>principal</name></name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>TDelegationToken</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPassword</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getThriftIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>TException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
 </block_content>}</block></constructor>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a5675dcaf</name><operator>..</operator><literal type="number">662ee313b</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>server</name><operator>/</operator><name>tserver</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>tserver</name><operator>/</operator><name><name>TabletServer</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">180</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">180</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>rpc</name><operator>.</operator><name>ThriftServerType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>AuditedSecurityOperation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>SecurityOperation</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>SecurityUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name><operator>.</operator><name>AuthenticationTokenSecretManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>security</name><operator>.</operator><name>delegation</name><operator>.</operator><name>ZooAuthenticationKeyWatcher</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>FileSystemMonitor</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>Halt</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>server</name><operator>.</operator><name>util</name><operator>.</operator><name>MasterMetadataUtil</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">312</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">314</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
   <expr><specifier>private</specifier> <name>final</name> <name>AtomicLong</name> <name>totalMinorCompactions</name> <operator>=</operator> <operator>new</operator> <call><name>AtomicLong</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
   <expr><specifier>private</specifier> <name>final</name> <name>ServerConfigurationFactory</name> <name>confFactory</name></expr>;
 
  <expr><specifier>private</specifier> <name>final</name> <name>ZooAuthenticationKeyWatcher</name> <name>authKeyWatcher</name></expr>;

   <expr><specifier>public</specifier> <call><name>TabletServer</name><argument_list>(<argument><expr><name>ServerConfigurationFactory</name> <name>confFactory</name></expr></argument>, <argument><expr><name>VolumeManager</name> <name>fs</name></expr></argument>)</argument_list></call> <block>{
     <expr><call><name>super</name><argument_list>(<argument><expr><name>confFactory</name></expr></argument>)</argument_list></call></expr>;
     <expr><name><name>this</name><operator>.</operator><name>confFactory</name></name> <operator>=</operator> <name>confFactory</name></expr>;
@@ <expr><operator>-</operator><literal type="number">356</literal></expr>,<expr><literal type="number">6</literal> <operator>+</operator><literal type="number">360</literal></expr>,<expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
         <expr><call><name><name>TabletLocator</name><operator>.</operator><name>clearLocators</name></name><argument_list>()</argument_list></call></expr>;
       }</block></expr>
     }</block></expr>, <expr><call><name>jitter</name><argument_list>(<argument><expr><name>TIME_BETWEEN_LOCATOR_CACHE_CLEARS</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>jitter</name><argument_list>(<argument><expr><name>TIME_BETWEEN_LOCATOR_CACHE_CLEARS</name></expr></argument>)</argument_list></call></expr>)</block></expr>;</expr_stmt>

    <comment type="line">// Create the secret manager</comment>
    <expr_stmt><expr><call><name>setSecretManager</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthenticationTokenSecretManager</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><call><name><name>aconf</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>GENERAL_DELEGATION_TOKEN_LIFETIME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>aconf</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Property</name><operator>.</operator><name>INSTANCE_RPC_SASL_ENABLED</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"SASL is enabled, creating ZooKeeper watcher for AuthenticationKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// Watcher to notice new AuthenticationKeys which enable delegation tokens</comment>
      <expr_stmt><expr><name>authKeyWatcher</name> <operator>=</operator> <operator>new</operator> <call><name>ZooAuthenticationKeyWatcher</name><argument_list>(<argument><expr><call><name>getSecretManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ZooReaderWriter</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ZooUtil</name><operator>.</operator><name>getRoot</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call>
          <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>ZDELEGATION_TOKEN_KEYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>authKeyWatcher</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
 
   <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>jitter</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">2421</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">2436</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>TabletServer</name> extends <name>AccumuloServerContext</name> implements <name>Runnable</name> <block>{
       <expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error registering with JMX"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;
     }</block></expr></expr_stmt>
 
    <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>authKeyWatcher</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Seeding ZooKeeper watcher for authentication keys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>authKeyWatcher</name><operator>.</operator><name>updateAuthKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>KeeperException</name></type> | <type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// TODO Does there need to be a better check? What are the error conditions that we'd fall out here? AUTH_FAILURE?</comment>
        <comment type="line">// If we get the error, do we just put it on a timer and retry the exists(String, Watcher) call?</comment>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to perform initial check for authentication tokens in ZooKeeper. Delegation token authentication will be unavailable."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>

     <try>try <block>{<block_content>
       <expr_stmt><expr><name>clientAddress</name> <operator>=</operator> <call><name>startTabletClientService</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousBatchWalker</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousBatchWalker</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>a2687bb1f</name><operator>..</operator><name>c8a114370</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousBatchWalker</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousBatchWalker</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">26</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>BatchScannerOpts</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ClientOnDefaultTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ScannerOpts</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchScanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">52</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">53</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>ContinuousBatchWalker</name> <block>{
     <expr><name>Opts</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>Opts</name><argument_list>()</argument_list></call></expr>;
     <expr><name>ScannerOpts</name> <name>scanOpts</name> <operator>=</operator> <operator>new</operator> <call><name>ScannerOpts</name><argument_list>()</argument_list></call></expr>;
     <expr><name>BatchScannerOpts</name> <name>bsOpts</name> <operator>=</operator> <operator>new</operator> <call><name>BatchScannerOpts</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>opts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousBatchWalker</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>scanOpts</name></expr></argument>, <argument><expr><name>bsOpts</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>ClientOnDefaultTable</name> <name>clientOpts</name> <operator>=</operator> <operator>new</operator> <call><name>ClientOnDefaultTable</name><argument_list>(<argument><expr><literal type="string">"ci"</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>clientOpts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousBatchWalker</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>scanOpts</name></expr></argument>, <argument><expr><name>bsOpts</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;
 
     <expr><name>Random</name> <name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr>;
     <expr><name>Authorizations</name> <name>auths</name> <operator>=</operator> <call><name><name>opts</name><operator>.</operator><name>randomAuths</name><operator>.</operator><name>getAuths</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>Connector</name> <name>conn</name> <operator>=</operator> <call><name><name>opts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>Scanner</name> <name>scanner</name> <operator>=</operator> <call><name><name>ContinuousUtil</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>auths</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>Connector</name> <name>conn</name> <operator>=</operator> <call><name><name>clientOpts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>Scanner</name> <name>scanner</name> <operator>=</operator> <call><name><name>ContinuousUtil</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name><name>clientOpts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>auths</name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>scanner</name><operator>.</operator><name>setBatchSize</name></name><argument_list>(<argument><expr><name><name>scanOpts</name><operator>.</operator><name>scanBatchSize</name></name></expr></argument>)</argument_list></call></expr>;
 
    <expr><name>BatchScanner</name> <name>bs</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>createBatchScanner</name></name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>auths</name></expr></argument>, <argument><expr><name><name>bsOpts</name><operator>.</operator><name>scanThreads</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><name>BatchScanner</name> <name>bs</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>createBatchScanner</name></name><argument_list>(<argument><expr><call><name><name>clientOpts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>auths</name></expr></argument>, <argument><expr><name><name>bsOpts</name><operator>.</operator><name>scanThreads</name></name></expr></argument>)</argument_list></call></expr>;
     <expr><call><name><name>bs</name><operator>.</operator><name>setTimeout</name></name><argument_list>(<argument><expr><name><name>bsOpts</name><operator>.</operator><name>scanTimeout</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;
 
     <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousIngest</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousIngest</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>dba6ac959</name><operator>..</operator><name>ddc36aaeb</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousIngest</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousIngest</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">19</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>continuous</name></name>;</package>
 <import>import static <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">29</literal></expr><operator>,</operator><expr><literal type="number">9</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">8</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>CRC32</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>Checksum</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>BatchWriterOpts</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>MapReduceClientOnDefaultTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ClientOnDefaultTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>MutationsRejectedException</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">75</literal> <operator>+</operator><literal type="number">44</literal></expr><operator>,</operator><expr><literal type="number">14</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileSystem</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>Path</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>FileAppender</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Level</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>PatternLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>beust</name><operator>.</operator><name>jcommander</name><operator>.</operator><name>IStringConverter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>beust</name><operator>.</operator><name>jcommander</name><operator>.</operator><name>Parameter</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>ContinuousIngest</name> <block>{
 
  <class><specifier>static</specifier> <specifier>public</specifier> class <name>BaseOpts</name> <super_list><extends>extends <super><name>MapReduceClientOnDefaultTable</name></super></extends></super_list> <block>{
    <class><specifier>public</specifier> class <name>DebugConverter</name> <super_list><implements>implements <super><name><name>IStringConverter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>String</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>debugLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CORE_PACKAGE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>setLevel</name></name><argument_list>(<argument><expr><name><name>Level</name><operator>.</operator><name>TRACE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>setAdditivity</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>addAppender</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileAppender</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PatternLayout</name><argument_list>(<argument><expr><literal type="string">"%d{dd HH:mm:ss,SSS} [%-8c{2}] %-5p: %m%n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>debugLog</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></try></block_content></block></function></block></class></block></class></block></class></block_content></block></while>}</block></expr></expr_stmt> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <return>return <expr><name>debugLog</name></expr>;</return>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--min"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"lowest random row number to use"</literal></expr></argument>)</argument_list></annotation>
    <type><name>long</name></type> <name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--max"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"maximum random row number to use"</literal></expr></argument>)</argument_list></annotation>
    <type><name>long</name></type> <name>max</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--debugLog"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"file to write debugging output"</literal></expr></argument>, <argument><expr><name>converter</name> <operator>=</operator> <name><name>DebugConverter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <type><name>String</name></type> <name>debugLog</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BaseOpts</name><argument_list>()</argument_list></call> <block>{
      <expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"ci"</literal></expr></argument>)</argument_list></call></expr>;
    }</block></expr></expr_stmt>
  </block_content>}</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>ShortConverter</name> <super_list><implements>implements <super><name><name>IStringConverter</name><argument_list type="generic">&lt;<argument><name>Short</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Short</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>Short</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>static</specifier> <specifier>public</specifier> class <name>Opts</name> <super_list><extends>extends <super><name>BaseOpts</name></super></extends></super_list> <block>{
    <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--num"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"the number of entries to ingest"</literal></expr></argument>)</argument_list></annotation>
    <type><name>long</name></type> <name>num</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--maxColF"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"maximum column family value to use"</literal></expr></argument>, <argument><expr><name>converter</name> <operator>=</operator> <name><name>ShortConverter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <type><name>short</name></type> <name>maxColF</name> <init>= <expr><name><name>Short</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--maxColQ"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"maximum column qualifier value to use"</literal></expr></argument>, <argument><expr><name>converter</name> <operator>=</operator> <name><name>ShortConverter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
    <type><name>short</name></type> <name>maxColQ</name> <init>= <expr><name><name>Short</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--addCheckSum"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"turn on checksums"</literal></expr></argument>)</argument_list></annotation>
    <type><name>boolean</name></type> <name>checksum</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--visibilities"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"read the visibilities to ingest with from a file"</literal></expr></argument>)</argument_list></annotation>
    <type><name>String</name></type> <name>visFile</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  }</block></class>

   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>EMPTY_BYTES</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
 
   <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnVisibility</name></argument>&gt;</argument_list></name></type> <name>visibilities</name></decl>;</decl_stmt>
 
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>initVisibilities</name><parameter_list>(<parameter><decl><type><name>Opts</name></type> <name>opts</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>initVisibilities</name><parameter_list>(<parameter><decl><type><name>ContinuousOpts</name></type> <name>opts</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
     <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>visFile</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>visibilities</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnVisibility</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return;</return>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">140</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">77</literal></expr><operator>,</operator><expr><literal type="number">23</literal> @@ <specifier>public</specifier> <name>class</name> <name>ContinuousIngest</name> <block>{
 
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>main</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
 
    <expr><name>Opts</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>Opts</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <name>ContinuousOpts</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>ContinuousOpts</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
     <decl_stmt><decl><type><name>BatchWriterOpts</name></type> <name>bwOpts</name> <init>= <expr><operator>new</operator> <call><name>BatchWriterOpts</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousIngest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bwOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ClientOnDefaultTable</name></type> <name>clientOpts</name> <init>= <expr><operator>new</operator> <call><name>ClientOnDefaultTable</name><argument_list>(<argument><expr><literal type="string">"ci"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clientOpts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousIngest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bwOpts</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <expr_stmt><expr><call><name>initVisibilities</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>min</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>opts</name><operator>.</operator><name>max</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>opts</name><operator>.</operator><name>max</name></name> <operator>&lt;=</operator> <name><name>opts</name><operator>.</operator><name>min</name></name></expr>)</condition> <block>{<block_content>
       <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"bad min and max"</literal></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>clientOpts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>TableNotFoundException</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Consult the README and create the table before starting ingest."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>conn</name><operator>.</operator><name>tableOperations</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>(<argument><expr><call><name><name>clientOpts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>TableNotFoundException</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>clientOpts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Consult the README and create the table before starting ingest."</literal></expr></argument>)</argument_list></call></expr>;</throw>
     </block_content>}</block></if></if_stmt>
 
    <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bwOpts</name><operator>.</operator><name>getBatchWriterConfig</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BatchWriter</name></type> <name>bw</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>createBatchWriter</name></name><argument_list>(<argument><expr><call><name><name>clientOpts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bwOpts</name><operator>.</operator><name>getBatchWriterConfig</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><name>bw</name> <operator>=</operator> <call><name><name>Trace</name><operator>.</operator><name>wrapAll</name></name><argument_list>(<argument><expr><name>bw</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CountSampler</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>Random</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">233</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">171</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ContinuousIngest</name> <block>{
     }</block>
 
     <call><name><name>bw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>stopTracing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>clientOpts</name><operator>.</operator><name>stopTracing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>
 
   <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>BatchWriter</name></type> <name>bw</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>flushInterval</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lastFlushTime</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>MutationsRejectedException</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousMoru</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousMoru</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">4b5c3e722</literal><operator>..</operator><literal type="number">48154a648</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousMoru</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousMoru</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">24</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>BatchWriterOpts</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>MapReduceClientOnDefaultTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloInputFormat</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>mapreduce</name><operator>.</operator><name>AccumuloOutputFormat</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">33</literal></expr><operator>,</operator><expr><literal type="number">8</literal> <operator>+</operator><literal type="number">34</literal></expr><operator>,</operator><expr><literal type="number">6</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>ColumnVisibility</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>util</name><operator>.</operator><name>CachedConfiguration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>continuous</name><operator>.</operator><name>ContinuousIngest</name><operator>.</operator><name>BaseOpts</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>continuous</name><operator>.</operator><name>ContinuousIngest</name><operator>.</operator><name>ShortConverter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configured</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">116</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">115</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ContinuousMoru</name> extends <name>Configured</name> implements <name>Tool</name> <block>{
     }</block></expr></expr_stmt>
   </block_content>}</block></function>
 
  <class><specifier>static</specifier> class <name>Opts</name> <super_list><extends>extends <super><name>BaseOpts</name></super></extends></super_list> <block>{
  <class><specifier>static</specifier> class <name>Opts</name> <super_list><extends>extends <super><name>ContinuousOpts</name></super></extends></super_list> <block>{
     <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--maxColF"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"maximum column family value to use"</literal></expr></argument>, <argument><expr><name>converter</name> <operator>=</operator> <name><name>ShortConverter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
     <type><name>short</name></type> <name>maxColF</name> <init>= <expr><name><name>Short</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
 
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">131</literal></expr><operator>,</operator><expr><literal type="number">17</literal> <operator>+</operator><literal type="number">130</literal></expr><operator>,</operator><expr><literal type="number">18</literal> @@ <specifier>public</specifier> <name>class</name> <name>ContinuousMoru</name> extends <name>Configured</name> implements <name>Tool</name> <block>{
   <expr><specifier>public</specifier> <name>int</name> <call><name>run</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument>, <argument><expr><name>AccumuloSecurityException</name> <block>{
     <expr><name>Opts</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>Opts</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
     <name>BatchWriterOpts</name> <name>bwOpts</name> <operator>=</operator> <operator>new</operator> <call><name>BatchWriterOpts</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousMoru</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bwOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MapReduceClientOnDefaultTable</name></type> <name>clientOpts</name> <init>= <expr><operator>new</operator> <call><name>MapReduceClientOnDefaultTable</name><argument_list>(<argument><expr><literal type="string">"ci"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clientOpts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousMoru</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bwOpts</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>Job</name></type> <name>job</name> <init>= <expr><call><name><name>Job</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getConf</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"_"</literal> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>setJarByClass</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <constructor_decl><name><name>job</name><operator>.</operator><name>setInputFormatClass</name></name><parameter_list>(<parameter><decl><type><name><name>AccumuloInputFormat</name><operator>.</operator><name>class</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
    <constructor_decl><name><name>opts</name><operator>.</operator><name>setAccumuloConfigs</name></name><parameter_list>(<parameter><decl><type><name>job</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
    <constructor_decl><name><name>clientOpts</name><operator>.</operator><name>setAccumuloConfigs</name></name><parameter_list>(<parameter><decl><type><name>job</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
 
     <comment type="line">// set up ranges</comment>
     <try>try <block>{<block_content>
      <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tableOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>splitRangeByTablets</name><argument_list>(<argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>maxMaps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name><name>clientOpts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tableOperations</name><argument_list>()</argument_list></call><operator>.</operator><call><name>splitRangeByTablets</name><argument_list>(<argument><expr><call><name><name>clientOpts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>maxMaps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setRanges</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>AccumuloInputFormat</name><operator>.</operator><name>setAutoAdjustRanges</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">163</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ContinuousMoru</name> extends <name>Configured</name> implements <name>Tool</name> <block>{
     <expr><call><name><name>conf</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>CI_ID</name></expr></argument>, <argument><expr><call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
 
     <call><name><name>job</name><operator>.</operator><name>waitForCompletion</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>stopTracing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>clientOpts</name><operator>.</operator><name>stopTracing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><ternary><condition><expr><call><name><name>job</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
   </block_content>}</block></catch></try>
 
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousOpts</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousOpts</name><operator>.</operator><name>java</name></name>
<operator>new</operator> <name>file</name> <name>mode</name> <literal type="number">100644</literal>
<name>index</name> <literal type="number">000000000..48a77e7fa</literal>
<operator>--</operator> <operator>/</operator><name>dev</name><operator>/</operator><literal type="null">null</literal>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousOpts</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">0</literal></expr><operator>,</operator><expr><literal type="number">0</literal> <operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">80</literal> @@</expr></expr_stmt>
<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>continuous</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>FileAppender</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Level</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>log4j</name><operator>.</operator><name>PatternLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>beust</name><operator>.</operator><name>jcommander</name><operator>.</operator><name>IStringConverter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>beust</name><operator>.</operator><name>jcommander</name><operator>.</operator><name>Parameter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Common CLI arguments for the Continuous Ingest suite.
 */</comment>
<class><specifier>public</specifier> class <name>ContinuousOpts</name> <block>{

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>DebugConverter</name> <super_list><implements>implements <super><name><name>IStringConverter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>debugLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>CORE_PACKAGE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>setLevel</name></name><argument_list>(<argument><expr><name><name>Level</name><operator>.</operator><name>TRACE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>setAdditivity</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>addAppender</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileAppender</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PatternLayout</name><argument_list>(<argument><expr><literal type="string">"%d{dd HH:mm:ss,SSS} [%-8c{2}] %-5p: %m%n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>debugLog</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
      <return>return <expr><name>debugLog</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>ShortConverter</name> <super_list><implements>implements <super><name><name>IStringConverter</name><argument_list type="generic">&lt;<argument><name>Short</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Short</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>Short</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--min"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"lowest random row number to use"</literal></expr></argument>)</argument_list></annotation>
  <type><name>long</name></type> <name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--max"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"maximum random row number to use"</literal></expr></argument>)</argument_list></annotation>
  <type><name>long</name></type> <name>max</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--debugLog"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"file to write debugging output"</literal></expr></argument>, <argument><expr><name>converter</name> <operator>=</operator> <name><name>DebugConverter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><name>String</name></type> <name>debugLog</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--num"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"the number of entries to ingest"</literal></expr></argument>)</argument_list></annotation>
  <type><name>long</name></type> <name>num</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--maxColF"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"maximum column family value to use"</literal></expr></argument>, <argument><expr><name>converter</name> <operator>=</operator> <name><name>ShortConverter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><name>short</name></type> <name>maxColF</name> <init>= <expr><name><name>Short</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--maxColQ"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"maximum column qualifier value to use"</literal></expr></argument>, <argument><expr><name>converter</name> <operator>=</operator> <name><name>ShortConverter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
  <type><name>short</name></type> <name>maxColQ</name> <init>= <expr><name><name>Short</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--addCheckSum"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"turn on checksums"</literal></expr></argument>)</argument_list></annotation>
  <type><name>boolean</name></type> <name>checksum</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--visibilities"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"read the visibilities to ingest with from a file"</literal></expr></argument>)</argument_list></annotation>
  <type><name>String</name></type> <name>visFile</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
}</block></class>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousQuery</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousQuery</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">73048f6ab</literal><operator>..</operator><literal type="number">7f89a9431</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousQuery</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousQuery</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">20</literal> <operator>+</operator><literal type="number">21</literal></expr><operator>,</operator><expr><literal type="number">21</literal> @@</expr></expr_stmt> <import>import static <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ClientOnDefaultTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ClientOpts</name><operator>.</operator><name>TimeConverter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ScannerOpts</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>continuous</name><operator>.</operator><name>ContinuousIngest</name><operator>.</operator><name>BaseOpts</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>io</name><operator>.</operator><name>Text</name></name>;</import>
 
 <import>import <name><name>com</name><operator>.</operator><name>beust</name><operator>.</operator><name>jcommander</name><operator>.</operator><name>Parameter</name></name>;</import>
 
 <class><specifier>public</specifier> class <name>ContinuousQuery</name> <block>{
 
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Opts</name> <super_list><extends>extends <super><name>BaseOpts</name></super></extends></super_list> <block>{
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Opts</name> <super_list><extends>extends <super><name>ContinuousOpts</name></super></extends></super_list> <block>{
     <decl_stmt><decl><annotation>@<name>Parameter</name><argument_list>(<argument><expr><name>names</name> <operator>=</operator> <literal type="string">"--sleep"</literal></expr></argument>, <argument><expr><name>description</name> <operator>=</operator> <literal type="string">"the time to wait between queries"</literal></expr></argument>, <argument><expr><name>converter</name> <operator>=</operator> <name><name>TimeConverter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
     <type><name>long</name></type> <name>sleepTime</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
   }</block></class>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">42</literal></expr><operator>,</operator><expr><literal type="number">10</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">11</literal> @@ <specifier>public</specifier> <name>class</name> <name>ContinuousQuery</name> <block>{
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>main</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>Opts</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>Opts</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
     <name>ScannerOpts</name> <name>scanOpts</name> <operator>=</operator> <operator>new</operator> <call><name>ScannerOpts</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousQuery</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>scanOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ClientOnDefaultTable</name></type> <name>clientOpts</name> <init>= <expr><operator>new</operator> <call><name>ClientOnDefaultTable</name><argument_list>(<argument><expr><literal type="string">"ci"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clientOpts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousQuery</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>scanOpts</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>ContinuousUtil</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>auths</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>clientOpts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>ContinuousUtil</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name><name>clientOpts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>clientOpts</name><operator>.</operator><name>auths</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <constructor_decl><name><name>scanner</name><operator>.</operator><name>setBatchSize</name></name><parameter_list>(<parameter><decl><type><name><name>scanOpts</name><operator>.</operator><name>scanBatchSize</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
 
     <decl_stmt><decl><type><name>Random</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousScanner</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousScanner</name><operator>.</operator><name>java</name></name>
<name>index</name> <name>f68377af6</name><operator>..</operator><name>a77de3d88</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousScanner</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousScanner</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">22</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ClientOnDefaultTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ScannerOpts</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">45</literal></expr><operator>,</operator><expr><literal type="number">15</literal> <operator>+</operator><literal type="number">46</literal></expr><operator>,</operator><expr><literal type="number">16</literal> @@ <specifier>public</specifier> <name>class</name> <name>ContinuousScanner</name> <block>{
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>main</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>Opts</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>Opts</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
     <name>ScannerOpts</name> <name>scanOpts</name> <operator>=</operator> <operator>new</operator> <call><name>ScannerOpts</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>opts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousScanner</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>scanOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ClientOnDefaultTable</name></type> <name>clientOpts</name> <init>= <expr><operator>new</operator> <call><name>ClientOnDefaultTable</name><argument_list>(<argument><expr><literal type="string">"ci"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clientOpts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousScanner</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>scanOpts</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <decl_stmt><decl><type><name>Random</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>long</name></type> <name>distance</name> <init>= <expr><literal type="number">1000000000000l</literal></expr></init></decl>;</decl_stmt>
 
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>clientOpts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Authorizations</name></type> <name>auths</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>randomAuths</name><operator>.</operator><name>getAuths</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>ContinuousUtil</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>auths</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>ContinuousUtil</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name><name>clientOpts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>auths</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <constructor_decl><name><name>scanner</name><operator>.</operator><name>setBatchSize</name></name><parameter_list>(<parameter><decl><type><name><name>scanOpts</name><operator>.</operator><name>scanBatchSize</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
 
     <decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">.05</literal></expr></argument>, <argument><expr><literal type="number">.05</literal> <operator>/</operator> <operator>(</operator><name><name>opts</name><operator>.</operator><name>numToScan</name></name> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousWalk</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousWalk</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">60f8ec284</literal><operator>..</operator><name>f2e4805e5</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousWalk</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>main</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>continuous</name><operator>/</operator><name><name>ContinuousWalk</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">28</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>CRC32</name></name>;</import>
 
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>cli</name><operator>.</operator><name>ClientOnDefaultTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">105</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">106</literal></expr><operator>,</operator><expr><literal type="number">17</literal> @@ <specifier>public</specifier> <name>class</name> <name>ContinuousWalk</name> <block>{
 
   <expr><specifier>public</specifier> <specifier>static</specifier> <name>void</name> <call><name>main</name><argument_list>(<argument><expr><name><name>String</name><index>[]</index></name> <name>args</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><name>Opts</name> <name>opts</name> <operator>=</operator> <operator>new</operator> <call><name>Opts</name><argument_list>()</argument_list></call></expr></block></expr></argument></throws></expr>;
    <call><name><name>opts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousWalk</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ClientOnDefaultTable</name></type> <name>clientOpts</name> <init>= <expr><operator>new</operator> <call><name>ClientOnDefaultTable</name><argument_list>(<argument><expr><literal type="string">"ci"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clientOpts</name><operator>.</operator><name>parseArgs</name></name><argument_list>(<argument><expr><call><name><name>ContinuousWalk</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>opts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Connector</name></type> <name>conn</name> <init>= <expr><call><name><name>clientOpts</name><operator>.</operator><name>getConnector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name>Random</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Value</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
     <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>ContinuousUtil</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name><name>opts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>opts</name><operator>.</operator><name>randomAuths</name><operator>.</operator><name>getAuths</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Scanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>ContinuousUtil</name><operator>.</operator><name>createScanner</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name><name>clientOpts</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>opts</name><operator>.</operator><name>randomAuths</name><operator>.</operator><name>getAuths</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>row</name> <init>= <expr><call><name>findAStartRow</name><argument_list>(<argument><expr><name><name>opts</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>max</name></name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
       <while>while <condition>(<expr><name>row</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>harness</name><operator>/</operator><name><name>MiniClusterHarness</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>harness</name><operator>/</operator><name><name>MiniClusterHarness</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">06b43038f</literal><operator>..</operator><name>e53d686a0</name> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>harness</name><operator>/</operator><name><name>MiniClusterHarness</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>harness</name><operator>/</operator><name><name>MiniClusterHarness</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">70</literal></expr><operator>,</operator><expr><literal type="number">12</literal> @@ <specifier>public</specifier> <name>class</name> <name>MiniClusterHarness</name> <block>{
   }</block>
 
   <specifier>public</specifier> <name>MiniAccumuloClusterImpl</name> <call><name>create</name><argument_list>(<argument><expr><name>AccumuloIT</name> <name>testBase</name></expr></argument>, <argument><expr><name>AuthenticationToken</name> <name>token</name></expr></argument>, <argument><expr><name>TestingKdc</name> <name>kdc</name></expr></argument>)</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{</block></expr></argument></throws></expr></expr_stmt>
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><call><name><name>testBase</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>testBase</name><operator>.</operator><name>testName</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>kdc</name></expr></argument>)</argument_list></call></expr>;</return>
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>testBase</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>kdc</name></expr></argument>, <argument><expr><name><name>MiniClusterConfigurationCallback</name><operator>.</operator><name>NO_CALLBACK</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></while>

  <function><type><specifier>public</specifier> <name>MiniAccumuloClusterImpl</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>AccumuloIT</name></type> <name>testBase</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>TestingKdc</name></type> <name>kdc</name></decl></parameter>, <parameter><decl><type><name>MiniClusterConfigurationCallback</name></type> <name>configCallback</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>create</name><argument_list>(<argument><expr><call><name><name>testBase</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>testBase</name><operator>.</operator><name>testName</name><operator>.</operator><name>getMethodName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>configCallback</name></expr></argument>, <argument><expr><name>kdc</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><type><specifier>public</specifier> <name>MiniAccumuloClusterImpl</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>AccumuloClusterIT</name></type> <name>testBase</name></decl></parameter>, <parameter><decl><type><name>AuthenticationToken</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>TestingKdc</name></type> <name>kdc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">929654869..3ffa40efd</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name><name>ShellServerIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">1168</literal></expr><operator>,</operator><expr><literal type="number">7</literal> <operator>+</operator><literal type="number">1168</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@ <specifier>public</specifier> <name>class</name> <name>ShellServerIT</name> extends <name>SharedMiniClusterIT</name> <block>{
   @<expr><name>Test</name>
   <specifier>public</specifier> <name>void</name> <call><name>systempermission</name><argument_list>()</argument_list></call> <throws>throws <argument><expr><name>Exception</name> <block>{
     <expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"systempermissions"</literal></expr></argument>)</argument_list></call></expr></block></expr></argument></throws></expr>;
    <call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><literal type="string">"tablepermissions"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>output</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
<expr_stmt><expr><name>diff</name> <operator>--</operator><name>git</name> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>KerberosIT</name><operator>.</operator><name>java</name></name> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>KerberosIT</name><operator>.</operator><name>java</name></name>
<name>index</name> <literal type="number">3d48657e5</literal><operator>..</operator><literal type="number">75b119977</literal> <literal type="number">100644</literal>
<operator>--</operator> <name>a</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>KerberosIT</name><operator>.</operator><name>java</name></name>
<operator>++</operator> <name>b</name><operator>/</operator><name>test</name><operator>/</operator><name>src</name><operator>/</operator><name>test</name><operator>/</operator><name>java</name><operator>/</operator><name>org</name><operator>/</operator><name>apache</name><operator>/</operator><name>accumulo</name><operator>/</operator><name>test</name><operator>/</operator><name>functional</name><operator>/</operator><name><name>KerberosIT</name><operator>.</operator><name>java</name></name>
@@ <operator>-</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">16</literal> <operator>+</operator><literal type="number">18</literal></expr><operator>,</operator><expr><literal type="number">24</literal> @@</expr></expr_stmt> <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>test</name><operator>.</operator><name>functional</name></name>;</package>
 
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertNotNull</name></name>;</import>
 <import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>fail</name></name>;</import>
 
 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>UndeclaredThrowableException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>PrivilegedExceptionAction</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
 
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>AccumuloSecurityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchScanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriter</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>BatchWriterConfig</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Connector</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">35</literal></expr><operator>,</operator><expr><literal type="number">22</literal> <operator>+</operator><literal type="number">43</literal></expr><operator>,</operator><expr><literal type="number">29</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>Scanner</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableExistsException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>TableNotFoundException</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>CompactionConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>admin</name><operator>.</operator><name>DelegationTokenConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>DelegationToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>KerberosToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>client</name><operator>.</operator><name>security</name><operator>.</operator><name>tokens</name><operator>.</operator><name>PasswordToken</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>conf</name><operator>.</operator><name>Property</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Key</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Mutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Range</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>data</name><operator>.</operator><name>Value</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataTable</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>metadata</name><operator>.</operator><name>RootTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>AuthenticationTokenIdentifier</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>Authorizations</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>ColumnVisibility</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>SystemPermission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>core</name><operator>.</operator><name>security</name><operator>.</operator><name>TablePermission</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>AccumuloIT</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>MiniClusterConfigurationCallback</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>MiniClusterHarness</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>harness</name><operator>.</operator><name>TestingKdc</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>minicluster</name><operator>.</operator><name>ServerType</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>minicluster</name><operator>.</operator><name>impl</name><operator>.</operator><name>MiniAccumuloClusterImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>accumulo</name><operator>.</operator><name>minicluster</name><operator>.</operator><name>impl</name><operator>.</operator><name>MiniAccumuloConfigImpl</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>conf</name><operator>.</operator><name>Configuration</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>fs</name><operator>.</operator><name>CommonConfigurationKeysPublic</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>hadoop</name><operator>.</operator><name>minikdc</name><operator>.</operator><name>MiniKdc</name></name>;</import>
<annotation>@</annotation>@ <expr_stmt><expr><operator>-</operator><literal type="number">63</literal></expr><operator>,</operator><expr><literal type="number">6</literal> <operator>+</operator><literal type="number">78</literal></expr><operator>,</operator><expr><literal type="number">7</literal> @@</expr></expr_stmt> <import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
 <import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>
 
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
 <import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import></block_content></block></while></block></class></block></class></block></class></block></class></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block></class></block_content></block></function></block_content></block></function>
 
 <comment type="block" format="javadoc">/**
@@ -104,7 +120,17 @@ public class KerberosIT extends AccumuloIT {
   @Before
   public void startMac() throws Exception {
     MiniClusterHarness harness = new MiniClusterHarness();
    mac = harness.create(this, new PasswordToken("unused"), kdc);
    mac = harness.create(this, new PasswordToken("unused"), kdc, new MiniClusterConfigurationCallback() {

      @Override
      public void configureMiniCluster(MiniAccumuloConfigImpl cfg, Configuration coreSite) {
        Map&lt;String,String&gt; site = cfg.getSiteConfig();
        site.put(Property.INSTANCE_ZK_TIMEOUT.getKey(), "10s");
        cfg.setSiteConfig(site);
      }

    });

     mac.getConfig().setNumTservers(1);
     mac.start();
     // Enabled kerberos auth
@@ -133,7 +159,7 @@ public class KerberosIT extends AccumuloIT {
     }
 
     // and the ability to modify the root and metadata tables
    for (String table : Arrays.asList(RootTable.NAME, MetadataTable.NAME)){
    for (String table : Arrays.asList(RootTable.NAME, MetadataTable.NAME)) {
       assertTrue(conn.securityOperations().hasTablePermission(conn.whoami(), table, TablePermission.ALTER_TABLE));
     }
   }
@@ -304,6 +330,226 @@ public class KerberosIT extends AccumuloIT {
     assertFalse("Had more results from iterator", iter.hasNext());
   }
 
  @Test
  public void testDelegationToken() throws Exception {
    final String tableName = getUniqueNames(1)[0];

    // Login as the "root" user
    UserGroupInformation root = UserGroupInformation.loginUserFromKeytabAndReturnUGI(kdc.getClientPrincipal(), kdc.getClientKeytab().getAbsolutePath());
    log.info("Logged in as {}", kdc.getClientPrincipal());

    final int numRows = 100, numColumns = 10;

    // As the "root" user, open up the connection and get a delegation token
    final DelegationToken delegationToken = root.doAs(new PrivilegedExceptionAction&lt;DelegationToken&gt;() {
      @Override
      public DelegationToken run() throws Exception {
        Connector conn = mac.getConnector(kdc.getClientPrincipal(), new KerberosToken());
        log.info("Created connector as {}", kdc.getClientPrincipal());
        assertEquals(kdc.getClientPrincipal(), conn.whoami());

        conn.tableOperations().create(tableName);
        BatchWriter bw = conn.createBatchWriter(tableName, new BatchWriterConfig());
        for (int r = 0; r &lt; numRows; r++) {
          Mutation m = new Mutation(Integer.toString(r));
          for (int c = 0; c &lt; numColumns; c++) {
            String col = Integer.toString(c);
            m.put(col, col, col);
          }
          bw.addMutation(m);
        }
        bw.close();

        return conn.securityOperations().getDelegationToken(new DelegationTokenConfig());
      }
    });

    // The above login with keytab doesn't have a way to logout, so make a fake user that won't have krb credentials
    UserGroupInformation userWithoutPrivs = UserGroupInformation.createUserForTesting("fake_user", new String[0]);
    int recordsSeen = userWithoutPrivs.doAs(new PrivilegedExceptionAction&lt;Integer&gt;() {
      @Override
      public Integer run() throws Exception {
        Connector conn = mac.getConnector(kdc.getClientPrincipal(), delegationToken);

        BatchScanner bs = conn.createBatchScanner(tableName, Authorizations.EMPTY, 2);
        bs.setRanges(Collections.singleton(new Range()));
        int recordsSeen = Iterables.size(bs);
        bs.close();
        return recordsSeen;
      }
    });

    assertEquals(numRows * numColumns, recordsSeen);
  }

  @Test
  public void testDelegationTokenAsDifferentUser() throws Exception {
    // Login as the "root" user
    UserGroupInformation.loginUserFromKeytab(kdc.getClientPrincipal(), kdc.getClientKeytab().getAbsolutePath());
    log.info("Logged in as {}", kdc.getClientPrincipal());

    // As the "root" user, open up the connection and get a delegation token
    Connector conn = mac.getConnector(kdc.getClientPrincipal(), new KerberosToken());
    log.info("Created connector as {}", kdc.getClientPrincipal());
    assertEquals(kdc.getClientPrincipal(), conn.whoami());
    final DelegationToken delegationToken = conn.securityOperations().getDelegationToken(new DelegationTokenConfig());

    // The above login with keytab doesn't have a way to logout, so make a fake user that won't have krb credentials
    UserGroupInformation userWithoutPrivs = UserGroupInformation.createUserForTesting("fake_user", new String[0]);
    try {
      // Use the delegation token to try to log in as a different user
      userWithoutPrivs.doAs(new PrivilegedExceptionAction&lt;Void&gt;() {
        @Override
        public Void run() throws Exception {
          mac.getConnector("some_other_user", delegationToken);
          return null;
        }
      });
      fail("Using a delegation token as a different user should throw an exception");
    } catch (UndeclaredThrowableException e) {
      Throwable cause = e.getCause();
      assertNotNull(cause);
      // We should get an AccumuloSecurityException from trying to use a delegation token for the wrong user
      assertTrue("Expected cause to be AccumuloSecurityException, but was " + cause.getClass(), cause instanceof AccumuloSecurityException);
    }
  }

  @Test(expected = AccumuloSecurityException.class)
  public void testGetDelegationTokenDenied() throws Exception {
    String newUser = testName.getMethodName();
    final File newUserKeytab = new File(kdc.getKeytabDir(), newUser + ".keytab");
    if (newUserKeytab.exists()) {
      newUserKeytab.delete();
    }

    // Create a new user
    kdc.createPrincipal(newUserKeytab, newUser);

    newUser = kdc.qualifyUser(newUser);

    // Login as a normal user
    UserGroupInformation.loginUserFromKeytab(newUser, newUserKeytab.getAbsolutePath());

    // As the "root" user, open up the connection and get a delegation token
    Connector conn = mac.getConnector(newUser, new KerberosToken());
    log.info("Created connector as {}", newUser);
    assertEquals(newUser, conn.whoami());

    conn.securityOperations().getDelegationToken(new DelegationTokenConfig());
  }

  @Test
  public void testRestartedMasterReusesSecretKey() throws Exception {
    // Login as the "root" user
    UserGroupInformation root = UserGroupInformation.loginUserFromKeytabAndReturnUGI(kdc.getClientPrincipal(), kdc.getClientKeytab().getAbsolutePath());
    log.info("Logged in as {}", kdc.getClientPrincipal());

    // As the "root" user, open up the connection and get a delegation token
    final DelegationToken delegationToken1 = root.doAs(new PrivilegedExceptionAction&lt;DelegationToken&gt;() {
      @Override
      public DelegationToken run() throws Exception {
        Connector conn = mac.getConnector(kdc.getClientPrincipal(), new KerberosToken());
        log.info("Created connector as {}", kdc.getClientPrincipal());
        assertEquals(kdc.getClientPrincipal(), conn.whoami());

        DelegationToken token = conn.securityOperations().getDelegationToken(new DelegationTokenConfig());

        assertTrue("Could not get tables with delegation token", mac.getConnector(kdc.getClientPrincipal(), token).tableOperations().list().size() &gt; 0);

        return token;
      }
    });

    log.info("Stopping master");
    mac.getClusterControl().stop(ServerType.MASTER);
    Thread.sleep(5000);
    log.info("Restarting master");
    mac.getClusterControl().start(ServerType.MASTER);

    // Make sure our original token is still good
    root.doAs(new PrivilegedExceptionAction&lt;Void&gt;() {
      @Override
      public Void run() throws Exception {
        Connector conn = mac.getConnector(kdc.getClientPrincipal(), delegationToken1);

        assertTrue("Could not get tables with delegation token", conn.tableOperations().list().size() &gt; 0);

        return null;
      }
    });

    // Get a new token, so we can compare the keyId on the second to the first
    final DelegationToken delegationToken2 = root.doAs(new PrivilegedExceptionAction&lt;DelegationToken&gt;() {
      @Override
      public DelegationToken run() throws Exception {
        Connector conn = mac.getConnector(kdc.getClientPrincipal(), new KerberosToken());
        log.info("Created connector as {}", kdc.getClientPrincipal());
        assertEquals(kdc.getClientPrincipal(), conn.whoami());

        DelegationToken token = conn.securityOperations().getDelegationToken(new DelegationTokenConfig());

        assertTrue("Could not get tables with delegation token", mac.getConnector(kdc.getClientPrincipal(), token).tableOperations().list().size() &gt; 0);

        return token;
      }
    });

    // A restarted master should reuse the same secret key after a restart if the secret key hasn't expired (1day by default)
    assertEquals(delegationToken1.getIdentifier().getKeyId(), delegationToken2.getIdentifier().getKeyId());
  }

  @Test(expected = AccumuloException.class)
  public void testDelegationTokenWithInvalidLifetime() throws Throwable {
    // Login as the "root" user
    UserGroupInformation root = UserGroupInformation.loginUserFromKeytabAndReturnUGI(kdc.getClientPrincipal(), kdc.getClientKeytab().getAbsolutePath());
    log.info("Logged in as {}", kdc.getClientPrincipal());

    // As the "root" user, open up the connection and get a delegation token
    try {
      root.doAs(new PrivilegedExceptionAction&lt;DelegationToken&gt;() {
        @Override
        public DelegationToken run() throws Exception {
          Connector conn = mac.getConnector(kdc.getClientPrincipal(), new KerberosToken());
          log.info("Created connector as {}", kdc.getClientPrincipal());
          assertEquals(kdc.getClientPrincipal(), conn.whoami());

          // Should fail
          return conn.securityOperations().getDelegationToken(new DelegationTokenConfig().setTokenLifetime(Long.MAX_VALUE, TimeUnit.MILLISECONDS));
        }
      });
    } catch (UndeclaredThrowableException e) {
      Throwable cause = e.getCause();
      if (null != cause) {
        throw cause;
      } else {
        throw e;
      }
    }
  }

  @Test
  public void testDelegationTokenWithReducedLifetime() throws Throwable {
    // Login as the "root" user
    UserGroupInformation root = UserGroupInformation.loginUserFromKeytabAndReturnUGI(kdc.getClientPrincipal(), kdc.getClientKeytab().getAbsolutePath());
    log.info("Logged in as {}", kdc.getClientPrincipal());

    // As the "root" user, open up the connection and get a delegation token
    final DelegationToken dt = root.doAs(new PrivilegedExceptionAction&lt;DelegationToken&gt;() {
      @Override
      public DelegationToken run() throws Exception {
        Connector conn = mac.getConnector(kdc.getClientPrincipal(), new KerberosToken());
        log.info("Created connector as {}", kdc.getClientPrincipal());
        assertEquals(kdc.getClientPrincipal(), conn.whoami());

        return conn.securityOperations().getDelegationToken(new DelegationTokenConfig().setTokenLifetime(5, TimeUnit.MINUTES));
      }
    });

    AuthenticationTokenIdentifier identifier = dt.getIdentifier();
    assertTrue("Expected identifier to expire in no more than 5 minutes: " + identifier,
        identifier.getExpirationDate() - identifier.getIssueDate() &lt;= (5 * 60 * 1000));
  }

   /**
    * Creates a table, adds a record to it, and then compacts the table. A simple way to make sure that the system user exists (since the master does an RPC to
    * the tserver which will create the system user if it doesn't already exist).
- 
2.19.1.windows.1

</comment></unit>
